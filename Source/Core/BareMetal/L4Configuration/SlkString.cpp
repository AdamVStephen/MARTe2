
// SlkString.cpp - generated by the SLK parser generator 

#include "SlkString.h"

static char * Nonterminal_name[] ={"0"

,"expression"
,"cdbFile"
,"expressions"
,"variables"
,"scalar"
,"vector"
,"matrix"
,"block"
,"token"
,"expressions_*"
,"scalar_*"
,"vector_*"
,"expressions_2_*"
};

static char * Terminal_name[] ={"0"

,"<"
,"STRING"
,">"
,"/"
,"("
,")"
,"NUMBER"
,"END_OF_SLK_INPUT"
};

static char * Action_name[] ={"0"

,"__End"
,"__GetNodeName"
,"__AddLeaf"
,"__GetTypeCast"
,"__CreateNode"
,"__BlockEnd"
,"__AddScalar"
,"__EndRow"
};

static char * Production_name[] ={"0"

,"expression --> cdbFile __End"
,"cdbFile --> expressions expressions_*"
,"expressions --> < __GetNodeName STRING > variables < / STRING > __AddLeaf"
,"expressions --> < __GetNodeName STRING > ( STRING __GetTypeCast ) variables < / STRING > __AddLeaf"
,"expressions --> < __CreateNode STRING > block < / STRING > __BlockEnd"
,"variables --> scalar"
,"variables --> vector"
,"variables --> matrix"
,"scalar --> __AddScalar token"
,"vector --> < > scalar scalar_* < / >"
,"matrix --> < > vector __EndRow vector_* < / >"
,"block --> expressions expressions_2_*"
,"token --> STRING"
,"token --> NUMBER"
,"expressions_* --> expressions expressions_*"
,"expressions_* -->"
,"scalar_* --> scalar scalar_*"
,"scalar_* -->"
,"vector_* --> vector __EndRow vector_*"
,"vector_* -->"
,"expressions_2_* --> expressions expressions_2_*"
,"expressions_2_* -->"
};

#define START_SYMBOL 9
#define START_ACTION 22
#define END_ACTION 30
#define GET_NONTERMINAL_NAME(symbol) (Nonterminal_name [symbol - 8])
#define GET_TERMINAL_NAME(symbol) (Terminal_name [symbol])
#define GET_ACTION_NAME(symbol) (Action_name [symbol-(START_ACTION-1)])
#define GET_PRODUCTION_NAME(number) (Production_name [number])

char *SlkGetSymbolName ( unsigned int   symbol )
{ if ( symbol >= START_ACTION  &&  symbol < END_ACTION ) {
      return ( GET_ACTION_NAME (symbol) );
  } else if ( symbol >= START_SYMBOL ) {
      return ( GET_NONTERMINAL_NAME (symbol) );
  } else if ( symbol > 0 ) {
      return ( GET_TERMINAL_NAME (symbol) );
  } else {
      return ( "not a symbol" );
  }
}

char *SlkGetProductionName ( unsigned int  production_number )
{
  return ( GET_PRODUCTION_NAME (production_number) );
}


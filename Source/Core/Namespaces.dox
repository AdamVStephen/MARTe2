/**
 * @namespace MARTe 
 * @brief Root namespace for MARTe
 * @details This namespace is the root for all the namespaces and classes of MARTe.
 */

 /**
 * @namespace MARTe::Atomic
 *
 * @brief A collector of functions that are executed atomically even on multiprocessor machines.
 *
 * @details The target architecture is the one of the machine where the code is being executed.
 * Most of the implementation is therefore delegated to the AtomicA.h implementation,
 * which will be specific for each type of supported architecture.
 *
 * These methods are particularly useful in the implementation of functionality that requires
 * protected basic operations between multiple asynchronous accesses like in a multi-thread system.
 *
 * These methods are also used to implement fast threading synchronization constructors
 *
 * @see FastPollingMutexSem
 */

 /**
 * @namespace MARTe::BasicConsoleMode 
 * @brief FlagsType determining the console operating modes.\n
 * @details These are usually set when the console is constructed.
 */

 /**
 * @namespace MARTe::Endianity
 * @brief Converts any basic type to (from) the target architecture, from (to)
 * the requested endianity.
 * @details The target architecture is the one of the machine where the code is being executed.
 * Most of the implementation is therefore delegated to the EndianityA.h implementation,
 * which will be specific for each type of supported architecture.
 * @details These methods are particularly useful in the implementation of functionality that requires
 * the exchange of data with external producers that might have a different endianity. Examples
 * are drivers and network interfaces.
 */

/**
 * @namespace MARTe::ErrorManagement
 * @brief Collection of functions and  types to manage error reporting.
 * @details These functions allows an error reporting mechanism. The user should only pass the code of the error
 * and a description but automatically the name of the file, the line number and the function
 * are stored in the ErrorInformation structure. The user can implement a routine that will be called
 * by the report error function to manage errors in specific ways.
 */
 
 /**
 * @namespace MARTe::FastMath
 * @brief Performs mathematical operations using fast processor instructions.
 * @details TODO TBD
 */

 /**
 * @namespace MARTe::HeapManager
 * @brief Implementation of functions for the heap memory management.
 * @details Using these functions is possible adding different HeapI
 * objects in a hidden static database and using their specific functions for the
 * desired heap management.
 */
 
 /**
 * @namespace MARTe::HighResolutionTimer
 * @brief This module implements useful functions for high resolution timing using the cpu clock.
 * @details These functions are used when a timeout implementation is required like for examples for semaphores.\n
 * Most of the implementation is delegated to HighResolutionTimerA.h which use very low level code (assembly)
 * for the Counter functions, while the Frequency and Period functions are delegated to HighResolutionTimerCalibratorOs.h
 * which returns the current cpu frequency.
 */
 */

 /**
 * @namespace MARTe::MemoryCheck
 * @brief Implementation of functions for the memory checking.
 * @details TODO TBD
 */
 */

 /**
 * @namespace MARTe::Processor
 * @brief General information about the processor executing the framework code.
 * @details This module enables the retrieval of runtime information about the
 * processor executing the framework code.
 * Based on this information framework users are allowed to take runtime decisions
 * against specific processor characteristics.
 */

 /**
 * @namespace MARTe::ReferenceContainerFilterMode
 * @brief Namespace to define the possible modes of search.
 * @details TODO TBD
 */

 /**
 * @namespace MARTe::Sleep
 *
 * @brief Sleep functions.
 *
 * @details This functions allows tasks to sleep for a desired time. There are functions which sleeps wasting cpu time using
 * HighResolutionTimer and functions which sleeps yielding cpu using system call functions.
 * These functions are generally used in multithreading applications for example to allows threads to wait on a
 * condition without use cpu.
 *
 * Most of the implementation is delegated to Sleep.h which provides system calls to allows sleep functions.
 */

 /**
 * @namespace MARTe::StringHelper
 * @brief Implementation of functions to manipulate strings.
 * @details These methods allows the most used and basic functions to manipulate char8 *strings and
 * are particularly useful in the implementation of higher levels string and stream implementations.
 */

 /**
 * @namespace MARTe::Threads
 * @brief Threads management module.
 * @details These module allows to create, manage and monitor the life-cycle of any framework thread/
 * The default stack size associated to a thread THREADS_DEFAULT_STACKSIZE is defined in GeneralDefinitions.h
 * for each different operating system.
 */
 
 /**
 * @namespace MARTe::ThreadsDatabase
 * @brief A database of ThreadInformation objects.
 * @details TODO TBD
 */
 

armv8_rpi3_bm.elf:     file format elf32-littlearm


Disassembly of section .init:

00008000 <_init>:
    8000:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8002:	bf00      	nop

00008004 <_start1>:
    8004:	e10f0000 	mrs	r0, CPSR
    8008:	e220001a 	eor	r0, r0, #26
    800c:	e310001f 	tst	r0, #31
    8010:	e3c0001f 	bic	r0, r0, #31
    8014:	e38000d3 	orr	r0, r0, #211	; 0xd3
    8018:	1a000004 	bne	8030 <_start1+0x2c>
    801c:	e3800c01 	orr	r0, r0, #256	; 0x100
    8020:	e28fe00c 	add	lr, pc, #12
    8024:	e16ff000 	msr	SPSR_fsxc, r0
    8028:	e12ef30e 	.word	0xe12ef30e
    802c:	e160006e 	.word	0xe160006e
    8030:	e121f000 	msr	CPSR_c, r0
    8034:	e3a00000 	mov	r0, #0
    8038:	ee0c0f10 	mcr	15, 0, r0, cr12, cr0, {0}
    803c:	f1020011 	cps	#17
    8040:	e3a0d82d 	mov	sp, #2949120	; 0x2d0000
    8044:	f1020012 	cps	#18
    8048:	e3a0d82b 	mov	sp, #2818048	; 0x2b0000
    804c:	f1020017 	cps	#23
    8050:	e3a0d829 	mov	sp, #2686976	; 0x290000
    8054:	f102001b 	cps	#27
    8058:	e3a0d829 	mov	sp, #2686976	; 0x290000
    805c:	f102001f 	cps	#31
    8060:	e3a0d98a 	mov	sp, #2260992	; 0x228000
    8064:	ea005efa 	b	1fc54 <sysinit>

00008068 <_start_secondary>:
    8068:	e10f0000 	mrs	r0, CPSR
    806c:	e220001a 	eor	r0, r0, #26
    8070:	e310001f 	tst	r0, #31
    8074:	e3c0001f 	bic	r0, r0, #31
    8078:	e38000d3 	orr	r0, r0, #211	; 0xd3
    807c:	1a000004 	bne	8094 <_start_secondary+0x2c>
    8080:	e3800c01 	orr	r0, r0, #256	; 0x100
    8084:	e28fe00c 	add	lr, pc, #12
    8088:	e16ff000 	msr	SPSR_fsxc, r0
    808c:	e12ef30e 	.word	0xe12ef30e
    8090:	e160006e 	.word	0xe160006e
    8094:	e121f000 	msr	CPSR_c, r0
    8098:	ee100fb0 	mrc	15, 0, r0, cr0, cr0, {5}
    809c:	e2000003 	and	r0, r0, #3
    80a0:	e3a01902 	mov	r1, #32768	; 0x8000
    80a4:	e0010190 	mul	r1, r0, r1
    80a8:	f1020011 	cps	#17
    80ac:	e3a0282d 	mov	r2, #2949120	; 0x2d0000
    80b0:	e081d002 	add	sp, r1, r2
    80b4:	f1020012 	cps	#18
    80b8:	e3a0282b 	mov	r2, #2818048	; 0x2b0000
    80bc:	e081d002 	add	sp, r1, r2
    80c0:	f1020017 	cps	#23
    80c4:	e3a02829 	mov	r2, #2686976	; 0x290000
    80c8:	e081d002 	add	sp, r1, r2
    80cc:	f102001b 	cps	#27
    80d0:	e081d002 	add	sp, r1, r2
    80d4:	e3a01802 	mov	r1, #131072	; 0x20000
    80d8:	e0010190 	mul	r1, r0, r1
    80dc:	f102001f 	cps	#31
    80e0:	e3a0298a 	mov	r2, #2260992	; 0x228000
    80e4:	e081d002 	add	sp, r1, r2
    80e8:	ea005f0b 	b	1fd1c <sysinit_secondary>

Disassembly of section .text:

000080f0 <CKernel::CKernel()>:
    80f0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    80f4:	e3a01001 	mov	r1, #1
    80f8:	e1a04000 	mov	r4, r0
    80fc:	e280800c 	add	r8, r0, #12
    8100:	e2847018 	add	r7, r4, #24
    8104:	eb006701 	bl	21d10 <CMemorySystem::CMemorySystem(bool)>
    8108:	e3a01000 	mov	r1, #0
    810c:	e1a00008 	mov	r0, r8
    8110:	e2845d67 	add	r5, r4, #6592	; 0x19c0
    8114:	eb004473 	bl	192e8 <CActLED::CActLED(bool)>
    8118:	e1a00007 	mov	r0, r7
    811c:	eb004d08 	bl	1b544 <CKernelOptions::CKernelOptions()>
    8120:	e2840e87 	add	r0, r4, #2160	; 0x870
    8124:	eb0046af 	bl	19be8 <CDeviceNameService::CDeviceNameService()>
    8128:	e1a00007 	mov	r0, r7
    812c:	eb004ccb 	bl	1b460 <CKernelOptions::GetWidth() const>
    8130:	e1a06000 	mov	r6, r0
    8134:	e1a00007 	mov	r0, r7
    8138:	e2855028 	add	r5, r5, #40	; 0x28
    813c:	eb004cc9 	bl	1b468 <CKernelOptions::GetHeight() const>
    8140:	e1a02000 	mov	r2, r0
    8144:	e2840e87 	add	r0, r4, #2160	; 0x870
    8148:	e3a03000 	mov	r3, #0
    814c:	e1a01006 	mov	r1, r6
    8150:	e280000c 	add	r0, r0, #12
    8154:	eb005306 	bl	1cd74 <CScreenDevice::CScreenDevice(unsigned int, unsigned int, bool)>
    8158:	e3a02000 	mov	r2, #0
    815c:	e2840c09 	add	r0, r4, #2304	; 0x900
    8160:	e1a01002 	mov	r1, r2
    8164:	e2800004 	add	r0, r0, #4
    8168:	e2846d72 	add	r6, r4, #7296	; 0x1c80
    816c:	eb005773 	bl	1df40 <CSerialDevice::CSerialDevice(CInterruptSystem*, bool)>
    8170:	e2840d67 	add	r0, r4, #6592	; 0x19c0
    8174:	e2800024 	add	r0, r0, #36	; 0x24
    8178:	e2866008 	add	r6, r6, #8
    817c:	eb006547 	bl	216a0 <CExceptionHandler::CExceptionHandler()>
    8180:	e1a00005 	mov	r0, r5
    8184:	eb004b08 	bl	1adac <CInterruptSystem::CInterruptSystem()>
    8188:	e1a01005 	mov	r1, r5
    818c:	e1a00006 	mov	r0, r6
    8190:	eb005ef7 	bl	1fd74 <CTimer::CTimer(CInterruptSystem*)>
    8194:	e1a00007 	mov	r0, r7
    8198:	eb004cb7 	bl	1b47c <CKernelOptions::GetLogLevel() const>
    819c:	e1a01000 	mov	r1, r0
    81a0:	e2840d72 	add	r0, r4, #7296	; 0x1c80
    81a4:	e1a02006 	mov	r2, r6
    81a8:	e280003c 	add	r0, r0, #60	; 0x3c
    81ac:	eb004def 	bl	1b970 <CLogger::CLogger(unsigned int, CTimer*)>
    81b0:	e2840d76 	add	r0, r4, #7552	; 0x1d80
    81b4:	e1a02006 	mov	r2, r6
    81b8:	e1a01005 	mov	r1, r5
    81bc:	e280003c 	add	r0, r0, #60	; 0x3c
    81c0:	eb0000b2 	bl	8490 <CDWHCIDevice::CDWHCIDevice(CInterruptSystem*, CTimer*)>
    81c4:	e2840d79 	add	r0, r4, #7744	; 0x1e40
    81c8:	e2800008 	add	r0, r0, #8
    81cc:	eb004197 	bl	18830 <CScheduler::CScheduler()>
    81d0:	e1a00008 	mov	r0, r8
    81d4:	e3a03f7d 	mov	r3, #500	; 0x1f4
    81d8:	e3a020c8 	mov	r2, #200	; 0xc8
    81dc:	e3a01005 	mov	r1, #5
    81e0:	eb004484 	bl	193f8 <CActLED::Blink(unsigned int, unsigned int, unsigned int)>
    81e4:	e1a00004 	mov	r0, r4
    81e8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

000081ec <CKernel::~CKernel()>:
    81ec:	e92d4010 	push	{r4, lr}
    81f0:	e1a04000 	mov	r4, r0
    81f4:	e2800d79 	add	r0, r0, #7744	; 0x1e40
    81f8:	e2800008 	add	r0, r0, #8
    81fc:	eb0041a7 	bl	188a0 <CScheduler::~CScheduler()>
    8200:	e2840d76 	add	r0, r4, #7552	; 0x1d80
    8204:	e280003c 	add	r0, r0, #60	; 0x3c
    8208:	eb000767 	bl	9fac <CDWHCIDevice::~CDWHCIDevice()>
    820c:	e2840d72 	add	r0, r4, #7296	; 0x1c80
    8210:	e280003c 	add	r0, r0, #60	; 0x3c
    8214:	eb004def 	bl	1b9d8 <CLogger::~CLogger()>
    8218:	e2840d72 	add	r0, r4, #7296	; 0x1c80
    821c:	e2800008 	add	r0, r0, #8
    8220:	eb005ef7 	bl	1fe04 <CTimer::~CTimer()>
    8224:	e2840d67 	add	r0, r4, #6592	; 0x19c0
    8228:	e2800028 	add	r0, r0, #40	; 0x28
    822c:	eb004aec 	bl	1ade4 <CInterruptSystem::~CInterruptSystem()>
    8230:	e2840d67 	add	r0, r4, #6592	; 0x19c0
    8234:	e2800024 	add	r0, r0, #36	; 0x24
    8238:	eb00653c 	bl	21730 <CExceptionHandler::~CExceptionHandler()>
    823c:	e2840c09 	add	r0, r4, #2304	; 0x900
    8240:	e2800004 	add	r0, r0, #4
    8244:	eb005772 	bl	1e014 <CSerialDevice::~CSerialDevice()>
    8248:	e2840e87 	add	r0, r4, #2160	; 0x870
    824c:	e280000c 	add	r0, r0, #12
    8250:	eb0052eb 	bl	1ce04 <CScreenDevice::~CScreenDevice()>
    8254:	e2840e87 	add	r0, r4, #2160	; 0x870
    8258:	eb004676 	bl	19c38 <CDeviceNameService::~CDeviceNameService()>
    825c:	e2840018 	add	r0, r4, #24
    8260:	eb004c79 	bl	1b44c <CKernelOptions::~CKernelOptions()>
    8264:	e284000c 	add	r0, r4, #12
    8268:	eb004443 	bl	1937c <CActLED::~CActLED()>
    826c:	e1a00004 	mov	r0, r4
    8270:	eb006635 	bl	21b4c <CMemorySystem::~CMemorySystem()>
    8274:	e1a00004 	mov	r0, r4
    8278:	e8bd8010 	pop	{r4, pc}

0000827c <CKernel::Initialize()>:
    827c:	e92d4070 	push	{r4, r5, r6, lr}
    8280:	e2805e87 	add	r5, r0, #2160	; 0x870
    8284:	e285500c 	add	r5, r5, #12
    8288:	e1a04000 	mov	r4, r0
    828c:	e1a00005 	mov	r0, r5
    8290:	eb005305 	bl	1ceac <CScreenDevice::Initialize()>
    8294:	e3500000 	cmp	r0, #0
    8298:	1a000001 	bne	82a4 <CKernel::Initialize()+0x28>
    829c:	e3a00000 	mov	r0, #0
    82a0:	e8bd8070 	pop	{r4, r5, r6, pc}
    82a4:	e2840c09 	add	r0, r4, #2304	; 0x900
    82a8:	e3a01cc2 	mov	r1, #49664	; 0xc200
    82ac:	e3401001 	movt	r1, #1
    82b0:	e2800004 	add	r0, r0, #4
    82b4:	eb00578f 	bl	1e0f8 <CSerialDevice::Initialize(unsigned int)>
    82b8:	e3500000 	cmp	r0, #0
    82bc:	0afffff6 	beq	829c <CKernel::Initialize()+0x20>
    82c0:	e2840018 	add	r0, r4, #24
    82c4:	eb004c69 	bl	1b470 <CKernelOptions::GetLogDevice() const>
    82c8:	e3a02000 	mov	r2, #0
    82cc:	e1a01000 	mov	r1, r0
    82d0:	e2840e87 	add	r0, r4, #2160	; 0x870
    82d4:	eb0046e2 	bl	19e64 <CDeviceNameService::GetDevice(char const*, bool)>
    82d8:	e3500000 	cmp	r0, #0
    82dc:	11a01000 	movne	r1, r0
    82e0:	e2840d72 	add	r0, r4, #7296	; 0x1c80
    82e4:	01a01005 	moveq	r1, r5
    82e8:	e280003c 	add	r0, r0, #60	; 0x3c
    82ec:	eb004ddd 	bl	1ba68 <CLogger::Initialize(CDevice*)>
    82f0:	e3500000 	cmp	r0, #0
    82f4:	0affffe8 	beq	829c <CKernel::Initialize()+0x20>
    82f8:	e2840d67 	add	r0, r4, #6592	; 0x19c0
    82fc:	e2800028 	add	r0, r0, #40	; 0x28
    8300:	eb004ac7 	bl	1ae24 <CInterruptSystem::Initialize()>
    8304:	e3500000 	cmp	r0, #0
    8308:	0affffe3 	beq	829c <CKernel::Initialize()+0x20>
    830c:	e2840d72 	add	r0, r4, #7296	; 0x1c80
    8310:	e2800008 	add	r0, r0, #8
    8314:	eb006134 	bl	207ec <CTimer::Initialize()>
    8318:	e3500000 	cmp	r0, #0
    831c:	0affffde 	beq	829c <CKernel::Initialize()+0x20>
    8320:	e2840d76 	add	r0, r4, #7552	; 0x1d80
    8324:	e280003c 	add	r0, r0, #60	; 0x3c
    8328:	e8bd4070 	pop	{r4, r5, r6, lr}
    832c:	ea0008c2 	b	a63c <CDWHCIDevice::Initialize()>

00008330 <CKernel::Run()>:
    8330:	e92d4070 	push	{r4, r5, r6, lr}
    8334:	e1a04000 	mov	r4, r0
    8338:	e2846d79 	add	r6, r4, #7744	; 0x1e40
    833c:	e24dd018 	sub	sp, sp, #24
    8340:	e2845e87 	add	r5, r4, #2160	; 0x870
    8344:	e28d0008 	add	r0, sp, #8
    8348:	e2866008 	add	r6, r6, #8
    834c:	eb005a3f 	bl	1ec50 <CString::CString()>
    8350:	e28d0008 	add	r0, sp, #8
    8354:	eb005a54 	bl	1ecac <CString::operator char const*() const>
    8358:	e58d0000 	str	r0, [sp]
    835c:	e2840d72 	add	r0, r4, #7296	; 0x1c80
    8360:	e3a02002 	mov	r2, #2
    8364:	e30431c0 	movw	r3, #16832	; 0x41c0
    8368:	e3403002 	movt	r3, #2
    836c:	e58d2004 	str	r2, [sp, #4]
    8370:	e30411b8 	movw	r1, #16824	; 0x41b8
    8374:	e3401002 	movt	r1, #2
    8378:	e280003c 	add	r0, r0, #60	; 0x3c
    837c:	e3a02003 	mov	r2, #3
    8380:	e285500c 	add	r5, r5, #12
    8384:	e3a04000 	mov	r4, #0
    8388:	eb004dc6 	bl	1baa8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    838c:	e1a00006 	mov	r0, r6
    8390:	eb00421f 	bl	18c14 <CScheduler::Yield()>
    8394:	e1a02004 	mov	r2, r4
    8398:	e3a01000 	mov	r1, #0
    839c:	e1a00005 	mov	r0, r5
    83a0:	e2844001 	add	r4, r4, #1
    83a4:	eb00568f 	bl	1dde8 <CScreenDevice::Rotor(unsigned int, unsigned int)>
    83a8:	eafffff7 	b	838c <CKernel::Run()+0x5c>

000083ac <main>:
    83ac:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    83b0:	e24ddd7a 	sub	sp, sp, #7808	; 0x1e80
    83b4:	e24dd034 	sub	sp, sp, #52	; 0x34
    83b8:	e28d0004 	add	r0, sp, #4
    83bc:	ebffff4b 	bl	80f0 <CKernel::CKernel()>
    83c0:	e28d0004 	add	r0, sp, #4
    83c4:	ebffffac 	bl	827c <CKernel::Initialize()>
    83c8:	e3500000 	cmp	r0, #0
    83cc:	1a000000 	bne	83d4 <main+0x28>
    83d0:	eb005df7 	bl	1fbb4 <halt>
    83d4:	e28d0004 	add	r0, sp, #4
    83d8:	ebffffd4 	bl	8330 <CKernel::Run()>

000083dc <CDWHCIDevice::CompletionRoutine(CUSBRequest*, void*, void*)>:
    83dc:	e92d4070 	push	{r4, r5, r6, lr}
    83e0:	e1a05001 	mov	r5, r1
    83e4:	e2524000 	subs	r4, r2, #0
    83e8:	0a00000b 	beq	841c <CDWHCIDevice::CompletionRoutine(CUSBRequest*, void*, void*)+0x40>
    83ec:	e355000f 	cmp	r5, #15
    83f0:	9a000005 	bls	840c <CDWHCIDevice::CompletionRoutine(CUSBRequest*, void*, void*)+0x30>
    83f4:	e3041210 	movw	r1, #16912	; 0x4210
    83f8:	e3401002 	movt	r1, #2
    83fc:	e304022c 	movw	r0, #16940	; 0x422c
    8400:	e3400002 	movt	r0, #2
    8404:	e30022a2 	movw	r2, #674	; 0x2a2
    8408:	eb004411 	bl	19454 <assertion_failed>
    840c:	e0844005 	add	r4, r4, r5
    8410:	e3a03000 	mov	r3, #0
    8414:	e5c43064 	strb	r3, [r4, #100]	; 0x64
    8418:	e8bd8070 	pop	{r4, r5, r6, pc}
    841c:	e3041210 	movw	r1, #16912	; 0x4210
    8420:	e3401002 	movt	r1, #2
    8424:	e3040220 	movw	r0, #16928	; 0x4220
    8428:	e3400002 	movt	r0, #2
    842c:	e300229f 	movw	r2, #671	; 0x29f
    8430:	eb004407 	bl	19454 <assertion_failed>
    8434:	eaffffec 	b	83ec <CDWHCIDevice::CompletionRoutine(CUSBRequest*, void*, void*)+0x10>

00008438 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.6]>:
    8438:	e92d4030 	push	{r4, r5, lr}
    843c:	e1a05000 	mov	r5, r0
    8440:	e24dd01c 	sub	sp, sp, #28
    8444:	e28d000c 	add	r0, sp, #12
    8448:	eb000986 	bl	aa68 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    844c:	f57ff05f 	dmb	sy
    8450:	eb004e5d 	bl	1bdcc <CLogger::Get()>
    8454:	e1a04000 	mov	r4, r0
    8458:	e28d000c 	add	r0, sp, #12
    845c:	eb00098a 	bl	aa8c <CDWHCIRegister::Read()>
    8460:	e3a02004 	mov	r2, #4
    8464:	e88d0021 	stm	sp, {r0, r5}
    8468:	e304324c 	movw	r3, #16972	; 0x424c
    846c:	e3403002 	movt	r3, #2
    8470:	e1a00004 	mov	r0, r4
    8474:	e30411ec 	movw	r1, #16876	; 0x41ec
    8478:	e3401002 	movt	r1, #2
    847c:	eb004d89 	bl	1baa8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    8480:	e28d000c 	add	r0, sp, #12
    8484:	eb00097f 	bl	aa88 <CDWHCIRegister::~CDWHCIRegister()>
    8488:	e28dd01c 	add	sp, sp, #28
    848c:	e8bd8030 	pop	{r4, r5, pc}

00008490 <CDWHCIDevice::CDWHCIDevice(CInterruptSystem*, CTimer*)>:
    8490:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    8494:	e1a04000 	mov	r4, r0
    8498:	e1a06002 	mov	r6, r2
    849c:	e1a07001 	mov	r7, r1
    84a0:	eb001200 	bl	cca8 <CUSBHostController::CUSBHostController()>
    84a4:	e59f30e4 	ldr	r3, [pc, #228]	; 8590 <CDWHCIDevice::CDWHCIDevice(CInterruptSystem*, CTimer*)+0x100>
    84a8:	e3a05000 	mov	r5, #0
    84ac:	e5843000 	str	r3, [r4]
    84b0:	e3a01001 	mov	r1, #1
    84b4:	e5847004 	str	r7, [r4, #4]
    84b8:	e2840014 	add	r0, r4, #20
    84bc:	e5846008 	str	r6, [r4, #8]
    84c0:	e584500c 	str	r5, [r4, #12]
    84c4:	e5845010 	str	r5, [r4, #16]
    84c8:	eb00595d 	bl	1ea44 <CSpinLock::CSpinLock(unsigned int)>
    84cc:	e3a01001 	mov	r1, #1
    84d0:	e284005c 	add	r0, r4, #92	; 0x5c
    84d4:	eb00595a 	bl	1ea44 <CSpinLock::CSpinLock(unsigned int)>
    84d8:	e1a01005 	mov	r1, r5
    84dc:	e5845074 	str	r5, [r4, #116]	; 0x74
    84e0:	e2840078 	add	r0, r4, #120	; 0x78
    84e4:	eb005956 	bl	1ea44 <CSpinLock::CSpinLock(unsigned int)>
    84e8:	e1a01004 	mov	r1, r4
    84ec:	e2840080 	add	r0, r4, #128	; 0x80
    84f0:	eb001d70 	bl	fab8 <CDWHCIRootPort::CDWHCIRootPort(CDWHCIDevice*)>
    84f4:	e5943004 	ldr	r3, [r4, #4]
    84f8:	e5c45088 	strb	r5, [r4, #136]	; 0x88
    84fc:	e5c45089 	strb	r5, [r4, #137]	; 0x89
    8500:	e1530005 	cmp	r3, r5
    8504:	0a000011 	beq	8550 <CDWHCIDevice::CDWHCIDevice(CInterruptSystem*, CTimer*)+0xc0>
    8508:	e5943008 	ldr	r3, [r4, #8]
    850c:	e3530000 	cmp	r3, #0
    8510:	0a000017 	beq	8574 <CDWHCIDevice::CDWHCIDevice(CInterruptSystem*, CTimer*)+0xe4>
    8514:	e2843018 	add	r3, r4, #24
    8518:	e2841058 	add	r1, r4, #88	; 0x58
    851c:	e3a02000 	mov	r2, #0
    8520:	e5a32004 	str	r2, [r3, #4]!
    8524:	e1510003 	cmp	r1, r3
    8528:	1afffffc 	bne	8520 <CDWHCIDevice::CDWHCIDevice(CInterruptSystem*, CTimer*)+0x90>
    852c:	e3a03000 	mov	r3, #0
    8530:	e1a01003 	mov	r1, r3
    8534:	e0842003 	add	r2, r4, r3
    8538:	e2833001 	add	r3, r3, #1
    853c:	e3530010 	cmp	r3, #16
    8540:	e5c21064 	strb	r1, [r2, #100]	; 0x64
    8544:	1afffffa 	bne	8534 <CDWHCIDevice::CDWHCIDevice(CInterruptSystem*, CTimer*)+0xa4>
    8548:	e1a00004 	mov	r0, r4
    854c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    8550:	e3041210 	movw	r1, #16912	; 0x4210
    8554:	e3401002 	movt	r1, #2
    8558:	e3040258 	movw	r0, #16984	; 0x4258
    855c:	e3400002 	movt	r0, #2
    8560:	e3a0204b 	mov	r2, #75	; 0x4b
    8564:	eb0043ba 	bl	19454 <assertion_failed>
    8568:	e5943008 	ldr	r3, [r4, #8]
    856c:	e3530000 	cmp	r3, #0
    8570:	1affffe7 	bne	8514 <CDWHCIDevice::CDWHCIDevice(CInterruptSystem*, CTimer*)+0x84>
    8574:	e3041210 	movw	r1, #16912	; 0x4210
    8578:	e3401002 	movt	r1, #2
    857c:	e3040270 	movw	r0, #17008	; 0x4270
    8580:	e3400002 	movt	r0, #2
    8584:	e3a0204c 	mov	r2, #76	; 0x4c
    8588:	eb0043b1 	bl	19454 <assertion_failed>
    858c:	eaffffe0 	b	8514 <CDWHCIDevice::CDWHCIDevice(CInterruptSystem*, CTimer*)+0x84>
    8590:	000241fc 	.word	0x000241fc

00008594 <CDWHCIDevice::GetPortSpeed()>:
    8594:	e92d4010 	push	{r4, lr}
    8598:	e3a01d11 	mov	r1, #1088	; 0x440
    859c:	e3431f98 	movt	r1, #16280	; 0x3f98
    85a0:	e24dd010 	sub	sp, sp, #16
    85a4:	e28d0004 	add	r0, sp, #4
    85a8:	eb00092e 	bl	aa68 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    85ac:	e28d0004 	add	r0, sp, #4
    85b0:	eb000935 	bl	aa8c <CDWHCIRegister::Read()>
    85b4:	e7e148d0 	ubfx	r4, r0, #17, #2
    85b8:	e3540003 	cmp	r4, #3
    85bc:	130431ec 	movwne	r3, #16876	; 0x41ec
    85c0:	13403002 	movtne	r3, #2
    85c4:	10830004 	addne	r0, r3, r4
    85c8:	15d04020 	ldrbne	r4, [r0, #32]
    85cc:	e28d0004 	add	r0, sp, #4
    85d0:	eb00092c 	bl	aa88 <CDWHCIRegister::~CDWHCIRegister()>
    85d4:	e1a00004 	mov	r0, r4
    85d8:	e28dd010 	add	sp, sp, #16
    85dc:	e8bd8010 	pop	{r4, pc}

000085e0 <CDWHCIDevice::OvercurrentDetected()>:
    85e0:	e92d4010 	push	{r4, lr}
    85e4:	e3a01d11 	mov	r1, #1088	; 0x440
    85e8:	e3431f98 	movt	r1, #16280	; 0x3f98
    85ec:	e24dd010 	sub	sp, sp, #16
    85f0:	e28d0004 	add	r0, sp, #4
    85f4:	eb00091b 	bl	aa68 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    85f8:	e28d0004 	add	r0, sp, #4
    85fc:	eb000922 	bl	aa8c <CDWHCIRegister::Read()>
    8600:	e1a04000 	mov	r4, r0
    8604:	e28d0004 	add	r0, sp, #4
    8608:	eb00091e 	bl	aa88 <CDWHCIRegister::~CDWHCIRegister()>
    860c:	e7e00254 	ubfx	r0, r4, #4, #1
    8610:	e28dd010 	add	sp, sp, #16
    8614:	e8bd8010 	pop	{r4, pc}

00008618 <CDWHCIDevice::DisableRootPort()>:
    8618:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    861c:	e3a01d11 	mov	r1, #1088	; 0x440
    8620:	e3431f98 	movt	r1, #16280	; 0x3f98
    8624:	e24dd014 	sub	sp, sp, #20
    8628:	e28d0004 	add	r0, sp, #4
    862c:	eb00090d 	bl	aa68 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    8630:	e28d0004 	add	r0, sp, #4
    8634:	eb000914 	bl	aa8c <CDWHCIRegister::Read()>
    8638:	e3e01a01 	mvn	r1, #4096	; 0x1000
    863c:	e28d0004 	add	r0, sp, #4
    8640:	eb000949 	bl	ab6c <CDWHCIRegister::And(unsigned int)>
    8644:	e28d0004 	add	r0, sp, #4
    8648:	eb000916 	bl	aaa8 <CDWHCIRegister::Write()>
    864c:	e28d0004 	add	r0, sp, #4
    8650:	eb00090c 	bl	aa88 <CDWHCIRegister::~CDWHCIRegister()>
    8654:	e28dd014 	add	sp, sp, #20
    8658:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

0000865c <CDWHCIDevice::PowerOn()>:
    865c:	e92d4030 	push	{r4, r5, lr}
    8660:	e3a01000 	mov	r1, #0
    8664:	e1a05001 	mov	r5, r1
    8668:	e24dd02c 	sub	sp, sp, #44	; 0x2c
    866c:	e28d000c 	add	r0, sp, #12
    8670:	eb00439b 	bl	194e4 <CBcmPropertyTags::CBcmPropertyTags(bool)>
    8674:	e3a03014 	mov	r3, #20
    8678:	e28d000c 	add	r0, sp, #12
    867c:	e58d5000 	str	r5, [sp]
    8680:	e3081001 	movw	r1, #32769	; 0x8001
    8684:	e3401002 	movt	r1, #2
    8688:	e08d2003 	add	r2, sp, r3
    868c:	e3a0c003 	mov	ip, #3
    8690:	e58dc020 	str	ip, [sp, #32]
    8694:	e58dc024 	str	ip, [sp, #36]	; 0x24
    8698:	eb0043de 	bl	19618 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
    869c:	e2504000 	subs	r4, r0, #0
    86a0:	0a000003 	beq	86b4 <CDWHCIDevice::PowerOn()+0x58>
    86a4:	e59d4024 	ldr	r4, [sp, #36]	; 0x24
    86a8:	e3140002 	tst	r4, #2
    86ac:	02044001 	andeq	r4, r4, #1
    86b0:	11a04005 	movne	r4, r5
    86b4:	e28d000c 	add	r0, sp, #12
    86b8:	eb004390 	bl	19500 <CBcmPropertyTags::~CBcmPropertyTags()>
    86bc:	e1a00004 	mov	r0, r4
    86c0:	e28dd02c 	add	sp, sp, #44	; 0x2c
    86c4:	e8bd8030 	pop	{r4, r5, pc}

000086c8 <CDWHCIDevice::EnableGlobalInterrupts()>:
    86c8:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    86cc:	e3a01008 	mov	r1, #8
    86d0:	e3431f98 	movt	r1, #16280	; 0x3f98
    86d4:	e24dd014 	sub	sp, sp, #20
    86d8:	e28d0004 	add	r0, sp, #4
    86dc:	eb0008e1 	bl	aa68 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    86e0:	e28d0004 	add	r0, sp, #4
    86e4:	eb0008e8 	bl	aa8c <CDWHCIRegister::Read()>
    86e8:	e3a01001 	mov	r1, #1
    86ec:	e28d0004 	add	r0, sp, #4
    86f0:	eb00092d 	bl	abac <CDWHCIRegister::Or(unsigned int)>
    86f4:	e28d0004 	add	r0, sp, #4
    86f8:	eb0008ea 	bl	aaa8 <CDWHCIRegister::Write()>
    86fc:	e28d0004 	add	r0, sp, #4
    8700:	eb0008e0 	bl	aa88 <CDWHCIRegister::~CDWHCIRegister()>
    8704:	e28dd014 	add	sp, sp, #20
    8708:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

0000870c <CDWHCIDevice::EnableCommonInterrupts()>:
    870c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    8710:	e3a01014 	mov	r1, #20
    8714:	e3431f98 	movt	r1, #16280	; 0x3f98
    8718:	e24dd014 	sub	sp, sp, #20
    871c:	e28d0004 	add	r0, sp, #4
    8720:	eb0008d0 	bl	aa68 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    8724:	e28d0004 	add	r0, sp, #4
    8728:	eb000968 	bl	acd0 <CDWHCIRegister::SetAll()>
    872c:	e28d0004 	add	r0, sp, #4
    8730:	eb0008dc 	bl	aaa8 <CDWHCIRegister::Write()>
    8734:	e28d0004 	add	r0, sp, #4
    8738:	eb0008d2 	bl	aa88 <CDWHCIRegister::~CDWHCIRegister()>
    873c:	e28dd014 	add	sp, sp, #20
    8740:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

00008744 <CDWHCIDevice::EnableHostInterrupts()>:
    8744:	e92d4010 	push	{r4, lr}
    8748:	e3a02000 	mov	r2, #0
    874c:	e1a04000 	mov	r4, r0
    8750:	e24dd010 	sub	sp, sp, #16
    8754:	e3a01018 	mov	r1, #24
    8758:	e3431f98 	movt	r1, #16280	; 0x3f98
    875c:	e28d0004 	add	r0, sp, #4
    8760:	eb0008c4 	bl	aa78 <CDWHCIRegister::CDWHCIRegister(unsigned int, unsigned int)>
    8764:	e28d0004 	add	r0, sp, #4
    8768:	eb0008ce 	bl	aaa8 <CDWHCIRegister::Write()>
    876c:	e1a00004 	mov	r0, r4
    8770:	ebffffe5 	bl	870c <CDWHCIDevice::EnableCommonInterrupts()>
    8774:	e28d0004 	add	r0, sp, #4
    8778:	eb0008c3 	bl	aa8c <CDWHCIRegister::Read()>
    877c:	e3a01402 	mov	r1, #33554432	; 0x2000000
    8780:	e28d0004 	add	r0, sp, #4
    8784:	eb000908 	bl	abac <CDWHCIRegister::Or(unsigned int)>
    8788:	e28d0004 	add	r0, sp, #4
    878c:	eb0008c5 	bl	aaa8 <CDWHCIRegister::Write()>
    8790:	e28d0004 	add	r0, sp, #4
    8794:	eb0008bb 	bl	aa88 <CDWHCIRegister::~CDWHCIRegister()>
    8798:	e28dd010 	add	sp, sp, #16
    879c:	e8bd8010 	pop	{r4, pc}

000087a0 <CDWHCIDevice::EnableChannelInterrupt(unsigned int)>:
    87a0:	e92d4030 	push	{r4, r5, lr}
    87a4:	e280405c 	add	r4, r0, #92	; 0x5c
    87a8:	e1a05001 	mov	r5, r1
    87ac:	e24dd014 	sub	sp, sp, #20
    87b0:	e3001418 	movw	r1, #1048	; 0x418
    87b4:	e3431f98 	movt	r1, #16280	; 0x3f98
    87b8:	e28d0004 	add	r0, sp, #4
    87bc:	eb0008a9 	bl	aa68 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    87c0:	e1a00004 	mov	r0, r4
    87c4:	eb0058b9 	bl	1eab0 <CSpinLock::Acquire()>
    87c8:	e28d0004 	add	r0, sp, #4
    87cc:	eb0008ae 	bl	aa8c <CDWHCIRegister::Read()>
    87d0:	e3a01001 	mov	r1, #1
    87d4:	e28d0004 	add	r0, sp, #4
    87d8:	e1a01511 	lsl	r1, r1, r5
    87dc:	eb0008f2 	bl	abac <CDWHCIRegister::Or(unsigned int)>
    87e0:	e28d0004 	add	r0, sp, #4
    87e4:	eb0008af 	bl	aaa8 <CDWHCIRegister::Write()>
    87e8:	e1a00004 	mov	r0, r4
    87ec:	eb0058c6 	bl	1eb0c <CSpinLock::Release()>
    87f0:	e28d0004 	add	r0, sp, #4
    87f4:	eb0008a3 	bl	aa88 <CDWHCIRegister::~CDWHCIRegister()>
    87f8:	e28dd014 	add	sp, sp, #20
    87fc:	e8bd8030 	pop	{r4, r5, pc}

00008800 <CDWHCIDevice::DisableChannelInterrupt(unsigned int)>:
    8800:	e92d4030 	push	{r4, r5, lr}
    8804:	e280405c 	add	r4, r0, #92	; 0x5c
    8808:	e1a05001 	mov	r5, r1
    880c:	e24dd014 	sub	sp, sp, #20
    8810:	e3001418 	movw	r1, #1048	; 0x418
    8814:	e3431f98 	movt	r1, #16280	; 0x3f98
    8818:	e28d0004 	add	r0, sp, #4
    881c:	eb000891 	bl	aa68 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    8820:	e1a00004 	mov	r0, r4
    8824:	eb0058a1 	bl	1eab0 <CSpinLock::Acquire()>
    8828:	e28d0004 	add	r0, sp, #4
    882c:	eb000896 	bl	aa8c <CDWHCIRegister::Read()>
    8830:	e3a01001 	mov	r1, #1
    8834:	e28d0004 	add	r0, sp, #4
    8838:	e1e01511 	mvn	r1, r1, lsl r5
    883c:	eb0008ca 	bl	ab6c <CDWHCIRegister::And(unsigned int)>
    8840:	e28d0004 	add	r0, sp, #4
    8844:	eb000897 	bl	aaa8 <CDWHCIRegister::Write()>
    8848:	e1a00004 	mov	r0, r4
    884c:	eb0058ae 	bl	1eb0c <CSpinLock::Release()>
    8850:	e28d0004 	add	r0, sp, #4
    8854:	eb00088b 	bl	aa88 <CDWHCIRegister::~CDWHCIRegister()>
    8858:	e28dd014 	add	sp, sp, #20
    885c:	e8bd8030 	pop	{r4, r5, pc}

00008860 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)>:
    8860:	e92d4070 	push	{r4, r5, r6, lr}
    8864:	e1a06000 	mov	r6, r0
    8868:	e2514000 	subs	r4, r1, #0
    886c:	e24dd048 	sub	sp, sp, #72	; 0x48
    8870:	0a0000e1 	beq	8bfc <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x39c>
    8874:	e1a00004 	mov	r0, r4
    8878:	eb0009d1 	bl	afc4 <CDWHCITransferStageData::GetChannelNumber() const>
    887c:	e596300c 	ldr	r3, [r6, #12]
    8880:	e1a05000 	mov	r5, r0
    8884:	e1500003 	cmp	r0, r3
    8888:	2a0000d4 	bcs	8be0 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x380>
    888c:	e3a01001 	mov	r1, #1
    8890:	e1a00004 	mov	r0, r4
    8894:	eb0009c4 	bl	afac <CDWHCITransferStageData::SetSubState(unsigned int)>
    8898:	e1a05285 	lsl	r5, r5, #5
    889c:	e3001508 	movw	r1, #1288	; 0x508
    88a0:	e3431f98 	movt	r1, #16280	; 0x3f98
    88a4:	e0851001 	add	r1, r5, r1
    88a8:	e1a0000d 	mov	r0, sp
    88ac:	eb00086d 	bl	aa68 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    88b0:	e1a0000d 	mov	r0, sp
    88b4:	eb000905 	bl	acd0 <CDWHCIRegister::SetAll()>
    88b8:	e1a0000d 	mov	r0, sp
    88bc:	eb000879 	bl	aaa8 <CDWHCIRegister::Write()>
    88c0:	e3a01e51 	mov	r1, #1296	; 0x510
    88c4:	e3431f98 	movt	r1, #16280	; 0x3f98
    88c8:	e3a02000 	mov	r2, #0
    88cc:	e0851001 	add	r1, r5, r1
    88d0:	e28d000c 	add	r0, sp, #12
    88d4:	eb000867 	bl	aa78 <CDWHCIRegister::CDWHCIRegister(unsigned int, unsigned int)>
    88d8:	e1a00004 	mov	r0, r4
    88dc:	eb000b1a 	bl	b54c <CDWHCITransferStageData::GetBytesToTransfer() const>
    88e0:	e7f21050 	ubfx	r1, r0, #0, #19
    88e4:	e28d000c 	add	r0, sp, #12
    88e8:	eb0008af 	bl	abac <CDWHCIRegister::Or(unsigned int)>
    88ec:	e1a00004 	mov	r0, r4
    88f0:	eb000b17 	bl	b554 <CDWHCITransferStageData::GetPacketsToTransfer() const>
    88f4:	e3a01000 	mov	r1, #0
    88f8:	e3411ff8 	movt	r1, #8184	; 0x1ff8
    88fc:	e0011980 	and	r1, r1, r0, lsl #19
    8900:	e28d000c 	add	r0, sp, #12
    8904:	eb0008a8 	bl	abac <CDWHCIRegister::Or(unsigned int)>
    8908:	e1a00004 	mov	r0, r4
    890c:	eb000ada 	bl	b47c <CDWHCITransferStageData::GetPID() const>
    8910:	e1a01e80 	lsl	r1, r0, #29
    8914:	e28d000c 	add	r0, sp, #12
    8918:	eb0008a3 	bl	abac <CDWHCIRegister::Or(unsigned int)>
    891c:	e28d000c 	add	r0, sp, #12
    8920:	eb000860 	bl	aaa8 <CDWHCIRegister::Write()>
    8924:	e1a00004 	mov	r0, r4
    8928:	eb000af7 	bl	b50c <CDWHCITransferStageData::GetDMAAddress() const>
    892c:	e3001514 	movw	r1, #1300	; 0x514
    8930:	e3431f98 	movt	r1, #16280	; 0x3f98
    8934:	e3802103 	orr	r2, r0, #-1073741824	; 0xc0000000
    8938:	e0851001 	add	r1, r5, r1
    893c:	e28d0018 	add	r0, sp, #24
    8940:	eb00084c 	bl	aa78 <CDWHCIRegister::CDWHCIRegister(unsigned int, unsigned int)>
    8944:	e28d0018 	add	r0, sp, #24
    8948:	eb000856 	bl	aaa8 <CDWHCIRegister::Write()>
    894c:	e1a00004 	mov	r0, r4
    8950:	eb000aed 	bl	b50c <CDWHCITransferStageData::GetDMAAddress() const>
    8954:	e1a06000 	mov	r6, r0
    8958:	e1a00004 	mov	r0, r4
    895c:	eb000afa 	bl	b54c <CDWHCITransferStageData::GetBytesToTransfer() const>
    8960:	e1a01000 	mov	r1, r0
    8964:	e1a00006 	mov	r0, r6
    8968:	eb00633e 	bl	21668 <CleanAndInvalidateDataCacheRange>
    896c:	e3001504 	movw	r1, #1284	; 0x504
    8970:	e3431f98 	movt	r1, #16280	; 0x3f98
    8974:	e0851001 	add	r1, r5, r1
    8978:	e3a02000 	mov	r2, #0
    897c:	e28d0024 	add	r0, sp, #36	; 0x24
    8980:	eb00083c 	bl	aa78 <CDWHCIRegister::CDWHCIRegister(unsigned int, unsigned int)>
    8984:	e1a00004 	mov	r0, r4
    8988:	eb000af3 	bl	b55c <CDWHCITransferStageData::IsSplit() const>
    898c:	e3500000 	cmp	r0, #0
    8990:	1a00007b 	bne	8b84 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x324>
    8994:	e28d0024 	add	r0, sp, #36	; 0x24
    8998:	eb000842 	bl	aaa8 <CDWHCIRegister::Write()>
    899c:	e3a01c05 	mov	r1, #1280	; 0x500
    89a0:	e3431f98 	movt	r1, #16280	; 0x3f98
    89a4:	e0851001 	add	r1, r5, r1
    89a8:	e28d0030 	add	r0, sp, #48	; 0x30
    89ac:	eb00082d 	bl	aa68 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    89b0:	e28d0030 	add	r0, sp, #48	; 0x30
    89b4:	eb000834 	bl	aa8c <CDWHCIRegister::Read()>
    89b8:	e28d0030 	add	r0, sp, #48	; 0x30
    89bc:	e3a01b3e 	mov	r1, #63488	; 0xf800
    89c0:	e34f1fff 	movt	r1, #65535	; 0xffff
    89c4:	eb000868 	bl	ab6c <CDWHCIRegister::And(unsigned int)>
    89c8:	e1a00004 	mov	r0, r4
    89cc:	eb000aa6 	bl	b46c <CDWHCITransferStageData::GetMaxPacketSize() const>
    89d0:	e7ea1050 	ubfx	r1, r0, #0, #11
    89d4:	e28d0030 	add	r0, sp, #48	; 0x30
    89d8:	eb000873 	bl	abac <CDWHCIRegister::Or(unsigned int)>
    89dc:	e28d0030 	add	r0, sp, #48	; 0x30
    89e0:	e3e01603 	mvn	r1, #3145728	; 0x300000
    89e4:	eb000860 	bl	ab6c <CDWHCIRegister::And(unsigned int)>
    89e8:	e28d0030 	add	r0, sp, #48	; 0x30
    89ec:	e3a01601 	mov	r1, #1048576	; 0x100000
    89f0:	eb00086d 	bl	abac <CDWHCIRegister::Or(unsigned int)>
    89f4:	e1a00004 	mov	r0, r4
    89f8:	eb000abf 	bl	b4fc <CDWHCITransferStageData::IsDirectionIn() const>
    89fc:	e3500000 	cmp	r0, #0
    8a00:	0a000057 	beq	8b64 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x304>
    8a04:	e3a01902 	mov	r1, #32768	; 0x8000
    8a08:	e28d0030 	add	r0, sp, #48	; 0x30
    8a0c:	eb000866 	bl	abac <CDWHCIRegister::Or(unsigned int)>
    8a10:	e1a00004 	mov	r0, r4
    8a14:	eb000a96 	bl	b474 <CDWHCITransferStageData::GetSpeed() const>
    8a18:	e3500000 	cmp	r0, #0
    8a1c:	1a00004c 	bne	8b54 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x2f4>
    8a20:	e3a01802 	mov	r1, #131072	; 0x20000
    8a24:	e28d0030 	add	r0, sp, #48	; 0x30
    8a28:	eb00085f 	bl	abac <CDWHCIRegister::Or(unsigned int)>
    8a2c:	e3e0157f 	mvn	r1, #532676608	; 0x1fc00000
    8a30:	e28d0030 	add	r0, sp, #48	; 0x30
    8a34:	eb00084c 	bl	ab6c <CDWHCIRegister::And(unsigned int)>
    8a38:	e1a00004 	mov	r0, r4
    8a3c:	eb000a49 	bl	b368 <CDWHCITransferStageData::GetDeviceAddress() const>
    8a40:	e1a01b00 	lsl	r1, r0, #22
    8a44:	e28d0030 	add	r0, sp, #48	; 0x30
    8a48:	eb000857 	bl	abac <CDWHCIRegister::Or(unsigned int)>
    8a4c:	e3e01703 	mvn	r1, #786432	; 0xc0000
    8a50:	e28d0030 	add	r0, sp, #48	; 0x30
    8a54:	eb000844 	bl	ab6c <CDWHCIRegister::And(unsigned int)>
    8a58:	e1a00004 	mov	r0, r4
    8a5c:	eb000a52 	bl	b3ac <CDWHCITransferStageData::GetEndpointType() const>
    8a60:	e1a01900 	lsl	r1, r0, #18
    8a64:	e28d0030 	add	r0, sp, #48	; 0x30
    8a68:	eb00084f 	bl	abac <CDWHCIRegister::Or(unsigned int)>
    8a6c:	e3e01b1e 	mvn	r1, #30720	; 0x7800
    8a70:	e28d0030 	add	r0, sp, #48	; 0x30
    8a74:	eb00083c 	bl	ab6c <CDWHCIRegister::And(unsigned int)>
    8a78:	e1a00004 	mov	r0, r4
    8a7c:	eb000a69 	bl	b428 <CDWHCITransferStageData::GetEndpointNumber() const>
    8a80:	e1a01580 	lsl	r1, r0, #11
    8a84:	e28d0030 	add	r0, sp, #48	; 0x30
    8a88:	eb000847 	bl	abac <CDWHCIRegister::Or(unsigned int)>
    8a8c:	e1a00004 	mov	r0, r4
    8a90:	eb000b3e 	bl	b790 <CDWHCITransferStageData::GetFrameScheduler() const>
    8a94:	e2506000 	subs	r6, r0, #0
    8a98:	0a00000b 	beq	8acc <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x26c>
    8a9c:	e5963000 	ldr	r3, [r6]
    8aa0:	e5933014 	ldr	r3, [r3, #20]
    8aa4:	e12fff33 	blx	r3
    8aa8:	e5963000 	ldr	r3, [r6]
    8aac:	e1a00006 	mov	r0, r6
    8ab0:	e5933018 	ldr	r3, [r3, #24]
    8ab4:	e12fff33 	blx	r3
    8ab8:	e3500000 	cmp	r0, #0
    8abc:	1a00002c 	bne	8b74 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x314>
    8ac0:	e3e01202 	mvn	r1, #536870912	; 0x20000000
    8ac4:	e28d0030 	add	r0, sp, #48	; 0x30
    8ac8:	eb000827 	bl	ab6c <CDWHCIRegister::And(unsigned int)>
    8acc:	e300150c 	movw	r1, #1292	; 0x50c
    8ad0:	e3431f98 	movt	r1, #16280	; 0x3f98
    8ad4:	e0851001 	add	r1, r5, r1
    8ad8:	e28d003c 	add	r0, sp, #60	; 0x3c
    8adc:	eb0007e1 	bl	aa68 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    8ae0:	e1a00004 	mov	r0, r4
    8ae4:	eb000ae5 	bl	b680 <CDWHCITransferStageData::GetStatusMask() const>
    8ae8:	e1a01000 	mov	r1, r0
    8aec:	e28d003c 	add	r0, sp, #60	; 0x3c
    8af0:	eb000808 	bl	ab18 <CDWHCIRegister::Set(unsigned int)>
    8af4:	e28d003c 	add	r0, sp, #60	; 0x3c
    8af8:	eb0007ea 	bl	aaa8 <CDWHCIRegister::Write()>
    8afc:	e28d0030 	add	r0, sp, #48	; 0x30
    8b00:	e3a01102 	mov	r1, #-2147483648	; 0x80000000
    8b04:	eb000828 	bl	abac <CDWHCIRegister::Or(unsigned int)>
    8b08:	e3e01101 	mvn	r1, #1073741824	; 0x40000000
    8b0c:	e28d0030 	add	r0, sp, #48	; 0x30
    8b10:	eb000815 	bl	ab6c <CDWHCIRegister::And(unsigned int)>
    8b14:	e28d0030 	add	r0, sp, #48	; 0x30
    8b18:	eb0007e2 	bl	aaa8 <CDWHCIRegister::Write()>
    8b1c:	e28d003c 	add	r0, sp, #60	; 0x3c
    8b20:	eb0007d8 	bl	aa88 <CDWHCIRegister::~CDWHCIRegister()>
    8b24:	e28d0030 	add	r0, sp, #48	; 0x30
    8b28:	eb0007d6 	bl	aa88 <CDWHCIRegister::~CDWHCIRegister()>
    8b2c:	e28d0024 	add	r0, sp, #36	; 0x24
    8b30:	eb0007d4 	bl	aa88 <CDWHCIRegister::~CDWHCIRegister()>
    8b34:	e28d0018 	add	r0, sp, #24
    8b38:	eb0007d2 	bl	aa88 <CDWHCIRegister::~CDWHCIRegister()>
    8b3c:	e28d000c 	add	r0, sp, #12
    8b40:	eb0007d0 	bl	aa88 <CDWHCIRegister::~CDWHCIRegister()>
    8b44:	e1a0000d 	mov	r0, sp
    8b48:	eb0007ce 	bl	aa88 <CDWHCIRegister::~CDWHCIRegister()>
    8b4c:	e28dd048 	add	sp, sp, #72	; 0x48
    8b50:	e8bd8070 	pop	{r4, r5, r6, pc}
    8b54:	e3e01802 	mvn	r1, #131072	; 0x20000
    8b58:	e28d0030 	add	r0, sp, #48	; 0x30
    8b5c:	eb000802 	bl	ab6c <CDWHCIRegister::And(unsigned int)>
    8b60:	eaffffb1 	b	8a2c <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x1cc>
    8b64:	e3e01902 	mvn	r1, #32768	; 0x8000
    8b68:	e28d0030 	add	r0, sp, #48	; 0x30
    8b6c:	eb0007fe 	bl	ab6c <CDWHCIRegister::And(unsigned int)>
    8b70:	eaffffa6 	b	8a10 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x1b0>
    8b74:	e3a01202 	mov	r1, #536870912	; 0x20000000
    8b78:	e28d0030 	add	r0, sp, #48	; 0x30
    8b7c:	eb00080a 	bl	abac <CDWHCIRegister::Or(unsigned int)>
    8b80:	eaffffd1 	b	8acc <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x26c>
    8b84:	e1a00004 	mov	r0, r4
    8b88:	eb000a9e 	bl	b608 <CDWHCITransferStageData::GetHubPortAddress() const>
    8b8c:	e1a01000 	mov	r1, r0
    8b90:	e28d0024 	add	r0, sp, #36	; 0x24
    8b94:	eb000804 	bl	abac <CDWHCIRegister::Or(unsigned int)>
    8b98:	e1a00004 	mov	r0, r4
    8b9c:	eb000a7d 	bl	b598 <CDWHCITransferStageData::GetHubAddress() const>
    8ba0:	e1a01380 	lsl	r1, r0, #7
    8ba4:	e28d0024 	add	r0, sp, #36	; 0x24
    8ba8:	eb0007ff 	bl	abac <CDWHCIRegister::Or(unsigned int)>
    8bac:	e1a00004 	mov	r0, r4
    8bb0:	eb000ab0 	bl	b678 <CDWHCITransferStageData::GetSplitPosition() const>
    8bb4:	e1a01700 	lsl	r1, r0, #14
    8bb8:	e28d0024 	add	r0, sp, #36	; 0x24
    8bbc:	eb0007fa 	bl	abac <CDWHCIRegister::Or(unsigned int)>
    8bc0:	e1a00004 	mov	r0, r4
    8bc4:	eb000a66 	bl	b564 <CDWHCITransferStageData::IsSplitComplete() const>
    8bc8:	e3500000 	cmp	r0, #0
    8bcc:	1a000011 	bne	8c18 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x3b8>
    8bd0:	e3a01102 	mov	r1, #-2147483648	; 0x80000000
    8bd4:	e28d0024 	add	r0, sp, #36	; 0x24
    8bd8:	eb0007f3 	bl	abac <CDWHCIRegister::Or(unsigned int)>
    8bdc:	eaffff6c 	b	8994 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x134>
    8be0:	e3041210 	movw	r1, #16912	; 0x4210
    8be4:	e3401002 	movt	r1, #2
    8be8:	e3040290 	movw	r0, #17040	; 0x4290
    8bec:	e3400002 	movt	r0, #2
    8bf0:	e3a02fd1 	mov	r2, #836	; 0x344
    8bf4:	eb004216 	bl	19454 <assertion_failed>
    8bf8:	eaffff23 	b	888c <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x2c>
    8bfc:	e3041210 	movw	r1, #16912	; 0x4210
    8c00:	e3401002 	movt	r1, #2
    8c04:	e3040280 	movw	r0, #17024	; 0x4280
    8c08:	e3400002 	movt	r0, #2
    8c0c:	e3002342 	movw	r2, #834	; 0x342
    8c10:	eb00420f 	bl	19454 <assertion_failed>
    8c14:	eaffff16 	b	8874 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x14>
    8c18:	e3a01801 	mov	r1, #65536	; 0x10000
    8c1c:	e28d0024 	add	r0, sp, #36	; 0x24
    8c20:	eb0007e1 	bl	abac <CDWHCIRegister::Or(unsigned int)>
    8c24:	eaffffe9 	b	8bd0 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x370>

00008c28 <CDWHCIDevice::StartTransaction(CDWHCITransferStageData*)>:
    8c28:	e92d4070 	push	{r4, r5, r6, lr}
    8c2c:	e1a06000 	mov	r6, r0
    8c30:	e2515000 	subs	r5, r1, #0
    8c34:	e24dd018 	sub	sp, sp, #24
    8c38:	0a00003a 	beq	8d28 <CDWHCIDevice::StartTransaction(CDWHCITransferStageData*)+0x100>
    8c3c:	e1a00005 	mov	r0, r5
    8c40:	eb0008df 	bl	afc4 <CDWHCITransferStageData::GetChannelNumber() const>
    8c44:	e596300c 	ldr	r3, [r6, #12]
    8c48:	e1a04000 	mov	r4, r0
    8c4c:	e1500003 	cmp	r0, r3
    8c50:	2a00002d 	bcs	8d0c <CDWHCIDevice::StartTransaction(CDWHCITransferStageData*)+0xe4>
    8c54:	e30c1028 	movw	r1, #49192	; 0xc028
    8c58:	e34011fc 	movt	r1, #508	; 0x1fc
    8c5c:	e0841001 	add	r1, r4, r1
    8c60:	e1a0000d 	mov	r0, sp
    8c64:	e1a04281 	lsl	r4, r1, #5
    8c68:	e1a01004 	mov	r1, r4
    8c6c:	eb00077d 	bl	aa68 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    8c70:	e1a0000d 	mov	r0, sp
    8c74:	eb000784 	bl	aa8c <CDWHCIRegister::Read()>
    8c78:	e1a0000d 	mov	r0, sp
    8c7c:	e3a01102 	mov	r1, #-2147483648	; 0x80000000
    8c80:	eb0007a8 	bl	ab28 <CDWHCIRegister::IsSet(unsigned int) const>
    8c84:	e3500000 	cmp	r0, #0
    8c88:	1a000006 	bne	8ca8 <CDWHCIDevice::StartTransaction(CDWHCITransferStageData*)+0x80>
    8c8c:	e1a01005 	mov	r1, r5
    8c90:	e1a00006 	mov	r0, r6
    8c94:	ebfffef1 	bl	8860 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)>
    8c98:	e1a0000d 	mov	r0, sp
    8c9c:	eb000779 	bl	aa88 <CDWHCIRegister::~CDWHCIRegister()>
    8ca0:	e28dd018 	add	sp, sp, #24
    8ca4:	e8bd8070 	pop	{r4, r5, r6, pc}
    8ca8:	e1a00005 	mov	r0, r5
    8cac:	e3a01000 	mov	r1, #0
    8cb0:	eb0008bd 	bl	afac <CDWHCITransferStageData::SetSubState(unsigned int)>
    8cb4:	e1a0000d 	mov	r0, sp
    8cb8:	e3e01102 	mvn	r1, #-2147483648	; 0x80000000
    8cbc:	eb0007aa 	bl	ab6c <CDWHCIRegister::And(unsigned int)>
    8cc0:	e3a01101 	mov	r1, #1073741824	; 0x40000000
    8cc4:	e1a0000d 	mov	r0, sp
    8cc8:	eb0007b7 	bl	abac <CDWHCIRegister::Or(unsigned int)>
    8ccc:	e1a0000d 	mov	r0, sp
    8cd0:	eb000774 	bl	aaa8 <CDWHCIRegister::Write()>
    8cd4:	e284100c 	add	r1, r4, #12
    8cd8:	e28d000c 	add	r0, sp, #12
    8cdc:	eb000761 	bl	aa68 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    8ce0:	e3a01002 	mov	r1, #2
    8ce4:	e28d000c 	add	r0, sp, #12
    8ce8:	eb00078a 	bl	ab18 <CDWHCIRegister::Set(unsigned int)>
    8cec:	e28d000c 	add	r0, sp, #12
    8cf0:	eb00076c 	bl	aaa8 <CDWHCIRegister::Write()>
    8cf4:	e28d000c 	add	r0, sp, #12
    8cf8:	eb000762 	bl	aa88 <CDWHCIRegister::~CDWHCIRegister()>
    8cfc:	e1a0000d 	mov	r0, sp
    8d00:	eb000760 	bl	aa88 <CDWHCIRegister::~CDWHCIRegister()>
    8d04:	e28dd018 	add	sp, sp, #24
    8d08:	e8bd8070 	pop	{r4, r5, r6, pc}
    8d0c:	e3041210 	movw	r1, #16912	; 0x4210
    8d10:	e3401002 	movt	r1, #2
    8d14:	e3040290 	movw	r0, #17040	; 0x4290
    8d18:	e3400002 	movt	r0, #2
    8d1c:	e3002329 	movw	r2, #809	; 0x329
    8d20:	eb0041cb 	bl	19454 <assertion_failed>
    8d24:	eaffffca 	b	8c54 <CDWHCIDevice::StartTransaction(CDWHCITransferStageData*)+0x2c>
    8d28:	e3041210 	movw	r1, #16912	; 0x4210
    8d2c:	e3401002 	movt	r1, #2
    8d30:	e3040280 	movw	r0, #17024	; 0x4280
    8d34:	e3400002 	movt	r0, #2
    8d38:	e3002327 	movw	r2, #807	; 0x327
    8d3c:	eb0041c4 	bl	19454 <assertion_failed>
    8d40:	eaffffbd 	b	8c3c <CDWHCIDevice::StartTransaction(CDWHCITransferStageData*)+0x14>

00008d44 <CDWHCIDevice::TimerHandler(CDWHCITransferStageData*)>:
    8d44:	e92d4070 	push	{r4, r5, r6, lr}
    8d48:	e1a05000 	mov	r5, r0
    8d4c:	e2514000 	subs	r4, r1, #0
    8d50:	0a000022 	beq	8de0 <CDWHCIDevice::TimerHandler(CDWHCITransferStageData*)+0x9c>
    8d54:	e1a00004 	mov	r0, r4
    8d58:	eb000891 	bl	afa4 <CDWHCITransferStageData::GetState() const>
    8d5c:	e3500003 	cmp	r0, #3
    8d60:	0a000005 	beq	8d7c <CDWHCIDevice::TimerHandler(CDWHCITransferStageData*)+0x38>
    8d64:	e3041210 	movw	r1, #16912	; 0x4210
    8d68:	e3401002 	movt	r1, #2
    8d6c:	e30402a8 	movw	r0, #17064	; 0x42a8
    8d70:	e3400002 	movt	r0, #2
    8d74:	e3002532 	movw	r2, #1330	; 0x532
    8d78:	eb0041b5 	bl	19454 <assertion_failed>
    8d7c:	e1a00004 	mov	r0, r4
    8d80:	eb0009f5 	bl	b55c <CDWHCITransferStageData::IsSplit() const>
    8d84:	e2501000 	subs	r1, r0, #0
    8d88:	1a000005 	bne	8da4 <CDWHCIDevice::TimerHandler(CDWHCITransferStageData*)+0x60>
    8d8c:	e1a00004 	mov	r0, r4
    8d90:	eb000881 	bl	af9c <CDWHCITransferStageData::SetState(unsigned int)>
    8d94:	e1a01004 	mov	r1, r4
    8d98:	e1a00005 	mov	r0, r5
    8d9c:	e8bd4070 	pop	{r4, r5, r6, lr}
    8da0:	eaffffa0 	b	8c28 <CDWHCIDevice::StartTransaction(CDWHCITransferStageData*)>
    8da4:	e1a00004 	mov	r0, r4
    8da8:	e3a01001 	mov	r1, #1
    8dac:	eb00087a 	bl	af9c <CDWHCITransferStageData::SetState(unsigned int)>
    8db0:	e3a01000 	mov	r1, #0
    8db4:	e1a00004 	mov	r0, r4
    8db8:	eb000869 	bl	af64 <CDWHCITransferStageData::SetSplitComplete(bool)>
    8dbc:	e1a00004 	mov	r0, r4
    8dc0:	eb000a72 	bl	b790 <CDWHCITransferStageData::GetFrameScheduler() const>
    8dc4:	e5903000 	ldr	r3, [r0]
    8dc8:	e5933008 	ldr	r3, [r3, #8]
    8dcc:	e12fff33 	blx	r3
    8dd0:	e1a01004 	mov	r1, r4
    8dd4:	e1a00005 	mov	r0, r5
    8dd8:	e8bd4070 	pop	{r4, r5, r6, lr}
    8ddc:	eaffff91 	b	8c28 <CDWHCIDevice::StartTransaction(CDWHCITransferStageData*)>
    8de0:	e3041210 	movw	r1, #16912	; 0x4210
    8de4:	e3401002 	movt	r1, #2
    8de8:	e3040280 	movw	r0, #17024	; 0x4280
    8dec:	e3400002 	movt	r0, #2
    8df0:	e3002531 	movw	r2, #1329	; 0x531
    8df4:	eb004196 	bl	19454 <assertion_failed>
    8df8:	eaffffd5 	b	8d54 <CDWHCIDevice::TimerHandler(CDWHCITransferStageData*)+0x10>

00008dfc <CDWHCIDevice::TimerStub(unsigned int, void*, void*)>:
    8dfc:	e92d4070 	push	{r4, r5, r6, lr}
    8e00:	e1a04001 	mov	r4, r1
    8e04:	e2525000 	subs	r5, r2, #0
    8e08:	0a00000f 	beq	8e4c <CDWHCIDevice::TimerStub(unsigned int, void*, void*)+0x50>
    8e0c:	e3540000 	cmp	r4, #0
    8e10:	0a000003 	beq	8e24 <CDWHCIDevice::TimerStub(unsigned int, void*, void*)+0x28>
    8e14:	e1a01004 	mov	r1, r4
    8e18:	e1a00005 	mov	r0, r5
    8e1c:	e8bd4070 	pop	{r4, r5, r6, lr}
    8e20:	eaffffc7 	b	8d44 <CDWHCIDevice::TimerHandler(CDWHCITransferStageData*)>
    8e24:	e3041210 	movw	r1, #16912	; 0x4210
    8e28:	e3401002 	movt	r1, #2
    8e2c:	e30402dc 	movw	r0, #17116	; 0x42dc
    8e30:	e3400002 	movt	r0, #2
    8e34:	e300254b 	movw	r2, #1355	; 0x54b
    8e38:	eb004185 	bl	19454 <assertion_failed>
    8e3c:	e1a01004 	mov	r1, r4
    8e40:	e1a00005 	mov	r0, r5
    8e44:	e8bd4070 	pop	{r4, r5, r6, lr}
    8e48:	eaffffbd 	b	8d44 <CDWHCIDevice::TimerHandler(CDWHCITransferStageData*)>
    8e4c:	e3041210 	movw	r1, #16912	; 0x4210
    8e50:	e3401002 	movt	r1, #2
    8e54:	e3040220 	movw	r0, #16928	; 0x4220
    8e58:	e3400002 	movt	r0, #2
    8e5c:	e3002548 	movw	r2, #1352	; 0x548
    8e60:	eb00417b 	bl	19454 <assertion_failed>
    8e64:	eaffffe8 	b	8e0c <CDWHCIDevice::TimerStub(unsigned int, void*, void*)+0x10>

00008e68 <CDWHCIDevice::AllocateChannel()>:
    8e68:	e92d4070 	push	{r4, r5, r6, lr}
    8e6c:	e1a05000 	mov	r5, r0
    8e70:	e2806014 	add	r6, r0, #20
    8e74:	e1a00006 	mov	r0, r6
    8e78:	eb00570c 	bl	1eab0 <CSpinLock::Acquire()>
    8e7c:	e595100c 	ldr	r1, [r5, #12]
    8e80:	e3510000 	cmp	r1, #0
    8e84:	0a00000b 	beq	8eb8 <CDWHCIDevice::AllocateChannel()+0x50>
    8e88:	e5953010 	ldr	r3, [r5, #16]
    8e8c:	e2133001 	ands	r3, r3, #1
    8e90:	0a00000d 	beq	8ecc <CDWHCIDevice::AllocateChannel()+0x64>
    8e94:	e3a04000 	mov	r4, #0
    8e98:	ea000002 	b	8ea8 <CDWHCIDevice::AllocateChannel()+0x40>
    8e9c:	e5952010 	ldr	r2, [r5, #16]
    8ea0:	e1120003 	tst	r2, r3
    8ea4:	0a00000a 	beq	8ed4 <CDWHCIDevice::AllocateChannel()+0x6c>
    8ea8:	e2844001 	add	r4, r4, #1
    8eac:	e1a03083 	lsl	r3, r3, #1
    8eb0:	e1540001 	cmp	r4, r1
    8eb4:	1afffff8 	bne	8e9c <CDWHCIDevice::AllocateChannel()+0x34>
    8eb8:	e1a00006 	mov	r0, r6
    8ebc:	e3a04010 	mov	r4, #16
    8ec0:	eb005711 	bl	1eb0c <CSpinLock::Release()>
    8ec4:	e1a00004 	mov	r0, r4
    8ec8:	e8bd8070 	pop	{r4, r5, r6, pc}
    8ecc:	e1a04003 	mov	r4, r3
    8ed0:	e3a03001 	mov	r3, #1
    8ed4:	e5952010 	ldr	r2, [r5, #16]
    8ed8:	e1a00006 	mov	r0, r6
    8edc:	e1823003 	orr	r3, r2, r3
    8ee0:	e5853010 	str	r3, [r5, #16]
    8ee4:	eb005708 	bl	1eb0c <CSpinLock::Release()>
    8ee8:	e1a00004 	mov	r0, r4
    8eec:	e8bd8070 	pop	{r4, r5, r6, pc}

00008ef0 <CDWHCIDevice::FreeChannel(unsigned int)>:
    8ef0:	e590300c 	ldr	r3, [r0, #12]
    8ef4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    8ef8:	e1a04000 	mov	r4, r0
    8efc:	e1a07001 	mov	r7, r1
    8f00:	e1530001 	cmp	r3, r1
    8f04:	9a000013 	bls	8f58 <CDWHCIDevice::FreeChannel(unsigned int)+0x68>
    8f08:	e2846014 	add	r6, r4, #20
    8f0c:	e3a05001 	mov	r5, #1
    8f10:	e1a00006 	mov	r0, r6
    8f14:	eb0056e5 	bl	1eab0 <CSpinLock::Acquire()>
    8f18:	e5943010 	ldr	r3, [r4, #16]
    8f1c:	e1a05715 	lsl	r5, r5, r7
    8f20:	e1130005 	tst	r3, r5
    8f24:	1a000005 	bne	8f40 <CDWHCIDevice::FreeChannel(unsigned int)+0x50>
    8f28:	e3041210 	movw	r1, #16912	; 0x4210
    8f2c:	e3401002 	movt	r1, #2
    8f30:	e30402e8 	movw	r0, #17128	; 0x42e8
    8f34:	e3400002 	movt	r0, #2
    8f38:	e3002571 	movw	r2, #1393	; 0x571
    8f3c:	eb004144 	bl	19454 <assertion_failed>
    8f40:	e5943010 	ldr	r3, [r4, #16]
    8f44:	e1a00006 	mov	r0, r6
    8f48:	e1c35005 	bic	r5, r3, r5
    8f4c:	e5845010 	str	r5, [r4, #16]
    8f50:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    8f54:	ea0056ec 	b	1eb0c <CSpinLock::Release()>
    8f58:	e3041210 	movw	r1, #16912	; 0x4210
    8f5c:	e3401002 	movt	r1, #2
    8f60:	e3040290 	movw	r0, #17040	; 0x4290
    8f64:	e3400002 	movt	r0, #2
    8f68:	e300256c 	movw	r2, #1388	; 0x56c
    8f6c:	eb004138 	bl	19454 <assertion_failed>
    8f70:	eaffffe4 	b	8f08 <CDWHCIDevice::FreeChannel(unsigned int)+0x18>

00008f74 <CDWHCIDevice::TransferStageAsync(CUSBRequest*, bool, bool, unsigned int)>:
    8f74:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    8f78:	e1a04000 	mov	r4, r0
    8f7c:	e1a09002 	mov	r9, r2
    8f80:	e24dd008 	sub	sp, sp, #8
    8f84:	e1a08003 	mov	r8, r3
    8f88:	e2517000 	subs	r7, r1, #0
    8f8c:	0a00003d 	beq	9088 <CDWHCIDevice::TransferStageAsync(CUSBRequest*, bool, bool, unsigned int)+0x114>
    8f90:	e1a00004 	mov	r0, r4
    8f94:	ebffffb3 	bl	8e68 <CDWHCIDevice::AllocateChannel()>
    8f98:	e594300c 	ldr	r3, [r4, #12]
    8f9c:	e1a05000 	mov	r5, r0
    8fa0:	e1530000 	cmp	r3, r0
    8fa4:	93a07000 	movls	r7, #0
    8fa8:	8a000002 	bhi	8fb8 <CDWHCIDevice::TransferStageAsync(CUSBRequest*, bool, bool, unsigned int)+0x44>
    8fac:	e1a00007 	mov	r0, r7
    8fb0:	e28dd008 	add	sp, sp, #8
    8fb4:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    8fb8:	e084a100 	add	sl, r4, r0, lsl #2
    8fbc:	e3a00054 	mov	r0, #84	; 0x54
    8fc0:	eb0009f4 	bl	b798 <CDWHCITransferStageData::operator new(unsigned int)>
    8fc4:	e59d3028 	ldr	r3, [sp, #40]	; 0x28
    8fc8:	e58d3004 	str	r3, [sp, #4]
    8fcc:	e1a02007 	mov	r2, r7
    8fd0:	e1a03009 	mov	r3, r9
    8fd4:	e58d8000 	str	r8, [sp]
    8fd8:	e1a01005 	mov	r1, r5
    8fdc:	e1a06000 	mov	r6, r0
    8fe0:	eb00080d 	bl	b01c <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)>
    8fe4:	e59a301c 	ldr	r3, [sl, #28]
    8fe8:	e3530000 	cmp	r3, #0
    8fec:	0a000005 	beq	9008 <CDWHCIDevice::TransferStageAsync(CUSBRequest*, bool, bool, unsigned int)+0x94>
    8ff0:	e3041210 	movw	r1, #16912	; 0x4210
    8ff4:	e3401002 	movt	r1, #2
    8ff8:	e3040318 	movw	r0, #17176	; 0x4318
    8ffc:	e3400002 	movt	r0, #2
    9000:	e30022bb 	movw	r2, #699	; 0x2bb
    9004:	eb004112 	bl	19454 <assertion_failed>
    9008:	e1a01005 	mov	r1, r5
    900c:	e1a00004 	mov	r0, r4
    9010:	e58a601c 	str	r6, [sl, #28]
    9014:	ebfffde1 	bl	87a0 <CDWHCIDevice::EnableChannelInterrupt(unsigned int)>
    9018:	e1a00006 	mov	r0, r6
    901c:	eb00094e 	bl	b55c <CDWHCITransferStageData::IsSplit() const>
    9020:	e2501000 	subs	r1, r0, #0
    9024:	e1a00006 	mov	r0, r6
    9028:	0a000014 	beq	9080 <CDWHCIDevice::TransferStageAsync(CUSBRequest*, bool, bool, unsigned int)+0x10c>
    902c:	eb0007e2 	bl	afbc <CDWHCITransferStageData::BeginSplitCycle()>
    9030:	e2507000 	subs	r7, r0, #0
    9034:	0a00001a 	beq	90a4 <CDWHCIDevice::TransferStageAsync(CUSBRequest*, bool, bool, unsigned int)+0x130>
    9038:	e3a01001 	mov	r1, #1
    903c:	e1a00006 	mov	r0, r6
    9040:	eb0007d5 	bl	af9c <CDWHCITransferStageData::SetState(unsigned int)>
    9044:	e3a01000 	mov	r1, #0
    9048:	e1a00006 	mov	r0, r6
    904c:	eb0007c4 	bl	af64 <CDWHCITransferStageData::SetSplitComplete(bool)>
    9050:	e1a00006 	mov	r0, r6
    9054:	eb0009cd 	bl	b790 <CDWHCITransferStageData::GetFrameScheduler() const>
    9058:	e5903000 	ldr	r3, [r0]
    905c:	e5933008 	ldr	r3, [r3, #8]
    9060:	e12fff33 	blx	r3
    9064:	e1a00004 	mov	r0, r4
    9068:	e1a01006 	mov	r1, r6
    906c:	e3a07001 	mov	r7, #1
    9070:	ebfffeec 	bl	8c28 <CDWHCIDevice::StartTransaction(CDWHCITransferStageData*)>
    9074:	e1a00007 	mov	r0, r7
    9078:	e28dd008 	add	sp, sp, #8
    907c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    9080:	eb0007c5 	bl	af9c <CDWHCITransferStageData::SetState(unsigned int)>
    9084:	eafffff6 	b	9064 <CDWHCIDevice::TransferStageAsync(CUSBRequest*, bool, bool, unsigned int)+0xf0>
    9088:	e3041210 	movw	r1, #16912	; 0x4210
    908c:	e3401002 	movt	r1, #2
    9090:	e304030c 	movw	r0, #17164	; 0x430c
    9094:	e3400002 	movt	r0, #2
    9098:	e30022aa 	movw	r2, #682	; 0x2aa
    909c:	eb0040ec 	bl	19454 <assertion_failed>
    90a0:	eaffffba 	b	8f90 <CDWHCIDevice::TransferStageAsync(CUSBRequest*, bool, bool, unsigned int)+0x1c>
    90a4:	e1a01005 	mov	r1, r5
    90a8:	e1a00004 	mov	r0, r4
    90ac:	ebfffdd3 	bl	8800 <CDWHCIDevice::DisableChannelInterrupt(unsigned int)>
    90b0:	e1a00006 	mov	r0, r6
    90b4:	eb00072a 	bl	ad64 <CDWHCITransferStageData::~CDWHCITransferStageData()>
    90b8:	e1a00006 	mov	r0, r6
    90bc:	e3a01054 	mov	r1, #84	; 0x54
    90c0:	eb0009cd 	bl	b7fc <CDWHCITransferStageData::operator delete(void*, unsigned int)>
    90c4:	e58a701c 	str	r7, [sl, #28]
    90c8:	e1a01005 	mov	r1, r5
    90cc:	e1a00004 	mov	r0, r4
    90d0:	ebffff86 	bl	8ef0 <CDWHCIDevice::FreeChannel(unsigned int)>
    90d4:	eaffffb4 	b	8fac <CDWHCIDevice::TransferStageAsync(CUSBRequest*, bool, bool, unsigned int)+0x38>

000090d8 <CDWHCIDevice::SubmitAsyncRequest(CUSBRequest*, unsigned int)>:
    90d8:	e5d03089 	ldrb	r3, [r0, #137]	; 0x89
    90dc:	e3530000 	cmp	r3, #0
    90e0:	1a00002d 	bne	919c <CDWHCIDevice::SubmitAsyncRequest(CUSBRequest*, unsigned int)+0xc4>
    90e4:	e92d4070 	push	{r4, r5, r6, lr}
    90e8:	e3510000 	cmp	r1, #0
    90ec:	e1a06002 	mov	r6, r2
    90f0:	e24dd008 	sub	sp, sp, #8
    90f4:	e1a04001 	mov	r4, r1
    90f8:	e1a05000 	mov	r5, r0
    90fc:	0a00002f 	beq	91c0 <CDWHCIDevice::SubmitAsyncRequest(CUSBRequest*, unsigned int)+0xe8>
    9100:	e1a00004 	mov	r0, r4
    9104:	eb000f93 	bl	cf58 <CUSBRequest::GetEndpoint() const>
    9108:	eb000e7e 	bl	cb08 <CUSBEndpoint::GetType() const>
    910c:	e3500001 	cmp	r0, #1
    9110:	1a000011 	bne	915c <CDWHCIDevice::SubmitAsyncRequest(CUSBRequest*, unsigned int)+0x84>
    9114:	e1a00004 	mov	r0, r4
    9118:	eb000fdc 	bl	d090 <CUSBRequest::GetBufLen() const>
    911c:	e3500000 	cmp	r0, #0
    9120:	0a00001f 	beq	91a4 <CDWHCIDevice::SubmitAsyncRequest(CUSBRequest*, unsigned int)+0xcc>
    9124:	e3a01000 	mov	r1, #0
    9128:	e1a00004 	mov	r0, r4
    912c:	eb000f99 	bl	cf98 <CUSBRequest::SetStatus(int)>
    9130:	e1a00004 	mov	r0, r4
    9134:	eb000f87 	bl	cf58 <CUSBRequest::GetEndpoint() const>
    9138:	eb000e74 	bl	cb10 <CUSBEndpoint::IsDirectionIn() const>
    913c:	e58d6000 	str	r6, [sp]
    9140:	e1a02000 	mov	r2, r0
    9144:	e1a01004 	mov	r1, r4
    9148:	e1a00005 	mov	r0, r5
    914c:	e3a03000 	mov	r3, #0
    9150:	ebffff87 	bl	8f74 <CDWHCIDevice::TransferStageAsync(CUSBRequest*, bool, bool, unsigned int)>
    9154:	e28dd008 	add	sp, sp, #8
    9158:	e8bd8070 	pop	{r4, r5, r6, pc}
    915c:	e1a00004 	mov	r0, r4
    9160:	eb000f7c 	bl	cf58 <CUSBRequest::GetEndpoint() const>
    9164:	eb000e67 	bl	cb08 <CUSBEndpoint::GetType() const>
    9168:	e3500002 	cmp	r0, #2
    916c:	0affffe8 	beq	9114 <CDWHCIDevice::SubmitAsyncRequest(CUSBRequest*, unsigned int)+0x3c>
    9170:	e3002116 	movw	r2, #278	; 0x116
    9174:	e3041210 	movw	r1, #16912	; 0x4210
    9178:	e3401002 	movt	r1, #2
    917c:	e3040334 	movw	r0, #17204	; 0x4334
    9180:	e3400002 	movt	r0, #2
    9184:	eb0040b2 	bl	19454 <assertion_failed>
    9188:	e1a00004 	mov	r0, r4
    918c:	eb000fbf 	bl	d090 <CUSBRequest::GetBufLen() const>
    9190:	e3500000 	cmp	r0, #0
    9194:	1affffe2 	bne	9124 <CDWHCIDevice::SubmitAsyncRequest(CUSBRequest*, unsigned int)+0x4c>
    9198:	ea000001 	b	91a4 <CDWHCIDevice::SubmitAsyncRequest(CUSBRequest*, unsigned int)+0xcc>
    919c:	e3a00000 	mov	r0, #0
    91a0:	e12fff1e 	bx	lr
    91a4:	e3041210 	movw	r1, #16912	; 0x4210
    91a8:	e3401002 	movt	r1, #2
    91ac:	e30403a8 	movw	r0, #17320	; 0x43a8
    91b0:	e3400002 	movt	r0, #2
    91b4:	e3002117 	movw	r2, #279	; 0x117
    91b8:	eb0040a5 	bl	19454 <assertion_failed>
    91bc:	eaffffd8 	b	9124 <CDWHCIDevice::SubmitAsyncRequest(CUSBRequest*, unsigned int)+0x4c>
    91c0:	e3041210 	movw	r1, #16912	; 0x4210
    91c4:	e3401002 	movt	r1, #2
    91c8:	e304030c 	movw	r0, #17164	; 0x430c
    91cc:	e3400002 	movt	r0, #2
    91d0:	e3a02f45 	mov	r2, #276	; 0x114
    91d4:	eb00409e 	bl	19454 <assertion_failed>
    91d8:	eaffffc8 	b	9100 <CDWHCIDevice::SubmitAsyncRequest(CUSBRequest*, unsigned int)+0x28>

000091dc <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.3]>:
    91dc:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    91e0:	e0807101 	add	r7, r0, r1, lsl #2
    91e4:	e1a05000 	mov	r5, r0
    91e8:	e24dd020 	sub	sp, sp, #32
    91ec:	e1a06001 	mov	r6, r1
    91f0:	e597401c 	ldr	r4, [r7, #28]
    91f4:	e3540000 	cmp	r4, #0
    91f8:	0a000083 	beq	940c <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.3]+0x230>
    91fc:	e1a00004 	mov	r0, r4
    9200:	eb000952 	bl	b750 <CDWHCITransferStageData::GetURB() const>
    9204:	e2508000 	subs	r8, r0, #0
    9208:	0a000089 	beq	9434 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.3]+0x258>
    920c:	e1a00004 	mov	r0, r4
    9210:	eb000767 	bl	afb4 <CDWHCITransferStageData::GetSubState() const>
    9214:	e3500000 	cmp	r0, #0
    9218:	0a000062 	beq	93a8 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.3]+0x1cc>
    921c:	e3500001 	cmp	r0, #1
    9220:	0a000031 	beq	92ec <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.3]+0x110>
    9224:	e3041210 	movw	r1, #16912	; 0x4210
    9228:	e3401002 	movt	r1, #2
    922c:	e3040ad8 	movw	r0, #19160	; 0x4ad8
    9230:	e3400002 	movt	r0, #2
    9234:	e30023df 	movw	r2, #991	; 0x3df
    9238:	eb004085 	bl	19454 <assertion_failed>
    923c:	e1a00004 	mov	r0, r4
    9240:	eb000757 	bl	afa4 <CDWHCITransferStageData::GetState() const>
    9244:	e1a09000 	mov	r9, r0
    9248:	e3500001 	cmp	r0, #1
    924c:	0a000099 	beq	94b8 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.3]+0x2dc>
    9250:	3a00007e 	bcc	9450 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.3]+0x274>
    9254:	e3500002 	cmp	r0, #2
    9258:	1a000057 	bne	93bc <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.3]+0x1e0>
    925c:	e1a00004 	mov	r0, r4
    9260:	eb000911 	bl	b6ac <CDWHCITransferStageData::GetTransactionStatus() const>
    9264:	e300378c 	movw	r3, #1932	; 0x78c
    9268:	e1a09000 	mov	r9, r0
    926c:	e1100003 	tst	r0, r3
    9270:	0a0000a9 	beq	951c <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.3]+0x340>
    9274:	eb004ad4 	bl	1bdcc <CLogger::Get()>
    9278:	e58d9000 	str	r9, [sp]
    927c:	e3043438 	movw	r3, #17464	; 0x4438
    9280:	e3403002 	movt	r3, #2
    9284:	e30411ec 	movw	r1, #16876	; 0x41ec
    9288:	e3401002 	movt	r1, #2
    928c:	e3a02001 	mov	r2, #1
    9290:	eb004a04 	bl	1baa8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    9294:	e3a01000 	mov	r1, #0
    9298:	e1a00008 	mov	r0, r8
    929c:	eb000f3d 	bl	cf98 <CUSBRequest::SetStatus(int)>
    92a0:	e1a01006 	mov	r1, r6
    92a4:	e1a00005 	mov	r0, r5
    92a8:	ebfffd54 	bl	8800 <CDWHCIDevice::DisableChannelInterrupt(unsigned int)>
    92ac:	e3540000 	cmp	r4, #0
    92b0:	0a000004 	beq	92c8 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.3]+0xec>
    92b4:	e1a00004 	mov	r0, r4
    92b8:	eb0006a9 	bl	ad64 <CDWHCITransferStageData::~CDWHCITransferStageData()>
    92bc:	e1a00004 	mov	r0, r4
    92c0:	e3a01054 	mov	r1, #84	; 0x54
    92c4:	eb00094c 	bl	b7fc <CDWHCITransferStageData::operator delete(void*, unsigned int)>
    92c8:	e3a03000 	mov	r3, #0
    92cc:	e1a01006 	mov	r1, r6
    92d0:	e1a00005 	mov	r0, r5
    92d4:	e587301c 	str	r3, [r7, #28]
    92d8:	ebffff04 	bl	8ef0 <CDWHCIDevice::FreeChannel(unsigned int)>
    92dc:	e1a00008 	mov	r0, r8
    92e0:	eb000f76 	bl	d0c0 <CUSBRequest::CallCompletionRoutine()>
    92e4:	e28dd020 	add	sp, sp, #32
    92e8:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    92ec:	e1a00004 	mov	r0, r4
    92f0:	e1a09286 	lsl	r9, r6, #5
    92f4:	eb000884 	bl	b50c <CDWHCITransferStageData::GetDMAAddress() const>
    92f8:	e1a0a000 	mov	sl, r0
    92fc:	e1a00004 	mov	r0, r4
    9300:	eb000891 	bl	b54c <CDWHCITransferStageData::GetBytesToTransfer() const>
    9304:	e1a01000 	mov	r1, r0
    9308:	e1a0000a 	mov	r0, sl
    930c:	eb0060d5 	bl	21668 <CleanAndInvalidateDataCacheRange>
    9310:	e3a01e51 	mov	r1, #1296	; 0x510
    9314:	e3431f98 	movt	r1, #16280	; 0x3f98
    9318:	e0891001 	add	r1, r9, r1
    931c:	e28d0008 	add	r0, sp, #8
    9320:	eb0005d0 	bl	aa68 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    9324:	e28d0008 	add	r0, sp, #8
    9328:	eb0005d7 	bl	aa8c <CDWHCIRegister::Read()>
    932c:	e3001508 	movw	r1, #1288	; 0x508
    9330:	e3431f98 	movt	r1, #16280	; 0x3f98
    9334:	e0891001 	add	r1, r9, r1
    9338:	e28d0014 	add	r0, sp, #20
    933c:	eb0005c9 	bl	aa68 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    9340:	e28d0014 	add	r0, sp, #20
    9344:	eb0005d0 	bl	aa8c <CDWHCIRegister::Read()>
    9348:	e3500002 	cmp	r0, #2
    934c:	0a000069 	beq	94f8 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.3]+0x31c>
    9350:	e1a00004 	mov	r0, r4
    9354:	eb00071c 	bl	afcc <CDWHCITransferStageData::IsPeriodic() const>
    9358:	e3500000 	cmp	r0, #0
    935c:	1a00001e 	bne	93dc <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.3]+0x200>
    9360:	e28d0014 	add	r0, sp, #20
    9364:	eb0005c8 	bl	aa8c <CDWHCIRegister::Read()>
    9368:	e1a09000 	mov	r9, r0
    936c:	e28d0008 	add	r0, sp, #8
    9370:	eb0005db 	bl	aae4 <CDWHCIRegister::Get() const>
    9374:	e1a0a000 	mov	sl, r0
    9378:	e28d0008 	add	r0, sp, #8
    937c:	eb0005d8 	bl	aae4 <CDWHCIRegister::Get() const>
    9380:	e7e929da 	ubfx	r2, sl, #19, #10
    9384:	e7f23050 	ubfx	r3, r0, #0, #19
    9388:	e1a01009 	mov	r1, r9
    938c:	e1a00004 	mov	r0, r4
    9390:	eb000686 	bl	adb0 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)>
    9394:	e28d0014 	add	r0, sp, #20
    9398:	eb0005ba 	bl	aa88 <CDWHCIRegister::~CDWHCIRegister()>
    939c:	e28d0008 	add	r0, sp, #8
    93a0:	eb0005b8 	bl	aa88 <CDWHCIRegister::~CDWHCIRegister()>
    93a4:	eaffffa4 	b	923c <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.3]+0x60>
    93a8:	e1a01004 	mov	r1, r4
    93ac:	e1a00005 	mov	r0, r5
    93b0:	ebfffd2a 	bl	8860 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)>
    93b4:	e28dd020 	add	sp, sp, #32
    93b8:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    93bc:	e3a02d13 	mov	r2, #1216	; 0x4c0
    93c0:	e3041210 	movw	r1, #16912	; 0x4210
    93c4:	e3401002 	movt	r1, #2
    93c8:	e3040ad8 	movw	r0, #19160	; 0x4ad8
    93cc:	e3400002 	movt	r0, #2
    93d0:	eb00401f 	bl	19454 <assertion_failed>
    93d4:	e28dd020 	add	sp, sp, #32
    93d8:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    93dc:	e28d0008 	add	r0, sp, #8
    93e0:	eb0005bf 	bl	aae4 <CDWHCIRegister::Get() const>
    93e4:	e7e10ed0 	ubfx	r0, r0, #29, #2
    93e8:	e3500003 	cmp	r0, #3
    93ec:	1affffdb 	bne	9360 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.3]+0x184>
    93f0:	e3041210 	movw	r1, #16912	; 0x4210
    93f4:	e3401002 	movt	r1, #2
    93f8:	e30403c0 	movw	r0, #17344	; 0x43c0
    93fc:	e3400002 	movt	r0, #2
    9400:	e30023d7 	movw	r2, #983	; 0x3d7
    9404:	eb004012 	bl	19454 <assertion_failed>
    9408:	eaffffd4 	b	9360 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.3]+0x184>
    940c:	e30023b5 	movw	r2, #949	; 0x3b5
    9410:	e3041210 	movw	r1, #16912	; 0x4210
    9414:	e3401002 	movt	r1, #2
    9418:	e3040280 	movw	r0, #17024	; 0x4280
    941c:	e3400002 	movt	r0, #2
    9420:	eb00400b 	bl	19454 <assertion_failed>
    9424:	e1a00004 	mov	r0, r4
    9428:	eb0008c8 	bl	b750 <CDWHCITransferStageData::GetURB() const>
    942c:	e2508000 	subs	r8, r0, #0
    9430:	1affff75 	bne	920c <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.3]+0x30>
    9434:	e3041210 	movw	r1, #16912	; 0x4210
    9438:	e3401002 	movt	r1, #2
    943c:	e304030c 	movw	r0, #17164	; 0x430c
    9440:	e3400002 	movt	r0, #2
    9444:	e30023b7 	movw	r2, #951	; 0x3b7
    9448:	eb004001 	bl	19454 <assertion_failed>
    944c:	eaffff6e 	b	920c <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.3]+0x30>
    9450:	e1a00004 	mov	r0, r4
    9454:	eb000894 	bl	b6ac <CDWHCITransferStageData::GetTransactionStatus() const>
    9458:	e300178c 	movw	r1, #1932	; 0x78c
    945c:	e1a0a000 	mov	sl, r0
    9460:	e0109001 	ands	r9, r0, r1
    9464:	1a00007b 	bne	9658 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.3]+0x47c>
    9468:	e3100050 	tst	r0, #80	; 0x50
    946c:	0a00000b 	beq	94a0 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.3]+0x2c4>
    9470:	e1a00004 	mov	r0, r4
    9474:	eb0006d4 	bl	afcc <CDWHCITransferStageData::IsPeriodic() const>
    9478:	e3500000 	cmp	r0, #0
    947c:	0a000007 	beq	94a0 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.3]+0x2c4>
    9480:	e1a00004 	mov	r0, r4
    9484:	eb0008a1 	bl	b710 <CDWHCITransferStageData::IsTimeout() const>
    9488:	e3500000 	cmp	r0, #0
    948c:	0a000086 	beq	96ac <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.3]+0x4d0>
    9490:	e3a01000 	mov	r1, #0
    9494:	e1a00008 	mov	r0, r8
    9498:	eb000ebe 	bl	cf98 <CUSBRequest::SetStatus(int)>
    949c:	eaffff7f 	b	92a0 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.3]+0xc4>
    94a0:	e1a00004 	mov	r0, r4
    94a4:	eb000816 	bl	b504 <CDWHCITransferStageData::IsStatusStage() const>
    94a8:	e3500000 	cmp	r0, #0
    94ac:	0a000072 	beq	967c <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.3]+0x4a0>
    94b0:	e3a01001 	mov	r1, #1
    94b4:	eaffff77 	b	9298 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.3]+0xbc>
    94b8:	e1a00004 	mov	r0, r4
    94bc:	eb00087a 	bl	b6ac <CDWHCITransferStageData::GetTransactionStatus() const>
    94c0:	e30037dc 	movw	r3, #2012	; 0x7dc
    94c4:	e1a0a000 	mov	sl, r0
    94c8:	e1100003 	tst	r0, r3
    94cc:	0a000038 	beq	95b4 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.3]+0x3d8>
    94d0:	eb004a3d 	bl	1bdcc <CLogger::Get()>
    94d4:	e58da000 	str	sl, [sp]
    94d8:	e1a02009 	mov	r2, r9
    94dc:	e3043438 	movw	r3, #17464	; 0x4438
    94e0:	e3403002 	movt	r3, #2
    94e4:	e30411ec 	movw	r1, #16876	; 0x41ec
    94e8:	e3401002 	movt	r1, #2
    94ec:	eb00496d 	bl	1baa8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    94f0:	e3a01000 	mov	r1, #0
    94f4:	eaffff67 	b	9298 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.3]+0xbc>
    94f8:	e1a01004 	mov	r1, r4
    94fc:	e1a00005 	mov	r0, r5
    9500:	ebfffdc8 	bl	8c28 <CDWHCIDevice::StartTransaction(CDWHCITransferStageData*)>
    9504:	e28d0014 	add	r0, sp, #20
    9508:	eb00055e 	bl	aa88 <CDWHCIRegister::~CDWHCIRegister()>
    950c:	e28d0008 	add	r0, sp, #8
    9510:	eb00055c 	bl	aa88 <CDWHCIRegister::~CDWHCIRegister()>
    9514:	e28dd020 	add	sp, sp, #32
    9518:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    951c:	e1a00004 	mov	r0, r4
    9520:	eb00089a 	bl	b790 <CDWHCITransferStageData::GetFrameScheduler() const>
    9524:	e5903000 	ldr	r3, [r0]
    9528:	e1a01009 	mov	r1, r9
    952c:	e5933010 	ldr	r3, [r3, #16]
    9530:	e12fff33 	blx	r3
    9534:	e1a00004 	mov	r0, r4
    9538:	eb000894 	bl	b790 <CDWHCITransferStageData::GetFrameScheduler() const>
    953c:	e5903000 	ldr	r3, [r0]
    9540:	e593300c 	ldr	r3, [r3, #12]
    9544:	e12fff33 	blx	r3
    9548:	e3500000 	cmp	r0, #0
    954c:	1a000030 	bne	9614 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.3]+0x438>
    9550:	e1a00004 	mov	r0, r4
    9554:	eb000864 	bl	b6ec <CDWHCITransferStageData::IsStageComplete() const>
    9558:	e2509000 	subs	r9, r0, #0
    955c:	1a000030 	bne	9624 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.3]+0x448>
    9560:	e1a00004 	mov	r0, r4
    9564:	eb000694 	bl	afbc <CDWHCITransferStageData::BeginSplitCycle()>
    9568:	e2501000 	subs	r1, r0, #0
    956c:	0affff49 	beq	9298 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.3]+0xbc>
    9570:	e1a00004 	mov	r0, r4
    9574:	eb000694 	bl	afcc <CDWHCITransferStageData::IsPeriodic() const>
    9578:	e250a000 	subs	sl, r0, #0
    957c:	0a000019 	beq	95e8 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.3]+0x40c>
    9580:	e1a00004 	mov	r0, r4
    9584:	eb000861 	bl	b710 <CDWHCITransferStageData::IsTimeout() const>
    9588:	e3500000 	cmp	r0, #0
    958c:	0a000046 	beq	96ac <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.3]+0x4d0>
    9590:	e1a01006 	mov	r1, r6
    9594:	e1a00005 	mov	r0, r5
    9598:	ebfffc98 	bl	8800 <CDWHCIDevice::DisableChannelInterrupt(unsigned int)>
    959c:	e1a01009 	mov	r1, r9
    95a0:	e1a00008 	mov	r0, r8
    95a4:	eb000e7b 	bl	cf98 <CUSBRequest::SetStatus(int)>
    95a8:	e3540000 	cmp	r4, #0
    95ac:	1affff40 	bne	92b4 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.3]+0xd8>
    95b0:	eaffff44 	b	92c8 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.3]+0xec>
    95b4:	e1a00004 	mov	r0, r4
    95b8:	eb000874 	bl	b790 <CDWHCITransferStageData::GetFrameScheduler() const>
    95bc:	e5903000 	ldr	r3, [r0]
    95c0:	e1a0100a 	mov	r1, sl
    95c4:	e5933010 	ldr	r3, [r3, #16]
    95c8:	e12fff33 	blx	r3
    95cc:	e1a00004 	mov	r0, r4
    95d0:	e3a01002 	mov	r1, #2
    95d4:	eb000670 	bl	af9c <CDWHCITransferStageData::SetState(unsigned int)>
    95d8:	e1a01009 	mov	r1, r9
    95dc:	e1a00004 	mov	r0, r4
    95e0:	eb00065f 	bl	af64 <CDWHCITransferStageData::SetSplitComplete(bool)>
    95e4:	eaffffd2 	b	9534 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.3]+0x358>
    95e8:	e3a01001 	mov	r1, #1
    95ec:	e1a00004 	mov	r0, r4
    95f0:	eb000669 	bl	af9c <CDWHCITransferStageData::SetState(unsigned int)>
    95f4:	e1a0100a 	mov	r1, sl
    95f8:	e1a00004 	mov	r0, r4
    95fc:	eb000658 	bl	af64 <CDWHCITransferStageData::SetSplitComplete(bool)>
    9600:	e1a00004 	mov	r0, r4
    9604:	eb000861 	bl	b790 <CDWHCITransferStageData::GetFrameScheduler() const>
    9608:	e5903000 	ldr	r3, [r0]
    960c:	e5933008 	ldr	r3, [r3, #8]
    9610:	e12fff33 	blx	r3
    9614:	e1a01004 	mov	r1, r4
    9618:	e1a00005 	mov	r0, r5
    961c:	ebfffd81 	bl	8c28 <CDWHCIDevice::StartTransaction(CDWHCITransferStageData*)>
    9620:	eaffff63 	b	93b4 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.3]+0x1d8>
    9624:	e1a01006 	mov	r1, r6
    9628:	e1a00005 	mov	r0, r5
    962c:	ebfffc73 	bl	8800 <CDWHCIDevice::DisableChannelInterrupt(unsigned int)>
    9630:	e1a00004 	mov	r0, r4
    9634:	eb0007b2 	bl	b504 <CDWHCITransferStageData::IsStatusStage() const>
    9638:	e3500000 	cmp	r0, #0
    963c:	0a000014 	beq	9694 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.3]+0x4b8>
    9640:	e3a01001 	mov	r1, #1
    9644:	e1a00008 	mov	r0, r8
    9648:	eb000e52 	bl	cf98 <CUSBRequest::SetStatus(int)>
    964c:	e3540000 	cmp	r4, #0
    9650:	1affff17 	bne	92b4 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.3]+0xd8>
    9654:	eaffff1b 	b	92c8 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.3]+0xec>
    9658:	eb0049db 	bl	1bdcc <CLogger::Get()>
    965c:	e58da000 	str	sl, [sp]
    9660:	e3043438 	movw	r3, #17464	; 0x4438
    9664:	e3403002 	movt	r3, #2
    9668:	e30411ec 	movw	r1, #16876	; 0x41ec
    966c:	e3401002 	movt	r1, #2
    9670:	e3a02001 	mov	r2, #1
    9674:	eb00490b 	bl	1baa8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    9678:	eaffff84 	b	9490 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.3]+0x2b4>
    967c:	e1a00004 	mov	r0, r4
    9680:	eb00081d 	bl	b6fc <CDWHCITransferStageData::GetResultLen() const>
    9684:	e1a01000 	mov	r1, r0
    9688:	e1a00008 	mov	r0, r8
    968c:	eb000e43 	bl	cfa0 <CUSBRequest::SetResultLen(unsigned int)>
    9690:	eaffff86 	b	94b0 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.3]+0x2d4>
    9694:	e1a00004 	mov	r0, r4
    9698:	eb000817 	bl	b6fc <CDWHCITransferStageData::GetResultLen() const>
    969c:	e1a01000 	mov	r1, r0
    96a0:	e1a00008 	mov	r0, r8
    96a4:	eb000e3d 	bl	cfa0 <CUSBRequest::SetResultLen(unsigned int)>
    96a8:	eaffffe4 	b	9640 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.3]+0x464>
    96ac:	e3a01003 	mov	r1, #3
    96b0:	e1a00004 	mov	r0, r4
    96b4:	eb000638 	bl	af9c <CDWHCITransferStageData::SetState(unsigned int)>
    96b8:	e1a00008 	mov	r0, r8
    96bc:	eb000e25 	bl	cf58 <CUSBRequest::GetEndpoint() const>
    96c0:	eb000d18 	bl	cb28 <CUSBEndpoint::GetInterval() const>
    96c4:	e3a01064 	mov	r1, #100	; 0x64
    96c8:	e304cdd3 	movw	ip, #19923	; 0x4dd3
    96cc:	e341c062 	movt	ip, #4194	; 0x1062
    96d0:	e58d5000 	str	r5, [sp]
    96d4:	e1a03004 	mov	r3, r4
    96d8:	e0010091 	mul	r1, r1, r0
    96dc:	e3082dfc 	movw	r2, #36348	; 0x8dfc
    96e0:	e3402000 	movt	r2, #0
    96e4:	e5950008 	ldr	r0, [r5, #8]
    96e8:	e081c19c 	umull	ip, r1, ip, r1
    96ec:	e1a01321 	lsr	r1, r1, #6
    96f0:	eb005b11 	bl	2033c <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)>
    96f4:	eaffff2e 	b	93b4 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.3]+0x1d8>

000096f8 <CDWHCIDevice::ChannelInterruptHandler(unsigned int)>:
    96f8:	e5d03089 	ldrb	r3, [r0, #137]	; 0x89
    96fc:	e3530000 	cmp	r3, #0
    9700:	112fff1e 	bxne	lr
    9704:	eafffeb4 	b	91dc <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.3]>

00009708 <CDWHCIDevice::InterruptHandler()>:
    9708:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    970c:	e3a01014 	mov	r1, #20
    9710:	e3431f98 	movt	r1, #16280	; 0x3f98
    9714:	e24dd02c 	sub	sp, sp, #44	; 0x2c
    9718:	e1a06000 	mov	r6, r0
    971c:	e28d0004 	add	r0, sp, #4
    9720:	eb0004d0 	bl	aa68 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    9724:	e28d0004 	add	r0, sp, #4
    9728:	eb0004d7 	bl	aa8c <CDWHCIRegister::Read()>
    972c:	e28d0004 	add	r0, sp, #4
    9730:	eb0004eb 	bl	aae4 <CDWHCIRegister::Get() const>
    9734:	e3100402 	tst	r0, #33554432	; 0x2000000
    9738:	1a000005 	bne	9754 <CDWHCIDevice::InterruptHandler()+0x4c>
    973c:	e28d0004 	add	r0, sp, #4
    9740:	eb0004d8 	bl	aaa8 <CDWHCIRegister::Write()>
    9744:	e28d0004 	add	r0, sp, #4
    9748:	eb0004ce 	bl	aa88 <CDWHCIRegister::~CDWHCIRegister()>
    974c:	e28dd02c 	add	sp, sp, #44	; 0x2c
    9750:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    9754:	e3001414 	movw	r1, #1044	; 0x414
    9758:	e3431f98 	movt	r1, #16280	; 0x3f98
    975c:	e28d0010 	add	r0, sp, #16
    9760:	eb0004c0 	bl	aa68 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    9764:	e28d0010 	add	r0, sp, #16
    9768:	eb0004c7 	bl	aa8c <CDWHCIRegister::Read()>
    976c:	e28d0010 	add	r0, sp, #16
    9770:	eb0004cc 	bl	aaa8 <CDWHCIRegister::Write()>
    9774:	e596300c 	ldr	r3, [r6, #12]
    9778:	e3530000 	cmp	r3, #0
    977c:	0a000019 	beq	97e8 <CDWHCIDevice::InterruptHandler()+0xe0>
    9780:	e300750c 	movw	r7, #1292	; 0x50c
    9784:	e3437f98 	movt	r7, #16280	; 0x3f98
    9788:	e3a04000 	mov	r4, #0
    978c:	e3a05001 	mov	r5, #1
    9790:	ea000004 	b	97a8 <CDWHCIDevice::InterruptHandler()+0xa0>
    9794:	e596300c 	ldr	r3, [r6, #12]
    9798:	e2844001 	add	r4, r4, #1
    979c:	e1a05085 	lsl	r5, r5, #1
    97a0:	e1530004 	cmp	r3, r4
    97a4:	9a00000f 	bls	97e8 <CDWHCIDevice::InterruptHandler()+0xe0>
    97a8:	e28d0010 	add	r0, sp, #16
    97ac:	eb0004cc 	bl	aae4 <CDWHCIRegister::Get() const>
    97b0:	e1100005 	tst	r0, r5
    97b4:	0afffff6 	beq	9794 <CDWHCIDevice::InterruptHandler()+0x8c>
    97b8:	e3a02000 	mov	r2, #0
    97bc:	e0871284 	add	r1, r7, r4, lsl #5
    97c0:	e28d001c 	add	r0, sp, #28
    97c4:	eb0004ab 	bl	aa78 <CDWHCIRegister::CDWHCIRegister(unsigned int, unsigned int)>
    97c8:	e28d001c 	add	r0, sp, #28
    97cc:	eb0004b5 	bl	aaa8 <CDWHCIRegister::Write()>
    97d0:	e5d63089 	ldrb	r3, [r6, #137]	; 0x89
    97d4:	e3530000 	cmp	r3, #0
    97d8:	0a000005 	beq	97f4 <CDWHCIDevice::InterruptHandler()+0xec>
    97dc:	e28d001c 	add	r0, sp, #28
    97e0:	eb0004a8 	bl	aa88 <CDWHCIRegister::~CDWHCIRegister()>
    97e4:	eaffffea 	b	9794 <CDWHCIDevice::InterruptHandler()+0x8c>
    97e8:	e28d0010 	add	r0, sp, #16
    97ec:	eb0004a5 	bl	aa88 <CDWHCIRegister::~CDWHCIRegister()>
    97f0:	eaffffd1 	b	973c <CDWHCIDevice::InterruptHandler()+0x34>
    97f4:	e1a01004 	mov	r1, r4
    97f8:	e1a00006 	mov	r0, r6
    97fc:	ebfffe76 	bl	91dc <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.3]>
    9800:	eafffff5 	b	97dc <CDWHCIDevice::InterruptHandler()+0xd4>

00009804 <CDWHCIDevice::InterruptStub(void*)>:
    9804:	e92d4010 	push	{r4, lr}
    9808:	e2504000 	subs	r4, r0, #0
    980c:	0a000002 	beq	981c <CDWHCIDevice::InterruptStub(void*)+0x18>
    9810:	e1a00004 	mov	r0, r4
    9814:	e8bd4010 	pop	{r4, lr}
    9818:	eaffffba 	b	9708 <CDWHCIDevice::InterruptHandler()>
    981c:	e3041210 	movw	r1, #16912	; 0x4210
    9820:	e3401002 	movt	r1, #2
    9824:	e3040220 	movw	r0, #16928	; 0x4220
    9828:	e3400002 	movt	r0, #2
    982c:	e3002526 	movw	r2, #1318	; 0x526
    9830:	eb003f07 	bl	19454 <assertion_failed>
    9834:	e1a00004 	mov	r0, r4
    9838:	e8bd4010 	pop	{r4, lr}
    983c:	eaffffb1 	b	9708 <CDWHCIDevice::InterruptHandler()>

00009840 <CDWHCIDevice::AllocateWaitBlock()>:
    9840:	e92d4070 	push	{r4, r5, r6, lr}
    9844:	e2806078 	add	r6, r0, #120	; 0x78
    9848:	e1a05000 	mov	r5, r0
    984c:	e1a00006 	mov	r0, r6
    9850:	e3a04000 	mov	r4, #0
    9854:	eb005495 	bl	1eab0 <CSpinLock::Acquire()>
    9858:	e3a03001 	mov	r3, #1
    985c:	ea000003 	b	9870 <CDWHCIDevice::AllocateWaitBlock()+0x30>
    9860:	e2844001 	add	r4, r4, #1
    9864:	e1a03083 	lsl	r3, r3, #1
    9868:	e3540010 	cmp	r4, #16
    986c:	0a000009 	beq	9898 <CDWHCIDevice::AllocateWaitBlock()+0x58>
    9870:	e5952074 	ldr	r2, [r5, #116]	; 0x74
    9874:	e1120003 	tst	r2, r3
    9878:	1afffff8 	bne	9860 <CDWHCIDevice::AllocateWaitBlock()+0x20>
    987c:	e5952074 	ldr	r2, [r5, #116]	; 0x74
    9880:	e1a00006 	mov	r0, r6
    9884:	e1823003 	orr	r3, r2, r3
    9888:	e5853074 	str	r3, [r5, #116]	; 0x74
    988c:	eb00549e 	bl	1eb0c <CSpinLock::Release()>
    9890:	e1a00004 	mov	r0, r4
    9894:	e8bd8070 	pop	{r4, r5, r6, pc}
    9898:	e1a00006 	mov	r0, r6
    989c:	eb00549a 	bl	1eb0c <CSpinLock::Release()>
    98a0:	e1a00004 	mov	r0, r4
    98a4:	e8bd8070 	pop	{r4, r5, r6, pc}

000098a8 <CDWHCIDevice::FreeWaitBlock(unsigned int)>:
    98a8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    98ac:	e351000f 	cmp	r1, #15
    98b0:	e1a07001 	mov	r7, r1
    98b4:	e1a04000 	mov	r4, r0
    98b8:	8a000013 	bhi	990c <CDWHCIDevice::FreeWaitBlock(unsigned int)+0x64>
    98bc:	e2846078 	add	r6, r4, #120	; 0x78
    98c0:	e3a05001 	mov	r5, #1
    98c4:	e1a00006 	mov	r0, r6
    98c8:	eb005478 	bl	1eab0 <CSpinLock::Acquire()>
    98cc:	e5943074 	ldr	r3, [r4, #116]	; 0x74
    98d0:	e1a05715 	lsl	r5, r5, r7
    98d4:	e1130005 	tst	r3, r5
    98d8:	1a000005 	bne	98f4 <CDWHCIDevice::FreeWaitBlock(unsigned int)+0x4c>
    98dc:	e3041210 	movw	r1, #16912	; 0x4210
    98e0:	e3401002 	movt	r1, #2
    98e4:	e304045c 	movw	r0, #17500	; 0x445c
    98e8:	e3400002 	movt	r0, #2
    98ec:	e3002596 	movw	r2, #1430	; 0x596
    98f0:	eb003ed7 	bl	19454 <assertion_failed>
    98f4:	e5943074 	ldr	r3, [r4, #116]	; 0x74
    98f8:	e1a00006 	mov	r0, r6
    98fc:	e1c35005 	bic	r5, r3, r5
    9900:	e5845074 	str	r5, [r4, #116]	; 0x74
    9904:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    9908:	ea00547f 	b	1eb0c <CSpinLock::Release()>
    990c:	e3041210 	movw	r1, #16912	; 0x4210
    9910:	e3401002 	movt	r1, #2
    9914:	e304022c 	movw	r0, #16940	; 0x422c
    9918:	e3400002 	movt	r0, #2
    991c:	e3002591 	movw	r2, #1425	; 0x591
    9920:	eb003ecb 	bl	19454 <assertion_failed>
    9924:	eaffffe4 	b	98bc <CDWHCIDevice::FreeWaitBlock(unsigned int)+0x14>

00009928 <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)>:
    9928:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
    992c:	e1a08002 	mov	r8, r2
    9930:	e1a07001 	mov	r7, r1
    9934:	e24dd00c 	sub	sp, sp, #12
    9938:	e1a09003 	mov	r9, r3
    993c:	e1a06000 	mov	r6, r0
    9940:	ebffffbe 	bl	9840 <CDWHCIDevice::AllocateWaitBlock()>
    9944:	e350000f 	cmp	r0, #15
    9948:	83a08000 	movhi	r8, #0
    994c:	8a000021 	bhi	99d8 <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)+0xb0>
    9950:	e1a05000 	mov	r5, r0
    9954:	e3570000 	cmp	r7, #0
    9958:	0a00002f 	beq	9a1c <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)+0xf4>
    995c:	e0864005 	add	r4, r6, r5
    9960:	e1a03006 	mov	r3, r6
    9964:	e30813dc 	movw	r1, #33756	; 0x83dc
    9968:	e3401000 	movt	r1, #0
    996c:	e1a02005 	mov	r2, r5
    9970:	e1a00007 	mov	r0, r7
    9974:	eb000dc7 	bl	d098 <CUSBRequest::SetCompletionRoutine(void (*)(CUSBRequest*, void*, void*), void*, void*)>
    9978:	e5d43064 	ldrb	r3, [r4, #100]	; 0x64
    997c:	e3530000 	cmp	r3, #0
    9980:	1a000017 	bne	99e4 <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)+0xbc>
    9984:	e59d3028 	ldr	r3, [sp, #40]	; 0x28
    9988:	e1a02008 	mov	r2, r8
    998c:	e58d3000 	str	r3, [sp]
    9990:	e3a00001 	mov	r0, #1
    9994:	e1a03009 	mov	r3, r9
    9998:	e5c40064 	strb	r0, [r4, #100]	; 0x64
    999c:	e1a01007 	mov	r1, r7
    99a0:	e1a00006 	mov	r0, r6
    99a4:	ebfffd72 	bl	8f74 <CDWHCIDevice::TransferStageAsync(CUSBRequest*, bool, bool, unsigned int)>
    99a8:	e2508000 	subs	r8, r0, #0
    99ac:	0a000013 	beq	9a00 <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)+0xd8>
    99b0:	e5d43064 	ldrb	r3, [r4, #100]	; 0x64
    99b4:	e3530000 	cmp	r3, #0
    99b8:	1afffffc 	bne	99b0 <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)+0x88>
    99bc:	e1a01005 	mov	r1, r5
    99c0:	e1a00006 	mov	r0, r6
    99c4:	ebffffb7 	bl	98a8 <CDWHCIDevice::FreeWaitBlock(unsigned int)>
    99c8:	e1a00007 	mov	r0, r7
    99cc:	eb000d75 	bl	cfa8 <CUSBRequest::GetStatus() const>
    99d0:	e2908000 	adds	r8, r0, #0
    99d4:	13a08001 	movne	r8, #1
    99d8:	e1a00008 	mov	r0, r8
    99dc:	e28dd00c 	add	sp, sp, #12
    99e0:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
    99e4:	e3041210 	movw	r1, #16912	; 0x4210
    99e8:	e3401002 	movt	r1, #2
    99ec:	e3040484 	movw	r0, #17540	; 0x4484
    99f0:	e3400002 	movt	r0, #2
    99f4:	e3002287 	movw	r2, #647	; 0x287
    99f8:	eb003e95 	bl	19454 <assertion_failed>
    99fc:	eaffffe0 	b	9984 <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)+0x5c>
    9a00:	e1a00006 	mov	r0, r6
    9a04:	e5c48064 	strb	r8, [r4, #100]	; 0x64
    9a08:	e1a01005 	mov	r1, r5
    9a0c:	ebffffa5 	bl	98a8 <CDWHCIDevice::FreeWaitBlock(unsigned int)>
    9a10:	e1a00008 	mov	r0, r8
    9a14:	e28dd00c 	add	sp, sp, #12
    9a18:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
    9a1c:	e3041210 	movw	r1, #16912	; 0x4210
    9a20:	e3401002 	movt	r1, #2
    9a24:	e304030c 	movw	r0, #17164	; 0x430c
    9a28:	e3400002 	movt	r0, #2
    9a2c:	e3a02fa1 	mov	r2, #644	; 0x284
    9a30:	eb003e87 	bl	19454 <assertion_failed>
    9a34:	eaffffc8 	b	995c <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)+0x34>

00009a38 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)>:
    9a38:	e5d03089 	ldrb	r3, [r0, #137]	; 0x89
    9a3c:	e3530000 	cmp	r3, #0
    9a40:	1a000027 	bne	9ae4 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0xac>
    9a44:	e92d4070 	push	{r4, r5, r6, lr}
    9a48:	e3510000 	cmp	r1, #0
    9a4c:	e1a06002 	mov	r6, r2
    9a50:	e24dd008 	sub	sp, sp, #8
    9a54:	e1a04001 	mov	r4, r1
    9a58:	e1a05000 	mov	r5, r0
    9a5c:	0a00004a 	beq	9b8c <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x154>
    9a60:	e3a01000 	mov	r1, #0
    9a64:	e1a00004 	mov	r0, r4
    9a68:	eb000d4a 	bl	cf98 <CUSBRequest::SetStatus(int)>
    9a6c:	e1a00004 	mov	r0, r4
    9a70:	eb000d38 	bl	cf58 <CUSBRequest::GetEndpoint() const>
    9a74:	eb000c23 	bl	cb08 <CUSBEndpoint::GetType() const>
    9a78:	e3500000 	cmp	r0, #0
    9a7c:	1a00001a 	bne	9aec <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0xb4>
    9a80:	e3560000 	cmp	r6, #0
    9a84:	1a000062 	bne	9c14 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x1dc>
    9a88:	e1a00004 	mov	r0, r4
    9a8c:	eb000d54 	bl	cfe4 <CUSBRequest::GetSetupData()>
    9a90:	e2506000 	subs	r6, r0, #0
    9a94:	0a000065 	beq	9c30 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x1f8>
    9a98:	e1d630d0 	ldrsb	r3, [r6]
    9a9c:	e1a00004 	mov	r0, r4
    9aa0:	e3530000 	cmp	r3, #0
    9aa4:	ba00003f 	blt	9ba8 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x170>
    9aa8:	eb000d78 	bl	d090 <CUSBRequest::GetBufLen() const>
    9aac:	e2506000 	subs	r6, r0, #0
    9ab0:	0a000026 	beq	9b50 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x118>
    9ab4:	e3a06000 	mov	r6, #0
    9ab8:	e1a01004 	mov	r1, r4
    9abc:	e58d6000 	str	r6, [sp]
    9ac0:	e1a03006 	mov	r3, r6
    9ac4:	e1a02006 	mov	r2, r6
    9ac8:	e1a00005 	mov	r0, r5
    9acc:	ebffff95 	bl	9928 <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)>
    9ad0:	e1500006 	cmp	r0, r6
    9ad4:	1a000071 	bne	9ca0 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x268>
    9ad8:	e3a00000 	mov	r0, #0
    9adc:	e28dd008 	add	sp, sp, #8
    9ae0:	e8bd8070 	pop	{r4, r5, r6, pc}
    9ae4:	e3a00000 	mov	r0, #0
    9ae8:	e12fff1e 	bx	lr
    9aec:	e1a00004 	mov	r0, r4
    9af0:	eb000d18 	bl	cf58 <CUSBRequest::GetEndpoint() const>
    9af4:	eb000c03 	bl	cb08 <CUSBEndpoint::GetType() const>
    9af8:	e3500001 	cmp	r0, #1
    9afc:	0a000004 	beq	9b14 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0xdc>
    9b00:	e1a00004 	mov	r0, r4
    9b04:	eb000d13 	bl	cf58 <CUSBRequest::GetEndpoint() const>
    9b08:	eb000bfe 	bl	cb08 <CUSBEndpoint::GetType() const>
    9b0c:	e3500002 	cmp	r0, #2
    9b10:	1a000054 	bne	9c68 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x230>
    9b14:	e1a00004 	mov	r0, r4
    9b18:	eb000d5c 	bl	d090 <CUSBRequest::GetBufLen() const>
    9b1c:	e3500000 	cmp	r0, #0
    9b20:	0a000049 	beq	9c4c <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x214>
    9b24:	e1a00004 	mov	r0, r4
    9b28:	eb000d0a 	bl	cf58 <CUSBRequest::GetEndpoint() const>
    9b2c:	eb000bf7 	bl	cb10 <CUSBEndpoint::IsDirectionIn() const>
    9b30:	e58d6000 	str	r6, [sp]
    9b34:	e1a02000 	mov	r2, r0
    9b38:	e1a01004 	mov	r1, r4
    9b3c:	e1a00005 	mov	r0, r5
    9b40:	e3a03000 	mov	r3, #0
    9b44:	ebffff77 	bl	9928 <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)>
    9b48:	e28dd008 	add	sp, sp, #8
    9b4c:	e8bd8070 	pop	{r4, r5, r6, pc}
    9b50:	e58d6000 	str	r6, [sp]
    9b54:	e1a03006 	mov	r3, r6
    9b58:	e1a02006 	mov	r2, r6
    9b5c:	e1a01004 	mov	r1, r4
    9b60:	e1a00005 	mov	r0, r5
    9b64:	ebffff6f 	bl	9928 <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)>
    9b68:	e3500000 	cmp	r0, #0
    9b6c:	0affffd9 	beq	9ad8 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0xa0>
    9b70:	e3a03001 	mov	r3, #1
    9b74:	e58d6000 	str	r6, [sp]
    9b78:	e1a01004 	mov	r1, r4
    9b7c:	e1a00005 	mov	r0, r5
    9b80:	e1a02003 	mov	r2, r3
    9b84:	ebffff67 	bl	9928 <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)>
    9b88:	eaffffd3 	b	9adc <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0xa4>
    9b8c:	e3041210 	movw	r1, #16912	; 0x4210
    9b90:	e3401002 	movt	r1, #2
    9b94:	e304030c 	movw	r0, #17164	; 0x430c
    9b98:	e3400002 	movt	r0, #2
    9b9c:	e3a020cf 	mov	r2, #207	; 0xcf
    9ba0:	eb003e2b 	bl	19454 <assertion_failed>
    9ba4:	eaffffad 	b	9a60 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x28>
    9ba8:	eb000d38 	bl	d090 <CUSBRequest::GetBufLen() const>
    9bac:	e3500000 	cmp	r0, #0
    9bb0:	0a000033 	beq	9c84 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x24c>
    9bb4:	e3a06000 	mov	r6, #0
    9bb8:	e1a01004 	mov	r1, r4
    9bbc:	e58d6000 	str	r6, [sp]
    9bc0:	e1a03006 	mov	r3, r6
    9bc4:	e1a02006 	mov	r2, r6
    9bc8:	e1a00005 	mov	r0, r5
    9bcc:	ebffff55 	bl	9928 <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)>
    9bd0:	e1500006 	cmp	r0, r6
    9bd4:	0affffbf 	beq	9ad8 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0xa0>
    9bd8:	e58d6000 	str	r6, [sp]
    9bdc:	e1a03006 	mov	r3, r6
    9be0:	e3a02001 	mov	r2, #1
    9be4:	e1a01004 	mov	r1, r4
    9be8:	e1a00005 	mov	r0, r5
    9bec:	ebffff4d 	bl	9928 <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)>
    9bf0:	e1500006 	cmp	r0, r6
    9bf4:	0affffb7 	beq	9ad8 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0xa0>
    9bf8:	e58d6000 	str	r6, [sp]
    9bfc:	e1a02006 	mov	r2, r6
    9c00:	e1a01004 	mov	r1, r4
    9c04:	e1a00005 	mov	r0, r5
    9c08:	e3a03001 	mov	r3, #1
    9c0c:	ebffff45 	bl	9928 <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)>
    9c10:	eaffffb1 	b	9adc <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0xa4>
    9c14:	e3041210 	movw	r1, #16912	; 0x4210
    9c18:	e3401002 	movt	r1, #2
    9c1c:	e304049c 	movw	r0, #17564	; 0x449c
    9c20:	e3400002 	movt	r0, #2
    9c24:	e3a020d5 	mov	r2, #213	; 0xd5
    9c28:	eb003e09 	bl	19454 <assertion_failed>
    9c2c:	eaffff95 	b	9a88 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x50>
    9c30:	e3041210 	movw	r1, #16912	; 0x4210
    9c34:	e3401002 	movt	r1, #2
    9c38:	e30404bc 	movw	r0, #17596	; 0x44bc
    9c3c:	e3400002 	movt	r0, #2
    9c40:	e3a020d8 	mov	r2, #216	; 0xd8
    9c44:	eb003e02 	bl	19454 <assertion_failed>
    9c48:	eaffff92 	b	9a98 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x60>
    9c4c:	e3041210 	movw	r1, #16912	; 0x4210
    9c50:	e3401002 	movt	r1, #2
    9c54:	e30403a8 	movw	r0, #17320	; 0x43a8
    9c58:	e3400002 	movt	r0, #2
    9c5c:	e3a020fe 	mov	r2, #254	; 0xfe
    9c60:	eb003dfb 	bl	19454 <assertion_failed>
    9c64:	eaffffae 	b	9b24 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0xec>
    9c68:	e3041210 	movw	r1, #16912	; 0x4210
    9c6c:	e3401002 	movt	r1, #2
    9c70:	e3040334 	movw	r0, #17204	; 0x4334
    9c74:	e3400002 	movt	r0, #2
    9c78:	e3a020fd 	mov	r2, #253	; 0xfd
    9c7c:	eb003df4 	bl	19454 <assertion_failed>
    9c80:	eaffffa3 	b	9b14 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0xdc>
    9c84:	e3041210 	movw	r1, #16912	; 0x4210
    9c88:	e3401002 	movt	r1, #2
    9c8c:	e30403a8 	movw	r0, #17320	; 0x43a8
    9c90:	e3400002 	movt	r0, #2
    9c94:	e3a020dc 	mov	r2, #220	; 0xdc
    9c98:	eb003ded 	bl	19454 <assertion_failed>
    9c9c:	eaffffc4 	b	9bb4 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x17c>
    9ca0:	e58d6000 	str	r6, [sp]
    9ca4:	e1a03006 	mov	r3, r6
    9ca8:	e1a02006 	mov	r2, r6
    9cac:	e1a01004 	mov	r1, r4
    9cb0:	e1a00005 	mov	r0, r5
    9cb4:	ebffff1b 	bl	9928 <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)>
    9cb8:	e1500006 	cmp	r0, r6
    9cbc:	0affff85 	beq	9ad8 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0xa0>
    9cc0:	eaffffaa 	b	9b70 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x138>

00009cc4 <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)>:
    9cc4:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    9cc8:	e1a08000 	mov	r8, r0
    9ccc:	e1a06002 	mov	r6, r2
    9cd0:	e1a05003 	mov	r5, r3
    9cd4:	e2517000 	subs	r7, r1, #0
    9cd8:	e59d4020 	ldr	r4, [sp, #32]
    9cdc:	0a000030 	beq	9da4 <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)+0xe0>
    9ce0:	e3560000 	cmp	r6, #0
    9ce4:	0a000027 	beq	9d88 <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)+0xc4>
    9ce8:	e3540000 	cmp	r4, #0
    9cec:	0a00001e 	beq	9d6c <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)+0xa8>
    9cf0:	e304a210 	movw	sl, #16912	; 0x4210
    9cf4:	e340a002 	movt	sl, #2
    9cf8:	e2259001 	eor	r9, r5, #1
    9cfc:	ea000003 	b	9d10 <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)+0x4c>
    9d00:	e3a00001 	mov	r0, #1
    9d04:	eb005b06 	bl	20924 <CTimer::SimpleMsDelay(unsigned int)>
    9d08:	e2544001 	subs	r4, r4, #1
    9d0c:	0a000012 	beq	9d5c <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)+0x98>
    9d10:	e1a00007 	mov	r0, r7
    9d14:	eb00035c 	bl	aa8c <CDWHCIRegister::Read()>
    9d18:	e1100006 	tst	r0, r6
    9d1c:	e1a03005 	mov	r3, r5
    9d20:	11a03009 	movne	r3, r9
    9d24:	e3530000 	cmp	r3, #0
    9d28:	0a00000d 	beq	9d64 <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)+0xa0>
    9d2c:	e5983008 	ldr	r3, [r8, #8]
    9d30:	e3530000 	cmp	r3, #0
    9d34:	1afffff1 	bne	9d00 <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)+0x3c>
    9d38:	e30025a7 	movw	r2, #1447	; 0x5a7
    9d3c:	e1a0100a 	mov	r1, sl
    9d40:	e3040270 	movw	r0, #17008	; 0x4270
    9d44:	e3400002 	movt	r0, #2
    9d48:	eb003dc1 	bl	19454 <assertion_failed>
    9d4c:	e3a00001 	mov	r0, #1
    9d50:	eb005af3 	bl	20924 <CTimer::SimpleMsDelay(unsigned int)>
    9d54:	e2544001 	subs	r4, r4, #1
    9d58:	1affffec 	bne	9d10 <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)+0x4c>
    9d5c:	e1a00004 	mov	r0, r4
    9d60:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    9d64:	e3a00001 	mov	r0, #1
    9d68:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    9d6c:	e3041210 	movw	r1, #16912	; 0x4210
    9d70:	e3401002 	movt	r1, #2
    9d74:	e30404e4 	movw	r0, #17636	; 0x44e4
    9d78:	e3400002 	movt	r0, #2
    9d7c:	e30025a3 	movw	r2, #1443	; 0x5a3
    9d80:	eb003db3 	bl	19454 <assertion_failed>
    9d84:	eaffffd9 	b	9cf0 <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)+0x2c>
    9d88:	e3041210 	movw	r1, #16912	; 0x4210
    9d8c:	e3401002 	movt	r1, #2
    9d90:	e30404d8 	movw	r0, #17624	; 0x44d8
    9d94:	e3400002 	movt	r0, #2
    9d98:	e30025a2 	movw	r2, #1442	; 0x5a2
    9d9c:	eb003dac 	bl	19454 <assertion_failed>
    9da0:	eaffffd0 	b	9ce8 <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)+0x24>
    9da4:	e3041210 	movw	r1, #16912	; 0x4210
    9da8:	e3401002 	movt	r1, #2
    9dac:	e30404c8 	movw	r0, #17608	; 0x44c8
    9db0:	e3400002 	movt	r0, #2
    9db4:	e30025a1 	movw	r2, #1441	; 0x5a1
    9db8:	eb003da5 	bl	19454 <assertion_failed>
    9dbc:	eaffffc7 	b	9ce0 <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)+0x1c>

00009dc0 <CDWHCIDevice::EnableRootPort()>:
    9dc0:	e92d4030 	push	{r4, r5, lr}
    9dc4:	e1a05000 	mov	r5, r0
    9dc8:	e24dd01c 	sub	sp, sp, #28
    9dcc:	eb0045b9 	bl	1b4b8 <CKernelOptions::Get()>
    9dd0:	e3500000 	cmp	r0, #0
    9dd4:	0a00002d 	beq	9e90 <CDWHCIDevice::EnableRootPort()+0xd0>
    9dd8:	eb0045ab 	bl	1b48c <CKernelOptions::GetUSBPowerDelay() const>
    9ddc:	e2504000 	subs	r4, r0, #0
    9de0:	0a00002a 	beq	9e90 <CDWHCIDevice::EnableRootPort()+0xd0>
    9de4:	e3a01d11 	mov	r1, #1088	; 0x440
    9de8:	e3431f98 	movt	r1, #16280	; 0x3f98
    9dec:	e28d000c 	add	r0, sp, #12
    9df0:	eb00031c 	bl	aa68 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    9df4:	e3a03001 	mov	r3, #1
    9df8:	e58d4000 	str	r4, [sp]
    9dfc:	e1a00005 	mov	r0, r5
    9e00:	e28d100c 	add	r1, sp, #12
    9e04:	e1a02003 	mov	r2, r3
    9e08:	ebffffad 	bl	9cc4 <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)>
    9e0c:	e2504000 	subs	r4, r0, #0
    9e10:	0a000019 	beq	9e7c <CDWHCIDevice::EnableRootPort()+0xbc>
    9e14:	e3a00064 	mov	r0, #100	; 0x64
    9e18:	eb005ac1 	bl	20924 <CTimer::SimpleMsDelay(unsigned int)>
    9e1c:	e28d000c 	add	r0, sp, #12
    9e20:	eb000319 	bl	aa8c <CDWHCIRegister::Read()>
    9e24:	e3e0102e 	mvn	r1, #46	; 0x2e
    9e28:	e28d000c 	add	r0, sp, #12
    9e2c:	eb00034e 	bl	ab6c <CDWHCIRegister::And(unsigned int)>
    9e30:	e3a01c01 	mov	r1, #256	; 0x100
    9e34:	e28d000c 	add	r0, sp, #12
    9e38:	eb00035b 	bl	abac <CDWHCIRegister::Or(unsigned int)>
    9e3c:	e28d000c 	add	r0, sp, #12
    9e40:	eb000318 	bl	aaa8 <CDWHCIRegister::Write()>
    9e44:	e3a00032 	mov	r0, #50	; 0x32
    9e48:	eb005ab5 	bl	20924 <CTimer::SimpleMsDelay(unsigned int)>
    9e4c:	e28d000c 	add	r0, sp, #12
    9e50:	eb00030d 	bl	aa8c <CDWHCIRegister::Read()>
    9e54:	e3e0102e 	mvn	r1, #46	; 0x2e
    9e58:	e28d000c 	add	r0, sp, #12
    9e5c:	eb000342 	bl	ab6c <CDWHCIRegister::And(unsigned int)>
    9e60:	e3e01c01 	mvn	r1, #256	; 0x100
    9e64:	e28d000c 	add	r0, sp, #12
    9e68:	eb00033f 	bl	ab6c <CDWHCIRegister::And(unsigned int)>
    9e6c:	e28d000c 	add	r0, sp, #12
    9e70:	eb00030c 	bl	aaa8 <CDWHCIRegister::Write()>
    9e74:	e3a00014 	mov	r0, #20
    9e78:	eb005aa9 	bl	20924 <CTimer::SimpleMsDelay(unsigned int)>
    9e7c:	e28d000c 	add	r0, sp, #12
    9e80:	eb000300 	bl	aa88 <CDWHCIRegister::~CDWHCIRegister()>
    9e84:	e1a00004 	mov	r0, r4
    9e88:	e28dd01c 	add	sp, sp, #28
    9e8c:	e8bd8030 	pop	{r4, r5, pc}
    9e90:	e30041fe 	movw	r4, #510	; 0x1fe
    9e94:	eaffffd2 	b	9de4 <CDWHCIDevice::EnableRootPort()+0x24>

00009e98 <CDWHCIDevice::ReScanDevices()>:
    9e98:	e5d02088 	ldrb	r2, [r0, #136]	; 0x88
    9e9c:	e92d4010 	push	{r4, lr}
    9ea0:	e1a04000 	mov	r4, r0
    9ea4:	e3520000 	cmp	r2, #0
    9ea8:	1a00000c 	bne	9ee0 <CDWHCIDevice::ReScanDevices()+0x48>
    9eac:	ebffffc3 	bl	9dc0 <CDWHCIDevice::EnableRootPort()>
    9eb0:	e3500000 	cmp	r0, #0
    9eb4:	0a00000c 	beq	9eec <CDWHCIDevice::ReScanDevices()+0x54>
    9eb8:	e3a03001 	mov	r3, #1
    9ebc:	e2840080 	add	r0, r4, #128	; 0x80
    9ec0:	e5c43088 	strb	r3, [r4, #136]	; 0x88
    9ec4:	eb001717 	bl	fb28 <CDWHCIRootPort::Initialize()>
    9ec8:	e3500000 	cmp	r0, #0
    9ecc:	18bd8010 	popne	{r4, pc}
    9ed0:	eb0047bd 	bl	1bdcc <CLogger::Get()>
    9ed4:	e30434f4 	movw	r3, #17652	; 0x44f4
    9ed8:	e3403002 	movt	r3, #2
    9edc:	ea000005 	b	9ef8 <CDWHCIDevice::ReScanDevices()+0x60>
    9ee0:	e2800080 	add	r0, r0, #128	; 0x80
    9ee4:	e8bd4010 	pop	{r4, lr}
    9ee8:	ea001777 	b	fccc <CDWHCIRootPort::ReScanDevices()>
    9eec:	eb0047b6 	bl	1bdcc <CLogger::Get()>
    9ef0:	e3043510 	movw	r3, #17680	; 0x4510
    9ef4:	e3403002 	movt	r3, #2
    9ef8:	e30411ec 	movw	r1, #16876	; 0x41ec
    9efc:	e3401002 	movt	r1, #2
    9f00:	e3a02002 	mov	r2, #2
    9f04:	e8bd4010 	pop	{r4, lr}
    9f08:	ea0046e6 	b	1baa8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>

00009f0c <CDWHCIDevice::Reset()>:
    9f0c:	e92d4030 	push	{r4, r5, lr}
    9f10:	e3a02000 	mov	r2, #0
    9f14:	e1a04000 	mov	r4, r0
    9f18:	e24dd01c 	sub	sp, sp, #28
    9f1c:	e3a01010 	mov	r1, #16
    9f20:	e3431f98 	movt	r1, #16280	; 0x3f98
    9f24:	e28d000c 	add	r0, sp, #12
    9f28:	e3a05064 	mov	r5, #100	; 0x64
    9f2c:	eb0002d1 	bl	aa78 <CDWHCIRegister::CDWHCIRegister(unsigned int, unsigned int)>
    9f30:	e28d100c 	add	r1, sp, #12
    9f34:	e1a00004 	mov	r0, r4
    9f38:	e58d5000 	str	r5, [sp]
    9f3c:	e3a03001 	mov	r3, #1
    9f40:	e3a02102 	mov	r2, #-2147483648	; 0x80000000
    9f44:	ebffff5e 	bl	9cc4 <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)>
    9f48:	e3500000 	cmp	r0, #0
    9f4c:	1a000005 	bne	9f68 <CDWHCIDevice::Reset()+0x5c>
    9f50:	e3a04000 	mov	r4, #0
    9f54:	e28d000c 	add	r0, sp, #12
    9f58:	eb0002ca 	bl	aa88 <CDWHCIRegister::~CDWHCIRegister()>
    9f5c:	e1a00004 	mov	r0, r4
    9f60:	e28dd01c 	add	sp, sp, #28
    9f64:	e8bd8030 	pop	{r4, r5, pc}
    9f68:	e3a01001 	mov	r1, #1
    9f6c:	e28d000c 	add	r0, sp, #12
    9f70:	eb00030d 	bl	abac <CDWHCIRegister::Or(unsigned int)>
    9f74:	e28d000c 	add	r0, sp, #12
    9f78:	eb0002ca 	bl	aaa8 <CDWHCIRegister::Write()>
    9f7c:	e1a00004 	mov	r0, r4
    9f80:	e3a0200a 	mov	r2, #10
    9f84:	e3a03000 	mov	r3, #0
    9f88:	e58d2000 	str	r2, [sp]
    9f8c:	e28d100c 	add	r1, sp, #12
    9f90:	e3a02001 	mov	r2, #1
    9f94:	ebffff4a 	bl	9cc4 <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)>
    9f98:	e2504000 	subs	r4, r0, #0
    9f9c:	0affffeb 	beq	9f50 <CDWHCIDevice::Reset()+0x44>
    9fa0:	e1a00005 	mov	r0, r5
    9fa4:	eb005a5e 	bl	20924 <CTimer::SimpleMsDelay(unsigned int)>
    9fa8:	eaffffe9 	b	9f54 <CDWHCIDevice::Reset()+0x48>

00009fac <CDWHCIDevice::~CDWHCIDevice()>:
    9fac:	e92d4030 	push	{r4, r5, lr}
    9fb0:	e3a02001 	mov	r2, #1
    9fb4:	e5903008 	ldr	r3, [r0, #8]
    9fb8:	e59f10f4 	ldr	r1, [pc, #244]	; a0b4 <CDWHCIDevice::~CDWHCIDevice()+0x108>
    9fbc:	e24dd02c 	sub	sp, sp, #44	; 0x2c
    9fc0:	e1a04000 	mov	r4, r0
    9fc4:	e5801000 	str	r1, [r0]
    9fc8:	e5c02089 	strb	r2, [r0, #137]	; 0x89
    9fcc:	e3530000 	cmp	r3, #0
    9fd0:	0a000030 	beq	a098 <CDWHCIDevice::~CDWHCIDevice()+0xec>
    9fd4:	e3a000c8 	mov	r0, #200	; 0xc8
    9fd8:	eb005a51 	bl	20924 <CTimer::SimpleMsDelay(unsigned int)>
    9fdc:	e5940004 	ldr	r0, [r4, #4]
    9fe0:	e3500000 	cmp	r0, #0
    9fe4:	0a000023 	beq	a078 <CDWHCIDevice::~CDWHCIDevice()+0xcc>
    9fe8:	e3a01009 	mov	r1, #9
    9fec:	e3a05000 	mov	r5, #0
    9ff0:	eb00445d 	bl	1b16c <CInterruptSystem::DisconnectIRQ(unsigned int)>
    9ff4:	e1a00004 	mov	r0, r4
    9ff8:	ebffffc3 	bl	9f0c <CDWHCIDevice::Reset()>
    9ffc:	e28d000c 	add	r0, sp, #12
    a000:	e3a01000 	mov	r1, #0
    a004:	eb003d36 	bl	194e4 <CBcmPropertyTags::CBcmPropertyTags(bool)>
    a008:	e3a03014 	mov	r3, #20
    a00c:	e08d2003 	add	r2, sp, r3
    a010:	e28d000c 	add	r0, sp, #12
    a014:	e58d5000 	str	r5, [sp]
    a018:	e3081001 	movw	r1, #32769	; 0x8001
    a01c:	e3401002 	movt	r1, #2
    a020:	e3a0c003 	mov	ip, #3
    a024:	e58dc020 	str	ip, [sp, #32]
    a028:	e3a0c002 	mov	ip, #2
    a02c:	e58dc024 	str	ip, [sp, #36]	; 0x24
    a030:	eb003d78 	bl	19618 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
    a034:	e5845004 	str	r5, [r4, #4]
    a038:	e5845008 	str	r5, [r4, #8]
    a03c:	e28d000c 	add	r0, sp, #12
    a040:	eb003d2e 	bl	19500 <CBcmPropertyTags::~CBcmPropertyTags()>
    a044:	e2840080 	add	r0, r4, #128	; 0x80
    a048:	eb0016aa 	bl	faf8 <CDWHCIRootPort::~CDWHCIRootPort()>
    a04c:	e2840078 	add	r0, r4, #120	; 0x78
    a050:	eb005289 	bl	1ea7c <CSpinLock::~CSpinLock()>
    a054:	e284005c 	add	r0, r4, #92	; 0x5c
    a058:	eb005287 	bl	1ea7c <CSpinLock::~CSpinLock()>
    a05c:	e2840014 	add	r0, r4, #20
    a060:	eb005285 	bl	1ea7c <CSpinLock::~CSpinLock()>
    a064:	e1a00004 	mov	r0, r4
    a068:	eb000b12 	bl	ccb8 <CUSBHostController::~CUSBHostController()>
    a06c:	e1a00004 	mov	r0, r4
    a070:	e28dd02c 	add	sp, sp, #44	; 0x2c
    a074:	e8bd8030 	pop	{r4, r5, pc}
    a078:	e3041210 	movw	r1, #16912	; 0x4210
    a07c:	e3401002 	movt	r1, #2
    a080:	e3040258 	movw	r0, #16984	; 0x4258
    a084:	e3400002 	movt	r0, #2
    a088:	e3a02060 	mov	r2, #96	; 0x60
    a08c:	eb003cf0 	bl	19454 <assertion_failed>
    a090:	e5940004 	ldr	r0, [r4, #4]
    a094:	eaffffd3 	b	9fe8 <CDWHCIDevice::~CDWHCIDevice()+0x3c>
    a098:	e3041210 	movw	r1, #16912	; 0x4210
    a09c:	e3401002 	movt	r1, #2
    a0a0:	e3040270 	movw	r0, #17008	; 0x4270
    a0a4:	e3400002 	movt	r0, #2
    a0a8:	e3a0205d 	mov	r2, #93	; 0x5d
    a0ac:	eb003ce8 	bl	19454 <assertion_failed>
    a0b0:	eaffffc7 	b	9fd4 <CDWHCIDevice::~CDWHCIDevice()+0x28>
    a0b4:	000241fc 	.word	0x000241fc

0000a0b8 <CDWHCIDevice::~CDWHCIDevice()>:
    a0b8:	e92d4010 	push	{r4, lr}
    a0bc:	e1a04000 	mov	r4, r0
    a0c0:	ebffffb9 	bl	9fac <CDWHCIDevice::~CDWHCIDevice()>
    a0c4:	e1a00004 	mov	r0, r4
    a0c8:	e3a0108c 	mov	r1, #140	; 0x8c
    a0cc:	eb005fef 	bl	22090 <operator delete(void*, unsigned int)>
    a0d0:	e1a00004 	mov	r0, r4
    a0d4:	e8bd8010 	pop	{r4, pc}

0000a0d8 <CDWHCIDevice::InitCore()>:
    a0d8:	e92d4030 	push	{r4, r5, lr}
    a0dc:	e3a0100c 	mov	r1, #12
    a0e0:	e3431f98 	movt	r1, #16280	; 0x3f98
    a0e4:	e24dd02c 	sub	sp, sp, #44	; 0x2c
    a0e8:	e1a04000 	mov	r4, r0
    a0ec:	e28d0004 	add	r0, sp, #4
    a0f0:	eb00025c 	bl	aa68 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    a0f4:	e28d0004 	add	r0, sp, #4
    a0f8:	eb000263 	bl	aa8c <CDWHCIRegister::Read()>
    a0fc:	e28d0004 	add	r0, sp, #4
    a100:	e3e01601 	mvn	r1, #1048576	; 0x100000
    a104:	eb000298 	bl	ab6c <CDWHCIRegister::And(unsigned int)>
    a108:	e3e01501 	mvn	r1, #4194304	; 0x400000
    a10c:	e28d0004 	add	r0, sp, #4
    a110:	eb000295 	bl	ab6c <CDWHCIRegister::And(unsigned int)>
    a114:	e28d0004 	add	r0, sp, #4
    a118:	eb000262 	bl	aaa8 <CDWHCIRegister::Write()>
    a11c:	e1a00004 	mov	r0, r4
    a120:	ebffff79 	bl	9f0c <CDWHCIDevice::Reset()>
    a124:	e2505000 	subs	r5, r0, #0
    a128:	0a00005b 	beq	a29c <CDWHCIDevice::InitCore()+0x1c4>
    a12c:	e28d0004 	add	r0, sp, #4
    a130:	eb000255 	bl	aa8c <CDWHCIRegister::Read()>
    a134:	e3e01010 	mvn	r1, #16
    a138:	e28d0004 	add	r0, sp, #4
    a13c:	eb00028a 	bl	ab6c <CDWHCIRegister::And(unsigned int)>
    a140:	e3e01008 	mvn	r1, #8
    a144:	e28d0004 	add	r0, sp, #4
    a148:	eb000287 	bl	ab6c <CDWHCIRegister::And(unsigned int)>
    a14c:	e28d0004 	add	r0, sp, #4
    a150:	eb000254 	bl	aaa8 <CDWHCIRegister::Write()>
    a154:	e28d0010 	add	r0, sp, #16
    a158:	e3a01048 	mov	r1, #72	; 0x48
    a15c:	e3431f98 	movt	r1, #16280	; 0x3f98
    a160:	eb000240 	bl	aa68 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    a164:	e28d0010 	add	r0, sp, #16
    a168:	eb000247 	bl	aa8c <CDWHCIRegister::Read()>
    a16c:	e28d0010 	add	r0, sp, #16
    a170:	eb00025b 	bl	aae4 <CDWHCIRegister::Get() const>
    a174:	e7e101d0 	ubfx	r0, r0, #3, #2
    a178:	e3500002 	cmp	r0, #2
    a17c:	1a00003f 	bne	a280 <CDWHCIDevice::InitCore()+0x1a8>
    a180:	e28d0004 	add	r0, sp, #4
    a184:	eb000240 	bl	aa8c <CDWHCIRegister::Read()>
    a188:	e28d0010 	add	r0, sp, #16
    a18c:	eb000254 	bl	aae4 <CDWHCIRegister::Get() const>
    a190:	e7e10350 	ubfx	r0, r0, #6, #2
    a194:	e3500002 	cmp	r0, #2
    a198:	0a000047 	beq	a2bc <CDWHCIDevice::InitCore()+0x1e4>
    a19c:	e3e01802 	mvn	r1, #131072	; 0x20000
    a1a0:	e28d0004 	add	r0, sp, #4
    a1a4:	eb000270 	bl	ab6c <CDWHCIRegister::And(unsigned int)>
    a1a8:	e3e01702 	mvn	r1, #524288	; 0x80000
    a1ac:	e28d0004 	add	r0, sp, #4
    a1b0:	eb00026d 	bl	ab6c <CDWHCIRegister::And(unsigned int)>
    a1b4:	e28d0004 	add	r0, sp, #4
    a1b8:	eb00023a 	bl	aaa8 <CDWHCIRegister::Write()>
    a1bc:	e594300c 	ldr	r3, [r4, #12]
    a1c0:	e3530000 	cmp	r3, #0
    a1c4:	1a00004f 	bne	a308 <CDWHCIDevice::InitCore()+0x230>
    a1c8:	e28d0010 	add	r0, sp, #16
    a1cc:	eb000244 	bl	aae4 <CDWHCIRegister::Get() const>
    a1d0:	e7e30750 	ubfx	r0, r0, #14, #4
    a1d4:	e2403003 	sub	r3, r0, #3
    a1d8:	e2800001 	add	r0, r0, #1
    a1dc:	e353000c 	cmp	r3, #12
    a1e0:	e584000c 	str	r0, [r4, #12]
    a1e4:	8a000040 	bhi	a2ec <CDWHCIDevice::InitCore()+0x214>
    a1e8:	e3a01008 	mov	r1, #8
    a1ec:	e3431f98 	movt	r1, #16280	; 0x3f98
    a1f0:	e28d001c 	add	r0, sp, #28
    a1f4:	eb00021b 	bl	aa68 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    a1f8:	e28d001c 	add	r0, sp, #28
    a1fc:	eb000222 	bl	aa8c <CDWHCIRegister::Read()>
    a200:	e28d001c 	add	r0, sp, #28
    a204:	e3a01020 	mov	r1, #32
    a208:	eb000267 	bl	abac <CDWHCIRegister::Or(unsigned int)>
    a20c:	e28d001c 	add	r0, sp, #28
    a210:	e3a01010 	mov	r1, #16
    a214:	eb000264 	bl	abac <CDWHCIRegister::Or(unsigned int)>
    a218:	e3e01006 	mvn	r1, #6
    a21c:	e28d001c 	add	r0, sp, #28
    a220:	eb000251 	bl	ab6c <CDWHCIRegister::And(unsigned int)>
    a224:	e28d001c 	add	r0, sp, #28
    a228:	eb00021e 	bl	aaa8 <CDWHCIRegister::Write()>
    a22c:	e28d0004 	add	r0, sp, #4
    a230:	eb000215 	bl	aa8c <CDWHCIRegister::Read()>
    a234:	e3e01c02 	mvn	r1, #512	; 0x200
    a238:	e28d0004 	add	r0, sp, #4
    a23c:	eb00024a 	bl	ab6c <CDWHCIRegister::And(unsigned int)>
    a240:	e3e01c01 	mvn	r1, #256	; 0x100
    a244:	e28d0004 	add	r0, sp, #4
    a248:	eb000247 	bl	ab6c <CDWHCIRegister::And(unsigned int)>
    a24c:	e28d0004 	add	r0, sp, #4
    a250:	eb000214 	bl	aaa8 <CDWHCIRegister::Write()>
    a254:	e1a00004 	mov	r0, r4
    a258:	ebfff92b 	bl	870c <CDWHCIDevice::EnableCommonInterrupts()>
    a25c:	e28d001c 	add	r0, sp, #28
    a260:	eb000208 	bl	aa88 <CDWHCIRegister::~CDWHCIRegister()>
    a264:	e28d0010 	add	r0, sp, #16
    a268:	eb000206 	bl	aa88 <CDWHCIRegister::~CDWHCIRegister()>
    a26c:	e28d0004 	add	r0, sp, #4
    a270:	eb000204 	bl	aa88 <CDWHCIRegister::~CDWHCIRegister()>
    a274:	e1a00005 	mov	r0, r5
    a278:	e28dd02c 	add	sp, sp, #44	; 0x2c
    a27c:	e8bd8030 	pop	{r4, r5, pc}
    a280:	e3041210 	movw	r1, #16912	; 0x4210
    a284:	e3401002 	movt	r1, #2
    a288:	e3040544 	movw	r0, #17732	; 0x4544
    a28c:	e3400002 	movt	r0, #2
    a290:	e3002169 	movw	r2, #361	; 0x169
    a294:	eb003c6e 	bl	19454 <assertion_failed>
    a298:	eaffffb8 	b	a180 <CDWHCIDevice::InitCore()+0xa8>
    a29c:	eb0046ca 	bl	1bdcc <CLogger::Get()>
    a2a0:	e3043534 	movw	r3, #17716	; 0x4534
    a2a4:	e3403002 	movt	r3, #2
    a2a8:	e30411ec 	movw	r1, #16876	; 0x41ec
    a2ac:	e3401002 	movt	r1, #2
    a2b0:	e3a02001 	mov	r2, #1
    a2b4:	eb0045fb 	bl	1baa8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    a2b8:	eaffffeb 	b	a26c <CDWHCIDevice::InitCore()+0x194>
    a2bc:	e28d0010 	add	r0, sp, #16
    a2c0:	eb000207 	bl	aae4 <CDWHCIRegister::Get() const>
    a2c4:	e7e10450 	ubfx	r0, r0, #8, #2
    a2c8:	e3500001 	cmp	r0, #1
    a2cc:	1affffb2 	bne	a19c <CDWHCIDevice::InitCore()+0xc4>
    a2d0:	e28d0004 	add	r0, sp, #4
    a2d4:	e3a01802 	mov	r1, #131072	; 0x20000
    a2d8:	eb000233 	bl	abac <CDWHCIRegister::Or(unsigned int)>
    a2dc:	e3a01702 	mov	r1, #524288	; 0x80000
    a2e0:	e28d0004 	add	r0, sp, #4
    a2e4:	eb000230 	bl	abac <CDWHCIRegister::Or(unsigned int)>
    a2e8:	eaffffb1 	b	a1b4 <CDWHCIDevice::InitCore()+0xdc>
    a2ec:	e3041210 	movw	r1, #16912	; 0x4210
    a2f0:	e3401002 	movt	r1, #2
    a2f4:	e3040590 	movw	r0, #17808	; 0x4590
    a2f8:	e3400002 	movt	r0, #2
    a2fc:	e300217b 	movw	r2, #379	; 0x17b
    a300:	eb003c53 	bl	19454 <assertion_failed>
    a304:	eaffffb7 	b	a1e8 <CDWHCIDevice::InitCore()+0x110>
    a308:	e3041210 	movw	r1, #16912	; 0x4210
    a30c:	e3401002 	movt	r1, #2
    a310:	e304057c 	movw	r0, #17788	; 0x457c
    a314:	e3400002 	movt	r0, #2
    a318:	e3002179 	movw	r2, #377	; 0x179
    a31c:	eb003c4c 	bl	19454 <assertion_failed>
    a320:	eaffffa8 	b	a1c8 <CDWHCIDevice::InitCore()+0xf0>

0000a324 <CDWHCIDevice::FlushTxFIFO(unsigned int)>:
    a324:	e92d4030 	push	{r4, r5, lr}
    a328:	e3a02000 	mov	r2, #0
    a32c:	e1a05001 	mov	r5, r1
    a330:	e24dd01c 	sub	sp, sp, #28
    a334:	e1a04000 	mov	r4, r0
    a338:	e3a01010 	mov	r1, #16
    a33c:	e3431f98 	movt	r1, #16280	; 0x3f98
    a340:	e28d000c 	add	r0, sp, #12
    a344:	eb0001cb 	bl	aa78 <CDWHCIRegister::CDWHCIRegister(unsigned int, unsigned int)>
    a348:	e28d000c 	add	r0, sp, #12
    a34c:	e3a01020 	mov	r1, #32
    a350:	eb000215 	bl	abac <CDWHCIRegister::Or(unsigned int)>
    a354:	e28d000c 	add	r0, sp, #12
    a358:	e3e01d1f 	mvn	r1, #1984	; 0x7c0
    a35c:	eb000202 	bl	ab6c <CDWHCIRegister::And(unsigned int)>
    a360:	e1a01305 	lsl	r1, r5, #6
    a364:	e28d000c 	add	r0, sp, #12
    a368:	eb00020f 	bl	abac <CDWHCIRegister::Or(unsigned int)>
    a36c:	e28d000c 	add	r0, sp, #12
    a370:	eb0001cc 	bl	aaa8 <CDWHCIRegister::Write()>
    a374:	e3a0200a 	mov	r2, #10
    a378:	e1a00004 	mov	r0, r4
    a37c:	e58d2000 	str	r2, [sp]
    a380:	e28d100c 	add	r1, sp, #12
    a384:	e3a03000 	mov	r3, #0
    a388:	e3a02020 	mov	r2, #32
    a38c:	ebfffe4c 	bl	9cc4 <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)>
    a390:	e3500000 	cmp	r0, #0
    a394:	1a000003 	bne	a3a8 <CDWHCIDevice::FlushTxFIFO(unsigned int)+0x84>
    a398:	e28d000c 	add	r0, sp, #12
    a39c:	eb0001b9 	bl	aa88 <CDWHCIRegister::~CDWHCIRegister()>
    a3a0:	e28dd01c 	add	sp, sp, #28
    a3a4:	e8bd8030 	pop	{r4, r5, pc}
    a3a8:	e3a00001 	mov	r0, #1
    a3ac:	eb005963 	bl	20940 <CTimer::SimpleusDelay(unsigned int)>
    a3b0:	e28d000c 	add	r0, sp, #12
    a3b4:	eb0001b3 	bl	aa88 <CDWHCIRegister::~CDWHCIRegister()>
    a3b8:	e28dd01c 	add	sp, sp, #28
    a3bc:	e8bd8030 	pop	{r4, r5, pc}

0000a3c0 <CDWHCIDevice::FlushRxFIFO()>:
    a3c0:	e92d4010 	push	{r4, lr}
    a3c4:	e3a02000 	mov	r2, #0
    a3c8:	e1a04000 	mov	r4, r0
    a3cc:	e24dd018 	sub	sp, sp, #24
    a3d0:	e3a01010 	mov	r1, #16
    a3d4:	e3431f98 	movt	r1, #16280	; 0x3f98
    a3d8:	e28d000c 	add	r0, sp, #12
    a3dc:	eb0001a5 	bl	aa78 <CDWHCIRegister::CDWHCIRegister(unsigned int, unsigned int)>
    a3e0:	e3a01010 	mov	r1, #16
    a3e4:	e28d000c 	add	r0, sp, #12
    a3e8:	eb0001ef 	bl	abac <CDWHCIRegister::Or(unsigned int)>
    a3ec:	e28d000c 	add	r0, sp, #12
    a3f0:	eb0001ac 	bl	aaa8 <CDWHCIRegister::Write()>
    a3f4:	e3a0200a 	mov	r2, #10
    a3f8:	e1a00004 	mov	r0, r4
    a3fc:	e58d2000 	str	r2, [sp]
    a400:	e28d100c 	add	r1, sp, #12
    a404:	e3a03000 	mov	r3, #0
    a408:	e3a02010 	mov	r2, #16
    a40c:	ebfffe2c 	bl	9cc4 <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)>
    a410:	e3500000 	cmp	r0, #0
    a414:	1a000003 	bne	a428 <CDWHCIDevice::FlushRxFIFO()+0x68>
    a418:	e28d000c 	add	r0, sp, #12
    a41c:	eb000199 	bl	aa88 <CDWHCIRegister::~CDWHCIRegister()>
    a420:	e28dd018 	add	sp, sp, #24
    a424:	e8bd8010 	pop	{r4, pc}
    a428:	e3a00001 	mov	r0, #1
    a42c:	eb005943 	bl	20940 <CTimer::SimpleusDelay(unsigned int)>
    a430:	e28d000c 	add	r0, sp, #12
    a434:	eb000193 	bl	aa88 <CDWHCIRegister::~CDWHCIRegister()>
    a438:	e28dd018 	add	sp, sp, #24
    a43c:	e8bd8010 	pop	{r4, pc}

0000a440 <CDWHCIDevice::InitHost()>:
    a440:	e92d4030 	push	{r4, r5, lr}
    a444:	e3a02000 	mov	r2, #0
    a448:	e1a04000 	mov	r4, r0
    a44c:	e24dd064 	sub	sp, sp, #100	; 0x64
    a450:	e3a01c0e 	mov	r1, #3584	; 0xe00
    a454:	e3431f98 	movt	r1, #16280	; 0x3f98
    a458:	e1a0000d 	mov	r0, sp
    a45c:	eb000185 	bl	aa78 <CDWHCIRegister::CDWHCIRegister(unsigned int, unsigned int)>
    a460:	e1a0000d 	mov	r0, sp
    a464:	eb00018f 	bl	aaa8 <CDWHCIRegister::Write()>
    a468:	e28d000c 	add	r0, sp, #12
    a46c:	e3a01b01 	mov	r1, #1024	; 0x400
    a470:	e3431f98 	movt	r1, #16280	; 0x3f98
    a474:	eb00017b 	bl	aa68 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    a478:	e28d000c 	add	r0, sp, #12
    a47c:	eb000182 	bl	aa8c <CDWHCIRegister::Read()>
    a480:	e28d000c 	add	r0, sp, #12
    a484:	e3e01003 	mvn	r1, #3
    a488:	eb0001b7 	bl	ab6c <CDWHCIRegister::And(unsigned int)>
    a48c:	e28d0018 	add	r0, sp, #24
    a490:	e3a01048 	mov	r1, #72	; 0x48
    a494:	e3431f98 	movt	r1, #16280	; 0x3f98
    a498:	eb000172 	bl	aa68 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    a49c:	e28d0024 	add	r0, sp, #36	; 0x24
    a4a0:	e3a0100c 	mov	r1, #12
    a4a4:	e3431f98 	movt	r1, #16280	; 0x3f98
    a4a8:	eb00016e 	bl	aa68 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    a4ac:	e28d0018 	add	r0, sp, #24
    a4b0:	eb000175 	bl	aa8c <CDWHCIRegister::Read()>
    a4b4:	e7e10350 	ubfx	r0, r0, #6, #2
    a4b8:	e3500002 	cmp	r0, #2
    a4bc:	0a000051 	beq	a608 <CDWHCIDevice::InitHost()+0x1c8>
    a4c0:	e3a01000 	mov	r1, #0
    a4c4:	e28d000c 	add	r0, sp, #12
    a4c8:	eb0001b7 	bl	abac <CDWHCIRegister::Or(unsigned int)>
    a4cc:	e28d000c 	add	r0, sp, #12
    a4d0:	eb000174 	bl	aaa8 <CDWHCIRegister::Write()>
    a4d4:	e3a02b01 	mov	r2, #1024	; 0x400
    a4d8:	e28d0030 	add	r0, sp, #48	; 0x30
    a4dc:	e3a01024 	mov	r1, #36	; 0x24
    a4e0:	e3431f98 	movt	r1, #16280	; 0x3f98
    a4e4:	eb000163 	bl	aa78 <CDWHCIRegister::CDWHCIRegister(unsigned int, unsigned int)>
    a4e8:	e28d0030 	add	r0, sp, #48	; 0x30
    a4ec:	eb00016d 	bl	aaa8 <CDWHCIRegister::Write()>
    a4f0:	e3a02000 	mov	r2, #0
    a4f4:	e28d003c 	add	r0, sp, #60	; 0x3c
    a4f8:	e3a01028 	mov	r1, #40	; 0x28
    a4fc:	e3431f98 	movt	r1, #16280	; 0x3f98
    a500:	eb00015c 	bl	aa78 <CDWHCIRegister::CDWHCIRegister(unsigned int, unsigned int)>
    a504:	e28d003c 	add	r0, sp, #60	; 0x3c
    a508:	e3a01b01 	mov	r1, #1024	; 0x400
    a50c:	eb0001a6 	bl	abac <CDWHCIRegister::Or(unsigned int)>
    a510:	e3a01301 	mov	r1, #67108864	; 0x4000000
    a514:	e28d003c 	add	r0, sp, #60	; 0x3c
    a518:	eb0001a3 	bl	abac <CDWHCIRegister::Or(unsigned int)>
    a51c:	e28d003c 	add	r0, sp, #60	; 0x3c
    a520:	eb000160 	bl	aaa8 <CDWHCIRegister::Write()>
    a524:	e3a02000 	mov	r2, #0
    a528:	e28d0048 	add	r0, sp, #72	; 0x48
    a52c:	e3a01c01 	mov	r1, #256	; 0x100
    a530:	e3431f98 	movt	r1, #16280	; 0x3f98
    a534:	eb00014f 	bl	aa78 <CDWHCIRegister::CDWHCIRegister(unsigned int, unsigned int)>
    a538:	e28d0048 	add	r0, sp, #72	; 0x48
    a53c:	e3a01b02 	mov	r1, #2048	; 0x800
    a540:	eb000199 	bl	abac <CDWHCIRegister::Or(unsigned int)>
    a544:	e3a01301 	mov	r1, #67108864	; 0x4000000
    a548:	e28d0048 	add	r0, sp, #72	; 0x48
    a54c:	eb000196 	bl	abac <CDWHCIRegister::Or(unsigned int)>
    a550:	e28d0048 	add	r0, sp, #72	; 0x48
    a554:	eb000153 	bl	aaa8 <CDWHCIRegister::Write()>
    a558:	e3a01010 	mov	r1, #16
    a55c:	e1a00004 	mov	r0, r4
    a560:	ebffff6f 	bl	a324 <CDWHCIDevice::FlushTxFIFO(unsigned int)>
    a564:	e1a00004 	mov	r0, r4
    a568:	ebffff94 	bl	a3c0 <CDWHCIDevice::FlushRxFIFO()>
    a56c:	e28d0054 	add	r0, sp, #84	; 0x54
    a570:	e3a01d11 	mov	r1, #1088	; 0x440
    a574:	e3431f98 	movt	r1, #16280	; 0x3f98
    a578:	eb00013a 	bl	aa68 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    a57c:	e28d0054 	add	r0, sp, #84	; 0x54
    a580:	eb000141 	bl	aa8c <CDWHCIRegister::Read()>
    a584:	e28d0054 	add	r0, sp, #84	; 0x54
    a588:	e3e0102e 	mvn	r1, #46	; 0x2e
    a58c:	eb000176 	bl	ab6c <CDWHCIRegister::And(unsigned int)>
    a590:	e28d0054 	add	r0, sp, #84	; 0x54
    a594:	eb000152 	bl	aae4 <CDWHCIRegister::Get() const>
    a598:	e3100a01 	tst	r0, #4096	; 0x1000
    a59c:	1a000004 	bne	a5b4 <CDWHCIDevice::InitHost()+0x174>
    a5a0:	e28d0054 	add	r0, sp, #84	; 0x54
    a5a4:	e3a01a01 	mov	r1, #4096	; 0x1000
    a5a8:	eb00017f 	bl	abac <CDWHCIRegister::Or(unsigned int)>
    a5ac:	e28d0054 	add	r0, sp, #84	; 0x54
    a5b0:	eb00013c 	bl	aaa8 <CDWHCIRegister::Write()>
    a5b4:	e1a00004 	mov	r0, r4
    a5b8:	ebfff861 	bl	8744 <CDWHCIDevice::EnableHostInterrupts()>
    a5bc:	e28d0054 	add	r0, sp, #84	; 0x54
    a5c0:	eb000130 	bl	aa88 <CDWHCIRegister::~CDWHCIRegister()>
    a5c4:	e28d0048 	add	r0, sp, #72	; 0x48
    a5c8:	eb00012e 	bl	aa88 <CDWHCIRegister::~CDWHCIRegister()>
    a5cc:	e28d003c 	add	r0, sp, #60	; 0x3c
    a5d0:	eb00012c 	bl	aa88 <CDWHCIRegister::~CDWHCIRegister()>
    a5d4:	e28d0030 	add	r0, sp, #48	; 0x30
    a5d8:	eb00012a 	bl	aa88 <CDWHCIRegister::~CDWHCIRegister()>
    a5dc:	e28d0024 	add	r0, sp, #36	; 0x24
    a5e0:	eb000128 	bl	aa88 <CDWHCIRegister::~CDWHCIRegister()>
    a5e4:	e28d0018 	add	r0, sp, #24
    a5e8:	eb000126 	bl	aa88 <CDWHCIRegister::~CDWHCIRegister()>
    a5ec:	e28d000c 	add	r0, sp, #12
    a5f0:	eb000124 	bl	aa88 <CDWHCIRegister::~CDWHCIRegister()>
    a5f4:	e1a0000d 	mov	r0, sp
    a5f8:	eb000122 	bl	aa88 <CDWHCIRegister::~CDWHCIRegister()>
    a5fc:	e3a00001 	mov	r0, #1
    a600:	e28dd064 	add	sp, sp, #100	; 0x64
    a604:	e8bd8030 	pop	{r4, r5, pc}
    a608:	e28d0018 	add	r0, sp, #24
    a60c:	eb000134 	bl	aae4 <CDWHCIRegister::Get() const>
    a610:	e7e15450 	ubfx	r5, r0, #8, #2
    a614:	e3550001 	cmp	r5, #1
    a618:	1affffa8 	bne	a4c0 <CDWHCIDevice::InitHost()+0x80>
    a61c:	e28d0024 	add	r0, sp, #36	; 0x24
    a620:	eb000119 	bl	aa8c <CDWHCIRegister::Read()>
    a624:	e3100802 	tst	r0, #131072	; 0x20000
    a628:	0affffa4 	beq	a4c0 <CDWHCIDevice::InitHost()+0x80>
    a62c:	e1a01005 	mov	r1, r5
    a630:	e28d000c 	add	r0, sp, #12
    a634:	eb00015c 	bl	abac <CDWHCIRegister::Or(unsigned int)>
    a638:	eaffffa3 	b	a4cc <CDWHCIDevice::InitHost()+0x8c>

0000a63c <CDWHCIDevice::Initialize()>:
    a63c:	e92d4030 	push	{r4, r5, lr}
    a640:	e3a01001 	mov	r1, #1
    a644:	e1a04000 	mov	r4, r0
    a648:	e24dd024 	sub	sp, sp, #36	; 0x24
    a64c:	e3a00020 	mov	r0, #32
    a650:	eb000afd 	bl	d24c <CUSBRequest::InitProtectedAllocator(unsigned int, unsigned int)>
    a654:	e3a01001 	mov	r1, #1
    a658:	e3a00010 	mov	r0, #16
    a65c:	eb000499 	bl	b8c8 <CDWHCITransferStageData::InitProtectedAllocator(unsigned int, unsigned int)>
    a660:	e3a01001 	mov	r1, #1
    a664:	e3a00010 	mov	r0, #16
    a668:	eb0012ba 	bl	f158 <CDWHCIFrameSchedulerNonPeriodic::InitProtectedAllocator(unsigned int, unsigned int)>
    a66c:	e3a01001 	mov	r1, #1
    a670:	e3a00010 	mov	r0, #16
    a674:	eb0013e7 	bl	f618 <CDWHCIFrameSchedulerPeriodic::InitProtectedAllocator(unsigned int, unsigned int)>
    a678:	e3a01001 	mov	r1, #1
    a67c:	e3a00010 	mov	r0, #16
    a680:	eb0023c1 	bl	1358c <CDWHCIFrameSchedulerNoSplit::InitProtectedAllocator(unsigned int, unsigned int)>
    a684:	e5943004 	ldr	r3, [r4, #4]
    a688:	e3530000 	cmp	r3, #0
    a68c:	0a000051 	beq	a7d8 <CDWHCIDevice::Initialize()+0x19c>
    a690:	e5943008 	ldr	r3, [r4, #8]
    a694:	e3530000 	cmp	r3, #0
    a698:	0a000057 	beq	a7fc <CDWHCIDevice::Initialize()+0x1c0>
    a69c:	e3a01040 	mov	r1, #64	; 0x40
    a6a0:	e3431f98 	movt	r1, #16280	; 0x3f98
    a6a4:	e28d0008 	add	r0, sp, #8
    a6a8:	eb0000ee 	bl	aa68 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    a6ac:	e28d0008 	add	r0, sp, #8
    a6b0:	eb0000f5 	bl	aa8c <CDWHCIRegister::Read()>
    a6b4:	e302380a 	movw	r3, #10250	; 0x280a
    a6b8:	e3443f54 	movt	r3, #20308	; 0x4f54
    a6bc:	e1500003 	cmp	r0, r3
    a6c0:	0a000011 	beq	a70c <CDWHCIDevice::Initialize()+0xd0>
    a6c4:	e3a05000 	mov	r5, #0
    a6c8:	eb0045bf 	bl	1bdcc <CLogger::Get()>
    a6cc:	e1a04000 	mov	r4, r0
    a6d0:	e28d0008 	add	r0, sp, #8
    a6d4:	eb000102 	bl	aae4 <CDWHCIRegister::Get() const>
    a6d8:	e30435c8 	movw	r3, #17864	; 0x45c8
    a6dc:	e3403002 	movt	r3, #2
    a6e0:	e58d0000 	str	r0, [sp]
    a6e4:	e30411ec 	movw	r1, #16876	; 0x41ec
    a6e8:	e3401002 	movt	r1, #2
    a6ec:	e1a00004 	mov	r0, r4
    a6f0:	e3a02001 	mov	r2, #1
    a6f4:	eb0044eb 	bl	1baa8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    a6f8:	e28d0008 	add	r0, sp, #8
    a6fc:	eb0000e1 	bl	aa88 <CDWHCIRegister::~CDWHCIRegister()>
    a700:	e1a00005 	mov	r0, r5
    a704:	e28dd024 	add	sp, sp, #36	; 0x24
    a708:	e8bd8030 	pop	{r4, r5, pc}
    a70c:	e1a00004 	mov	r0, r4
    a710:	ebfff7d1 	bl	865c <CDWHCIDevice::PowerOn()>
    a714:	e2505000 	subs	r5, r0, #0
    a718:	0a00003e 	beq	a818 <CDWHCIDevice::Initialize()+0x1dc>
    a71c:	e3a01008 	mov	r1, #8
    a720:	e3431f98 	movt	r1, #16280	; 0x3f98
    a724:	e28d0014 	add	r0, sp, #20
    a728:	eb0000ce 	bl	aa68 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    a72c:	e28d0014 	add	r0, sp, #20
    a730:	eb0000d5 	bl	aa8c <CDWHCIRegister::Read()>
    a734:	e28d0014 	add	r0, sp, #20
    a738:	e3e01001 	mvn	r1, #1
    a73c:	eb00010a 	bl	ab6c <CDWHCIRegister::And(unsigned int)>
    a740:	e28d0014 	add	r0, sp, #20
    a744:	eb0000d7 	bl	aaa8 <CDWHCIRegister::Write()>
    a748:	e5940004 	ldr	r0, [r4, #4]
    a74c:	e3500000 	cmp	r0, #0
    a750:	0a00003b 	beq	a844 <CDWHCIDevice::Initialize()+0x208>
    a754:	e1a03004 	mov	r3, r4
    a758:	e3a01009 	mov	r1, #9
    a75c:	e3092804 	movw	r2, #38916	; 0x9804
    a760:	e3402000 	movt	r2, #0
    a764:	eb00423b 	bl	1b058 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)>
    a768:	e1a00004 	mov	r0, r4
    a76c:	ebfffe59 	bl	a0d8 <CDWHCIDevice::InitCore()>
    a770:	e2505000 	subs	r5, r0, #0
    a774:	0a00000f 	beq	a7b8 <CDWHCIDevice::Initialize()+0x17c>
    a778:	e1a00004 	mov	r0, r4
    a77c:	ebfff7d1 	bl	86c8 <CDWHCIDevice::EnableGlobalInterrupts()>
    a780:	e1a00004 	mov	r0, r4
    a784:	ebffff2d 	bl	a440 <CDWHCIDevice::InitHost()>
    a788:	e2505000 	subs	r5, r0, #0
    a78c:	1a000029 	bne	a838 <CDWHCIDevice::Initialize()+0x1fc>
    a790:	eb00458d 	bl	1bdcc <CLogger::Get()>
    a794:	e3043608 	movw	r3, #17928	; 0x4608
    a798:	e3403002 	movt	r3, #2
    a79c:	e30411ec 	movw	r1, #16876	; 0x41ec
    a7a0:	e3401002 	movt	r1, #2
    a7a4:	e3a02001 	mov	r2, #1
    a7a8:	eb0044be 	bl	1baa8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    a7ac:	e28d0014 	add	r0, sp, #20
    a7b0:	eb0000b4 	bl	aa88 <CDWHCIRegister::~CDWHCIRegister()>
    a7b4:	eaffffcf 	b	a6f8 <CDWHCIDevice::Initialize()+0xbc>
    a7b8:	eb004583 	bl	1bdcc <CLogger::Get()>
    a7bc:	e30435f0 	movw	r3, #17904	; 0x45f0
    a7c0:	e3403002 	movt	r3, #2
    a7c4:	e30411ec 	movw	r1, #16876	; 0x41ec
    a7c8:	e3401002 	movt	r1, #2
    a7cc:	e3a02001 	mov	r2, #1
    a7d0:	eb0044b4 	bl	1baa8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    a7d4:	eafffff4 	b	a7ac <CDWHCIDevice::Initialize()+0x170>
    a7d8:	e3041210 	movw	r1, #16912	; 0x4210
    a7dc:	e3401002 	movt	r1, #2
    a7e0:	e3040258 	movw	r0, #16984	; 0x4258
    a7e4:	e3400002 	movt	r0, #2
    a7e8:	e3a0207a 	mov	r2, #122	; 0x7a
    a7ec:	eb003b18 	bl	19454 <assertion_failed>
    a7f0:	e5943008 	ldr	r3, [r4, #8]
    a7f4:	e3530000 	cmp	r3, #0
    a7f8:	1affffa7 	bne	a69c <CDWHCIDevice::Initialize()+0x60>
    a7fc:	e3041210 	movw	r1, #16912	; 0x4210
    a800:	e3401002 	movt	r1, #2
    a804:	e3040270 	movw	r0, #17008	; 0x4270
    a808:	e3400002 	movt	r0, #2
    a80c:	e3a0207b 	mov	r2, #123	; 0x7b
    a810:	eb003b0f 	bl	19454 <assertion_failed>
    a814:	eaffffa0 	b	a69c <CDWHCIDevice::Initialize()+0x60>
    a818:	eb00456b 	bl	1bdcc <CLogger::Get()>
    a81c:	e30435e0 	movw	r3, #17888	; 0x45e0
    a820:	e3403002 	movt	r3, #2
    a824:	e30411ec 	movw	r1, #16876	; 0x41ec
    a828:	e3401002 	movt	r1, #2
    a82c:	e3a02001 	mov	r2, #1
    a830:	eb00449c 	bl	1baa8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    a834:	eaffffaf 	b	a6f8 <CDWHCIDevice::Initialize()+0xbc>
    a838:	e1a00004 	mov	r0, r4
    a83c:	ebfffd95 	bl	9e98 <CDWHCIDevice::ReScanDevices()>
    a840:	eaffffd9 	b	a7ac <CDWHCIDevice::Initialize()+0x170>
    a844:	e3041210 	movw	r1, #16912	; 0x4210
    a848:	e3401002 	movt	r1, #2
    a84c:	e3040258 	movw	r0, #16984	; 0x4258
    a850:	e3400002 	movt	r0, #2
    a854:	e3a02090 	mov	r2, #144	; 0x90
    a858:	eb003afd 	bl	19454 <assertion_failed>
    a85c:	e5940004 	ldr	r0, [r4, #4]
    a860:	eaffffbb 	b	a754 <CDWHCIDevice::Initialize()+0x118>

0000a864 <CDWHCIDevice::DumpRegister(char const*, unsigned int)>:
    a864:	e92d4030 	push	{r4, r5, lr}
    a868:	e1a05001 	mov	r5, r1
    a86c:	e1a01002 	mov	r1, r2
    a870:	e24dd01c 	sub	sp, sp, #28
    a874:	e28d000c 	add	r0, sp, #12
    a878:	eb00007a 	bl	aa68 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    a87c:	f57ff05f 	dmb	sy
    a880:	eb004551 	bl	1bdcc <CLogger::Get()>
    a884:	e1a04000 	mov	r4, r0
    a888:	e28d000c 	add	r0, sp, #12
    a88c:	eb00007e 	bl	aa8c <CDWHCIRegister::Read()>
    a890:	e3a02004 	mov	r2, #4
    a894:	e88d0021 	stm	sp, {r0, r5}
    a898:	e304324c 	movw	r3, #16972	; 0x424c
    a89c:	e3403002 	movt	r3, #2
    a8a0:	e1a00004 	mov	r0, r4
    a8a4:	e30411ec 	movw	r1, #16876	; 0x41ec
    a8a8:	e3401002 	movt	r1, #2
    a8ac:	eb00447d 	bl	1baa8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    a8b0:	e28d000c 	add	r0, sp, #12
    a8b4:	eb000073 	bl	aa88 <CDWHCIRegister::~CDWHCIRegister()>
    a8b8:	e28dd01c 	add	sp, sp, #28
    a8bc:	e8bd8030 	pop	{r4, r5, pc}

0000a8c0 <CDWHCIDevice::DumpStatus(unsigned int)>:
    a8c0:	e92d4070 	push	{r4, r5, r6, lr}
    a8c4:	e3040620 	movw	r0, #17952	; 0x4620
    a8c8:	e3400002 	movt	r0, #2
    a8cc:	e1a05001 	mov	r5, r1
    a8d0:	e3a01000 	mov	r1, #0
    a8d4:	e3431f98 	movt	r1, #16280	; 0x3f98
    a8d8:	ebfff6d6 	bl	8438 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.6]>
    a8dc:	e3a01008 	mov	r1, #8
    a8e0:	e3431f98 	movt	r1, #16280	; 0x3f98
    a8e4:	e304062c 	movw	r0, #17964	; 0x462c
    a8e8:	e3400002 	movt	r0, #2
    a8ec:	ebfff6d1 	bl	8438 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.6]>
    a8f0:	e3a0100c 	mov	r1, #12
    a8f4:	e3431f98 	movt	r1, #16280	; 0x3f98
    a8f8:	e3040634 	movw	r0, #17972	; 0x4634
    a8fc:	e3400002 	movt	r0, #2
    a900:	ebfff6cc 	bl	8438 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.6]>
    a904:	e3a01010 	mov	r1, #16
    a908:	e3431f98 	movt	r1, #16280	; 0x3f98
    a90c:	e304063c 	movw	r0, #17980	; 0x463c
    a910:	e3400002 	movt	r0, #2
    a914:	ebfff6c7 	bl	8438 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.6]>
    a918:	e3a01014 	mov	r1, #20
    a91c:	e3431f98 	movt	r1, #16280	; 0x3f98
    a920:	e3040644 	movw	r0, #17988	; 0x4644
    a924:	e3400002 	movt	r0, #2
    a928:	ebfff6c2 	bl	8438 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.6]>
    a92c:	e3a01018 	mov	r1, #24
    a930:	e3431f98 	movt	r1, #16280	; 0x3f98
    a934:	e3040650 	movw	r0, #18000	; 0x4650
    a938:	e3400002 	movt	r0, #2
    a93c:	ebfff6bd 	bl	8438 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.6]>
    a940:	e3a01024 	mov	r1, #36	; 0x24
    a944:	e3431f98 	movt	r1, #16280	; 0x3f98
    a948:	e304065c 	movw	r0, #18012	; 0x465c
    a94c:	e3400002 	movt	r0, #2
    a950:	ebfff6b8 	bl	8438 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.6]>
    a954:	e3a01028 	mov	r1, #40	; 0x28
    a958:	e3431f98 	movt	r1, #16280	; 0x3f98
    a95c:	e3040668 	movw	r0, #18024	; 0x4668
    a960:	e3400002 	movt	r0, #2
    a964:	ebfff6b3 	bl	8438 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.6]>
    a968:	e3a0102c 	mov	r1, #44	; 0x2c
    a96c:	e3431f98 	movt	r1, #16280	; 0x3f98
    a970:	e304067c 	movw	r0, #18044	; 0x467c
    a974:	e3400002 	movt	r0, #2
    a978:	ebfff6ae 	bl	8438 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.6]>
    a97c:	e3a01c01 	mov	r1, #256	; 0x100
    a980:	e3431f98 	movt	r1, #16280	; 0x3f98
    a984:	e304068c 	movw	r0, #18060	; 0x468c
    a988:	e3400002 	movt	r0, #2
    a98c:	ebfff6a9 	bl	8438 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.6]>
    a990:	e3a01b01 	mov	r1, #1024	; 0x400
    a994:	e3431f98 	movt	r1, #16280	; 0x3f98
    a998:	e30406a4 	movw	r0, #18084	; 0x46a4
    a99c:	e3400002 	movt	r0, #2
    a9a0:	ebfff6a4 	bl	8438 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.6]>
    a9a4:	e3a01e41 	mov	r1, #1040	; 0x410
    a9a8:	e3431f98 	movt	r1, #16280	; 0x3f98
    a9ac:	e30406b0 	movw	r0, #18096	; 0x46b0
    a9b0:	e3400002 	movt	r0, #2
    a9b4:	ebfff69f 	bl	8438 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.6]>
    a9b8:	e30c4028 	movw	r4, #49192	; 0xc028
    a9bc:	e34041fc 	movt	r4, #508	; 0x1fc
    a9c0:	e3001414 	movw	r1, #1044	; 0x414
    a9c4:	e3431f98 	movt	r1, #16280	; 0x3f98
    a9c8:	e30406c8 	movw	r0, #18120	; 0x46c8
    a9cc:	e3400002 	movt	r0, #2
    a9d0:	ebfff698 	bl	8438 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.6]>
    a9d4:	e0854004 	add	r4, r5, r4
    a9d8:	e3001418 	movw	r1, #1048	; 0x418
    a9dc:	e3431f98 	movt	r1, #16280	; 0x3f98
    a9e0:	e30406dc 	movw	r0, #18140	; 0x46dc
    a9e4:	e3400002 	movt	r0, #2
    a9e8:	e1a04284 	lsl	r4, r4, #5
    a9ec:	ebfff691 	bl	8438 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.6]>
    a9f0:	e3a01d11 	mov	r1, #1088	; 0x440
    a9f4:	e3431f98 	movt	r1, #16280	; 0x3f98
    a9f8:	e30406f4 	movw	r0, #18164	; 0x46f4
    a9fc:	e3400002 	movt	r0, #2
    aa00:	ebfff68c 	bl	8438 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.6]>
    aa04:	e1a01004 	mov	r1, r4
    aa08:	e3040700 	movw	r0, #18176	; 0x4700
    aa0c:	e3400002 	movt	r0, #2
    aa10:	ebfff688 	bl	8438 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.6]>
    aa14:	e2841004 	add	r1, r4, #4
    aa18:	e3040718 	movw	r0, #18200	; 0x4718
    aa1c:	e3400002 	movt	r0, #2
    aa20:	ebfff684 	bl	8438 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.6]>
    aa24:	e2841008 	add	r1, r4, #8
    aa28:	e3040730 	movw	r0, #18224	; 0x4730
    aa2c:	e3400002 	movt	r0, #2
    aa30:	ebfff680 	bl	8438 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.6]>
    aa34:	e284100c 	add	r1, r4, #12
    aa38:	e3040744 	movw	r0, #18244	; 0x4744
    aa3c:	e3400002 	movt	r0, #2
    aa40:	ebfff67c 	bl	8438 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.6]>
    aa44:	e2841010 	add	r1, r4, #16
    aa48:	e304075c 	movw	r0, #18268	; 0x475c
    aa4c:	e3400002 	movt	r0, #2
    aa50:	ebfff678 	bl	8438 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.6]>
    aa54:	e2841014 	add	r1, r4, #20
    aa58:	e3040774 	movw	r0, #18292	; 0x4774
    aa5c:	e3400002 	movt	r0, #2
    aa60:	e8bd4070 	pop	{r4, r5, r6, lr}
    aa64:	eafff673 	b	8438 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.6]>

0000aa68 <CDWHCIRegister::CDWHCIRegister(unsigned int)>:
    aa68:	e3a02000 	mov	r2, #0
    aa6c:	e5801004 	str	r1, [r0, #4]
    aa70:	e5c02000 	strb	r2, [r0]
    aa74:	e12fff1e 	bx	lr

0000aa78 <CDWHCIRegister::CDWHCIRegister(unsigned int, unsigned int)>:
    aa78:	e3a0c001 	mov	ip, #1
    aa7c:	e9800006 	stmib	r0, {r1, r2}
    aa80:	e5c0c000 	strb	ip, [r0]
    aa84:	e12fff1e 	bx	lr

0000aa88 <CDWHCIRegister::~CDWHCIRegister()>:
    aa88:	e12fff1e 	bx	lr

0000aa8c <CDWHCIRegister::Read()>:
    aa8c:	e5901004 	ldr	r1, [r0, #4]
    aa90:	e1a03000 	mov	r3, r0
    aa94:	e3a02001 	mov	r2, #1
    aa98:	e5910000 	ldr	r0, [r1]
    aa9c:	e5830008 	str	r0, [r3, #8]
    aaa0:	e5c32000 	strb	r2, [r3]
    aaa4:	e12fff1e 	bx	lr

0000aaa8 <CDWHCIRegister::Write()>:
    aaa8:	e5d03000 	ldrb	r3, [r0]
    aaac:	e92d4010 	push	{r4, lr}
    aab0:	e1a04000 	mov	r4, r0
    aab4:	e3530000 	cmp	r3, #0
    aab8:	1a000005 	bne	aad4 <CDWHCIRegister::Write()+0x2c>
    aabc:	e304178c 	movw	r1, #18316	; 0x478c
    aac0:	e3401002 	movt	r1, #2
    aac4:	e30407a0 	movw	r0, #18336	; 0x47a0
    aac8:	e3400002 	movt	r0, #2
    aacc:	e3a02035 	mov	r2, #53	; 0x35
    aad0:	eb003a5f 	bl	19454 <assertion_failed>
    aad4:	e5943004 	ldr	r3, [r4, #4]
    aad8:	e5942008 	ldr	r2, [r4, #8]
    aadc:	e5832000 	str	r2, [r3]
    aae0:	e8bd8010 	pop	{r4, pc}

0000aae4 <CDWHCIRegister::Get() const>:
    aae4:	e5d03000 	ldrb	r3, [r0]
    aae8:	e92d4010 	push	{r4, lr}
    aaec:	e1a04000 	mov	r4, r0
    aaf0:	e3530000 	cmp	r3, #0
    aaf4:	1a000005 	bne	ab10 <CDWHCIRegister::Get() const+0x2c>
    aaf8:	e304178c 	movw	r1, #18316	; 0x478c
    aafc:	e3401002 	movt	r1, #2
    ab00:	e30407a0 	movw	r0, #18336	; 0x47a0
    ab04:	e3400002 	movt	r0, #2
    ab08:	e3a0203b 	mov	r2, #59	; 0x3b
    ab0c:	eb003a50 	bl	19454 <assertion_failed>
    ab10:	e5940008 	ldr	r0, [r4, #8]
    ab14:	e8bd8010 	pop	{r4, pc}

0000ab18 <CDWHCIRegister::Set(unsigned int)>:
    ab18:	e3a03001 	mov	r3, #1
    ab1c:	e5801008 	str	r1, [r0, #8]
    ab20:	e5c03000 	strb	r3, [r0]
    ab24:	e12fff1e 	bx	lr

0000ab28 <CDWHCIRegister::IsSet(unsigned int) const>:
    ab28:	e5d03000 	ldrb	r3, [r0]
    ab2c:	e92d4070 	push	{r4, r5, r6, lr}
    ab30:	e1a04000 	mov	r4, r0
    ab34:	e1a05001 	mov	r5, r1
    ab38:	e3530000 	cmp	r3, #0
    ab3c:	1a000005 	bne	ab58 <CDWHCIRegister::IsSet(unsigned int) const+0x30>
    ab40:	e304178c 	movw	r1, #18316	; 0x478c
    ab44:	e3401002 	movt	r1, #2
    ab48:	e30407a0 	movw	r0, #18336	; 0x47a0
    ab4c:	e3400002 	movt	r0, #2
    ab50:	e3a02047 	mov	r2, #71	; 0x47
    ab54:	eb003a3e 	bl	19454 <assertion_failed>
    ab58:	e5943008 	ldr	r3, [r4, #8]
    ab5c:	e1150003 	tst	r5, r3
    ab60:	13a00001 	movne	r0, #1
    ab64:	03a00000 	moveq	r0, #0
    ab68:	e8bd8070 	pop	{r4, r5, r6, pc}

0000ab6c <CDWHCIRegister::And(unsigned int)>:
    ab6c:	e5d03000 	ldrb	r3, [r0]
    ab70:	e92d4070 	push	{r4, r5, r6, lr}
    ab74:	e1a04000 	mov	r4, r0
    ab78:	e1a05001 	mov	r5, r1
    ab7c:	e3530000 	cmp	r3, #0
    ab80:	1a000005 	bne	ab9c <CDWHCIRegister::And(unsigned int)+0x30>
    ab84:	e304178c 	movw	r1, #18316	; 0x478c
    ab88:	e3401002 	movt	r1, #2
    ab8c:	e30407a0 	movw	r0, #18336	; 0x47a0
    ab90:	e3400002 	movt	r0, #2
    ab94:	e3a0204d 	mov	r2, #77	; 0x4d
    ab98:	eb003a2d 	bl	19454 <assertion_failed>
    ab9c:	e5941008 	ldr	r1, [r4, #8]
    aba0:	e0011005 	and	r1, r1, r5
    aba4:	e5841008 	str	r1, [r4, #8]
    aba8:	e8bd8070 	pop	{r4, r5, r6, pc}

0000abac <CDWHCIRegister::Or(unsigned int)>:
    abac:	e5d03000 	ldrb	r3, [r0]
    abb0:	e92d4070 	push	{r4, r5, r6, lr}
    abb4:	e1a04000 	mov	r4, r0
    abb8:	e1a05001 	mov	r5, r1
    abbc:	e3530000 	cmp	r3, #0
    abc0:	1a000005 	bne	abdc <CDWHCIRegister::Or(unsigned int)+0x30>
    abc4:	e304178c 	movw	r1, #18316	; 0x478c
    abc8:	e3401002 	movt	r1, #2
    abcc:	e30407a0 	movw	r0, #18336	; 0x47a0
    abd0:	e3400002 	movt	r0, #2
    abd4:	e3a02053 	mov	r2, #83	; 0x53
    abd8:	eb003a1d 	bl	19454 <assertion_failed>
    abdc:	e5941008 	ldr	r1, [r4, #8]
    abe0:	e1811005 	orr	r1, r1, r5
    abe4:	e5841008 	str	r1, [r4, #8]
    abe8:	e8bd8070 	pop	{r4, r5, r6, pc}

0000abec <CDWHCIRegister::ClearBit(unsigned int)>:
    abec:	e5d03000 	ldrb	r3, [r0]
    abf0:	e92d4070 	push	{r4, r5, r6, lr}
    abf4:	e1a04000 	mov	r4, r0
    abf8:	e1a05001 	mov	r5, r1
    abfc:	e3530000 	cmp	r3, #0
    ac00:	0a00000c 	beq	ac38 <CDWHCIRegister::ClearBit(unsigned int)+0x4c>
    ac04:	e355001f 	cmp	r5, #31
    ac08:	9a000005 	bls	ac24 <CDWHCIRegister::ClearBit(unsigned int)+0x38>
    ac0c:	e304178c 	movw	r1, #18316	; 0x478c
    ac10:	e3401002 	movt	r1, #2
    ac14:	e30407ac 	movw	r0, #18348	; 0x47ac
    ac18:	e3400002 	movt	r0, #2
    ac1c:	e3a0205a 	mov	r2, #90	; 0x5a
    ac20:	eb003a0b 	bl	19454 <assertion_failed>
    ac24:	e5941008 	ldr	r1, [r4, #8]
    ac28:	e3a03001 	mov	r3, #1
    ac2c:	e1c11513 	bic	r1, r1, r3, lsl r5
    ac30:	e5841008 	str	r1, [r4, #8]
    ac34:	e8bd8070 	pop	{r4, r5, r6, pc}
    ac38:	e304178c 	movw	r1, #18316	; 0x478c
    ac3c:	e3401002 	movt	r1, #2
    ac40:	e30407a0 	movw	r0, #18336	; 0x47a0
    ac44:	e3400002 	movt	r0, #2
    ac48:	e3a02059 	mov	r2, #89	; 0x59
    ac4c:	eb003a00 	bl	19454 <assertion_failed>
    ac50:	eaffffeb 	b	ac04 <CDWHCIRegister::ClearBit(unsigned int)+0x18>

0000ac54 <CDWHCIRegister::SetBit(unsigned int)>:
    ac54:	e5d03000 	ldrb	r3, [r0]
    ac58:	e92d4070 	push	{r4, r5, r6, lr}
    ac5c:	e1a04000 	mov	r4, r0
    ac60:	e1a05001 	mov	r5, r1
    ac64:	e3530000 	cmp	r3, #0
    ac68:	0a00000c 	beq	aca0 <CDWHCIRegister::SetBit(unsigned int)+0x4c>
    ac6c:	e355001f 	cmp	r5, #31
    ac70:	9a000005 	bls	ac8c <CDWHCIRegister::SetBit(unsigned int)+0x38>
    ac74:	e304178c 	movw	r1, #18316	; 0x478c
    ac78:	e3401002 	movt	r1, #2
    ac7c:	e30407ac 	movw	r0, #18348	; 0x47ac
    ac80:	e3400002 	movt	r0, #2
    ac84:	e3a02061 	mov	r2, #97	; 0x61
    ac88:	eb0039f1 	bl	19454 <assertion_failed>
    ac8c:	e5941008 	ldr	r1, [r4, #8]
    ac90:	e3a03001 	mov	r3, #1
    ac94:	e1811513 	orr	r1, r1, r3, lsl r5
    ac98:	e5841008 	str	r1, [r4, #8]
    ac9c:	e8bd8070 	pop	{r4, r5, r6, pc}
    aca0:	e304178c 	movw	r1, #18316	; 0x478c
    aca4:	e3401002 	movt	r1, #2
    aca8:	e30407a0 	movw	r0, #18336	; 0x47a0
    acac:	e3400002 	movt	r0, #2
    acb0:	e3a02060 	mov	r2, #96	; 0x60
    acb4:	eb0039e6 	bl	19454 <assertion_failed>
    acb8:	eaffffeb 	b	ac6c <CDWHCIRegister::SetBit(unsigned int)+0x18>

0000acbc <CDWHCIRegister::ClearAll()>:
    acbc:	e3a02000 	mov	r2, #0
    acc0:	e3a03001 	mov	r3, #1
    acc4:	e5802008 	str	r2, [r0, #8]
    acc8:	e5c03000 	strb	r3, [r0]
    accc:	e12fff1e 	bx	lr

0000acd0 <CDWHCIRegister::SetAll()>:
    acd0:	e3e02000 	mvn	r2, #0
    acd4:	e3a03001 	mov	r3, #1
    acd8:	e5802008 	str	r2, [r0, #8]
    acdc:	e5c03000 	strb	r3, [r0]
    ace0:	e12fff1e 	bx	lr

0000ace4 <CDWHCIRegister::Dump() const>:
    ace4:	e92d4010 	push	{r4, lr}
    ace8:	e1a04000 	mov	r4, r0
    acec:	e5d03000 	ldrb	r3, [r0]
    acf0:	e24dd008 	sub	sp, sp, #8
    acf4:	e3530000 	cmp	r3, #0
    acf8:	1a00000b 	bne	ad2c <CDWHCIRegister::Dump() const+0x48>
    acfc:	eb004432 	bl	1bdcc <CLogger::Get()>
    ad00:	e594c004 	ldr	ip, [r4, #4]
    ad04:	e3a02004 	mov	r2, #4
    ad08:	e30437ec 	movw	r3, #18412	; 0x47ec
    ad0c:	e3403002 	movt	r3, #2
    ad10:	e7ebc05c 	ubfx	ip, ip, #0, #12
    ad14:	e30417e4 	movw	r1, #18404	; 0x47e4
    ad18:	e3401002 	movt	r1, #2
    ad1c:	e58dc000 	str	ip, [sp]
    ad20:	eb004360 	bl	1baa8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    ad24:	e28dd008 	add	sp, sp, #8
    ad28:	e8bd8010 	pop	{r4, pc}
    ad2c:	eb004426 	bl	1bdcc <CLogger::Get()>
    ad30:	e5942004 	ldr	r2, [r4, #4]
    ad34:	e5941008 	ldr	r1, [r4, #8]
    ad38:	e30437c8 	movw	r3, #18376	; 0x47c8
    ad3c:	e3403002 	movt	r3, #2
    ad40:	e58d1004 	str	r1, [sp, #4]
    ad44:	e7eb2052 	ubfx	r2, r2, #0, #12
    ad48:	e30417e4 	movw	r1, #18404	; 0x47e4
    ad4c:	e3401002 	movt	r1, #2
    ad50:	e58d2000 	str	r2, [sp]
    ad54:	e3a02004 	mov	r2, #4
    ad58:	eb004352 	bl	1baa8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    ad5c:	e28dd008 	add	sp, sp, #8
    ad60:	e8bd8010 	pop	{r4, pc}

0000ad64 <CDWHCITransferStageData::~CDWHCITransferStageData()>:
    ad64:	e92d4010 	push	{r4, lr}
    ad68:	e1a04000 	mov	r4, r0
    ad6c:	e5900050 	ldr	r0, [r0, #80]	; 0x50
    ad70:	e3500000 	cmp	r0, #0
    ad74:	0a000002 	beq	ad84 <CDWHCITransferStageData::~CDWHCITransferStageData()+0x20>
    ad78:	e5903000 	ldr	r3, [r0]
    ad7c:	e5933004 	ldr	r3, [r3, #4]
    ad80:	e12fff33 	blx	r3
    ad84:	e5940044 	ldr	r0, [r4, #68]	; 0x44
    ad88:	e3a03000 	mov	r3, #0
    ad8c:	e5843050 	str	r3, [r4, #80]	; 0x50
    ad90:	e1500003 	cmp	r0, r3
    ad94:	e5843048 	str	r3, [r4, #72]	; 0x48
    ad98:	0a000000 	beq	ada0 <CDWHCITransferStageData::~CDWHCITransferStageData()+0x3c>
    ad9c:	eb005cba 	bl	2208c <operator delete[](void*)>
    ada0:	e1a00004 	mov	r0, r4
    ada4:	e8bd8010 	pop	{r4, pc}

0000ada8 <CDWHCITransferStageData::SetChannelNumber(unsigned int)>:
    ada8:	e5801000 	str	r1, [r0]
    adac:	e12fff1e 	bx	lr

0000adb0 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)>:
    adb0:	e92d4070 	push	{r4, r5, r6, lr}
    adb4:	e1a04000 	mov	r4, r0
    adb8:	e30007dc 	movw	r0, #2012	; 0x7dc
    adbc:	e1110000 	tst	r1, r0
    adc0:	e5841040 	str	r1, [r4, #64]	; 0x40
    adc4:	0a00000f 	beq	ae08 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x58>
    adc8:	e3110010 	tst	r1, #16
    adcc:	08bd8070 	popeq	{r4, r5, r6, pc}
    add0:	e5940004 	ldr	r0, [r4, #4]
    add4:	eb0008ce 	bl	d114 <CUSBRequest::IsCompleteOnNAK() const>
    add8:	e3500000 	cmp	r0, #0
    addc:	08bd8070 	popeq	{r4, r5, r6, pc}
    ade0:	e5940018 	ldr	r0, [r4, #24]
    ade4:	eb000747 	bl	cb08 <CUSBEndpoint::GetType() const>
    ade8:	e3500001 	cmp	r0, #1
    adec:	1a00004e 	bne	af2c <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x17c>
    adf0:	e5d43008 	ldrb	r3, [r4, #8]
    adf4:	e3530000 	cmp	r3, #0
    adf8:	0a000052 	beq	af48 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x198>
    adfc:	e3a03000 	mov	r3, #0
    ae00:	e5843028 	str	r3, [r4, #40]	; 0x28
    ae04:	e8bd8070 	pop	{r4, r5, r6, pc}
    ae08:	e5945030 	ldr	r5, [r4, #48]	; 0x30
    ae0c:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    ae10:	e5d4c010 	ldrb	ip, [r4, #16]
    ae14:	e0455002 	sub	r5, r5, r2
    ae18:	e0403003 	sub	r3, r0, r3
    ae1c:	e5941034 	ldr	r1, [r4, #52]	; 0x34
    ae20:	e35c0000 	cmp	ip, #0
    ae24:	e5942048 	ldr	r2, [r4, #72]	; 0x48
    ae28:	1a000016 	bne	ae88 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0xd8>
    ae2c:	e0831001 	add	r1, r3, r1
    ae30:	e0823003 	add	r3, r2, r3
    ae34:	e5841034 	str	r1, [r4, #52]	; 0x34
    ae38:	e5843048 	str	r3, [r4, #72]	; 0x48
    ae3c:	e5d42009 	ldrb	r2, [r4, #9]
    ae40:	e1a01005 	mov	r1, r5
    ae44:	e5940018 	ldr	r0, [r4, #24]
    ae48:	eb000755 	bl	cba4 <CUSBEndpoint::SkipPID(unsigned int, bool)>
    ae4c:	e5942028 	ldr	r2, [r4, #40]	; 0x28
    ae50:	e1520005 	cmp	r2, r5
    ae54:	3a00001a 	bcc	aec4 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x114>
    ae58:	e5940024 	ldr	r0, [r4, #36]	; 0x24
    ae5c:	e0422005 	sub	r2, r2, r5
    ae60:	e5941034 	ldr	r1, [r4, #52]	; 0x34
    ae64:	e594c02c 	ldr	ip, [r4, #44]	; 0x2c
    ae68:	e0403001 	sub	r3, r0, r1
    ae6c:	e5842028 	str	r2, [r4, #40]	; 0x28
    ae70:	e153000c 	cmp	r3, ip
    ae74:	28bd8070 	popcs	{r4, r5, r6, pc}
    ae78:	e1500001 	cmp	r0, r1
    ae7c:	3a000018 	bcc	aee4 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x134>
    ae80:	e584302c 	str	r3, [r4, #44]	; 0x2c
    ae84:	e8bd8070 	pop	{r4, r5, r6, pc}
    ae88:	e5d4c011 	ldrb	ip, [r4, #17]
    ae8c:	e3530000 	cmp	r3, #0
    ae90:	13a0e000 	movne	lr, #0
    ae94:	020ce001 	andeq	lr, ip, #1
    ae98:	e35e0000 	cmp	lr, #0
    ae9c:	1a00001a 	bne	af0c <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x15c>
    aea0:	e0831001 	add	r1, r3, r1
    aea4:	e35c0000 	cmp	ip, #0
    aea8:	e0823003 	add	r3, r2, r3
    aeac:	e5841034 	str	r1, [r4, #52]	; 0x34
    aeb0:	e5843048 	str	r3, [r4, #72]	; 0x48
    aeb4:	1affffe0 	bne	ae3c <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x8c>
    aeb8:	e5942028 	ldr	r2, [r4, #40]	; 0x28
    aebc:	e1520005 	cmp	r2, r5
    aec0:	2affffe4 	bcs	ae58 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0xa8>
    aec4:	e3a020d6 	mov	r2, #214	; 0xd6
    aec8:	e304180c 	movw	r1, #18444	; 0x480c
    aecc:	e3401002 	movt	r1, #2
    aed0:	e3040858 	movw	r0, #18520	; 0x4858
    aed4:	e3400002 	movt	r0, #2
    aed8:	eb00395d 	bl	19454 <assertion_failed>
    aedc:	e5942028 	ldr	r2, [r4, #40]	; 0x28
    aee0:	eaffffdc 	b	ae58 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0xa8>
    aee4:	e3a020dc 	mov	r2, #220	; 0xdc
    aee8:	e304180c 	movw	r1, #18444	; 0x480c
    aeec:	e3401002 	movt	r1, #2
    aef0:	e304087c 	movw	r0, #18556	; 0x487c
    aef4:	e3400002 	movt	r0, #2
    aef8:	eb003955 	bl	19454 <assertion_failed>
    aefc:	e5943024 	ldr	r3, [r4, #36]	; 0x24
    af00:	e5942034 	ldr	r2, [r4, #52]	; 0x34
    af04:	e0433002 	sub	r3, r3, r2
    af08:	eaffffdc 	b	ae80 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0xd0>
    af0c:	e3500000 	cmp	r0, #0
    af10:	15943020 	ldrne	r3, [r4, #32]
    af14:	10030593 	mulne	r3, r3, r5
    af18:	10811003 	addne	r1, r1, r3
    af1c:	10822003 	addne	r2, r2, r3
    af20:	e5841034 	str	r1, [r4, #52]	; 0x34
    af24:	e5842048 	str	r2, [r4, #72]	; 0x48
    af28:	eaffffc3 	b	ae3c <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x8c>
    af2c:	e304180c 	movw	r1, #18444	; 0x480c
    af30:	e3401002 	movt	r1, #2
    af34:	e3040824 	movw	r0, #18468	; 0x4824
    af38:	e3400002 	movt	r0, #2
    af3c:	e3a020b9 	mov	r2, #185	; 0xb9
    af40:	eb003943 	bl	19454 <assertion_failed>
    af44:	eaffffa9 	b	adf0 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x40>
    af48:	e304180c 	movw	r1, #18444	; 0x480c
    af4c:	e3401002 	movt	r1, #2
    af50:	e3040850 	movw	r0, #18512	; 0x4850
    af54:	e3400002 	movt	r0, #2
    af58:	e3a020ba 	mov	r2, #186	; 0xba
    af5c:	eb00393c 	bl	19454 <assertion_failed>
    af60:	eaffffa5 	b	adfc <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x4c>

0000af64 <CDWHCITransferStageData::SetSplitComplete(bool)>:
    af64:	e5d03010 	ldrb	r3, [r0, #16]
    af68:	e92d4070 	push	{r4, r5, r6, lr}
    af6c:	e1a04000 	mov	r4, r0
    af70:	e1a05001 	mov	r5, r1
    af74:	e3530000 	cmp	r3, #0
    af78:	1a000005 	bne	af94 <CDWHCITransferStageData::SetSplitComplete(bool)+0x30>
    af7c:	e304180c 	movw	r1, #18444	; 0x480c
    af80:	e3401002 	movt	r1, #2
    af84:	e30408a8 	movw	r0, #18600	; 0x48a8
    af88:	e3400002 	movt	r0, #2
    af8c:	e3a020e3 	mov	r2, #227	; 0xe3
    af90:	eb00392f 	bl	19454 <assertion_failed>
    af94:	e5c45011 	strb	r5, [r4, #17]
    af98:	e8bd8070 	pop	{r4, r5, r6, pc}

0000af9c <CDWHCITransferStageData::SetState(unsigned int)>:
    af9c:	e5801038 	str	r1, [r0, #56]	; 0x38
    afa0:	e12fff1e 	bx	lr

0000afa4 <CDWHCITransferStageData::GetState() const>:
    afa4:	e5900038 	ldr	r0, [r0, #56]	; 0x38
    afa8:	e12fff1e 	bx	lr

0000afac <CDWHCITransferStageData::SetSubState(unsigned int)>:
    afac:	e580103c 	str	r1, [r0, #60]	; 0x3c
    afb0:	e12fff1e 	bx	lr

0000afb4 <CDWHCITransferStageData::GetSubState() const>:
    afb4:	e590003c 	ldr	r0, [r0, #60]	; 0x3c
    afb8:	e12fff1e 	bx	lr

0000afbc <CDWHCITransferStageData::BeginSplitCycle()>:
    afbc:	e3a00001 	mov	r0, #1
    afc0:	e12fff1e 	bx	lr

0000afc4 <CDWHCITransferStageData::GetChannelNumber() const>:
    afc4:	e5900000 	ldr	r0, [r0]
    afc8:	e12fff1e 	bx	lr

0000afcc <CDWHCITransferStageData::IsPeriodic() const>:
    afcc:	e92d4010 	push	{r4, lr}
    afd0:	e1a04000 	mov	r4, r0
    afd4:	e5900018 	ldr	r0, [r0, #24]
    afd8:	e3500000 	cmp	r0, #0
    afdc:	0a000006 	beq	affc <CDWHCITransferStageData::IsPeriodic() const+0x30>
    afe0:	eb0006c8 	bl	cb08 <CUSBEndpoint::GetType() const>
    afe4:	e2400002 	sub	r0, r0, #2
    afe8:	e6ef0070 	uxtb	r0, r0
    afec:	e3500001 	cmp	r0, #1
    aff0:	83a00000 	movhi	r0, #0
    aff4:	93a00001 	movls	r0, #1
    aff8:	e8bd8010 	pop	{r4, pc}
    affc:	e304180c 	movw	r1, #18444	; 0x480c
    b000:	e3401002 	movt	r1, #2
    b004:	e30408bc 	movw	r0, #18620	; 0x48bc
    b008:	e3400002 	movt	r0, #2
    b00c:	e3a02f42 	mov	r2, #264	; 0x108
    b010:	eb00390f 	bl	19454 <assertion_failed>
    b014:	e5940018 	ldr	r0, [r4, #24]
    b018:	eafffff0 	b	afe0 <CDWHCITransferStageData::IsPeriodic() const+0x14>

0000b01c <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)>:
    b01c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    b020:	e3520000 	cmp	r2, #0
    b024:	e1a05002 	mov	r5, r2
    b028:	e5dd6018 	ldrb	r6, [sp, #24]
    b02c:	e3a02000 	mov	r2, #0
    b030:	e1a04000 	mov	r4, r0
    b034:	e5801000 	str	r1, [r0]
    b038:	e5c03008 	strb	r3, [r0, #8]
    b03c:	e5805004 	str	r5, [r0, #4]
    b040:	e5c06009 	strb	r6, [r0, #9]
    b044:	e580200c 	str	r2, [r0, #12]
    b048:	e5c02011 	strb	r2, [r0, #17]
    b04c:	e5802034 	str	r2, [r0, #52]	; 0x34
    b050:	e5802038 	str	r2, [r0, #56]	; 0x38
    b054:	e580203c 	str	r2, [r0, #60]	; 0x3c
    b058:	e5802040 	str	r2, [r0, #64]	; 0x40
    b05c:	e5802044 	str	r2, [r0, #68]	; 0x44
    b060:	e580204c 	str	r2, [r0, #76]	; 0x4c
    b064:	e5802050 	str	r2, [r0, #80]	; 0x50
    b068:	e59d701c 	ldr	r7, [sp, #28]
    b06c:	0a000098 	beq	b2d4 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x2b8>
    b070:	e1a00005 	mov	r0, r5
    b074:	eb0007b7 	bl	cf58 <CUSBRequest::GetEndpoint() const>
    b078:	e3500000 	cmp	r0, #0
    b07c:	e5840018 	str	r0, [r4, #24]
    b080:	0a00009a 	beq	b2f0 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x2d4>
    b084:	eb00068d 	bl	cac0 <CUSBEndpoint::GetDevice() const>
    b088:	e3500000 	cmp	r0, #0
    b08c:	e5840014 	str	r0, [r4, #20]
    b090:	0a0000a1 	beq	b31c <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x300>
    b094:	eb00033b 	bl	bd88 <CUSBDevice::GetSpeed() const>
    b098:	e5c4001c 	strb	r0, [r4, #28]
    b09c:	e5940018 	ldr	r0, [r4, #24]
    b0a0:	eb00069e 	bl	cb20 <CUSBEndpoint::GetMaxPacketSize() const>
    b0a4:	e5840020 	str	r0, [r4, #32]
    b0a8:	e5940014 	ldr	r0, [r4, #20]
    b0ac:	eb000337 	bl	bd90 <CUSBDevice::IsSplit() const>
    b0b0:	e3560000 	cmp	r6, #0
    b0b4:	e5c40010 	strb	r0, [r4, #16]
    b0b8:	0a00004e 	beq	b1f8 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x1dc>
    b0bc:	e5943044 	ldr	r3, [r4, #68]	; 0x44
    b0c0:	e3530000 	cmp	r3, #0
    b0c4:	0a000005 	beq	b0e0 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0xc4>
    b0c8:	e304180c 	movw	r1, #18444	; 0x480c
    b0cc:	e3401002 	movt	r1, #2
    b0d0:	e30408ec 	movw	r0, #18668	; 0x48ec
    b0d4:	e3400002 	movt	r0, #2
    b0d8:	e3a02061 	mov	r2, #97	; 0x61
    b0dc:	eb0038dc 	bl	19454 <assertion_failed>
    b0e0:	e3a00004 	mov	r0, #4
    b0e4:	eb005be6 	bl	22084 <operator new[](unsigned int)>
    b0e8:	e3a02000 	mov	r2, #0
    b0ec:	e3a03001 	mov	r3, #1
    b0f0:	e5840044 	str	r0, [r4, #68]	; 0x44
    b0f4:	e5840048 	str	r0, [r4, #72]	; 0x48
    b0f8:	e5842024 	str	r2, [r4, #36]	; 0x24
    b0fc:	e584202c 	str	r2, [r4, #44]	; 0x2c
    b100:	e5843028 	str	r3, [r4, #40]	; 0x28
    b104:	e5843030 	str	r3, [r4, #48]	; 0x30
    b108:	e3100003 	tst	r0, #3
    b10c:	1a00005c 	bne	b284 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x268>
    b110:	e5d43010 	ldrb	r3, [r4, #16]
    b114:	e3530000 	cmp	r3, #0
    b118:	0a00000c 	beq	b150 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x134>
    b11c:	e1a00004 	mov	r0, r4
    b120:	ebffffa9 	bl	afcc <CDWHCITransferStageData::IsPeriodic() const>
    b124:	e3500000 	cmp	r0, #0
    b128:	0a00002c 	beq	b1e0 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x1c4>
    b12c:	e3a00014 	mov	r0, #20
    b130:	eb0010e6 	bl	f4d0 <CDWHCIFrameSchedulerPeriodic::operator new(unsigned int)>
    b134:	e1a05000 	mov	r5, r0
    b138:	eb0010cd 	bl	f474 <CDWHCIFrameSchedulerPeriodic::CDWHCIFrameSchedulerPeriodic()>
    b13c:	e5845050 	str	r5, [r4, #80]	; 0x50
    b140:	e3570000 	cmp	r7, #0
    b144:	1a000013 	bne	b198 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x17c>
    b148:	e1a00004 	mov	r0, r4
    b14c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    b150:	e5940014 	ldr	r0, [r4, #20]
    b154:	eb00030f 	bl	bd98 <CUSBDevice::GetHubAddress() const>
    b158:	e3500000 	cmp	r0, #0
    b15c:	1afffff7 	bne	b140 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x124>
    b160:	e5d4301c 	ldrb	r3, [r4, #28]
    b164:	e3530002 	cmp	r3, #2
    b168:	0afffff4 	beq	b140 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x124>
    b16c:	e1a00004 	mov	r0, r4
    b170:	ebffff95 	bl	afcc <CDWHCITransferStageData::IsPeriodic() const>
    b174:	e1a06000 	mov	r6, r0
    b178:	e3a00008 	mov	r0, #8
    b17c:	eb0020b0 	bl	13444 <CDWHCIFrameSchedulerNoSplit::operator new(unsigned int)>
    b180:	e1a01006 	mov	r1, r6
    b184:	e1a05000 	mov	r5, r0
    b188:	eb0020a6 	bl	13428 <CDWHCIFrameSchedulerNoSplit::CDWHCIFrameSchedulerNoSplit(bool)>
    b18c:	e5845050 	str	r5, [r4, #80]	; 0x50
    b190:	e3570000 	cmp	r7, #0
    b194:	0affffeb 	beq	b148 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x12c>
    b198:	e5940018 	ldr	r0, [r4, #24]
    b19c:	eb000659 	bl	cb08 <CUSBEndpoint::GetType() const>
    b1a0:	e3500002 	cmp	r0, #2
    b1a4:	1a00003d 	bne	b2a0 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x284>
    b1a8:	e3a03064 	mov	r3, #100	; 0x64
    b1ac:	e3042dd3 	movw	r2, #19923	; 0x4dd3
    b1b0:	e3412062 	movt	r2, #4194	; 0x1062
    b1b4:	e0030793 	mul	r3, r3, r7
    b1b8:	e0832392 	umull	r2, r3, r2, r3
    b1bc:	e1a03323 	lsr	r3, r3, #6
    b1c0:	e584300c 	str	r3, [r4, #12]
    b1c4:	e3530000 	cmp	r3, #0
    b1c8:	0a00005f 	beq	b34c <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x330>
    b1cc:	eb005611 	bl	20a18 <CTimer::Get()>
    b1d0:	eb005370 	bl	1ff98 <CTimer::GetTicks() const>
    b1d4:	e584004c 	str	r0, [r4, #76]	; 0x4c
    b1d8:	e1a00004 	mov	r0, r4
    b1dc:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    b1e0:	e3a00010 	mov	r0, #16
    b1e4:	eb000f89 	bl	f010 <CDWHCIFrameSchedulerNonPeriodic::operator new(unsigned int)>
    b1e8:	e1a05000 	mov	r5, r0
    b1ec:	eb000f72 	bl	efbc <CDWHCIFrameSchedulerNonPeriodic::CDWHCIFrameSchedulerNonPeriodic()>
    b1f0:	e5845050 	str	r5, [r4, #80]	; 0x50
    b1f4:	eaffffd1 	b	b140 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x124>
    b1f8:	e1a01006 	mov	r1, r6
    b1fc:	e5940018 	ldr	r0, [r4, #24]
    b200:	eb000655 	bl	cb5c <CUSBEndpoint::GetNextPID(bool)>
    b204:	e3500000 	cmp	r0, #0
    b208:	e1a00005 	mov	r0, r5
    b20c:	0a00002a 	beq	b2bc <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x2a0>
    b210:	eb00078b 	bl	d044 <CUSBRequest::GetBuffer()>
    b214:	e5840048 	str	r0, [r4, #72]	; 0x48
    b218:	e1a00005 	mov	r0, r5
    b21c:	eb00079b 	bl	d090 <CUSBRequest::GetBufLen() const>
    b220:	e5840024 	str	r0, [r4, #36]	; 0x24
    b224:	e5942020 	ldr	r2, [r4, #32]
    b228:	e5d41010 	ldrb	r1, [r4, #16]
    b22c:	e2423001 	sub	r3, r2, #1
    b230:	e0833000 	add	r3, r3, r0
    b234:	e3510000 	cmp	r1, #0
    b238:	e733f213 	udiv	r3, r3, r2
    b23c:	e5843028 	str	r3, [r4, #40]	; 0x28
    b240:	0a00003d 	beq	b33c <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x320>
    b244:	e1520000 	cmp	r2, r0
    b248:	e3a03001 	mov	r3, #1
    b24c:	21a02000 	movcs	r2, r0
    b250:	e5940048 	ldr	r0, [r4, #72]	; 0x48
    b254:	e1c422fc 	strd	r2, [r4, #44]	; 0x2c
    b258:	e3500000 	cmp	r0, #0
    b25c:	1affffa9 	bne	b108 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0xec>
    b260:	e304180c 	movw	r1, #18444	; 0x480c
    b264:	e3401002 	movt	r1, #2
    b268:	e3040900 	movw	r0, #18688	; 0x4900
    b26c:	e3400002 	movt	r0, #2
    b270:	e3a0206c 	mov	r2, #108	; 0x6c
    b274:	eb003876 	bl	19454 <assertion_failed>
    b278:	e5940048 	ldr	r0, [r4, #72]	; 0x48
    b27c:	e3100003 	tst	r0, #3
    b280:	0affffa2 	beq	b110 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0xf4>
    b284:	e304180c 	movw	r1, #18444	; 0x480c
    b288:	e3401002 	movt	r1, #2
    b28c:	e3040918 	movw	r0, #18712	; 0x4918
    b290:	e3400002 	movt	r0, #2
    b294:	e3a0206d 	mov	r2, #109	; 0x6d
    b298:	eb00386d 	bl	19454 <assertion_failed>
    b29c:	eaffff9b 	b	b110 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0xf4>
    b2a0:	e304180c 	movw	r1, #18444	; 0x480c
    b2a4:	e3401002 	movt	r1, #2
    b2a8:	e3040940 	movw	r0, #18752	; 0x4940
    b2ac:	e3400002 	movt	r0, #2
    b2b0:	e3a02088 	mov	r2, #136	; 0x88
    b2b4:	eb003866 	bl	19454 <assertion_failed>
    b2b8:	eaffffba 	b	b1a8 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x18c>
    b2bc:	eb000748 	bl	cfe4 <CUSBRequest::GetSetupData()>
    b2c0:	e3a03008 	mov	r3, #8
    b2c4:	e5840048 	str	r0, [r4, #72]	; 0x48
    b2c8:	e1a00003 	mov	r0, r3
    b2cc:	e5843024 	str	r3, [r4, #36]	; 0x24
    b2d0:	eaffffd3 	b	b224 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x208>
    b2d4:	e304180c 	movw	r1, #18444	; 0x480c
    b2d8:	e3401002 	movt	r1, #2
    b2dc:	e30408d0 	movw	r0, #18640	; 0x48d0
    b2e0:	e3400002 	movt	r0, #2
    b2e4:	e3a02031 	mov	r2, #49	; 0x31
    b2e8:	eb003859 	bl	19454 <assertion_failed>
    b2ec:	eaffff5f 	b	b070 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x54>
    b2f0:	e3a02034 	mov	r2, #52	; 0x34
    b2f4:	e304180c 	movw	r1, #18444	; 0x480c
    b2f8:	e3401002 	movt	r1, #2
    b2fc:	e30408bc 	movw	r0, #18620	; 0x48bc
    b300:	e3400002 	movt	r0, #2
    b304:	eb003852 	bl	19454 <assertion_failed>
    b308:	e5940018 	ldr	r0, [r4, #24]
    b30c:	eb0005eb 	bl	cac0 <CUSBEndpoint::GetDevice() const>
    b310:	e3500000 	cmp	r0, #0
    b314:	e5840014 	str	r0, [r4, #20]
    b318:	1affff5d 	bne	b094 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x78>
    b31c:	e304180c 	movw	r1, #18444	; 0x480c
    b320:	e3401002 	movt	r1, #2
    b324:	e30408dc 	movw	r0, #18652	; 0x48dc
    b328:	e3400002 	movt	r0, #2
    b32c:	e3a02036 	mov	r2, #54	; 0x36
    b330:	eb003847 	bl	19454 <assertion_failed>
    b334:	e5940014 	ldr	r0, [r4, #20]
    b338:	eaffff55 	b	b094 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x78>
    b33c:	e584002c 	str	r0, [r4, #44]	; 0x2c
    b340:	e5843030 	str	r3, [r4, #48]	; 0x30
    b344:	e5940048 	ldr	r0, [r4, #72]	; 0x48
    b348:	eaffffc2 	b	b258 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x23c>
    b34c:	e304180c 	movw	r1, #18444	; 0x480c
    b350:	e3401002 	movt	r1, #2
    b354:	e3040974 	movw	r0, #18804	; 0x4974
    b358:	e3400002 	movt	r0, #2
    b35c:	e3a0208b 	mov	r2, #139	; 0x8b
    b360:	eb00383b 	bl	19454 <assertion_failed>
    b364:	eaffff98 	b	b1cc <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x1b0>

0000b368 <CDWHCITransferStageData::GetDeviceAddress() const>:
    b368:	e5903014 	ldr	r3, [r0, #20]
    b36c:	e3530000 	cmp	r3, #0
    b370:	0a000001 	beq	b37c <CDWHCITransferStageData::GetDeviceAddress() const+0x14>
    b374:	e1a00003 	mov	r0, r3
    b378:	ea000280 	b	bd80 <CUSBDevice::GetAddress() const>
    b37c:	e92d4010 	push	{r4, lr}
    b380:	e1a04000 	mov	r4, r0
    b384:	e304180c 	movw	r1, #18444	; 0x480c
    b388:	e3401002 	movt	r1, #2
    b38c:	e30408dc 	movw	r0, #18652	; 0x48dc
    b390:	e3400002 	movt	r0, #2
    b394:	e3002111 	movw	r2, #273	; 0x111
    b398:	eb00382d 	bl	19454 <assertion_failed>
    b39c:	e5943014 	ldr	r3, [r4, #20]
    b3a0:	e8bd4010 	pop	{r4, lr}
    b3a4:	e1a00003 	mov	r0, r3
    b3a8:	ea000274 	b	bd80 <CUSBDevice::GetAddress() const>

0000b3ac <CDWHCITransferStageData::GetEndpointType() const>:
    b3ac:	e92d4010 	push	{r4, lr}
    b3b0:	e1a04000 	mov	r4, r0
    b3b4:	e5900018 	ldr	r0, [r0, #24]
    b3b8:	e3500000 	cmp	r0, #0
    b3bc:	0a000011 	beq	b408 <CDWHCITransferStageData::GetEndpointType() const+0x5c>
    b3c0:	eb0005d0 	bl	cb08 <CUSBEndpoint::GetType() const>
    b3c4:	e3500001 	cmp	r0, #1
    b3c8:	0a00000c 	beq	b400 <CDWHCITransferStageData::GetEndpointType() const+0x54>
    b3cc:	3a000009 	bcc	b3f8 <CDWHCITransferStageData::GetEndpointType() const+0x4c>
    b3d0:	e3500002 	cmp	r0, #2
    b3d4:	1a000001 	bne	b3e0 <CDWHCITransferStageData::GetEndpointType() const+0x34>
    b3d8:	e3a00003 	mov	r0, #3
    b3dc:	e8bd8010 	pop	{r4, pc}
    b3e0:	e304180c 	movw	r1, #18444	; 0x480c
    b3e4:	e3401002 	movt	r1, #2
    b3e8:	e3040ad8 	movw	r0, #19160	; 0x4ad8
    b3ec:	e3400002 	movt	r0, #2
    b3f0:	e300212a 	movw	r2, #298	; 0x12a
    b3f4:	eb003816 	bl	19454 <assertion_failed>
    b3f8:	e3a00000 	mov	r0, #0
    b3fc:	e8bd8010 	pop	{r4, pc}
    b400:	e3a00002 	mov	r0, #2
    b404:	e8bd8010 	pop	{r4, pc}
    b408:	e304180c 	movw	r1, #18444	; 0x480c
    b40c:	e3401002 	movt	r1, #2
    b410:	e30408bc 	movw	r0, #18620	; 0x48bc
    b414:	e3400002 	movt	r0, #2
    b418:	e3002117 	movw	r2, #279	; 0x117
    b41c:	eb00380c 	bl	19454 <assertion_failed>
    b420:	e5940018 	ldr	r0, [r4, #24]
    b424:	eaffffe5 	b	b3c0 <CDWHCITransferStageData::GetEndpointType() const+0x14>

0000b428 <CDWHCITransferStageData::GetEndpointNumber() const>:
    b428:	e5903018 	ldr	r3, [r0, #24]
    b42c:	e3530000 	cmp	r3, #0
    b430:	0a000001 	beq	b43c <CDWHCITransferStageData::GetEndpointNumber() const+0x14>
    b434:	e1a00003 	mov	r0, r3
    b438:	ea0005b0 	b	cb00 <CUSBEndpoint::GetNumber() const>
    b43c:	e92d4010 	push	{r4, lr}
    b440:	e1a04000 	mov	r4, r0
    b444:	e304180c 	movw	r1, #18444	; 0x480c
    b448:	e3401002 	movt	r1, #2
    b44c:	e30408bc 	movw	r0, #18620	; 0x48bc
    b450:	e3400002 	movt	r0, #2
    b454:	e3002133 	movw	r2, #307	; 0x133
    b458:	eb0037fd 	bl	19454 <assertion_failed>
    b45c:	e5943018 	ldr	r3, [r4, #24]
    b460:	e8bd4010 	pop	{r4, lr}
    b464:	e1a00003 	mov	r0, r3
    b468:	ea0005a4 	b	cb00 <CUSBEndpoint::GetNumber() const>

0000b46c <CDWHCITransferStageData::GetMaxPacketSize() const>:
    b46c:	e5900020 	ldr	r0, [r0, #32]
    b470:	e12fff1e 	bx	lr

0000b474 <CDWHCITransferStageData::GetSpeed() const>:
    b474:	e5d0001c 	ldrb	r0, [r0, #28]
    b478:	e12fff1e 	bx	lr

0000b47c <CDWHCITransferStageData::GetPID() const>:
    b47c:	e92d4010 	push	{r4, lr}
    b480:	e1a04000 	mov	r4, r0
    b484:	e5900018 	ldr	r0, [r0, #24]
    b488:	e3500000 	cmp	r0, #0
    b48c:	0a000012 	beq	b4dc <CDWHCITransferStageData::GetPID() const+0x60>
    b490:	e5d41009 	ldrb	r1, [r4, #9]
    b494:	eb0005b0 	bl	cb5c <CUSBEndpoint::GetNextPID(bool)>
    b498:	e3500001 	cmp	r0, #1
    b49c:	0a00000c 	beq	b4d4 <CDWHCITransferStageData::GetPID() const+0x58>
    b4a0:	3a000009 	bcc	b4cc <CDWHCITransferStageData::GetPID() const+0x50>
    b4a4:	e3500002 	cmp	r0, #2
    b4a8:	08bd8010 	popeq	{r4, pc}
    b4ac:	e3002156 	movw	r2, #342	; 0x156
    b4b0:	e304180c 	movw	r1, #18444	; 0x480c
    b4b4:	e3401002 	movt	r1, #2
    b4b8:	e3040ad8 	movw	r0, #19160	; 0x4ad8
    b4bc:	e3400002 	movt	r0, #2
    b4c0:	eb0037e3 	bl	19454 <assertion_failed>
    b4c4:	e3a00000 	mov	r0, #0
    b4c8:	e8bd8010 	pop	{r4, pc}
    b4cc:	e3a00003 	mov	r0, #3
    b4d0:	e8bd8010 	pop	{r4, pc}
    b4d4:	e3a00000 	mov	r0, #0
    b4d8:	e8bd8010 	pop	{r4, pc}
    b4dc:	e304180c 	movw	r1, #18444	; 0x480c
    b4e0:	e3401002 	movt	r1, #2
    b4e4:	e30408bc 	movw	r0, #18620	; 0x48bc
    b4e8:	e3400002 	movt	r0, #2
    b4ec:	e3002143 	movw	r2, #323	; 0x143
    b4f0:	eb0037d7 	bl	19454 <assertion_failed>
    b4f4:	e5940018 	ldr	r0, [r4, #24]
    b4f8:	eaffffe4 	b	b490 <CDWHCITransferStageData::GetPID() const+0x14>

0000b4fc <CDWHCITransferStageData::IsDirectionIn() const>:
    b4fc:	e5d00008 	ldrb	r0, [r0, #8]
    b500:	e12fff1e 	bx	lr

0000b504 <CDWHCITransferStageData::IsStatusStage() const>:
    b504:	e5d00009 	ldrb	r0, [r0, #9]
    b508:	e12fff1e 	bx	lr

0000b50c <CDWHCITransferStageData::GetDMAAddress() const>:
    b50c:	e5903048 	ldr	r3, [r0, #72]	; 0x48
    b510:	e3530000 	cmp	r3, #0
    b514:	0a000001 	beq	b520 <CDWHCITransferStageData::GetDMAAddress() const+0x14>
    b518:	e1a00003 	mov	r0, r3
    b51c:	e12fff1e 	bx	lr
    b520:	e92d4010 	push	{r4, lr}
    b524:	e1a04000 	mov	r4, r0
    b528:	e3002169 	movw	r2, #361	; 0x169
    b52c:	e304180c 	movw	r1, #18444	; 0x480c
    b530:	e3401002 	movt	r1, #2
    b534:	e3040900 	movw	r0, #18688	; 0x4900
    b538:	e3400002 	movt	r0, #2
    b53c:	eb0037c4 	bl	19454 <assertion_failed>
    b540:	e5943048 	ldr	r3, [r4, #72]	; 0x48
    b544:	e1a00003 	mov	r0, r3
    b548:	e8bd8010 	pop	{r4, pc}

0000b54c <CDWHCITransferStageData::GetBytesToTransfer() const>:
    b54c:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    b550:	e12fff1e 	bx	lr

0000b554 <CDWHCITransferStageData::GetPacketsToTransfer() const>:
    b554:	e5900030 	ldr	r0, [r0, #48]	; 0x30
    b558:	e12fff1e 	bx	lr

0000b55c <CDWHCITransferStageData::IsSplit() const>:
    b55c:	e5d00010 	ldrb	r0, [r0, #16]
    b560:	e12fff1e 	bx	lr

0000b564 <CDWHCITransferStageData::IsSplitComplete() const>:
    b564:	e5d03010 	ldrb	r3, [r0, #16]
    b568:	e92d4010 	push	{r4, lr}
    b56c:	e1a04000 	mov	r4, r0
    b570:	e3530000 	cmp	r3, #0
    b574:	1a000005 	bne	b590 <CDWHCITransferStageData::IsSplitComplete() const+0x2c>
    b578:	e304180c 	movw	r1, #18444	; 0x480c
    b57c:	e3401002 	movt	r1, #2
    b580:	e30408a8 	movw	r0, #18600	; 0x48a8
    b584:	e3400002 	movt	r0, #2
    b588:	e300217f 	movw	r2, #383	; 0x17f
    b58c:	eb0037b0 	bl	19454 <assertion_failed>
    b590:	e5d40011 	ldrb	r0, [r4, #17]
    b594:	e8bd8010 	pop	{r4, pc}

0000b598 <CDWHCITransferStageData::GetHubAddress() const>:
    b598:	e5d03010 	ldrb	r3, [r0, #16]
    b59c:	e92d4010 	push	{r4, lr}
    b5a0:	e1a04000 	mov	r4, r0
    b5a4:	e3530000 	cmp	r3, #0
    b5a8:	0a000004 	beq	b5c0 <CDWHCITransferStageData::GetHubAddress() const+0x28>
    b5ac:	e5940014 	ldr	r0, [r4, #20]
    b5b0:	e3500000 	cmp	r0, #0
    b5b4:	0a00000a 	beq	b5e4 <CDWHCITransferStageData::GetHubAddress() const+0x4c>
    b5b8:	e8bd4010 	pop	{r4, lr}
    b5bc:	ea0001f5 	b	bd98 <CUSBDevice::GetHubAddress() const>
    b5c0:	e304180c 	movw	r1, #18444	; 0x480c
    b5c4:	e3401002 	movt	r1, #2
    b5c8:	e30408a8 	movw	r0, #18600	; 0x48a8
    b5cc:	e3400002 	movt	r0, #2
    b5d0:	e3002186 	movw	r2, #390	; 0x186
    b5d4:	eb00379e 	bl	19454 <assertion_failed>
    b5d8:	e5940014 	ldr	r0, [r4, #20]
    b5dc:	e3500000 	cmp	r0, #0
    b5e0:	1afffff4 	bne	b5b8 <CDWHCITransferStageData::GetHubAddress() const+0x20>
    b5e4:	e304180c 	movw	r1, #18444	; 0x480c
    b5e8:	e3401002 	movt	r1, #2
    b5ec:	e30408dc 	movw	r0, #18652	; 0x48dc
    b5f0:	e3400002 	movt	r0, #2
    b5f4:	e3a02f62 	mov	r2, #392	; 0x188
    b5f8:	eb003795 	bl	19454 <assertion_failed>
    b5fc:	e5940014 	ldr	r0, [r4, #20]
    b600:	e8bd4010 	pop	{r4, lr}
    b604:	ea0001e3 	b	bd98 <CUSBDevice::GetHubAddress() const>

0000b608 <CDWHCITransferStageData::GetHubPortAddress() const>:
    b608:	e5d03010 	ldrb	r3, [r0, #16]
    b60c:	e92d4010 	push	{r4, lr}
    b610:	e1a04000 	mov	r4, r0
    b614:	e3530000 	cmp	r3, #0
    b618:	0a000004 	beq	b630 <CDWHCITransferStageData::GetHubPortAddress() const+0x28>
    b61c:	e5940014 	ldr	r0, [r4, #20]
    b620:	e3500000 	cmp	r0, #0
    b624:	0a00000a 	beq	b654 <CDWHCITransferStageData::GetHubPortAddress() const+0x4c>
    b628:	e8bd4010 	pop	{r4, lr}
    b62c:	ea0001db 	b	bda0 <CUSBDevice::GetHubPortNumber() const>
    b630:	e304180c 	movw	r1, #18444	; 0x480c
    b634:	e3401002 	movt	r1, #2
    b638:	e30408a8 	movw	r0, #18600	; 0x48a8
    b63c:	e3400002 	movt	r0, #2
    b640:	e300218e 	movw	r2, #398	; 0x18e
    b644:	eb003782 	bl	19454 <assertion_failed>
    b648:	e5940014 	ldr	r0, [r4, #20]
    b64c:	e3500000 	cmp	r0, #0
    b650:	1afffff4 	bne	b628 <CDWHCITransferStageData::GetHubPortAddress() const+0x20>
    b654:	e304180c 	movw	r1, #18444	; 0x480c
    b658:	e3401002 	movt	r1, #2
    b65c:	e30408dc 	movw	r0, #18652	; 0x48dc
    b660:	e3400002 	movt	r0, #2
    b664:	e3a02e19 	mov	r2, #400	; 0x190
    b668:	eb003779 	bl	19454 <assertion_failed>
    b66c:	e5940014 	ldr	r0, [r4, #20]
    b670:	e8bd4010 	pop	{r4, lr}
    b674:	ea0001c9 	b	bda0 <CUSBDevice::GetHubPortNumber() const>

0000b678 <CDWHCITransferStageData::GetSplitPosition() const>:
    b678:	e3a00003 	mov	r0, #3
    b67c:	e12fff1e 	bx	lr

0000b680 <CDWHCITransferStageData::GetStatusMask() const>:
    b680:	e5d03010 	ldrb	r3, [r0, #16]
    b684:	e3530000 	cmp	r3, #0
    b688:	0a000001 	beq	b694 <CDWHCITransferStageData::GetStatusMask() const+0x14>
    b68c:	e30007ff 	movw	r0, #2047	; 0x7ff
    b690:	e12fff1e 	bx	lr
    b694:	e92d4010 	push	{r4, lr}
    b698:	ebfffe4b 	bl	afcc <CDWHCITransferStageData::IsPeriodic() const>
    b69c:	e3500000 	cmp	r0, #0
    b6a0:	130007ff 	movwne	r0, #2047	; 0x7ff
    b6a4:	0300078f 	movweq	r0, #1935	; 0x78f
    b6a8:	e8bd8010 	pop	{r4, pc}

0000b6ac <CDWHCITransferStageData::GetTransactionStatus() const>:
    b6ac:	e5903040 	ldr	r3, [r0, #64]	; 0x40
    b6b0:	e3530000 	cmp	r3, #0
    b6b4:	0a000001 	beq	b6c0 <CDWHCITransferStageData::GetTransactionStatus() const+0x14>
    b6b8:	e1a00003 	mov	r0, r3
    b6bc:	e12fff1e 	bx	lr
    b6c0:	e92d4010 	push	{r4, lr}
    b6c4:	e1a04000 	mov	r4, r0
    b6c8:	e30021ad 	movw	r2, #429	; 0x1ad
    b6cc:	e304180c 	movw	r1, #18444	; 0x480c
    b6d0:	e3401002 	movt	r1, #2
    b6d4:	e3040988 	movw	r0, #18824	; 0x4988
    b6d8:	e3400002 	movt	r0, #2
    b6dc:	eb00375c 	bl	19454 <assertion_failed>
    b6e0:	e5943040 	ldr	r3, [r4, #64]	; 0x40
    b6e4:	e1a00003 	mov	r0, r3
    b6e8:	e8bd8010 	pop	{r4, pc}

0000b6ec <CDWHCITransferStageData::IsStageComplete() const>:
    b6ec:	e5900028 	ldr	r0, [r0, #40]	; 0x28
    b6f0:	e16f0f10 	clz	r0, r0
    b6f4:	e1a002a0 	lsr	r0, r0, #5
    b6f8:	e12fff1e 	bx	lr

0000b6fc <CDWHCITransferStageData::GetResultLen() const>:
    b6fc:	e5902034 	ldr	r2, [r0, #52]	; 0x34
    b700:	e5900024 	ldr	r0, [r0, #36]	; 0x24
    b704:	e1520000 	cmp	r2, r0
    b708:	31a00002 	movcc	r0, r2
    b70c:	e12fff1e 	bx	lr

0000b710 <CDWHCITransferStageData::IsTimeout() const>:
    b710:	e590300c 	ldr	r3, [r0, #12]
    b714:	e3530000 	cmp	r3, #0
    b718:	1a000001 	bne	b724 <CDWHCITransferStageData::IsTimeout() const+0x14>
    b71c:	e1a00003 	mov	r0, r3
    b720:	e12fff1e 	bx	lr
    b724:	e92d4010 	push	{r4, lr}
    b728:	e1a04000 	mov	r4, r0
    b72c:	eb0054b9 	bl	20a18 <CTimer::Get()>
    b730:	eb005218 	bl	1ff98 <CTimer::GetTicks() const>
    b734:	e594304c 	ldr	r3, [r4, #76]	; 0x4c
    b738:	e594200c 	ldr	r2, [r4, #12]
    b73c:	e0400003 	sub	r0, r0, r3
    b740:	e1500002 	cmp	r0, r2
    b744:	33a00000 	movcc	r0, #0
    b748:	23a00001 	movcs	r0, #1
    b74c:	e8bd8010 	pop	{r4, pc}

0000b750 <CDWHCITransferStageData::GetURB() const>:
    b750:	e5903004 	ldr	r3, [r0, #4]
    b754:	e3530000 	cmp	r3, #0
    b758:	0a000001 	beq	b764 <CDWHCITransferStageData::GetURB() const+0x14>
    b75c:	e1a00003 	mov	r0, r3
    b760:	e12fff1e 	bx	lr
    b764:	e92d4010 	push	{r4, lr}
    b768:	e1a04000 	mov	r4, r0
    b76c:	e3a02f73 	mov	r2, #460	; 0x1cc
    b770:	e304180c 	movw	r1, #18444	; 0x480c
    b774:	e3401002 	movt	r1, #2
    b778:	e30408d0 	movw	r0, #18640	; 0x48d0
    b77c:	e3400002 	movt	r0, #2
    b780:	eb003733 	bl	19454 <assertion_failed>
    b784:	e5943004 	ldr	r3, [r4, #4]
    b788:	e1a00003 	mov	r0, r3
    b78c:	e8bd8010 	pop	{r4, pc}

0000b790 <CDWHCITransferStageData::GetFrameScheduler() const>:
    b790:	e5900050 	ldr	r0, [r0, #80]	; 0x50
    b794:	e12fff1e 	bx	lr

0000b798 <CDWHCITransferStageData::operator new(unsigned int)>:
    b798:	e92d4010 	push	{r4, lr}
    b79c:	e3500054 	cmp	r0, #84	; 0x54
    b7a0:	0a000005 	beq	b7bc <CDWHCITransferStageData::operator new(unsigned int)+0x24>
    b7a4:	e304180c 	movw	r1, #18444	; 0x480c
    b7a8:	e3401002 	movt	r1, #2
    b7ac:	e30409a4 	movw	r0, #18852	; 0x49a4
    b7b0:	e3400002 	movt	r0, #2
    b7b4:	e30021d5 	movw	r2, #469	; 0x1d5
    b7b8:	eb003725 	bl	19454 <assertion_failed>
    b7bc:	e30b448c 	movw	r4, #46220	; 0xb48c
    b7c0:	e3404002 	movt	r4, #2
    b7c4:	e5940000 	ldr	r0, [r4]
    b7c8:	e3500000 	cmp	r0, #0
    b7cc:	0a000001 	beq	b7d8 <CDWHCITransferStageData::operator new(unsigned int)+0x40>
    b7d0:	e8bd4010 	pop	{r4, lr}
    b7d4:	ea003827 	b	19878 <CClassAllocator::Allocate()>
    b7d8:	e304180c 	movw	r1, #18444	; 0x480c
    b7dc:	e3401002 	movt	r1, #2
    b7e0:	e30409d0 	movw	r0, #18896	; 0x49d0
    b7e4:	e3400002 	movt	r0, #2
    b7e8:	e30021d5 	movw	r2, #469	; 0x1d5
    b7ec:	eb003718 	bl	19454 <assertion_failed>
    b7f0:	e5940000 	ldr	r0, [r4]
    b7f4:	e8bd4010 	pop	{r4, lr}
    b7f8:	ea00381e 	b	19878 <CClassAllocator::Allocate()>

0000b7fc <CDWHCITransferStageData::operator delete(void*, unsigned int)>:
    b7fc:	e92d4070 	push	{r4, r5, r6, lr}
    b800:	e3510054 	cmp	r1, #84	; 0x54
    b804:	e1a05000 	mov	r5, r0
    b808:	0a000005 	beq	b824 <CDWHCITransferStageData::operator delete(void*, unsigned int)+0x28>
    b80c:	e304180c 	movw	r1, #18444	; 0x480c
    b810:	e3401002 	movt	r1, #2
    b814:	e30409a4 	movw	r0, #18852	; 0x49a4
    b818:	e3400002 	movt	r0, #2
    b81c:	e30021d5 	movw	r2, #469	; 0x1d5
    b820:	eb00370b 	bl	19454 <assertion_failed>
    b824:	e30b448c 	movw	r4, #46220	; 0xb48c
    b828:	e3404002 	movt	r4, #2
    b82c:	e5940000 	ldr	r0, [r4]
    b830:	e3500000 	cmp	r0, #0
    b834:	0a000002 	beq	b844 <CDWHCITransferStageData::operator delete(void*, unsigned int)+0x48>
    b838:	e1a01005 	mov	r1, r5
    b83c:	e8bd4070 	pop	{r4, r5, r6, lr}
    b840:	ea003843 	b	19954 <CClassAllocator::Free(void*)>
    b844:	e304180c 	movw	r1, #18444	; 0x480c
    b848:	e3401002 	movt	r1, #2
    b84c:	e30409d0 	movw	r0, #18896	; 0x49d0
    b850:	e3400002 	movt	r0, #2
    b854:	e30021d5 	movw	r2, #469	; 0x1d5
    b858:	eb0036fd 	bl	19454 <assertion_failed>
    b85c:	e5940000 	ldr	r0, [r4]
    b860:	e1a01005 	mov	r1, r5
    b864:	e8bd4070 	pop	{r4, r5, r6, lr}
    b868:	ea003839 	b	19954 <CClassAllocator::Free(void*)>

0000b86c <CDWHCITransferStageData::InitAllocator(unsigned int)>:
    b86c:	e92d4070 	push	{r4, r5, r6, lr}
    b870:	e30b448c 	movw	r4, #46220	; 0xb48c
    b874:	e3404002 	movt	r4, #2
    b878:	e1a06000 	mov	r6, r0
    b87c:	e5943000 	ldr	r3, [r4]
    b880:	e3530000 	cmp	r3, #0
    b884:	0a000005 	beq	b8a0 <CDWHCITransferStageData::InitAllocator(unsigned int)+0x34>
    b888:	e304180c 	movw	r1, #18444	; 0x480c
    b88c:	e3401002 	movt	r1, #2
    b890:	e30409e4 	movw	r0, #18916	; 0x49e4
    b894:	e3400002 	movt	r0, #2
    b898:	e30021d5 	movw	r2, #469	; 0x1d5
    b89c:	eb0036ec 	bl	19454 <assertion_failed>
    b8a0:	e3a00020 	mov	r0, #32
    b8a4:	eb0059f5 	bl	22080 <operator new(unsigned int)>
    b8a8:	e1a02006 	mov	r2, r6
    b8ac:	e30439f8 	movw	r3, #18936	; 0x49f8
    b8b0:	e3403002 	movt	r3, #2
    b8b4:	e3a01054 	mov	r1, #84	; 0x54
    b8b8:	e1a05000 	mov	r5, r0
    b8bc:	eb0037c7 	bl	197e0 <CClassAllocator::CClassAllocator(unsigned int, unsigned int, char const*)>
    b8c0:	e5845000 	str	r5, [r4]
    b8c4:	e8bd8070 	pop	{r4, r5, r6, pc}

0000b8c8 <CDWHCITransferStageData::InitProtectedAllocator(unsigned int, unsigned int)>:
    b8c8:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    b8cc:	e30b448c 	movw	r4, #46220	; 0xb48c
    b8d0:	e3404002 	movt	r4, #2
    b8d4:	e24dd00c 	sub	sp, sp, #12
    b8d8:	e1a06000 	mov	r6, r0
    b8dc:	e1a07001 	mov	r7, r1
    b8e0:	e5943000 	ldr	r3, [r4]
    b8e4:	e3530000 	cmp	r3, #0
    b8e8:	0a000005 	beq	b904 <CDWHCITransferStageData::InitProtectedAllocator(unsigned int, unsigned int)+0x3c>
    b8ec:	e304180c 	movw	r1, #18444	; 0x480c
    b8f0:	e3401002 	movt	r1, #2
    b8f4:	e30409e4 	movw	r0, #18916	; 0x49e4
    b8f8:	e3400002 	movt	r0, #2
    b8fc:	e30021d5 	movw	r2, #469	; 0x1d5
    b900:	eb0036d3 	bl	19454 <assertion_failed>
    b904:	e3a00020 	mov	r0, #32
    b908:	eb0059dc 	bl	22080 <operator new(unsigned int)>
    b90c:	e1a03007 	mov	r3, r7
    b910:	e1a02006 	mov	r2, r6
    b914:	e30419f8 	movw	r1, #18936	; 0x49f8
    b918:	e3401002 	movt	r1, #2
    b91c:	e58d1000 	str	r1, [sp]
    b920:	e3a01054 	mov	r1, #84	; 0x54
    b924:	e1a05000 	mov	r5, r0
    b928:	eb0037be 	bl	19828 <CClassAllocator::CClassAllocator(unsigned int, unsigned int, unsigned int, char const*)>
    b92c:	e5845000 	str	r5, [r4]
    b930:	e28dd00c 	add	sp, sp, #12
    b934:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}

0000b938 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, bool, unsigned char, unsigned char)>:
    b938:	e92d4070 	push	{r4, r5, r6, lr}
    b93c:	e1a04000 	mov	r4, r0
    b940:	e3510000 	cmp	r1, #0
    b944:	e5dd0010 	ldrb	r0, [sp, #16]
    b948:	e5dd5014 	ldrb	r5, [sp, #20]
    b94c:	e5c42005 	strb	r2, [r4, #5]
    b950:	e3a02000 	mov	r2, #0
    b954:	e5c4300c 	strb	r3, [r4, #12]
    b958:	e5841000 	str	r1, [r4]
    b95c:	e5c4000d 	strb	r0, [r4, #13]
    b960:	e5c42004 	strb	r2, [r4, #4]
    b964:	e5842008 	str	r2, [r4, #8]
    b968:	e5842010 	str	r2, [r4, #16]
    b96c:	e5842014 	str	r2, [r4, #20]
    b970:	e5842018 	str	r2, [r4, #24]
    b974:	e5c4500e 	strb	r5, [r4, #14]
    b978:	0a000016 	beq	b9d8 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, bool, unsigned char, unsigned char)+0xa0>
    b97c:	e3a00014 	mov	r0, #20
    b980:	eb0059be 	bl	22080 <operator new(unsigned int)>
    b984:	e1a01004 	mov	r1, r4
    b988:	e1a06000 	mov	r6, r0
    b98c:	eb0003a2 	bl	c81c <CUSBEndpoint::CUSBEndpoint(CUSBDevice*)>
    b990:	e5846008 	str	r6, [r4, #8]
    b994:	e3550000 	cmp	r5, #0
    b998:	0a000007 	beq	b9bc <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, bool, unsigned char, unsigned char)+0x84>
    b99c:	e2843018 	add	r3, r4, #24
    b9a0:	e2841040 	add	r1, r4, #64	; 0x40
    b9a4:	e3a02000 	mov	r2, #0
    b9a8:	e5a32004 	str	r2, [r3, #4]!
    b9ac:	e1530001 	cmp	r3, r1
    b9b0:	1afffffc 	bne	b9a8 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, bool, unsigned char, unsigned char)+0x70>
    b9b4:	e1a00004 	mov	r0, r4
    b9b8:	e8bd8070 	pop	{r4, r5, r6, pc}
    b9bc:	e3041a18 	movw	r1, #18968	; 0x4a18
    b9c0:	e3401002 	movt	r1, #2
    b9c4:	e3040a4c 	movw	r0, #19020	; 0x4a4c
    b9c8:	e3400002 	movt	r0, #2
    b9cc:	e3a02037 	mov	r2, #55	; 0x37
    b9d0:	eb00369f 	bl	19454 <assertion_failed>
    b9d4:	eafffff0 	b	b99c <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, bool, unsigned char, unsigned char)+0x64>
    b9d8:	e3041a18 	movw	r1, #18968	; 0x4a18
    b9dc:	e3401002 	movt	r1, #2
    b9e0:	e3040a28 	movw	r0, #18984	; 0x4a28
    b9e4:	e3400002 	movt	r0, #2
    b9e8:	e3a02031 	mov	r2, #49	; 0x31
    b9ec:	eb003698 	bl	19454 <assertion_failed>
    b9f0:	e5943008 	ldr	r3, [r4, #8]
    b9f4:	e3530000 	cmp	r3, #0
    b9f8:	0affffdf 	beq	b97c <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, bool, unsigned char, unsigned char)+0x44>
    b9fc:	e3041a18 	movw	r1, #18968	; 0x4a18
    ba00:	e3401002 	movt	r1, #2
    ba04:	e3040a38 	movw	r0, #19000	; 0x4a38
    ba08:	e3400002 	movt	r0, #2
    ba0c:	e3a02033 	mov	r2, #51	; 0x33
    ba10:	eb00368f 	bl	19454 <assertion_failed>
    ba14:	eaffffd8 	b	b97c <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, bool, unsigned char, unsigned char)+0x44>

0000ba18 <CUSBDevice::~CUSBDevice()>:
    ba18:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    ba1c:	e1a07000 	mov	r7, r0
    ba20:	e3a06000 	mov	r6, #0
    ba24:	e2804018 	add	r4, r0, #24
    ba28:	e2805040 	add	r5, r0, #64	; 0x40
    ba2c:	e5b43004 	ldr	r3, [r4, #4]!
    ba30:	e2530000 	subs	r0, r3, #0
    ba34:	0a000002 	beq	ba44 <CUSBDevice::~CUSBDevice()+0x2c>
    ba38:	e5933000 	ldr	r3, [r3]
    ba3c:	e5933004 	ldr	r3, [r3, #4]
    ba40:	e12fff33 	blx	r3
    ba44:	e5846000 	str	r6, [r4]
    ba48:	e1540005 	cmp	r4, r5
    ba4c:	1afffff6 	bne	ba2c <CUSBDevice::~CUSBDevice()+0x14>
    ba50:	e5974018 	ldr	r4, [r7, #24]
    ba54:	e3540000 	cmp	r4, #0
    ba58:	0a000004 	beq	ba70 <CUSBDevice::~CUSBDevice()+0x58>
    ba5c:	e1a00004 	mov	r0, r4
    ba60:	eb002507 	bl	14e84 <CUSBConfigurationParser::~CUSBConfigurationParser()>
    ba64:	e1a00004 	mov	r0, r4
    ba68:	e3a0101c 	mov	r1, #28
    ba6c:	eb005987 	bl	22090 <operator delete(void*, unsigned int)>
    ba70:	e3a04000 	mov	r4, #0
    ba74:	e3a01009 	mov	r1, #9
    ba78:	e5970014 	ldr	r0, [r7, #20]
    ba7c:	e5874018 	str	r4, [r7, #24]
    ba80:	eb005982 	bl	22090 <operator delete(void*, unsigned int)>
    ba84:	e5874014 	str	r4, [r7, #20]
    ba88:	e3a01012 	mov	r1, #18
    ba8c:	e5970010 	ldr	r0, [r7, #16]
    ba90:	eb00597e 	bl	22090 <operator delete(void*, unsigned int)>
    ba94:	e5975008 	ldr	r5, [r7, #8]
    ba98:	e5874010 	str	r4, [r7, #16]
    ba9c:	e1550004 	cmp	r5, r4
    baa0:	0a000004 	beq	bab8 <CUSBDevice::~CUSBDevice()+0xa0>
    baa4:	e1a00005 	mov	r0, r5
    baa8:	eb000403 	bl	cabc <CUSBEndpoint::~CUSBEndpoint()>
    baac:	e1a00005 	mov	r0, r5
    bab0:	e3a01014 	mov	r1, #20
    bab4:	eb005975 	bl	22090 <operator delete(void*, unsigned int)>
    bab8:	e1a00007 	mov	r0, r7
    babc:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0000bac0 <CUSBDevice::ReScanDevices()>:
    bac0:	e92d4070 	push	{r4, r5, r6, lr}
    bac4:	e3a05000 	mov	r5, #0
    bac8:	e2804018 	add	r4, r0, #24
    bacc:	e2806040 	add	r6, r0, #64	; 0x40
    bad0:	e5b43004 	ldr	r3, [r4, #4]!
    bad4:	e2530000 	subs	r0, r3, #0
    bad8:	0a000004 	beq	baf0 <CUSBDevice::ReScanDevices()+0x30>
    badc:	e5933000 	ldr	r3, [r3]
    bae0:	e593301c 	ldr	r3, [r3, #28]
    bae4:	e12fff33 	blx	r3
    bae8:	e3500000 	cmp	r0, #0
    baec:	11a05000 	movne	r5, r0
    baf0:	e1540006 	cmp	r4, r6
    baf4:	1afffff5 	bne	bad0 <CUSBDevice::ReScanDevices()+0x10>
    baf8:	e1a00005 	mov	r0, r5
    bafc:	e8bd8070 	pop	{r4, r5, r6, pc}

0000bb00 <CUSBDevice::GetName(TDeviceNameSelector) const>:
    bb00:	e92d4070 	push	{r4, r5, r6, lr}
    bb04:	e1a06000 	mov	r6, r0
    bb08:	e3a00010 	mov	r0, #16
    bb0c:	e24dd008 	sub	sp, sp, #8
    bb10:	e1a05001 	mov	r5, r1
    bb14:	eb005959 	bl	22080 <operator new(unsigned int)>
    bb18:	e1a04000 	mov	r4, r0
    bb1c:	eb004c4b 	bl	1ec50 <CString::CString()>
    bb20:	e3550000 	cmp	r5, #0
    bb24:	0a00001e 	beq	bba4 <CUSBDevice::GetName(TDeviceNameSelector) const+0xa4>
    bb28:	e3550001 	cmp	r5, #1
    bb2c:	0a00000c 	beq	bb64 <CUSBDevice::GetName(TDeviceNameSelector) const+0x64>
    bb30:	e3041a18 	movw	r1, #18968	; 0x4a18
    bb34:	e3401002 	movt	r1, #2
    bb38:	e3040ad8 	movw	r0, #19160	; 0x4ad8
    bb3c:	e3400002 	movt	r0, #2
    bb40:	e30021b2 	movw	r2, #434	; 0x1b2
    bb44:	eb003642 	bl	19454 <assertion_failed>
    bb48:	e3041a90 	movw	r1, #19088	; 0x4a90
    bb4c:	e3401002 	movt	r1, #2
    bb50:	e1a00004 	mov	r0, r4
    bb54:	eb004c5a 	bl	1ecc4 <CString::operator=(char const*)>
    bb58:	e1a00004 	mov	r0, r4
    bb5c:	e28dd008 	add	sp, sp, #8
    bb60:	e8bd8070 	pop	{r4, r5, r6, pc}
    bb64:	e5961010 	ldr	r1, [r6, #16]
    bb68:	e3510000 	cmp	r1, #0
    bb6c:	0a000020 	beq	bbf4 <CUSBDevice::GetName(TDeviceNameSelector) const+0xf4>
    bb70:	e5d12004 	ldrb	r2, [r1, #4]
    bb74:	e2423001 	sub	r3, r2, #1
    bb78:	e6ef3073 	uxtb	r3, r3
    bb7c:	e35300fd 	cmp	r3, #253	; 0xfd
    bb80:	8afffff0 	bhi	bb48 <CUSBDevice::GetName(TDeviceNameSelector) const+0x48>
    bb84:	e5d10006 	ldrb	r0, [r1, #6]
    bb88:	e5d13005 	ldrb	r3, [r1, #5]
    bb8c:	e3041a84 	movw	r1, #19076	; 0x4a84
    bb90:	e3401002 	movt	r1, #2
    bb94:	e58d0000 	str	r0, [sp]
    bb98:	e1a00004 	mov	r0, r4
    bb9c:	eb004ff4 	bl	1fb74 <CString::Format(char const*, ...)>
    bba0:	eaffffec 	b	bb58 <CUSBDevice::GetName(TDeviceNameSelector) const+0x58>
    bba4:	e5962010 	ldr	r2, [r6, #16]
    bba8:	e3520000 	cmp	r2, #0
    bbac:	0a000008 	beq	bbd4 <CUSBDevice::GetName(TDeviceNameSelector) const+0xd4>
    bbb0:	e1d230ba 	ldrh	r3, [r2, #10]
    bbb4:	e1a00004 	mov	r0, r4
    bbb8:	e1d220b8 	ldrh	r2, [r2, #8]
    bbbc:	e3041a78 	movw	r1, #19064	; 0x4a78
    bbc0:	e3401002 	movt	r1, #2
    bbc4:	eb004fea 	bl	1fb74 <CString::Format(char const*, ...)>
    bbc8:	e1a00004 	mov	r0, r4
    bbcc:	e28dd008 	add	sp, sp, #8
    bbd0:	e8bd8070 	pop	{r4, r5, r6, pc}
    bbd4:	e300219e 	movw	r2, #414	; 0x19e
    bbd8:	e3041a18 	movw	r1, #18968	; 0x4a18
    bbdc:	e3401002 	movt	r1, #2
    bbe0:	e3040a64 	movw	r0, #19044	; 0x4a64
    bbe4:	e3400002 	movt	r0, #2
    bbe8:	eb003619 	bl	19454 <assertion_failed>
    bbec:	e5962010 	ldr	r2, [r6, #16]
    bbf0:	eaffffee 	b	bbb0 <CUSBDevice::GetName(TDeviceNameSelector) const+0xb0>
    bbf4:	e3041a18 	movw	r1, #18968	; 0x4a18
    bbf8:	e3401002 	movt	r1, #2
    bbfc:	e3040a64 	movw	r0, #19044	; 0x4a64
    bc00:	e3400002 	movt	r0, #2
    bc04:	e30021a5 	movw	r2, #421	; 0x1a5
    bc08:	eb003611 	bl	19454 <assertion_failed>
    bc0c:	e5961010 	ldr	r1, [r6, #16]
    bc10:	eaffffd6 	b	bb70 <CUSBDevice::GetName(TDeviceNameSelector) const+0x70>

0000bc14 <CUSBDevice::GetNames() const>:
    bc14:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    bc18:	e3047a90 	movw	r7, #19088	; 0x4a90
    bc1c:	e3407002 	movt	r7, #2
    bc20:	e3048aa4 	movw	r8, #19108	; 0x4aa4
    bc24:	e3408002 	movt	r8, #2
    bc28:	e3049a18 	movw	r9, #18968	; 0x4a18
    bc2c:	e3409002 	movt	r9, #2
    bc30:	e3a04000 	mov	r4, #0
    bc34:	e1a0a000 	mov	sl, r0
    bc38:	e3a00010 	mov	r0, #16
    bc3c:	eb00590f 	bl	22080 <operator new(unsigned int)>
    bc40:	e1a06000 	mov	r6, r0
    bc44:	eb004c01 	bl	1ec50 <CString::CString()>
    bc48:	e1a01004 	mov	r1, r4
    bc4c:	e1a0000a 	mov	r0, sl
    bc50:	ebffffaa 	bl	bb00 <CUSBDevice::GetName(TDeviceNameSelector) const>
    bc54:	e2505000 	subs	r5, r0, #0
    bc58:	0a000022 	beq	bce8 <CUSBDevice::GetNames() const+0xd4>
    bc5c:	e1a01007 	mov	r1, r7
    bc60:	eb004c64 	bl	1edf8 <CString::Compare(char const*) const>
    bc64:	e3500000 	cmp	r0, #0
    bc68:	1a000011 	bne	bcb4 <CUSBDevice::GetNames() const+0xa0>
    bc6c:	e5953000 	ldr	r3, [r5]
    bc70:	e1a00005 	mov	r0, r5
    bc74:	e5933004 	ldr	r3, [r3, #4]
    bc78:	e12fff33 	blx	r3
    bc7c:	e3540001 	cmp	r4, #1
    bc80:	1a000009 	bne	bcac <CUSBDevice::GetNames() const+0x98>
    bc84:	e1a00006 	mov	r0, r6
    bc88:	eb004c36 	bl	1ed68 <CString::GetLength() const>
    bc8c:	e3500000 	cmp	r0, #0
    bc90:	1a000003 	bne	bca4 <CUSBDevice::GetNames() const+0x90>
    bc94:	e3041a90 	movw	r1, #19088	; 0x4a90
    bc98:	e3401002 	movt	r1, #2
    bc9c:	e1a00006 	mov	r0, r6
    bca0:	eb004c07 	bl	1ecc4 <CString::operator=(char const*)>
    bca4:	e1a00006 	mov	r0, r6
    bca8:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    bcac:	e3a04001 	mov	r4, #1
    bcb0:	eaffffe4 	b	bc48 <CUSBDevice::GetNames() const+0x34>
    bcb4:	e1a00006 	mov	r0, r6
    bcb8:	eb004c2a 	bl	1ed68 <CString::GetLength() const>
    bcbc:	e3500000 	cmp	r0, #0
    bcc0:	0a000002 	beq	bcd0 <CUSBDevice::GetNames() const+0xbc>
    bcc4:	e1a01008 	mov	r1, r8
    bcc8:	e1a00006 	mov	r0, r6
    bccc:	eb004c29 	bl	1ed78 <CString::Append(char const*)>
    bcd0:	e1a00005 	mov	r0, r5
    bcd4:	eb004bf4 	bl	1ecac <CString::operator char const*() const>
    bcd8:	e1a01000 	mov	r1, r0
    bcdc:	e1a00006 	mov	r0, r6
    bce0:	eb004c24 	bl	1ed78 <CString::Append(char const*)>
    bce4:	eaffffe0 	b	bc6c <CUSBDevice::GetNames() const+0x58>
    bce8:	e30021c3 	movw	r2, #451	; 0x1c3
    bcec:	e1a01009 	mov	r1, r9
    bcf0:	e3040a98 	movw	r0, #19096	; 0x4a98
    bcf4:	e3400002 	movt	r0, #2
    bcf8:	eb0035d5 	bl	19454 <assertion_failed>
    bcfc:	e1a01007 	mov	r1, r7
    bd00:	e1a00005 	mov	r0, r5
    bd04:	eb004c3b 	bl	1edf8 <CString::Compare(char const*) const>
    bd08:	e3500000 	cmp	r0, #0
    bd0c:	0affffda 	beq	bc7c <CUSBDevice::GetNames() const+0x68>
    bd10:	e1a00006 	mov	r0, r6
    bd14:	eb004c13 	bl	1ed68 <CString::GetLength() const>
    bd18:	e3500000 	cmp	r0, #0
    bd1c:	0a000003 	beq	bd30 <CUSBDevice::GetNames() const+0x11c>
    bd20:	e1a00006 	mov	r0, r6
    bd24:	e1a01008 	mov	r1, r8
    bd28:	eb004c12 	bl	1ed78 <CString::Append(char const*)>
    bd2c:	e1a00005 	mov	r0, r5
    bd30:	eb004bdd 	bl	1ecac <CString::operator char const*() const>
    bd34:	e1a01000 	mov	r1, r0
    bd38:	e1a00006 	mov	r0, r6
    bd3c:	eb004c0d 	bl	1ed78 <CString::Append(char const*)>
    bd40:	eaffffcd 	b	bc7c <CUSBDevice::GetNames() const+0x68>

0000bd44 <CUSBDevice::SetAddress(unsigned char)>:
    bd44:	e92d4070 	push	{r4, r5, r6, lr}
    bd48:	e3110080 	tst	r1, #128	; 0x80
    bd4c:	e1a04001 	mov	r4, r1
    bd50:	e1a05000 	mov	r5, r0
    bd54:	1a000001 	bne	bd60 <CUSBDevice::SetAddress(unsigned char)+0x1c>
    bd58:	e5c54004 	strb	r4, [r5, #4]
    bd5c:	e8bd8070 	pop	{r4, r5, r6, pc}
    bd60:	e3041a18 	movw	r1, #18968	; 0x4a18
    bd64:	e3401002 	movt	r1, #2
    bd68:	e3040aa8 	movw	r0, #19112	; 0x4aa8
    bd6c:	e3400002 	movt	r0, #2
    bd70:	e3a02f77 	mov	r2, #476	; 0x1dc
    bd74:	eb0035b6 	bl	19454 <assertion_failed>
    bd78:	e5c54004 	strb	r4, [r5, #4]
    bd7c:	e8bd8070 	pop	{r4, r5, r6, pc}

0000bd80 <CUSBDevice::GetAddress() const>:
    bd80:	e5d00004 	ldrb	r0, [r0, #4]
    bd84:	e12fff1e 	bx	lr

0000bd88 <CUSBDevice::GetSpeed() const>:
    bd88:	e5d00005 	ldrb	r0, [r0, #5]
    bd8c:	e12fff1e 	bx	lr

0000bd90 <CUSBDevice::IsSplit() const>:
    bd90:	e5d0000c 	ldrb	r0, [r0, #12]
    bd94:	e12fff1e 	bx	lr

0000bd98 <CUSBDevice::GetHubAddress() const>:
    bd98:	e5d0000d 	ldrb	r0, [r0, #13]
    bd9c:	e12fff1e 	bx	lr

0000bda0 <CUSBDevice::GetHubPortNumber() const>:
    bda0:	e5d0000e 	ldrb	r0, [r0, #14]
    bda4:	e12fff1e 	bx	lr

0000bda8 <CUSBDevice::GetEndpoint0() const>:
    bda8:	e5903008 	ldr	r3, [r0, #8]
    bdac:	e3530000 	cmp	r3, #0
    bdb0:	0a000001 	beq	bdbc <CUSBDevice::GetEndpoint0() const+0x14>
    bdb4:	e1a00003 	mov	r0, r3
    bdb8:	e12fff1e 	bx	lr
    bdbc:	e92d4010 	push	{r4, lr}
    bdc0:	e1a04000 	mov	r4, r0
    bdc4:	e30021fd 	movw	r2, #509	; 0x1fd
    bdc8:	e3041a18 	movw	r1, #18968	; 0x4a18
    bdcc:	e3401002 	movt	r1, #2
    bdd0:	e3040ac8 	movw	r0, #19144	; 0x4ac8
    bdd4:	e3400002 	movt	r0, #2
    bdd8:	eb00359d 	bl	19454 <assertion_failed>
    bddc:	e5943008 	ldr	r3, [r4, #8]
    bde0:	e1a00003 	mov	r0, r3
    bde4:	e8bd8010 	pop	{r4, pc}

0000bde8 <CUSBDevice::GetHost() const>:
    bde8:	e5903000 	ldr	r3, [r0]
    bdec:	e3530000 	cmp	r3, #0
    bdf0:	0a000001 	beq	bdfc <CUSBDevice::GetHost() const+0x14>
    bdf4:	e1a00003 	mov	r0, r3
    bdf8:	e12fff1e 	bx	lr
    bdfc:	e92d4010 	push	{r4, lr}
    be00:	e1a04000 	mov	r4, r0
    be04:	e3002203 	movw	r2, #515	; 0x203
    be08:	e3041a18 	movw	r1, #18968	; 0x4a18
    be0c:	e3401002 	movt	r1, #2
    be10:	e3040a28 	movw	r0, #18984	; 0x4a28
    be14:	e3400002 	movt	r0, #2
    be18:	eb00358d 	bl	19454 <assertion_failed>
    be1c:	e5943000 	ldr	r3, [r4]
    be20:	e1a00003 	mov	r0, r3
    be24:	e8bd8010 	pop	{r4, pc}

0000be28 <CUSBDevice::GetDeviceDescriptor() const>:
    be28:	e5903010 	ldr	r3, [r0, #16]
    be2c:	e3530000 	cmp	r3, #0
    be30:	0a000001 	beq	be3c <CUSBDevice::GetDeviceDescriptor() const+0x14>
    be34:	e1a00003 	mov	r0, r3
    be38:	e12fff1e 	bx	lr
    be3c:	e92d4010 	push	{r4, lr}
    be40:	e1a04000 	mov	r4, r0
    be44:	e3002209 	movw	r2, #521	; 0x209
    be48:	e3041a18 	movw	r1, #18968	; 0x4a18
    be4c:	e3401002 	movt	r1, #2
    be50:	e3040a64 	movw	r0, #19044	; 0x4a64
    be54:	e3400002 	movt	r0, #2
    be58:	eb00357d 	bl	19454 <assertion_failed>
    be5c:	e5943010 	ldr	r3, [r4, #16]
    be60:	e1a00003 	mov	r0, r3
    be64:	e8bd8010 	pop	{r4, pc}

0000be68 <CUSBDevice::GetConfigurationDescriptor() const>:
    be68:	e5903014 	ldr	r3, [r0, #20]
    be6c:	e3530000 	cmp	r3, #0
    be70:	0a000001 	beq	be7c <CUSBDevice::GetConfigurationDescriptor() const+0x14>
    be74:	e1a00003 	mov	r0, r3
    be78:	e12fff1e 	bx	lr
    be7c:	e92d4010 	push	{r4, lr}
    be80:	e1a04000 	mov	r4, r0
    be84:	e300220f 	movw	r2, #527	; 0x20f
    be88:	e3041a18 	movw	r1, #18968	; 0x4a18
    be8c:	e3401002 	movt	r1, #2
    be90:	e3040adc 	movw	r0, #19164	; 0x4adc
    be94:	e3400002 	movt	r0, #2
    be98:	eb00356d 	bl	19454 <assertion_failed>
    be9c:	e5943014 	ldr	r3, [r4, #20]
    bea0:	e1a00003 	mov	r0, r3
    bea4:	e8bd8010 	pop	{r4, pc}

0000bea8 <CUSBDevice::GetDescriptor(unsigned char)>:
    bea8:	e92d4070 	push	{r4, r5, r6, lr}
    beac:	e1a04000 	mov	r4, r0
    beb0:	e5900018 	ldr	r0, [r0, #24]
    beb4:	e1a05001 	mov	r5, r1
    beb8:	e3500000 	cmp	r0, #0
    bebc:	0a000002 	beq	becc <CUSBDevice::GetDescriptor(unsigned char)+0x24>
    bec0:	e1a01005 	mov	r1, r5
    bec4:	e8bd4070 	pop	{r4, r5, r6, lr}
    bec8:	ea0023f0 	b	14e90 <CUSBConfigurationParser::GetDescriptor(unsigned char)>
    becc:	e3041a18 	movw	r1, #18968	; 0x4a18
    bed0:	e3401002 	movt	r1, #2
    bed4:	e3040af0 	movw	r0, #19184	; 0x4af0
    bed8:	e3400002 	movt	r0, #2
    bedc:	e3002215 	movw	r2, #533	; 0x215
    bee0:	eb00355b 	bl	19454 <assertion_failed>
    bee4:	e5940018 	ldr	r0, [r4, #24]
    bee8:	e1a01005 	mov	r1, r5
    beec:	e8bd4070 	pop	{r4, r5, r6, lr}
    bef0:	ea0023e6 	b	14e90 <CUSBConfigurationParser::GetDescriptor(unsigned char)>

0000bef4 <CUSBDevice::ConfigurationError(char const*) const>:
    bef4:	e92d4070 	push	{r4, r5, r6, lr}
    bef8:	e1a04000 	mov	r4, r0
    befc:	e5900018 	ldr	r0, [r0, #24]
    bf00:	e1a05001 	mov	r5, r1
    bf04:	e3500000 	cmp	r0, #0
    bf08:	0a000002 	beq	bf18 <CUSBDevice::ConfigurationError(char const*) const+0x24>
    bf0c:	e1a01005 	mov	r1, r5
    bf10:	e8bd4070 	pop	{r4, r5, r6, lr}
    bf14:	ea00242b 	b	14fc8 <CUSBConfigurationParser::Error(char const*) const>
    bf18:	e3041a18 	movw	r1, #18968	; 0x4a18
    bf1c:	e3401002 	movt	r1, #2
    bf20:	e3040af0 	movw	r0, #19184	; 0x4af0
    bf24:	e3400002 	movt	r0, #2
    bf28:	e300221b 	movw	r2, #539	; 0x21b
    bf2c:	eb003548 	bl	19454 <assertion_failed>
    bf30:	e5940018 	ldr	r0, [r4, #24]
    bf34:	e1a01005 	mov	r1, r5
    bf38:	e8bd4070 	pop	{r4, r5, r6, lr}
    bf3c:	ea002421 	b	14fc8 <CUSBConfigurationParser::Error(char const*) const>

0000bf40 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>:
    bf40:	e92d000c 	push	{r2, r3}
    bf44:	e92d4070 	push	{r4, r5, r6, lr}
    bf48:	e1a05000 	mov	r5, r0
    bf4c:	e1a06001 	mov	r6, r1
    bf50:	e24dd020 	sub	sp, sp, #32
    bf54:	e59d4030 	ldr	r4, [sp, #48]	; 0x30
    bf58:	e3540000 	cmp	r4, #0
    bf5c:	0a00001d 	beq	bfd8 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)+0x98>
    bf60:	e28d0010 	add	r0, sp, #16
    bf64:	eb004b39 	bl	1ec50 <CString::CString()>
    bf68:	e5d5200e 	ldrb	r2, [r5, #14]
    bf6c:	e5d5300d 	ldrb	r3, [r5, #13]
    bf70:	e28d0010 	add	r0, sp, #16
    bf74:	e58d2000 	str	r2, [sp]
    bf78:	e3041b18 	movw	r1, #19224	; 0x4b18
    bf7c:	e3401002 	movt	r1, #2
    bf80:	e3042a10 	movw	r2, #18960	; 0x4a10
    bf84:	e3402002 	movt	r2, #2
    bf88:	eb004ef9 	bl	1fb74 <CString::Format(char const*, ...)>
    bf8c:	e28d3034 	add	r3, sp, #52	; 0x34
    bf90:	e58d300c 	str	r3, [sp, #12]
    bf94:	eb003f8c 	bl	1bdcc <CLogger::Get()>
    bf98:	e1a05000 	mov	r5, r0
    bf9c:	e28d0010 	add	r0, sp, #16
    bfa0:	eb004b41 	bl	1ecac <CString::operator char const*() const>
    bfa4:	e59dc00c 	ldr	ip, [sp, #12]
    bfa8:	e1a01000 	mov	r1, r0
    bfac:	e1a03004 	mov	r3, r4
    bfb0:	e1a00005 	mov	r0, r5
    bfb4:	e1a02006 	mov	r2, r6
    bfb8:	e58dc000 	str	ip, [sp]
    bfbc:	eb003ec5 	bl	1bad8 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)>
    bfc0:	e28d0010 	add	r0, sp, #16
    bfc4:	eb004aef 	bl	1eb88 <CString::~CString()>
    bfc8:	e28dd020 	add	sp, sp, #32
    bfcc:	e8bd4070 	pop	{r4, r5, r6, lr}
    bfd0:	e28dd008 	add	sp, sp, #8
    bfd4:	e12fff1e 	bx	lr
    bfd8:	e3041a18 	movw	r1, #18968	; 0x4a18
    bfdc:	e3401002 	movt	r1, #2
    bfe0:	e3040b08 	movw	r0, #19208	; 0x4b08
    bfe4:	e3400002 	movt	r0, #2
    bfe8:	e3002221 	movw	r2, #545	; 0x221
    bfec:	eb003518 	bl	19454 <assertion_failed>
    bff0:	eaffffda 	b	bf60 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)+0x20>

0000bff4 <CUSBDevice::Initialize()>:
    bff4:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    bff8:	e1a04000 	mov	r4, r0
    bffc:	e5903010 	ldr	r3, [r0, #16]
    c000:	e24dd01c 	sub	sp, sp, #28
    c004:	e3530000 	cmp	r3, #0
    c008:	0a000005 	beq	c024 <CUSBDevice::Initialize()+0x30>
    c00c:	e3041a18 	movw	r1, #18968	; 0x4a18
    c010:	e3401002 	movt	r1, #2
    c014:	e3040b20 	movw	r0, #19232	; 0x4b20
    c018:	e3400002 	movt	r0, #2
    c01c:	e3a02061 	mov	r2, #97	; 0x61
    c020:	eb00350b 	bl	19454 <assertion_failed>
    c024:	e3a00012 	mov	r0, #18
    c028:	eb005814 	bl	22080 <operator new(unsigned int)>
    c02c:	e5943000 	ldr	r3, [r4]
    c030:	e5840010 	str	r0, [r4, #16]
    c034:	e3530000 	cmp	r3, #0
    c038:	0a00003a 	beq	c128 <CUSBDevice::Initialize()+0x134>
    c03c:	e5941008 	ldr	r1, [r4, #8]
    c040:	e3510000 	cmp	r1, #0
    c044:	0a00002f 	beq	c108 <CUSBDevice::Initialize()+0x114>
    c048:	e5942010 	ldr	r2, [r4, #16]
    c04c:	e3a06000 	mov	r6, #0
    c050:	e5940000 	ldr	r0, [r4]
    c054:	e3a0c008 	mov	ip, #8
    c058:	e58d2000 	str	r2, [sp]
    c05c:	e1a03006 	mov	r3, r6
    c060:	e58d600c 	str	r6, [sp, #12]
    c064:	e3a05080 	mov	r5, #128	; 0x80
    c068:	e3a02001 	mov	r2, #1
    c06c:	e58d5008 	str	r5, [sp, #8]
    c070:	e58dc004 	str	ip, [sp, #4]
    c074:	eb000342 	bl	cd84 <CUSBHostController::GetDescriptor(CUSBEndpoint*, unsigned char, unsigned char, void*, unsigned int, unsigned char, unsigned short)>
    c078:	e3500008 	cmp	r0, #8
    c07c:	1a000014 	bne	c0d4 <CUSBDevice::Initialize()+0xe0>
    c080:	e5943010 	ldr	r3, [r4, #16]
    c084:	e5d37000 	ldrb	r7, [r3]
    c088:	e3570012 	cmp	r7, #18
    c08c:	1a000002 	bne	c09c <CUSBDevice::Initialize()+0xa8>
    c090:	e5d38001 	ldrb	r8, [r3, #1]
    c094:	e3580001 	cmp	r8, #1
    c098:	0a000029 	beq	c144 <CUSBDevice::Initialize()+0x150>
    c09c:	e3a01001 	mov	r1, #1
    c0a0:	e1a00004 	mov	r0, r4
    c0a4:	e3042b5c 	movw	r2, #19292	; 0x4b5c
    c0a8:	e3402002 	movt	r2, #2
    c0ac:	ebffffa3 	bl	bf40 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
    c0b0:	e3a01012 	mov	r1, #18
    c0b4:	e5940010 	ldr	r0, [r4, #16]
    c0b8:	eb0057f4 	bl	22090 <operator delete(void*, unsigned int)>
    c0bc:	e3a03000 	mov	r3, #0
    c0c0:	e1a05003 	mov	r5, r3
    c0c4:	e5843010 	str	r3, [r4, #16]
    c0c8:	e1a00005 	mov	r0, r5
    c0cc:	e28dd01c 	add	sp, sp, #28
    c0d0:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c0d4:	e1a00004 	mov	r0, r4
    c0d8:	e3a01001 	mov	r1, #1
    c0dc:	e3042b34 	movw	r2, #19252	; 0x4b34
    c0e0:	e3402002 	movt	r2, #2
    c0e4:	ebffff95 	bl	bf40 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
    c0e8:	e1a05006 	mov	r5, r6
    c0ec:	e5940010 	ldr	r0, [r4, #16]
    c0f0:	e3a01012 	mov	r1, #18
    c0f4:	eb0057e5 	bl	22090 <operator delete(void*, unsigned int)>
    c0f8:	e1a00005 	mov	r0, r5
    c0fc:	e5846010 	str	r6, [r4, #16]
    c100:	e28dd01c 	add	sp, sp, #28
    c104:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c108:	e3041a18 	movw	r1, #18968	; 0x4a18
    c10c:	e3401002 	movt	r1, #2
    c110:	e3040ac8 	movw	r0, #19144	; 0x4ac8
    c114:	e3400002 	movt	r0, #2
    c118:	e3a02066 	mov	r2, #102	; 0x66
    c11c:	eb0034cc 	bl	19454 <assertion_failed>
    c120:	e5941008 	ldr	r1, [r4, #8]
    c124:	eaffffc7 	b	c048 <CUSBDevice::Initialize()+0x54>
    c128:	e3041a18 	movw	r1, #18968	; 0x4a18
    c12c:	e3401002 	movt	r1, #2
    c130:	e3040a28 	movw	r0, #18984	; 0x4a28
    c134:	e3400002 	movt	r0, #2
    c138:	e3a02065 	mov	r2, #101	; 0x65
    c13c:	eb0034c4 	bl	19454 <assertion_failed>
    c140:	eaffffbd 	b	c03c <CUSBDevice::Initialize()+0x48>
    c144:	e5d31007 	ldrb	r1, [r3, #7]
    c148:	e5940008 	ldr	r0, [r4, #8]
    c14c:	eb000271 	bl	cb18 <CUSBEndpoint::SetMaxPacketSize(unsigned int)>
    c150:	e594c010 	ldr	ip, [r4, #16]
    c154:	e5941008 	ldr	r1, [r4, #8]
    c158:	e1a03006 	mov	r3, r6
    c15c:	e5940000 	ldr	r0, [r4]
    c160:	e1a02008 	mov	r2, r8
    c164:	e58d600c 	str	r6, [sp, #12]
    c168:	e58d5008 	str	r5, [sp, #8]
    c16c:	e58d7004 	str	r7, [sp, #4]
    c170:	e58dc000 	str	ip, [sp]
    c174:	eb000302 	bl	cd84 <CUSBHostController::GetDescriptor(CUSBEndpoint*, unsigned char, unsigned char, void*, unsigned int, unsigned char, unsigned short)>
    c178:	e3500012 	cmp	r0, #18
    c17c:	1a000047 	bne	c2a0 <CUSBDevice::Initialize()+0x2ac>
    c180:	e30b2018 	movw	r2, #45080	; 0xb018
    c184:	e3402002 	movt	r2, #2
    c188:	e5d27000 	ldrb	r7, [r2]
    c18c:	e2873001 	add	r3, r7, #1
    c190:	e3170080 	tst	r7, #128	; 0x80
    c194:	e5c23000 	strb	r3, [r2]
    c198:	1a00004b 	bne	c2cc <CUSBDevice::Initialize()+0x2d8>
    c19c:	e1a02007 	mov	r2, r7
    c1a0:	e5941008 	ldr	r1, [r4, #8]
    c1a4:	e5940000 	ldr	r0, [r4]
    c1a8:	eb000303 	bl	cdbc <CUSBHostController::SetAddress(CUSBEndpoint*, unsigned char)>
    c1ac:	e2505000 	subs	r5, r0, #0
    c1b0:	0a000057 	beq	c314 <CUSBDevice::Initialize()+0x320>
    c1b4:	e5943014 	ldr	r3, [r4, #20]
    c1b8:	e5c47004 	strb	r7, [r4, #4]
    c1bc:	e3530000 	cmp	r3, #0
    c1c0:	0a000005 	beq	c1dc <CUSBDevice::Initialize()+0x1e8>
    c1c4:	e3041a18 	movw	r1, #18968	; 0x4a18
    c1c8:	e3401002 	movt	r1, #2
    c1cc:	e3040bc4 	movw	r0, #19396	; 0x4bc4
    c1d0:	e3400002 	movt	r0, #2
    c1d4:	e3a020a5 	mov	r2, #165	; 0xa5
    c1d8:	eb00349d 	bl	19454 <assertion_failed>
    c1dc:	e3a00009 	mov	r0, #9
    c1e0:	e3a07009 	mov	r7, #9
    c1e4:	eb0057a5 	bl	22080 <operator new(unsigned int)>
    c1e8:	e5942010 	ldr	r2, [r4, #16]
    c1ec:	e5840014 	str	r0, [r4, #20]
    c1f0:	e1a03000 	mov	r3, r0
    c1f4:	e3001525 	movw	r1, #1317	; 0x525
    c1f8:	e3a06000 	mov	r6, #0
    c1fc:	e3a08080 	mov	r8, #128	; 0x80
    c200:	e1d200b8 	ldrh	r0, [r2, #8]
    c204:	e1500001 	cmp	r0, r1
    c208:	e5941008 	ldr	r1, [r4, #8]
    c20c:	13a05000 	movne	r5, #0
    c210:	e5940000 	ldr	r0, [r4]
    c214:	01d250ba 	ldrheq	r5, [r2, #10]
    c218:	030a24a2 	movweq	r2, #42146	; 0xa4a2
    c21c:	e58d3000 	str	r3, [sp]
    c220:	00455002 	subeq	r5, r5, r2
    c224:	e58d600c 	str	r6, [sp, #12]
    c228:	016f5f15 	clzeq	r5, r5
    c22c:	e3a02002 	mov	r2, #2
    c230:	01a052a5 	lsreq	r5, r5, #5
    c234:	e58d8008 	str	r8, [sp, #8]
    c238:	e1a03005 	mov	r3, r5
    c23c:	e58d7004 	str	r7, [sp, #4]
    c240:	eb0002cf 	bl	cd84 <CUSBHostController::GetDescriptor(CUSBEndpoint*, unsigned char, unsigned char, void*, unsigned int, unsigned char, unsigned short)>
    c244:	e1500007 	cmp	r0, r7
    c248:	13042bd8 	movwne	r2, #19416	; 0x4bd8
    c24c:	13402002 	movtne	r2, #2
    c250:	1a000026 	bne	c2f0 <CUSBDevice::Initialize()+0x2fc>
    c254:	e5940014 	ldr	r0, [r4, #20]
    c258:	e5d07000 	ldrb	r7, [r0]
    c25c:	e3570009 	cmp	r7, #9
    c260:	1a000002 	bne	c270 <CUSBDevice::Initialize()+0x27c>
    c264:	e5d09001 	ldrb	r9, [r0, #1]
    c268:	e3590002 	cmp	r9, #2
    c26c:	0a00002f 	beq	c330 <CUSBDevice::Initialize()+0x33c>
    c270:	e3a01001 	mov	r1, #1
    c274:	e1a00004 	mov	r0, r4
    c278:	e3042c04 	movw	r2, #19460	; 0x4c04
    c27c:	e3402002 	movt	r2, #2
    c280:	ebffff2e 	bl	bf40 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
    c284:	e3a01009 	mov	r1, #9
    c288:	e5940014 	ldr	r0, [r4, #20]
    c28c:	eb00577f 	bl	22090 <operator delete(void*, unsigned int)>
    c290:	e3a03000 	mov	r3, #0
    c294:	e1a05003 	mov	r5, r3
    c298:	e5843014 	str	r3, [r4, #20]
    c29c:	eaffff89 	b	c0c8 <CUSBDevice::Initialize()+0xd4>
    c2a0:	e1a01008 	mov	r1, r8
    c2a4:	e1a00004 	mov	r0, r4
    c2a8:	e3042b78 	movw	r2, #19320	; 0x4b78
    c2ac:	e3402002 	movt	r2, #2
    c2b0:	ebffff22 	bl	bf40 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
    c2b4:	e1a01007 	mov	r1, r7
    c2b8:	e5940010 	ldr	r0, [r4, #16]
    c2bc:	e1a05006 	mov	r5, r6
    c2c0:	eb005772 	bl	22090 <operator delete(void*, unsigned int)>
    c2c4:	e5846010 	str	r6, [r4, #16]
    c2c8:	eaffff7e 	b	c0c8 <CUSBDevice::Initialize()+0xd4>
    c2cc:	e1a01008 	mov	r1, r8
    c2d0:	e1a00004 	mov	r0, r4
    c2d4:	e3042b98 	movw	r2, #19352	; 0x4b98
    c2d8:	e3402002 	movt	r2, #2
    c2dc:	e1a05006 	mov	r5, r6
    c2e0:	ebffff16 	bl	bf40 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
    c2e4:	eaffff77 	b	c0c8 <CUSBDevice::Initialize()+0xd4>
    c2e8:	e3042c28 	movw	r2, #19496	; 0x4c28
    c2ec:	e3402002 	movt	r2, #2
    c2f0:	e3a01001 	mov	r1, #1
    c2f4:	e1a00004 	mov	r0, r4
    c2f8:	ebffff10 	bl	bf40 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
    c2fc:	e1a01007 	mov	r1, r7
    c300:	e5940014 	ldr	r0, [r4, #20]
    c304:	e1a05006 	mov	r5, r6
    c308:	eb005760 	bl	22090 <operator delete(void*, unsigned int)>
    c30c:	e5846014 	str	r6, [r4, #20]
    c310:	eaffff6c 	b	c0c8 <CUSBDevice::Initialize()+0xd4>
    c314:	e1a03007 	mov	r3, r7
    c318:	e1a01008 	mov	r1, r8
    c31c:	e1a00004 	mov	r0, r4
    c320:	e3042bac 	movw	r2, #19372	; 0x4bac
    c324:	e3402002 	movt	r2, #2
    c328:	ebffff04 	bl	bf40 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
    c32c:	eaffff65 	b	c0c8 <CUSBDevice::Initialize()+0xd4>
    c330:	e1d0a0b2 	ldrh	sl, [r0, #2]
    c334:	e35a0c02 	cmp	sl, #512	; 0x200
    c338:	8affffcc 	bhi	c270 <CUSBDevice::Initialize()+0x27c>
    c33c:	e1a01007 	mov	r1, r7
    c340:	eb005752 	bl	22090 <operator delete(void*, unsigned int)>
    c344:	e1a0000a 	mov	r0, sl
    c348:	eb00574d 	bl	22084 <operator new[](unsigned int)>
    c34c:	e58d600c 	str	r6, [sp, #12]
    c350:	e5840014 	str	r0, [r4, #20]
    c354:	e1a03005 	mov	r3, r5
    c358:	e58d0000 	str	r0, [sp]
    c35c:	e1a02009 	mov	r2, r9
    c360:	e58d8008 	str	r8, [sp, #8]
    c364:	e58da004 	str	sl, [sp, #4]
    c368:	e5941008 	ldr	r1, [r4, #8]
    c36c:	e5940000 	ldr	r0, [r4]
    c370:	eb000283 	bl	cd84 <CUSBHostController::GetDescriptor(CUSBEndpoint*, unsigned char, unsigned char, void*, unsigned int, unsigned char, unsigned short)>
    c374:	e150000a 	cmp	r0, sl
    c378:	1affffda 	bne	c2e8 <CUSBDevice::Initialize()+0x2f4>
    c37c:	e5943018 	ldr	r3, [r4, #24]
    c380:	e3530000 	cmp	r3, #0
    c384:	0a000005 	beq	c3a0 <CUSBDevice::Initialize()+0x3ac>
    c388:	e3041a18 	movw	r1, #18968	; 0x4a18
    c38c:	e3401002 	movt	r1, #2
    c390:	e3040c4c 	movw	r0, #19532	; 0x4c4c
    c394:	e3400002 	movt	r0, #2
    c398:	e3a020e3 	mov	r2, #227	; 0xe3
    c39c:	eb00342c 	bl	19454 <assertion_failed>
    c3a0:	e3a0001c 	mov	r0, #28
    c3a4:	eb005735 	bl	22080 <operator new(unsigned int)>
    c3a8:	e1a0200a 	mov	r2, sl
    c3ac:	e1a05000 	mov	r5, r0
    c3b0:	e5941014 	ldr	r1, [r4, #20]
    c3b4:	eb002243 	bl	14cc8 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)>
    c3b8:	e5845018 	str	r5, [r4, #24]
    c3bc:	e1a00005 	mov	r0, r5
    c3c0:	eb0022b0 	bl	14e88 <CUSBConfigurationParser::IsValid() const>
    c3c4:	e2505000 	subs	r5, r0, #0
    c3c8:	e1a00004 	mov	r0, r4
    c3cc:	0a0000a6 	beq	c66c <CUSBDevice::Initialize()+0x678>
    c3d0:	ebfffe0f 	bl	bc14 <CUSBDevice::GetNames() const>
    c3d4:	e2506000 	subs	r6, r0, #0
    c3d8:	0a0000be 	beq	c6d8 <CUSBDevice::Initialize()+0x6e4>
    c3dc:	eb004a32 	bl	1ecac <CString::operator char const*() const>
    c3e0:	e3042c70 	movw	r2, #19568	; 0x4c70
    c3e4:	e3402002 	movt	r2, #2
    c3e8:	e1a03000 	mov	r3, r0
    c3ec:	e3a01003 	mov	r1, #3
    c3f0:	e1a00004 	mov	r0, r4
    c3f4:	ebfffed1 	bl	bf40 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
    c3f8:	e5963000 	ldr	r3, [r6]
    c3fc:	e1a00006 	mov	r0, r6
    c400:	e5933004 	ldr	r3, [r3, #4]
    c404:	e12fff33 	blx	r3
    c408:	e3a07000 	mov	r7, #0
    c40c:	e304bcec 	movw	fp, #19692	; 0x4cec
    c410:	e340b002 	movt	fp, #2
    c414:	e304aa90 	movw	sl, #19088	; 0x4a90
    c418:	e340a002 	movt	sl, #2
    c41c:	e1a06007 	mov	r6, r7
    c420:	e3043cd8 	movw	r3, #19672	; 0x4cd8
    c424:	e3403002 	movt	r3, #2
    c428:	e58d3014 	str	r3, [sp, #20]
    c42c:	e3a01004 	mov	r1, #4
    c430:	e5940018 	ldr	r0, [r4, #24]
    c434:	eb002295 	bl	14e90 <CUSBConfigurationParser::GetDescriptor(unsigned char)>
    c438:	e3500000 	cmp	r0, #0
    c43c:	0a00009c 	beq	c6b4 <CUSBDevice::Initialize()+0x6c0>
    c440:	e5d09002 	ldrb	r9, [r0, #2]
    c444:	e1590007 	cmp	r9, r7
    c448:	8a000008 	bhi	c470 <CUSBDevice::Initialize()+0x47c>
    c44c:	0a000006 	beq	c46c <CUSBDevice::Initialize()+0x478>
    c450:	e5d03003 	ldrb	r3, [r0, #3]
    c454:	e3042c80 	movw	r2, #19584	; 0x4c80
    c458:	e3402002 	movt	r2, #2
    c45c:	e3a01004 	mov	r1, #4
    c460:	e1a00004 	mov	r0, r4
    c464:	ebfffeb5 	bl	bf40 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
    c468:	eaffffef 	b	c42c <CUSBDevice::Initialize()+0x438>
    c46c:	e1a09007 	mov	r9, r7
    c470:	e5943018 	ldr	r3, [r4, #24]
    c474:	e3530000 	cmp	r3, #0
    c478:	0a000074 	beq	c650 <CUSBDevice::Initialize()+0x65c>
    c47c:	e0848106 	add	r8, r4, r6, lsl #2
    c480:	e598301c 	ldr	r3, [r8, #28]
    c484:	e3530000 	cmp	r3, #0
    c488:	0a000005 	beq	c4a4 <CUSBDevice::Initialize()+0x4b0>
    c48c:	e3041a18 	movw	r1, #18968	; 0x4a18
    c490:	e3401002 	movt	r1, #2
    c494:	e3040ca0 	movw	r0, #19616	; 0x4ca0
    c498:	e3400002 	movt	r0, #2
    c49c:	e3002113 	movw	r2, #275	; 0x113
    c4a0:	eb0033eb 	bl	19454 <assertion_failed>
    c4a4:	e3a00010 	mov	r0, #16
    c4a8:	eb0056f4 	bl	22080 <operator new(unsigned int)>
    c4ac:	e5942018 	ldr	r2, [r4, #24]
    c4b0:	e1a07000 	mov	r7, r0
    c4b4:	e1a01004 	mov	r1, r4
    c4b8:	eb0019f4 	bl	12c90 <CUSBFunction::CUSBFunction(CUSBDevice*, CUSBConfigurationParser*)>
    c4bc:	e588701c 	str	r7, [r8, #28]
    c4c0:	e1a00007 	mov	r0, r7
    c4c4:	eb0019cf 	bl	12c08 <CUSBFunction::Initialize()>
    c4c8:	e2503000 	subs	r3, r0, #0
    c4cc:	e58d3010 	str	r3, [sp, #16]
    c4d0:	0a000041 	beq	c5dc <CUSBDevice::Initialize()+0x5e8>
    c4d4:	e3560000 	cmp	r6, #0
    c4d8:	1a000019 	bne	c544 <CUSBDevice::Initialize()+0x550>
    c4dc:	e594701c 	ldr	r7, [r4, #28]
    c4e0:	e1a01006 	mov	r1, r6
    c4e4:	e1a00004 	mov	r0, r4
    c4e8:	ebfffd84 	bl	bb00 <CUSBDevice::GetName(TDeviceNameSelector) const>
    c4ec:	e1a01000 	mov	r1, r0
    c4f0:	e1a00007 	mov	r0, r7
    c4f4:	eb000370 	bl	d2bc <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)>
    c4f8:	e2507000 	subs	r7, r0, #0
    c4fc:	0a000007 	beq	c520 <CUSBDevice::Initialize()+0x52c>
    c500:	e594001c 	ldr	r0, [r4, #28]
    c504:	e3500000 	cmp	r0, #0
    c508:	1a000023 	bne	c59c <CUSBDevice::Initialize()+0x5a8>
    c50c:	e3a06001 	mov	r6, #1
    c510:	e584701c 	str	r7, [r4, #28]
    c514:	e2897001 	add	r7, r9, #1
    c518:	e6ef7077 	uxtb	r7, r7
    c51c:	eaffffc2 	b	c42c <CUSBDevice::Initialize()+0x438>
    c520:	e594701c 	ldr	r7, [r4, #28]
    c524:	e3a01001 	mov	r1, #1
    c528:	e1a00004 	mov	r0, r4
    c52c:	ebfffd73 	bl	bb00 <CUSBDevice::GetName(TDeviceNameSelector) const>
    c530:	e1a01000 	mov	r1, r0
    c534:	e1a00007 	mov	r0, r7
    c538:	eb00035f 	bl	d2bc <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)>
    c53c:	e2507000 	subs	r7, r0, #0
    c540:	1affffee 	bne	c500 <CUSBDevice::Initialize()+0x50c>
    c544:	e598001c 	ldr	r0, [r8, #28]
    c548:	eb001a46 	bl	12e68 <CUSBFunction::GetInterfaceName() const>
    c54c:	e2507000 	subs	r7, r0, #0
    c550:	0a00004b 	beq	c684 <CUSBDevice::Initialize()+0x690>
    c554:	e1a0100a 	mov	r1, sl
    c558:	eb004a26 	bl	1edf8 <CString::Compare(char const*) const>
    c55c:	e3500000 	cmp	r0, #0
    c560:	0a00002c 	beq	c618 <CUSBDevice::Initialize()+0x624>
    c564:	e1a00007 	mov	r0, r7
    c568:	eb0049cf 	bl	1ecac <CString::operator char const*() const>
    c56c:	e59d2014 	ldr	r2, [sp, #20]
    c570:	e1a03000 	mov	r3, r0
    c574:	e3a01003 	mov	r1, #3
    c578:	e1a00004 	mov	r0, r4
    c57c:	ebfffe6f 	bl	bf40 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
    c580:	e1a01007 	mov	r1, r7
    c584:	e598001c 	ldr	r0, [r8, #28]
    c588:	eb00034b 	bl	d2bc <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)>
    c58c:	e1a07000 	mov	r7, r0
    c590:	e598001c 	ldr	r0, [r8, #28]
    c594:	e3500000 	cmp	r0, #0
    c598:	0a000002 	beq	c5a8 <CUSBDevice::Initialize()+0x5b4>
    c59c:	e5903000 	ldr	r3, [r0]
    c5a0:	e5933004 	ldr	r3, [r3, #4]
    c5a4:	e12fff33 	blx	r3
    c5a8:	e3570000 	cmp	r7, #0
    c5ac:	0a000032 	beq	c67c <CUSBDevice::Initialize()+0x688>
    c5b0:	e2866001 	add	r6, r6, #1
    c5b4:	e588701c 	str	r7, [r8, #28]
    c5b8:	e356000a 	cmp	r6, #10
    c5bc:	1affffd4 	bne	c514 <CUSBDevice::Initialize()+0x520>
    c5c0:	e1a00004 	mov	r0, r4
    c5c4:	e3042d08 	movw	r2, #19720	; 0x4d08
    c5c8:	e3402002 	movt	r2, #2
    c5cc:	e3a01002 	mov	r1, #2
    c5d0:	e59d5010 	ldr	r5, [sp, #16]
    c5d4:	ebfffe59 	bl	bf40 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
    c5d8:	eafffeba 	b	c0c8 <CUSBDevice::Initialize()+0xd4>
    c5dc:	e1a00004 	mov	r0, r4
    c5e0:	e3042cbc 	movw	r2, #19644	; 0x4cbc
    c5e4:	e3402002 	movt	r2, #2
    c5e8:	e3a01001 	mov	r1, #1
    c5ec:	ebfffe53 	bl	bf40 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
    c5f0:	e598001c 	ldr	r0, [r8, #28]
    c5f4:	e3500000 	cmp	r0, #0
    c5f8:	0a000002 	beq	c608 <CUSBDevice::Initialize()+0x614>
    c5fc:	e5903000 	ldr	r3, [r0]
    c600:	e5933004 	ldr	r3, [r3, #4]
    c604:	e12fff33 	blx	r3
    c608:	e3a03000 	mov	r3, #0
    c60c:	e1a07009 	mov	r7, r9
    c610:	e588301c 	str	r3, [r8, #28]
    c614:	eaffff84 	b	c42c <CUSBDevice::Initialize()+0x438>
    c618:	e5973000 	ldr	r3, [r7]
    c61c:	e1a00007 	mov	r0, r7
    c620:	e5933004 	ldr	r3, [r3, #4]
    c624:	e12fff33 	blx	r3
    c628:	e598001c 	ldr	r0, [r8, #28]
    c62c:	e3500000 	cmp	r0, #0
    c630:	13a07000 	movne	r7, #0
    c634:	1affffd8 	bne	c59c <CUSBDevice::Initialize()+0x5a8>
    c638:	e1a0200b 	mov	r2, fp
    c63c:	e3a01002 	mov	r1, #2
    c640:	e1a00004 	mov	r0, r4
    c644:	e1a07009 	mov	r7, r9
    c648:	ebfffe3c 	bl	bf40 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
    c64c:	eaffff76 	b	c42c <CUSBDevice::Initialize()+0x438>
    c650:	e3041a18 	movw	r1, #18968	; 0x4a18
    c654:	e3401002 	movt	r1, #2
    c658:	e3040af0 	movw	r0, #19184	; 0x4af0
    c65c:	e3400002 	movt	r0, #2
    c660:	e3002112 	movw	r2, #274	; 0x112
    c664:	eb00337a 	bl	19454 <assertion_failed>
    c668:	eaffff83 	b	c47c <CUSBDevice::Initialize()+0x488>
    c66c:	e3041a10 	movw	r1, #18960	; 0x4a10
    c670:	e3401002 	movt	r1, #2
    c674:	ebfffe1e 	bl	bef4 <CUSBDevice::ConfigurationError(char const*) const>
    c678:	eafffe92 	b	c0c8 <CUSBDevice::Initialize()+0xd4>
    c67c:	e588701c 	str	r7, [r8, #28]
    c680:	eaffffec 	b	c638 <CUSBDevice::Initialize()+0x644>
    c684:	e300212f 	movw	r2, #303	; 0x12f
    c688:	e3041a18 	movw	r1, #18968	; 0x4a18
    c68c:	e3401002 	movt	r1, #2
    c690:	e3040a98 	movw	r0, #19096	; 0x4a98
    c694:	e3400002 	movt	r0, #2
    c698:	eb00336d 	bl	19454 <assertion_failed>
    c69c:	e1a0100a 	mov	r1, sl
    c6a0:	e1a00007 	mov	r0, r7
    c6a4:	eb0049d3 	bl	1edf8 <CString::Compare(char const*) const>
    c6a8:	e3500000 	cmp	r0, #0
    c6ac:	0affffdd 	beq	c628 <CUSBDevice::Initialize()+0x634>
    c6b0:	eaffffab 	b	c564 <CUSBDevice::Initialize()+0x570>
    c6b4:	e3560000 	cmp	r6, #0
    c6b8:	1afffe82 	bne	c0c8 <CUSBDevice::Initialize()+0xd4>
    c6bc:	e1a00004 	mov	r0, r4
    c6c0:	e3042d28 	movw	r2, #19752	; 0x4d28
    c6c4:	e3402002 	movt	r2, #2
    c6c8:	e3a01002 	mov	r1, #2
    c6cc:	e1a05006 	mov	r5, r6
    c6d0:	ebfffe1a 	bl	bf40 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
    c6d4:	eafffe7b 	b	c0c8 <CUSBDevice::Initialize()+0xd4>
    c6d8:	e3a020ef 	mov	r2, #239	; 0xef
    c6dc:	e3041a18 	movw	r1, #18968	; 0x4a18
    c6e0:	e3401002 	movt	r1, #2
    c6e4:	e3040c64 	movw	r0, #19556	; 0x4c64
    c6e8:	e3400002 	movt	r0, #2
    c6ec:	eb003358 	bl	19454 <assertion_failed>
    c6f0:	e1a00006 	mov	r0, r6
    c6f4:	eb00496c 	bl	1ecac <CString::operator char const*() const>
    c6f8:	e3042c70 	movw	r2, #19568	; 0x4c70
    c6fc:	e3402002 	movt	r2, #2
    c700:	e1a03000 	mov	r3, r0
    c704:	e3a01003 	mov	r1, #3
    c708:	e1a00004 	mov	r0, r4
    c70c:	ebfffe0b 	bl	bf40 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
    c710:	eaffff3c 	b	c408 <CUSBDevice::Initialize()+0x414>

0000c714 <CUSBDevice::Configure()>:
    c714:	e5903000 	ldr	r3, [r0]
    c718:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    c71c:	e1a05000 	mov	r5, r0
    c720:	e3530000 	cmp	r3, #0
    c724:	0a00002c 	beq	c7dc <CUSBDevice::Configure()+0xc8>
    c728:	e5953008 	ldr	r3, [r5, #8]
    c72c:	e3530000 	cmp	r3, #0
    c730:	0a000032 	beq	c800 <CUSBDevice::Configure()+0xec>
    c734:	e5956014 	ldr	r6, [r5, #20]
    c738:	e3560000 	cmp	r6, #0
    c73c:	0a00001b 	beq	c7b0 <CUSBDevice::Configure()+0x9c>
    c740:	e5d62005 	ldrb	r2, [r6, #5]
    c744:	e5951008 	ldr	r1, [r5, #8]
    c748:	e5950000 	ldr	r0, [r5]
    c74c:	eb0001ad 	bl	ce08 <CUSBHostController::SetConfiguration(CUSBEndpoint*, unsigned char)>
    c750:	e2506000 	subs	r6, r0, #0
    c754:	0a000017 	beq	c7b8 <CUSBDevice::Configure()+0xa4>
    c758:	e3a06000 	mov	r6, #0
    c75c:	e2854018 	add	r4, r5, #24
    c760:	e1a07006 	mov	r7, r6
    c764:	e2855040 	add	r5, r5, #64	; 0x40
    c768:	e5b43004 	ldr	r3, [r4, #4]!
    c76c:	e2530000 	subs	r0, r3, #0
    c770:	0a00000c 	beq	c7a8 <CUSBDevice::Configure()+0x94>
    c774:	e5933000 	ldr	r3, [r3]
    c778:	e5933018 	ldr	r3, [r3, #24]
    c77c:	e12fff33 	blx	r3
    c780:	e3500000 	cmp	r0, #0
    c784:	11a06000 	movne	r6, r0
    c788:	1a000006 	bne	c7a8 <CUSBDevice::Configure()+0x94>
    c78c:	e5943000 	ldr	r3, [r4]
    c790:	e2530000 	subs	r0, r3, #0
    c794:	0a000002 	beq	c7a4 <CUSBDevice::Configure()+0x90>
    c798:	e5933000 	ldr	r3, [r3]
    c79c:	e5933004 	ldr	r3, [r3, #4]
    c7a0:	e12fff33 	blx	r3
    c7a4:	e5847000 	str	r7, [r4]
    c7a8:	e1540005 	cmp	r4, r5
    c7ac:	1affffed 	bne	c768 <CUSBDevice::Configure()+0x54>
    c7b0:	e1a00006 	mov	r0, r6
    c7b4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    c7b8:	e5953014 	ldr	r3, [r5, #20]
    c7bc:	e1a00005 	mov	r0, r5
    c7c0:	e3a01001 	mov	r1, #1
    c7c4:	e3042d4c 	movw	r2, #19788	; 0x4d4c
    c7c8:	e3402002 	movt	r2, #2
    c7cc:	e5d33005 	ldrb	r3, [r3, #5]
    c7d0:	ebfffdda 	bl	bf40 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
    c7d4:	e1a00006 	mov	r0, r6
    c7d8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    c7dc:	e3041a18 	movw	r1, #18968	; 0x4a18
    c7e0:	e3401002 	movt	r1, #2
    c7e4:	e3040a28 	movw	r0, #18984	; 0x4a28
    c7e8:	e3400002 	movt	r0, #2
    c7ec:	e300215e 	movw	r2, #350	; 0x15e
    c7f0:	eb003317 	bl	19454 <assertion_failed>
    c7f4:	e5953008 	ldr	r3, [r5, #8]
    c7f8:	e3530000 	cmp	r3, #0
    c7fc:	1affffcc 	bne	c734 <CUSBDevice::Configure()+0x20>
    c800:	e3041a18 	movw	r1, #18968	; 0x4a18
    c804:	e3401002 	movt	r1, #2
    c808:	e3040ac8 	movw	r0, #19144	; 0x4ac8
    c80c:	e3400002 	movt	r0, #2
    c810:	e300215f 	movw	r2, #351	; 0x15f
    c814:	eb00330e 	bl	19454 <assertion_failed>
    c818:	eaffffc5 	b	c734 <CUSBDevice::Configure()+0x20>

0000c81c <CUSBEndpoint::CUSBEndpoint(CUSBDevice*)>:
    c81c:	e92d4010 	push	{r4, lr}
    c820:	e1a04000 	mov	r4, r0
    c824:	e3a03000 	mov	r3, #0
    c828:	e3a00008 	mov	r0, #8
    c82c:	e3a02001 	mov	r2, #1
    c830:	e3510000 	cmp	r1, #0
    c834:	e5841000 	str	r1, [r4]
    c838:	e5840008 	str	r0, [r4, #8]
    c83c:	e584200c 	str	r2, [r4, #12]
    c840:	e5c43004 	strb	r3, [r4, #4]
    c844:	e5c43005 	strb	r3, [r4, #5]
    c848:	e5c43006 	strb	r3, [r4, #6]
    c84c:	e5c43010 	strb	r3, [r4, #16]
    c850:	0a000001 	beq	c85c <CUSBEndpoint::CUSBEndpoint(CUSBDevice*)+0x40>
    c854:	e1a00004 	mov	r0, r4
    c858:	e8bd8010 	pop	{r4, pc}
    c85c:	e3a02021 	mov	r2, #33	; 0x21
    c860:	e3041d6c 	movw	r1, #19820	; 0x4d6c
    c864:	e3401002 	movt	r1, #2
    c868:	e30408dc 	movw	r0, #18652	; 0x48dc
    c86c:	e3400002 	movt	r0, #2
    c870:	eb0032f7 	bl	19454 <assertion_failed>
    c874:	e1a00004 	mov	r0, r4
    c878:	e8bd8010 	pop	{r4, pc}

0000c87c <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>:
    c87c:	e92d4070 	push	{r4, r5, r6, lr}
    c880:	e3a03001 	mov	r3, #1
    c884:	e1a04000 	mov	r4, r0
    c888:	e3510000 	cmp	r1, #0
    c88c:	e1a05002 	mov	r5, r2
    c890:	e5801000 	str	r1, [r0]
    c894:	e580300c 	str	r3, [r0, #12]
    c898:	0a000049 	beq	c9c4 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x148>
    c89c:	e3550000 	cmp	r5, #0
    c8a0:	0a00004f 	beq	c9e4 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x168>
    c8a4:	e5d53000 	ldrb	r3, [r5]
    c8a8:	e3530006 	cmp	r3, #6
    c8ac:	9a000036 	bls	c98c <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x110>
    c8b0:	e5d53001 	ldrb	r3, [r5, #1]
    c8b4:	e3530005 	cmp	r3, #5
    c8b8:	0a000005 	beq	c8d4 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x58>
    c8bc:	e3041d6c 	movw	r1, #19820	; 0x4d6c
    c8c0:	e3401002 	movt	r1, #2
    c8c4:	e3040da8 	movw	r0, #19880	; 0x4da8
    c8c8:	e3400002 	movt	r0, #2
    c8cc:	e3a0202c 	mov	r2, #44	; 0x2c
    c8d0:	eb0032df 	bl	19454 <assertion_failed>
    c8d4:	e5d53003 	ldrb	r3, [r5, #3]
    c8d8:	e2033003 	and	r3, r3, #3
    c8dc:	e3530002 	cmp	r3, #2
    c8e0:	0a00001d 	beq	c95c <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0xe0>
    c8e4:	e3530003 	cmp	r3, #3
    c8e8:	0a000007 	beq	c90c <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x90>
    c8ec:	e3041d6c 	movw	r1, #19820	; 0x4d6c
    c8f0:	e3401002 	movt	r1, #2
    c8f4:	e3040ad8 	movw	r0, #19160	; 0x4ad8
    c8f8:	e3400002 	movt	r0, #2
    c8fc:	e3a0203b 	mov	r2, #59	; 0x3b
    c900:	eb0032d3 	bl	19454 <assertion_failed>
    c904:	e1a00004 	mov	r0, r4
    c908:	e8bd8070 	pop	{r4, r5, r6, pc}
    c90c:	e3a03002 	mov	r3, #2
    c910:	e3a06001 	mov	r6, #1
    c914:	e5c43005 	strb	r3, [r4, #5]
    c918:	e5c46010 	strb	r6, [r4, #16]
    c91c:	e5940000 	ldr	r0, [r4]
    c920:	e5d53002 	ldrb	r3, [r5, #2]
    c924:	e203200f 	and	r2, r3, #15
    c928:	e5c42004 	strb	r2, [r4, #4]
    c92c:	e1a033a3 	lsr	r3, r3, #7
    c930:	e5c43006 	strb	r3, [r4, #6]
    c934:	e1d530b4 	ldrh	r3, [r5, #4]
    c938:	e5843008 	str	r3, [r4, #8]
    c93c:	e5d55006 	ldrb	r5, [r5, #6]
    c940:	e3550000 	cmp	r5, #0
    c944:	1a000017 	bne	c9a8 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x12c>
    c948:	ebfffd0e 	bl	bd88 <CUSBDevice::GetSpeed() const>
    c94c:	e3a03014 	mov	r3, #20
    c950:	e1a00004 	mov	r0, r4
    c954:	e584300c 	str	r3, [r4, #12]
    c958:	e8bd8070 	pop	{r4, r5, r6, pc}
    c95c:	e3a03001 	mov	r3, #1
    c960:	e5c43005 	strb	r3, [r4, #5]
    c964:	e5c43010 	strb	r3, [r4, #16]
    c968:	e1a00004 	mov	r0, r4
    c96c:	e5d53002 	ldrb	r3, [r5, #2]
    c970:	e203200f 	and	r2, r3, #15
    c974:	e5c42004 	strb	r2, [r4, #4]
    c978:	e1a033a3 	lsr	r3, r3, #7
    c97c:	e5c43006 	strb	r3, [r4, #6]
    c980:	e1d530b4 	ldrh	r3, [r5, #4]
    c984:	e5843008 	str	r3, [r4, #8]
    c988:	e8bd8070 	pop	{r4, r5, r6, pc}
    c98c:	e3041d6c 	movw	r1, #19820	; 0x4d6c
    c990:	e3401002 	movt	r1, #2
    c994:	e3040d88 	movw	r0, #19848	; 0x4d88
    c998:	e3400002 	movt	r0, #2
    c99c:	e3a0202b 	mov	r2, #43	; 0x2b
    c9a0:	eb0032ab 	bl	19454 <assertion_failed>
    c9a4:	eaffffc1 	b	c8b0 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x34>
    c9a8:	ebfffcf6 	bl	bd88 <CUSBDevice::GetSpeed() const>
    c9ac:	e3500002 	cmp	r0, #2
    c9b0:	1584500c 	strne	r5, [r4, #12]
    c9b4:	0a000011 	beq	ca00 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x184>
    c9b8:	e3550013 	cmp	r5, #19
    c9bc:	8affffd0 	bhi	c904 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x88>
    c9c0:	eaffffe1 	b	c94c <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0xd0>
    c9c4:	e3041d6c 	movw	r1, #19820	; 0x4d6c
    c9c8:	e3401002 	movt	r1, #2
    c9cc:	e30408dc 	movw	r0, #18652	; 0x48dc
    c9d0:	e3400002 	movt	r0, #2
    c9d4:	e3a02028 	mov	r2, #40	; 0x28
    c9d8:	eb00329d 	bl	19454 <assertion_failed>
    c9dc:	e3550000 	cmp	r5, #0
    c9e0:	1affffaf 	bne	c8a4 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x28>
    c9e4:	e3041d6c 	movw	r1, #19820	; 0x4d6c
    c9e8:	e3401002 	movt	r1, #2
    c9ec:	e3040d7c 	movw	r0, #19836	; 0x4d7c
    c9f0:	e3400002 	movt	r0, #2
    c9f4:	e3a0202a 	mov	r2, #42	; 0x2a
    c9f8:	eb003295 	bl	19454 <assertion_failed>
    c9fc:	eaffffa8 	b	c8a4 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x28>
    ca00:	e3550010 	cmp	r5, #16
    ca04:	83a03a01 	movhi	r3, #4096	; 0x1000
    ca08:	8584300c 	strhi	r3, [r4, #12]
    ca0c:	8affffbc 	bhi	c904 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x88>
    ca10:	e2455001 	sub	r5, r5, #1
    ca14:	e1a05516 	lsl	r5, r6, r5
    ca18:	e1a051a5 	lsr	r5, r5, #3
    ca1c:	e584500c 	str	r5, [r4, #12]
    ca20:	e3550000 	cmp	r5, #0
    ca24:	0affffc8 	beq	c94c <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0xd0>
    ca28:	eaffffe2 	b	c9b8 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x13c>

0000ca2c <CUSBEndpoint::CUSBEndpoint(CUSBEndpoint*, CUSBDevice*)>:
    ca2c:	e92d4070 	push	{r4, r5, r6, lr}
    ca30:	e1a04000 	mov	r4, r0
    ca34:	e1a06002 	mov	r6, r2
    ca38:	e2515000 	subs	r5, r1, #0
    ca3c:	0a000017 	beq	caa0 <CUSBEndpoint::CUSBEndpoint(CUSBEndpoint*, CUSBDevice*)+0x74>
    ca40:	e5846000 	str	r6, [r4]
    ca44:	e3560000 	cmp	r6, #0
    ca48:	0a00000d 	beq	ca84 <CUSBEndpoint::CUSBEndpoint(CUSBEndpoint*, CUSBDevice*)+0x58>
    ca4c:	e5d53004 	ldrb	r3, [r5, #4]
    ca50:	e1a00004 	mov	r0, r4
    ca54:	e5c43004 	strb	r3, [r4, #4]
    ca58:	e5d53005 	ldrb	r3, [r5, #5]
    ca5c:	e5d5c006 	ldrb	ip, [r5, #6]
    ca60:	e5951008 	ldr	r1, [r5, #8]
    ca64:	e595200c 	ldr	r2, [r5, #12]
    ca68:	e5c43005 	strb	r3, [r4, #5]
    ca6c:	e5d53010 	ldrb	r3, [r5, #16]
    ca70:	e5c43010 	strb	r3, [r4, #16]
    ca74:	e5c4c006 	strb	ip, [r4, #6]
    ca78:	e5841008 	str	r1, [r4, #8]
    ca7c:	e584200c 	str	r2, [r4, #12]
    ca80:	e8bd8070 	pop	{r4, r5, r6, pc}
    ca84:	e3041d6c 	movw	r1, #19820	; 0x4d6c
    ca88:	e3401002 	movt	r1, #2
    ca8c:	e30408dc 	movw	r0, #18652	; 0x48dc
    ca90:	e3400002 	movt	r0, #2
    ca94:	e3a02070 	mov	r2, #112	; 0x70
    ca98:	eb00326d 	bl	19454 <assertion_failed>
    ca9c:	eaffffea 	b	ca4c <CUSBEndpoint::CUSBEndpoint(CUSBEndpoint*, CUSBDevice*)+0x20>
    caa0:	e3041d6c 	movw	r1, #19820	; 0x4d6c
    caa4:	e3401002 	movt	r1, #2
    caa8:	e3040dd8 	movw	r0, #19928	; 0x4dd8
    caac:	e3400002 	movt	r0, #2
    cab0:	e3a0206d 	mov	r2, #109	; 0x6d
    cab4:	eb003266 	bl	19454 <assertion_failed>
    cab8:	eaffffe0 	b	ca40 <CUSBEndpoint::CUSBEndpoint(CUSBEndpoint*, CUSBDevice*)+0x14>

0000cabc <CUSBEndpoint::~CUSBEndpoint()>:
    cabc:	e12fff1e 	bx	lr

0000cac0 <CUSBEndpoint::GetDevice() const>:
    cac0:	e5903000 	ldr	r3, [r0]
    cac4:	e3530000 	cmp	r3, #0
    cac8:	0a000001 	beq	cad4 <CUSBEndpoint::GetDevice() const+0x14>
    cacc:	e1a00003 	mov	r0, r3
    cad0:	e12fff1e 	bx	lr
    cad4:	e92d4010 	push	{r4, lr}
    cad8:	e1a04000 	mov	r4, r0
    cadc:	e3a02081 	mov	r2, #129	; 0x81
    cae0:	e3041d6c 	movw	r1, #19820	; 0x4d6c
    cae4:	e3401002 	movt	r1, #2
    cae8:	e30408dc 	movw	r0, #18652	; 0x48dc
    caec:	e3400002 	movt	r0, #2
    caf0:	eb003257 	bl	19454 <assertion_failed>
    caf4:	e5943000 	ldr	r3, [r4]
    caf8:	e1a00003 	mov	r0, r3
    cafc:	e8bd8010 	pop	{r4, pc}

0000cb00 <CUSBEndpoint::GetNumber() const>:
    cb00:	e5d00004 	ldrb	r0, [r0, #4]
    cb04:	e12fff1e 	bx	lr

0000cb08 <CUSBEndpoint::GetType() const>:
    cb08:	e5d00005 	ldrb	r0, [r0, #5]
    cb0c:	e12fff1e 	bx	lr

0000cb10 <CUSBEndpoint::IsDirectionIn() const>:
    cb10:	e5d00006 	ldrb	r0, [r0, #6]
    cb14:	e12fff1e 	bx	lr

0000cb18 <CUSBEndpoint::SetMaxPacketSize(unsigned int)>:
    cb18:	e5801008 	str	r1, [r0, #8]
    cb1c:	e12fff1e 	bx	lr

0000cb20 <CUSBEndpoint::GetMaxPacketSize() const>:
    cb20:	e5900008 	ldr	r0, [r0, #8]
    cb24:	e12fff1e 	bx	lr

0000cb28 <CUSBEndpoint::GetInterval() const>:
    cb28:	e5d03005 	ldrb	r3, [r0, #5]
    cb2c:	e92d4010 	push	{r4, lr}
    cb30:	e1a04000 	mov	r4, r0
    cb34:	e3530002 	cmp	r3, #2
    cb38:	0a000005 	beq	cb54 <CUSBEndpoint::GetInterval() const+0x2c>
    cb3c:	e3041d6c 	movw	r1, #19820	; 0x4d6c
    cb40:	e3401002 	movt	r1, #2
    cb44:	e3040de8 	movw	r0, #19944	; 0x4de8
    cb48:	e3400002 	movt	r0, #2
    cb4c:	e3a020a0 	mov	r2, #160	; 0xa0
    cb50:	eb00323f 	bl	19454 <assertion_failed>
    cb54:	e594000c 	ldr	r0, [r4, #12]
    cb58:	e8bd8010 	pop	{r4, pc}

0000cb5c <CUSBEndpoint::GetNextPID(bool)>:
    cb5c:	e3510000 	cmp	r1, #0
    cb60:	0a000004 	beq	cb78 <CUSBEndpoint::GetNextPID(bool)+0x1c>
    cb64:	e5d03005 	ldrb	r3, [r0, #5]
    cb68:	e3530000 	cmp	r3, #0
    cb6c:	1a000003 	bne	cb80 <CUSBEndpoint::GetNextPID(bool)+0x24>
    cb70:	e3a00002 	mov	r0, #2
    cb74:	e12fff1e 	bx	lr
    cb78:	e5d00010 	ldrb	r0, [r0, #16]
    cb7c:	e12fff1e 	bx	lr
    cb80:	e92d4010 	push	{r4, lr}
    cb84:	e3a020a9 	mov	r2, #169	; 0xa9
    cb88:	e3041d6c 	movw	r1, #19820	; 0x4d6c
    cb8c:	e3401002 	movt	r1, #2
    cb90:	e3040e08 	movw	r0, #19976	; 0x4e08
    cb94:	e3400002 	movt	r0, #2
    cb98:	eb00322d 	bl	19454 <assertion_failed>
    cb9c:	e3a00002 	mov	r0, #2
    cba0:	e8bd8010 	pop	{r4, pc}

0000cba4 <CUSBEndpoint::SkipPID(unsigned int, bool)>:
    cba4:	e5d03005 	ldrb	r3, [r0, #5]
    cba8:	e92d4070 	push	{r4, r5, r6, lr}
    cbac:	e1a04000 	mov	r4, r0
    cbb0:	e1a06001 	mov	r6, r1
    cbb4:	e1a05002 	mov	r5, r2
    cbb8:	e3530002 	cmp	r3, #2
    cbbc:	8a000011 	bhi	cc08 <CUSBEndpoint::SkipPID(unsigned int, bool)+0x64>
    cbc0:	e3550000 	cmp	r5, #0
    cbc4:	1a000009 	bne	cbf0 <CUSBEndpoint::SkipPID(unsigned int, bool)+0x4c>
    cbc8:	e5d43010 	ldrb	r3, [r4, #16]
    cbcc:	e3530001 	cmp	r3, #1
    cbd0:	0a000021 	beq	cc5c <CUSBEndpoint::SkipPID(unsigned int, bool)+0xb8>
    cbd4:	3a000022 	bcc	cc64 <CUSBEndpoint::SkipPID(unsigned int, bool)+0xc0>
    cbd8:	e3530002 	cmp	r3, #2
    cbdc:	1a000017 	bne	cc40 <CUSBEndpoint::SkipPID(unsigned int, bool)+0x9c>
    cbe0:	e3160001 	tst	r6, #1
    cbe4:	13a03001 	movne	r3, #1
    cbe8:	15c43010 	strbne	r3, [r4, #16]
    cbec:	e8bd8070 	pop	{r4, r5, r6, pc}
    cbf0:	e5d43005 	ldrb	r3, [r4, #5]
    cbf4:	e3530000 	cmp	r3, #0
    cbf8:	1a000009 	bne	cc24 <CUSBEndpoint::SkipPID(unsigned int, bool)+0x80>
    cbfc:	e3a03000 	mov	r3, #0
    cc00:	e5c43010 	strb	r3, [r4, #16]
    cc04:	e8bd8070 	pop	{r4, r5, r6, pc}
    cc08:	e3041d6c 	movw	r1, #19820	; 0x4d6c
    cc0c:	e3401002 	movt	r1, #2
    cc10:	e3040e28 	movw	r0, #20008	; 0x4e28
    cc14:	e3400002 	movt	r0, #2
    cc18:	e3a020b5 	mov	r2, #181	; 0xb5
    cc1c:	eb00320c 	bl	19454 <assertion_failed>
    cc20:	eaffffe6 	b	cbc0 <CUSBEndpoint::SkipPID(unsigned int, bool)+0x1c>
    cc24:	e3041d6c 	movw	r1, #19820	; 0x4d6c
    cc28:	e3401002 	movt	r1, #2
    cc2c:	e3040e08 	movw	r0, #19976	; 0x4e08
    cc30:	e3400002 	movt	r0, #2
    cc34:	e3a020d4 	mov	r2, #212	; 0xd4
    cc38:	eb003205 	bl	19454 <assertion_failed>
    cc3c:	eaffffee 	b	cbfc <CUSBEndpoint::SkipPID(unsigned int, bool)+0x58>
    cc40:	e3041d6c 	movw	r1, #19820	; 0x4d6c
    cc44:	e3401002 	movt	r1, #2
    cc48:	e3040ad8 	movw	r0, #19160	; 0x4ad8
    cc4c:	e3400002 	movt	r0, #2
    cc50:	e3a020ce 	mov	r2, #206	; 0xce
    cc54:	e8bd4070 	pop	{r4, r5, r6, lr}
    cc58:	ea0031fd 	b	19454 <assertion_failed>
    cc5c:	e3160001 	tst	r6, #1
    cc60:	08bd8070 	popeq	{r4, r5, r6, pc}
    cc64:	e3a03002 	mov	r3, #2
    cc68:	e5c43010 	strb	r3, [r4, #16]
    cc6c:	e8bd8070 	pop	{r4, r5, r6, pc}

0000cc70 <CUSBEndpoint::ResetPID()>:
    cc70:	e5d03005 	ldrb	r3, [r0, #5]
    cc74:	e92d4010 	push	{r4, lr}
    cc78:	e1a04000 	mov	r4, r0
    cc7c:	e3530001 	cmp	r3, #1
    cc80:	0a000005 	beq	cc9c <CUSBEndpoint::ResetPID()+0x2c>
    cc84:	e3041d6c 	movw	r1, #19820	; 0x4d6c
    cc88:	e3401002 	movt	r1, #2
    cc8c:	e3040e88 	movw	r0, #20104	; 0x4e88
    cc90:	e3400002 	movt	r0, #2
    cc94:	e3a020dc 	mov	r2, #220	; 0xdc
    cc98:	eb0031ed 	bl	19454 <assertion_failed>
    cc9c:	e3a03001 	mov	r3, #1
    cca0:	e5c43010 	strb	r3, [r4, #16]
    cca4:	e8bd8010 	pop	{r4, pc}

0000cca8 <CUSBHostController::CUSBHostController()>:
    cca8:	e59f3004 	ldr	r3, [pc, #4]	; ccb4 <CUSBHostController::CUSBHostController()+0xc>
    ccac:	e5803000 	str	r3, [r0]
    ccb0:	e12fff1e 	bx	lr
    ccb4:	00024eac 	.word	0x00024eac

0000ccb8 <CUSBHostController::~CUSBHostController()>:
    ccb8:	e12fff1e 	bx	lr

0000ccbc <CUSBHostController::~CUSBHostController()>:
    ccbc:	e92d4010 	push	{r4, lr}
    ccc0:	e3a01004 	mov	r1, #4
    ccc4:	e1a04000 	mov	r4, r0
    ccc8:	eb0054f0 	bl	22090 <operator delete(void*, unsigned int)>
    cccc:	e1a00004 	mov	r0, r4
    ccd0:	e8bd8010 	pop	{r4, pc}

0000ccd4 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>:
    ccd4:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ccd8:	e1a05000 	mov	r5, r0
    ccdc:	e3a00008 	mov	r0, #8
    cce0:	e24dd034 	sub	sp, sp, #52	; 0x34
    cce4:	e1a0a002 	mov	sl, r2
    cce8:	e1a09003 	mov	r9, r3
    ccec:	e1a0b001 	mov	fp, r1
    ccf0:	e1dd66b4 	ldrh	r6, [sp, #100]	; 0x64
    ccf4:	e1dd85b8 	ldrh	r8, [sp, #88]	; 0x58
    ccf8:	e1dd75bc 	ldrh	r7, [sp, #92]	; 0x5c
    ccfc:	eb0054df 	bl	22080 <operator new(unsigned int)>
    cd00:	e1a04000 	mov	r4, r0
    cd04:	e58d0000 	str	r0, [sp]
    cd08:	e1a0100b 	mov	r1, fp
    cd0c:	e5c0a000 	strb	sl, [r0]
    cd10:	e5c09001 	strb	r9, [r0, #1]
    cd14:	e1a03006 	mov	r3, r6
    cd18:	e59d2060 	ldr	r2, [sp, #96]	; 0x60
    cd1c:	e28d0008 	add	r0, sp, #8
    cd20:	e1c480b2 	strh	r8, [r4, #2]
    cd24:	e1c470b4 	strh	r7, [r4, #4]
    cd28:	e1c460b6 	strh	r6, [r4, #6]
    cd2c:	eb000061 	bl	ceb8 <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)>
    cd30:	e5953000 	ldr	r3, [r5]
    cd34:	e1a00005 	mov	r0, r5
    cd38:	e28d1008 	add	r1, sp, #8
    cd3c:	e3a02000 	mov	r2, #0
    cd40:	e5933008 	ldr	r3, [r3, #8]
    cd44:	e12fff33 	blx	r3
    cd48:	e3500000 	cmp	r0, #0
    cd4c:	0a00000a 	beq	cd7c <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)+0xa8>
    cd50:	e28d0008 	add	r0, sp, #8
    cd54:	eb000095 	bl	cfb0 <CUSBRequest::GetResultLength() const>
    cd58:	e1a05000 	mov	r5, r0
    cd5c:	e1a00004 	mov	r0, r4
    cd60:	e3a01008 	mov	r1, #8
    cd64:	eb0054c9 	bl	22090 <operator delete(void*, unsigned int)>
    cd68:	e28d0008 	add	r0, sp, #8
    cd6c:	eb000078 	bl	cf54 <CUSBRequest::~CUSBRequest()>
    cd70:	e1a00005 	mov	r0, r5
    cd74:	e28dd034 	add	sp, sp, #52	; 0x34
    cd78:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    cd7c:	e3e05000 	mvn	r5, #0
    cd80:	eafffff5 	b	cd5c <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)+0x88>

0000cd84 <CUSBHostController::GetDescriptor(CUSBEndpoint*, unsigned char, unsigned char, void*, unsigned int, unsigned char, unsigned short)>:
    cd84:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    cd88:	e1832402 	orr	r2, r3, r2, lsl #8
    cd8c:	e59de004 	ldr	lr, [sp, #4]
    cd90:	e5ddc00c 	ldrb	ip, [sp, #12]
    cd94:	e3a03006 	mov	r3, #6
    cd98:	e58d2004 	str	r2, [sp, #4]
    cd9c:	e58de00c 	str	lr, [sp, #12]
    cda0:	e1a0200c 	mov	r2, ip
    cda4:	e1dde0b8 	ldrh	lr, [sp, #8]
    cda8:	e1ddc1b0 	ldrh	ip, [sp, #16]
    cdac:	e58dc008 	str	ip, [sp, #8]
    cdb0:	e58de010 	str	lr, [sp, #16]
    cdb4:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    cdb8:	eaffffc5 	b	ccd4 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>

0000cdbc <CUSBHostController::SetAddress(CUSBEndpoint*, unsigned char)>:
    cdbc:	e92d4010 	push	{r4, lr}
    cdc0:	e3a04000 	mov	r4, #0
    cdc4:	e3a03005 	mov	r3, #5
    cdc8:	e24dd010 	sub	sp, sp, #16
    cdcc:	e58d2000 	str	r2, [sp]
    cdd0:	e1a02004 	mov	r2, r4
    cdd4:	e58d400c 	str	r4, [sp, #12]
    cdd8:	e58d4008 	str	r4, [sp, #8]
    cddc:	e58d4004 	str	r4, [sp, #4]
    cde0:	ebffffbb 	bl	ccd4 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
    cde4:	e1500004 	cmp	r0, r4
    cde8:	b1a00004 	movlt	r0, r4
    cdec:	ba000003 	blt	ce00 <CUSBHostController::SetAddress(CUSBEndpoint*, unsigned char)+0x44>
    cdf0:	eb004f08 	bl	20a18 <CTimer::Get()>
    cdf4:	e3a00032 	mov	r0, #50	; 0x32
    cdf8:	eb004ec9 	bl	20924 <CTimer::SimpleMsDelay(unsigned int)>
    cdfc:	e3a00001 	mov	r0, #1
    ce00:	e28dd010 	add	sp, sp, #16
    ce04:	e8bd8010 	pop	{r4, pc}

0000ce08 <CUSBHostController::SetConfiguration(CUSBEndpoint*, unsigned char)>:
    ce08:	e92d4010 	push	{r4, lr}
    ce0c:	e3a04000 	mov	r4, #0
    ce10:	e3a03009 	mov	r3, #9
    ce14:	e24dd010 	sub	sp, sp, #16
    ce18:	e58d2000 	str	r2, [sp]
    ce1c:	e1a02004 	mov	r2, r4
    ce20:	e58d400c 	str	r4, [sp, #12]
    ce24:	e58d4008 	str	r4, [sp, #8]
    ce28:	e58d4004 	str	r4, [sp, #4]
    ce2c:	ebffffa8 	bl	ccd4 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
    ce30:	e1500004 	cmp	r0, r4
    ce34:	b1a00004 	movlt	r0, r4
    ce38:	ba000003 	blt	ce4c <CUSBHostController::SetConfiguration(CUSBEndpoint*, unsigned char)+0x44>
    ce3c:	eb004ef5 	bl	20a18 <CTimer::Get()>
    ce40:	e3a00032 	mov	r0, #50	; 0x32
    ce44:	eb004eb6 	bl	20924 <CTimer::SimpleMsDelay(unsigned int)>
    ce48:	e3a00001 	mov	r0, #1
    ce4c:	e28dd010 	add	sp, sp, #16
    ce50:	e8bd8010 	pop	{r4, pc}

0000ce54 <CUSBHostController::Transfer(CUSBEndpoint*, void*, unsigned int, unsigned int)>:
    ce54:	e92d4010 	push	{r4, lr}
    ce58:	e1a04000 	mov	r4, r0
    ce5c:	e3a0c000 	mov	ip, #0
    ce60:	e24dd030 	sub	sp, sp, #48	; 0x30
    ce64:	e28d0008 	add	r0, sp, #8
    ce68:	e58dc000 	str	ip, [sp]
    ce6c:	eb000011 	bl	ceb8 <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)>
    ce70:	e5943000 	ldr	r3, [r4]
    ce74:	e1a00004 	mov	r0, r4
    ce78:	e59d2038 	ldr	r2, [sp, #56]	; 0x38
    ce7c:	e28d1008 	add	r1, sp, #8
    ce80:	e5933008 	ldr	r3, [r3, #8]
    ce84:	e12fff33 	blx	r3
    ce88:	e3500000 	cmp	r0, #0
    ce8c:	0a000007 	beq	ceb0 <CUSBHostController::Transfer(CUSBEndpoint*, void*, unsigned int, unsigned int)+0x5c>
    ce90:	e28d0008 	add	r0, sp, #8
    ce94:	eb000045 	bl	cfb0 <CUSBRequest::GetResultLength() const>
    ce98:	e1a04000 	mov	r4, r0
    ce9c:	e28d0008 	add	r0, sp, #8
    cea0:	eb00002b 	bl	cf54 <CUSBRequest::~CUSBRequest()>
    cea4:	e1a00004 	mov	r0, r4
    cea8:	e28dd030 	add	sp, sp, #48	; 0x30
    ceac:	e8bd8010 	pop	{r4, pc}
    ceb0:	e3e04000 	mvn	r4, #0
    ceb4:	eafffff8 	b	ce9c <CUSBHostController::Transfer(CUSBEndpoint*, void*, unsigned int, unsigned int)+0x48>

0000ceb8 <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)>:
    ceb8:	e92d4010 	push	{r4, lr}
    cebc:	e1a04000 	mov	r4, r0
    cec0:	e59dc008 	ldr	ip, [sp, #8]
    cec4:	e3a00000 	mov	r0, #0
    cec8:	e3510000 	cmp	r1, #0
    cecc:	e584300c 	str	r3, [r4, #12]
    ced0:	e5841000 	str	r1, [r4]
    ced4:	e5842008 	str	r2, [r4, #8]
    ced8:	e584c004 	str	ip, [r4, #4]
    cedc:	e5840010 	str	r0, [r4, #16]
    cee0:	e5840014 	str	r0, [r4, #20]
    cee4:	e5840018 	str	r0, [r4, #24]
    cee8:	e584001c 	str	r0, [r4, #28]
    ceec:	e5840020 	str	r0, [r4, #32]
    cef0:	e5c40024 	strb	r0, [r4, #36]	; 0x24
    cef4:	0a00000e 	beq	cf34 <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)+0x7c>
    cef8:	e3520000 	cmp	r2, #0
    cefc:	0a000001 	beq	cf08 <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)+0x50>
    cf00:	e1a00004 	mov	r0, r4
    cf04:	e8bd8010 	pop	{r4, pc}
    cf08:	e594300c 	ldr	r3, [r4, #12]
    cf0c:	e3530000 	cmp	r3, #0
    cf10:	0afffffa 	beq	cf00 <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)+0x48>
    cf14:	e3a02024 	mov	r2, #36	; 0x24
    cf18:	e3041ebc 	movw	r1, #20156	; 0x4ebc
    cf1c:	e3401002 	movt	r1, #2
    cf20:	e3040ecc 	movw	r0, #20172	; 0x4ecc
    cf24:	e3400002 	movt	r0, #2
    cf28:	eb003149 	bl	19454 <assertion_failed>
    cf2c:	e1a00004 	mov	r0, r4
    cf30:	e8bd8010 	pop	{r4, pc}
    cf34:	e3a02023 	mov	r2, #35	; 0x23
    cf38:	e3041ebc 	movw	r1, #20156	; 0x4ebc
    cf3c:	e3401002 	movt	r1, #2
    cf40:	e30408bc 	movw	r0, #18620	; 0x48bc
    cf44:	e3400002 	movt	r0, #2
    cf48:	eb003141 	bl	19454 <assertion_failed>
    cf4c:	e5942008 	ldr	r2, [r4, #8]
    cf50:	eaffffe8 	b	cef8 <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)+0x40>

0000cf54 <CUSBRequest::~CUSBRequest()>:
    cf54:	e12fff1e 	bx	lr

0000cf58 <CUSBRequest::GetEndpoint() const>:
    cf58:	e5903000 	ldr	r3, [r0]
    cf5c:	e3530000 	cmp	r3, #0
    cf60:	0a000001 	beq	cf6c <CUSBRequest::GetEndpoint() const+0x14>
    cf64:	e1a00003 	mov	r0, r3
    cf68:	e12fff1e 	bx	lr
    cf6c:	e92d4010 	push	{r4, lr}
    cf70:	e1a04000 	mov	r4, r0
    cf74:	e3a02031 	mov	r2, #49	; 0x31
    cf78:	e3041ebc 	movw	r1, #20156	; 0x4ebc
    cf7c:	e3401002 	movt	r1, #2
    cf80:	e30408bc 	movw	r0, #18620	; 0x48bc
    cf84:	e3400002 	movt	r0, #2
    cf88:	eb003131 	bl	19454 <assertion_failed>
    cf8c:	e5943000 	ldr	r3, [r4]
    cf90:	e1a00003 	mov	r0, r3
    cf94:	e8bd8010 	pop	{r4, pc}

0000cf98 <CUSBRequest::SetStatus(int)>:
    cf98:	e5801010 	str	r1, [r0, #16]
    cf9c:	e12fff1e 	bx	lr

0000cfa0 <CUSBRequest::SetResultLen(unsigned int)>:
    cfa0:	e5801014 	str	r1, [r0, #20]
    cfa4:	e12fff1e 	bx	lr

0000cfa8 <CUSBRequest::GetStatus() const>:
    cfa8:	e5900010 	ldr	r0, [r0, #16]
    cfac:	e12fff1e 	bx	lr

0000cfb0 <CUSBRequest::GetResultLength() const>:
    cfb0:	e5903010 	ldr	r3, [r0, #16]
    cfb4:	e92d4010 	push	{r4, lr}
    cfb8:	e1a04000 	mov	r4, r0
    cfbc:	e3530000 	cmp	r3, #0
    cfc0:	1a000005 	bne	cfdc <CUSBRequest::GetResultLength() const+0x2c>
    cfc4:	e3041ebc 	movw	r1, #20156	; 0x4ebc
    cfc8:	e3401002 	movt	r1, #2
    cfcc:	e3040ef0 	movw	r0, #20208	; 0x4ef0
    cfd0:	e3400002 	movt	r0, #2
    cfd4:	e3a02046 	mov	r2, #70	; 0x46
    cfd8:	eb00311d 	bl	19454 <assertion_failed>
    cfdc:	e5940014 	ldr	r0, [r4, #20]
    cfe0:	e8bd8010 	pop	{r4, pc}

0000cfe4 <CUSBRequest::GetSetupData()>:
    cfe4:	e92d4010 	push	{r4, lr}
    cfe8:	e1a04000 	mov	r4, r0
    cfec:	e5900000 	ldr	r0, [r0]
    cff0:	ebfffec4 	bl	cb08 <CUSBEndpoint::GetType() const>
    cff4:	e3500000 	cmp	r0, #0
    cff8:	1a00000a 	bne	d028 <CUSBRequest::GetSetupData()+0x44>
    cffc:	e5940004 	ldr	r0, [r4, #4]
    d000:	e3500000 	cmp	r0, #0
    d004:	18bd8010 	popne	{r4, pc}
    d008:	e3a0204e 	mov	r2, #78	; 0x4e
    d00c:	e3041ebc 	movw	r1, #20156	; 0x4ebc
    d010:	e3401002 	movt	r1, #2
    d014:	e3040f2c 	movw	r0, #20268	; 0x4f2c
    d018:	e3400002 	movt	r0, #2
    d01c:	eb00310c 	bl	19454 <assertion_failed>
    d020:	e5940004 	ldr	r0, [r4, #4]
    d024:	e8bd8010 	pop	{r4, pc}
    d028:	e3041ebc 	movw	r1, #20156	; 0x4ebc
    d02c:	e3401002 	movt	r1, #2
    d030:	e3040efc 	movw	r0, #20220	; 0x4efc
    d034:	e3400002 	movt	r0, #2
    d038:	e3a0204d 	mov	r2, #77	; 0x4d
    d03c:	eb003104 	bl	19454 <assertion_failed>
    d040:	eaffffed 	b	cffc <CUSBRequest::GetSetupData()+0x18>

0000d044 <CUSBRequest::GetBuffer()>:
    d044:	e5903008 	ldr	r3, [r0, #8]
    d048:	e3530000 	cmp	r3, #0
    d04c:	0a000001 	beq	d058 <CUSBRequest::GetBuffer()+0x14>
    d050:	e1a00003 	mov	r0, r3
    d054:	e12fff1e 	bx	lr
    d058:	e590200c 	ldr	r2, [r0, #12]
    d05c:	e3520000 	cmp	r2, #0
    d060:	0afffffa 	beq	d050 <CUSBRequest::GetBuffer()+0xc>
    d064:	e92d4010 	push	{r4, lr}
    d068:	e1a04000 	mov	r4, r0
    d06c:	e3a02056 	mov	r2, #86	; 0x56
    d070:	e3041ebc 	movw	r1, #20156	; 0x4ebc
    d074:	e3401002 	movt	r1, #2
    d078:	e3040ecc 	movw	r0, #20172	; 0x4ecc
    d07c:	e3400002 	movt	r0, #2
    d080:	eb0030f3 	bl	19454 <assertion_failed>
    d084:	e5943008 	ldr	r3, [r4, #8]
    d088:	e1a00003 	mov	r0, r3
    d08c:	e8bd8010 	pop	{r4, pc}

0000d090 <CUSBRequest::GetBufLen() const>:
    d090:	e590000c 	ldr	r0, [r0, #12]
    d094:	e12fff1e 	bx	lr

0000d098 <CUSBRequest::SetCompletionRoutine(void (*)(CUSBRequest*, void*, void*), void*, void*)>:
    d098:	e3510000 	cmp	r1, #0
    d09c:	e1c021fc 	strd	r2, [r0, #28]
    d0a0:	e5801018 	str	r1, [r0, #24]
    d0a4:	112fff1e 	bxne	lr
    d0a8:	e3041ebc 	movw	r1, #20156	; 0x4ebc
    d0ac:	e3401002 	movt	r1, #2
    d0b0:	e3040f40 	movw	r0, #20288	; 0x4f40
    d0b4:	e3400002 	movt	r0, #2
    d0b8:	e3a02066 	mov	r2, #102	; 0x66
    d0bc:	ea0030e4 	b	19454 <assertion_failed>

0000d0c0 <CUSBRequest::CallCompletionRoutine()>:
    d0c0:	e5903018 	ldr	r3, [r0, #24]
    d0c4:	e92d4010 	push	{r4, lr}
    d0c8:	e1a04000 	mov	r4, r0
    d0cc:	e3530000 	cmp	r3, #0
    d0d0:	0a000004 	beq	d0e8 <CUSBRequest::CallCompletionRoutine()+0x28>
    d0d4:	e5942020 	ldr	r2, [r4, #32]
    d0d8:	e1a00004 	mov	r0, r4
    d0dc:	e594101c 	ldr	r1, [r4, #28]
    d0e0:	e8bd4010 	pop	{r4, lr}
    d0e4:	e12fff13 	bx	r3
    d0e8:	e3041ebc 	movw	r1, #20156	; 0x4ebc
    d0ec:	e3401002 	movt	r1, #2
    d0f0:	e3040f40 	movw	r0, #20288	; 0x4f40
    d0f4:	e3400002 	movt	r0, #2
    d0f8:	e3a0206b 	mov	r2, #107	; 0x6b
    d0fc:	eb0030d4 	bl	19454 <assertion_failed>
    d100:	e5943018 	ldr	r3, [r4, #24]
    d104:	eafffff2 	b	d0d4 <CUSBRequest::CallCompletionRoutine()+0x14>

0000d108 <CUSBRequest::SetCompleteOnNAK()>:
    d108:	e3a03001 	mov	r3, #1
    d10c:	e5c03024 	strb	r3, [r0, #36]	; 0x24
    d110:	e12fff1e 	bx	lr

0000d114 <CUSBRequest::IsCompleteOnNAK() const>:
    d114:	e5d00024 	ldrb	r0, [r0, #36]	; 0x24
    d118:	e12fff1e 	bx	lr

0000d11c <CUSBRequest::operator new(unsigned int)>:
    d11c:	e92d4010 	push	{r4, lr}
    d120:	e3500028 	cmp	r0, #40	; 0x28
    d124:	0a000005 	beq	d140 <CUSBRequest::operator new(unsigned int)+0x24>
    d128:	e3041ebc 	movw	r1, #20156	; 0x4ebc
    d12c:	e3401002 	movt	r1, #2
    d130:	e3040f5c 	movw	r0, #20316	; 0x4f5c
    d134:	e3400002 	movt	r0, #2
    d138:	e3a0207a 	mov	r2, #122	; 0x7a
    d13c:	eb0030c4 	bl	19454 <assertion_failed>
    d140:	e30b4490 	movw	r4, #46224	; 0xb490
    d144:	e3404002 	movt	r4, #2
    d148:	e5940000 	ldr	r0, [r4]
    d14c:	e3500000 	cmp	r0, #0
    d150:	0a000001 	beq	d15c <CUSBRequest::operator new(unsigned int)+0x40>
    d154:	e8bd4010 	pop	{r4, lr}
    d158:	ea0031c6 	b	19878 <CClassAllocator::Allocate()>
    d15c:	e3041ebc 	movw	r1, #20156	; 0x4ebc
    d160:	e3401002 	movt	r1, #2
    d164:	e30409d0 	movw	r0, #18896	; 0x49d0
    d168:	e3400002 	movt	r0, #2
    d16c:	e3a0207a 	mov	r2, #122	; 0x7a
    d170:	eb0030b7 	bl	19454 <assertion_failed>
    d174:	e5940000 	ldr	r0, [r4]
    d178:	e8bd4010 	pop	{r4, lr}
    d17c:	ea0031bd 	b	19878 <CClassAllocator::Allocate()>

0000d180 <CUSBRequest::operator delete(void*, unsigned int)>:
    d180:	e92d4070 	push	{r4, r5, r6, lr}
    d184:	e3510028 	cmp	r1, #40	; 0x28
    d188:	e1a05000 	mov	r5, r0
    d18c:	0a000005 	beq	d1a8 <CUSBRequest::operator delete(void*, unsigned int)+0x28>
    d190:	e3041ebc 	movw	r1, #20156	; 0x4ebc
    d194:	e3401002 	movt	r1, #2
    d198:	e3040f5c 	movw	r0, #20316	; 0x4f5c
    d19c:	e3400002 	movt	r0, #2
    d1a0:	e3a0207a 	mov	r2, #122	; 0x7a
    d1a4:	eb0030aa 	bl	19454 <assertion_failed>
    d1a8:	e30b4490 	movw	r4, #46224	; 0xb490
    d1ac:	e3404002 	movt	r4, #2
    d1b0:	e5940000 	ldr	r0, [r4]
    d1b4:	e3500000 	cmp	r0, #0
    d1b8:	0a000002 	beq	d1c8 <CUSBRequest::operator delete(void*, unsigned int)+0x48>
    d1bc:	e1a01005 	mov	r1, r5
    d1c0:	e8bd4070 	pop	{r4, r5, r6, lr}
    d1c4:	ea0031e2 	b	19954 <CClassAllocator::Free(void*)>
    d1c8:	e3041ebc 	movw	r1, #20156	; 0x4ebc
    d1cc:	e3401002 	movt	r1, #2
    d1d0:	e30409d0 	movw	r0, #18896	; 0x49d0
    d1d4:	e3400002 	movt	r0, #2
    d1d8:	e3a0207a 	mov	r2, #122	; 0x7a
    d1dc:	eb00309c 	bl	19454 <assertion_failed>
    d1e0:	e5940000 	ldr	r0, [r4]
    d1e4:	e1a01005 	mov	r1, r5
    d1e8:	e8bd4070 	pop	{r4, r5, r6, lr}
    d1ec:	ea0031d8 	b	19954 <CClassAllocator::Free(void*)>

0000d1f0 <CUSBRequest::InitAllocator(unsigned int)>:
    d1f0:	e92d4070 	push	{r4, r5, r6, lr}
    d1f4:	e30b4490 	movw	r4, #46224	; 0xb490
    d1f8:	e3404002 	movt	r4, #2
    d1fc:	e1a06000 	mov	r6, r0
    d200:	e5943000 	ldr	r3, [r4]
    d204:	e3530000 	cmp	r3, #0
    d208:	0a000005 	beq	d224 <CUSBRequest::InitAllocator(unsigned int)+0x34>
    d20c:	e3041ebc 	movw	r1, #20156	; 0x4ebc
    d210:	e3401002 	movt	r1, #2
    d214:	e30409e4 	movw	r0, #18916	; 0x49e4
    d218:	e3400002 	movt	r0, #2
    d21c:	e3a0207a 	mov	r2, #122	; 0x7a
    d220:	eb00308b 	bl	19454 <assertion_failed>
    d224:	e3a00020 	mov	r0, #32
    d228:	eb005394 	bl	22080 <operator new(unsigned int)>
    d22c:	e1a02006 	mov	r2, r6
    d230:	e3043f7c 	movw	r3, #20348	; 0x4f7c
    d234:	e3403002 	movt	r3, #2
    d238:	e3a01028 	mov	r1, #40	; 0x28
    d23c:	e1a05000 	mov	r5, r0
    d240:	eb003166 	bl	197e0 <CClassAllocator::CClassAllocator(unsigned int, unsigned int, char const*)>
    d244:	e5845000 	str	r5, [r4]
    d248:	e8bd8070 	pop	{r4, r5, r6, pc}

0000d24c <CUSBRequest::InitProtectedAllocator(unsigned int, unsigned int)>:
    d24c:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    d250:	e30b4490 	movw	r4, #46224	; 0xb490
    d254:	e3404002 	movt	r4, #2
    d258:	e24dd00c 	sub	sp, sp, #12
    d25c:	e1a06000 	mov	r6, r0
    d260:	e1a07001 	mov	r7, r1
    d264:	e5943000 	ldr	r3, [r4]
    d268:	e3530000 	cmp	r3, #0
    d26c:	0a000005 	beq	d288 <CUSBRequest::InitProtectedAllocator(unsigned int, unsigned int)+0x3c>
    d270:	e3041ebc 	movw	r1, #20156	; 0x4ebc
    d274:	e3401002 	movt	r1, #2
    d278:	e30409e4 	movw	r0, #18916	; 0x49e4
    d27c:	e3400002 	movt	r0, #2
    d280:	e3a0207a 	mov	r2, #122	; 0x7a
    d284:	eb003072 	bl	19454 <assertion_failed>
    d288:	e3a00020 	mov	r0, #32
    d28c:	eb00537b 	bl	22080 <operator new(unsigned int)>
    d290:	e1a03007 	mov	r3, r7
    d294:	e1a02006 	mov	r2, r6
    d298:	e3041f7c 	movw	r1, #20348	; 0x4f7c
    d29c:	e3401002 	movt	r1, #2
    d2a0:	e58d1000 	str	r1, [sp]
    d2a4:	e3a01028 	mov	r1, #40	; 0x28
    d2a8:	e1a05000 	mov	r5, r0
    d2ac:	eb00315d 	bl	19828 <CClassAllocator::CClassAllocator(unsigned int, unsigned int, unsigned int, char const*)>
    d2b0:	e5845000 	str	r5, [r4]
    d2b4:	e28dd00c 	add	sp, sp, #12
    d2b8:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}

0000d2bc <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)>:
    d2bc:	e92d4070 	push	{r4, r5, r6, lr}
    d2c0:	e1a04001 	mov	r4, r1
    d2c4:	e2506000 	subs	r6, r0, #0
    d2c8:	0a000031 	beq	d394 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0xd8>
    d2cc:	e3540000 	cmp	r4, #0
    d2d0:	0a000037 	beq	d3b4 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0xf8>
    d2d4:	e3041fb0 	movw	r1, #20400	; 0x4fb0
    d2d8:	e3401002 	movt	r1, #2
    d2dc:	e1a00004 	mov	r0, r4
    d2e0:	eb0046c4 	bl	1edf8 <CString::Compare(char const*) const>
    d2e4:	e3500000 	cmp	r0, #0
    d2e8:	0a000005 	beq	d304 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x48>
    d2ec:	e3041fbc 	movw	r1, #20412	; 0x4fbc
    d2f0:	e3401002 	movt	r1, #2
    d2f4:	e1a00004 	mov	r0, r4
    d2f8:	eb0046be 	bl	1edf8 <CString::Compare(char const*) const>
    d2fc:	e3500000 	cmp	r0, #0
    d300:	1a000017 	bne	d364 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0xa8>
    d304:	e3a00064 	mov	r0, #100	; 0x64
    d308:	eb00535c 	bl	22080 <operator new(unsigned int)>
    d30c:	e1a01006 	mov	r1, r6
    d310:	e1a05000 	mov	r5, r0
    d314:	eb000135 	bl	d7f0 <CUSBStandardHub::CUSBStandardHub(CUSBFunction*)>
    d318:	e1a00005 	mov	r0, r5
    d31c:	eb0016ff 	bl	12f20 <CUSBFunction::GetDevice() const>
    d320:	e1a06000 	mov	r6, r0
    d324:	e1a00004 	mov	r0, r4
    d328:	eb00465f 	bl	1ecac <CString::operator char const*() const>
    d32c:	e30520dc 	movw	r2, #20700	; 0x50dc
    d330:	e3402002 	movt	r2, #2
    d334:	e1a03000 	mov	r3, r0
    d338:	e3a01003 	mov	r1, #3
    d33c:	e1a00006 	mov	r0, r6
    d340:	ebfffafe 	bl	bf40 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
    d344:	e3540000 	cmp	r4, #0
    d348:	0a000003 	beq	d35c <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0xa0>
    d34c:	e5943000 	ldr	r3, [r4]
    d350:	e1a00004 	mov	r0, r4
    d354:	e5933004 	ldr	r3, [r3, #4]
    d358:	e12fff33 	blx	r3
    d35c:	e1a00005 	mov	r0, r5
    d360:	e8bd8070 	pop	{r4, r5, r6, pc}
    d364:	e3041fc8 	movw	r1, #20424	; 0x4fc8
    d368:	e3401002 	movt	r1, #2
    d36c:	e1a00004 	mov	r0, r4
    d370:	eb0046a0 	bl	1edf8 <CString::Compare(char const*) const>
    d374:	e3500000 	cmp	r0, #0
    d378:	1a000014 	bne	d3d0 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x114>
    d37c:	e3a00030 	mov	r0, #48	; 0x30
    d380:	eb00533e 	bl	22080 <operator new(unsigned int)>
    d384:	e1a01006 	mov	r1, r6
    d388:	e1a05000 	mov	r5, r0
    d38c:	eb0003c9 	bl	e2b8 <CUSBBulkOnlyMassStorageDevice::CUSBBulkOnlyMassStorageDevice(CUSBFunction*)>
    d390:	eaffffe0 	b	d318 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x5c>
    d394:	e3041f88 	movw	r1, #20360	; 0x4f88
    d398:	e3401002 	movt	r1, #2
    d39c:	e3040fa0 	movw	r0, #20384	; 0x4fa0
    d3a0:	e3400002 	movt	r0, #2
    d3a4:	e3a0202b 	mov	r2, #43	; 0x2b
    d3a8:	eb003029 	bl	19454 <assertion_failed>
    d3ac:	e3540000 	cmp	r4, #0
    d3b0:	1affffc7 	bne	d2d4 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x18>
    d3b4:	e3041f88 	movw	r1, #20360	; 0x4f88
    d3b8:	e3401002 	movt	r1, #2
    d3bc:	e3040a98 	movw	r0, #19096	; 0x4a98
    d3c0:	e3400002 	movt	r0, #2
    d3c4:	e3a0202c 	mov	r2, #44	; 0x2c
    d3c8:	eb003021 	bl	19454 <assertion_failed>
    d3cc:	eaffffc0 	b	d2d4 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x18>
    d3d0:	e3041fd4 	movw	r1, #20436	; 0x4fd4
    d3d4:	e3401002 	movt	r1, #2
    d3d8:	e1a00004 	mov	r0, r4
    d3dc:	eb004685 	bl	1edf8 <CString::Compare(char const*) const>
    d3e0:	e3500000 	cmp	r0, #0
    d3e4:	0a00000b 	beq	d418 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x15c>
    d3e8:	e3041fe0 	movw	r1, #20448	; 0x4fe0
    d3ec:	e3401002 	movt	r1, #2
    d3f0:	e1a00004 	mov	r0, r4
    d3f4:	eb00467f 	bl	1edf8 <CString::Compare(char const*) const>
    d3f8:	e3500000 	cmp	r0, #0
    d3fc:	1a00000b 	bne	d430 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x174>
    d400:	e3a00030 	mov	r0, #48	; 0x30
    d404:	eb00531d 	bl	22080 <operator new(unsigned int)>
    d408:	e1a01006 	mov	r1, r6
    d40c:	e1a05000 	mov	r5, r0
    d410:	eb000cf0 	bl	107d8 <CUSBMouseDevice::CUSBMouseDevice(CUSBFunction*)>
    d414:	eaffffbf 	b	d318 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x5c>
    d418:	e3a00e45 	mov	r0, #1104	; 0x450
    d41c:	eb005317 	bl	22080 <operator new(unsigned int)>
    d420:	e1a01006 	mov	r1, r6
    d424:	e1a05000 	mov	r5, r0
    d428:	eb00090e 	bl	f868 <CUSBKeyboardDevice::CUSBKeyboardDevice(CUSBFunction*)>
    d42c:	eaffffb9 	b	d318 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x5c>
    d430:	e3041fec 	movw	r1, #20460	; 0x4fec
    d434:	e3401002 	movt	r1, #2
    d438:	e1a00004 	mov	r0, r4
    d43c:	eb00466d 	bl	1edf8 <CString::Compare(char const*) const>
    d440:	e3500000 	cmp	r0, #0
    d444:	1a000006 	bne	d464 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x1a8>
    d448:	e3a00f4f 	mov	r0, #316	; 0x13c
    d44c:	eb00530b 	bl	22080 <operator new(unsigned int)>
    d450:	e1a01006 	mov	r1, r6
    d454:	e3a02001 	mov	r2, #1
    d458:	e1a05000 	mov	r5, r0
    d45c:	eb000d00 	bl	10864 <CUSBGamePadStandardDevice::CUSBGamePadStandardDevice(CUSBFunction*, bool)>
    d460:	eaffffac 	b	d318 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x5c>
    d464:	e3041ff8 	movw	r1, #20472	; 0x4ff8
    d468:	e3401002 	movt	r1, #2
    d46c:	e1a00004 	mov	r0, r4
    d470:	eb004660 	bl	1edf8 <CString::Compare(char const*) const>
    d474:	e3500000 	cmp	r0, #0
    d478:	1a000005 	bne	d494 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x1d8>
    d47c:	e3a00f5b 	mov	r0, #364	; 0x16c
    d480:	eb0052fe 	bl	22080 <operator new(unsigned int)>
    d484:	e1a01006 	mov	r1, r6
    d488:	e1a05000 	mov	r5, r0
    d48c:	eb000f53 	bl	111e0 <CUSBGamePadPS3Device::CUSBGamePadPS3Device(CUSBFunction*)>
    d490:	eaffffa0 	b	d318 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x5c>
    d494:	e3051004 	movw	r1, #20484	; 0x5004
    d498:	e3401002 	movt	r1, #2
    d49c:	e1a00004 	mov	r0, r4
    d4a0:	eb004654 	bl	1edf8 <CString::Compare(char const*) const>
    d4a4:	e3500000 	cmp	r0, #0
    d4a8:	0a000005 	beq	d4c4 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x208>
    d4ac:	e3051010 	movw	r1, #20496	; 0x5010
    d4b0:	e3401002 	movt	r1, #2
    d4b4:	e1a00004 	mov	r0, r4
    d4b8:	eb00464e 	bl	1edf8 <CString::Compare(char const*) const>
    d4bc:	e3500000 	cmp	r0, #0
    d4c0:	1a000005 	bne	d4dc <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x220>
    d4c4:	e3a00f53 	mov	r0, #332	; 0x14c
    d4c8:	eb0052ec 	bl	22080 <operator new(unsigned int)>
    d4cc:	e1a01006 	mov	r1, r6
    d4d0:	e1a05000 	mov	r5, r0
    d4d4:	eb00109f 	bl	11758 <CUSBGamePadPS4Device::CUSBGamePadPS4Device(CUSBFunction*)>
    d4d8:	eaffff8e 	b	d318 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x5c>
    d4dc:	e305101c 	movw	r1, #20508	; 0x501c
    d4e0:	e3401002 	movt	r1, #2
    d4e4:	e1a00004 	mov	r0, r4
    d4e8:	eb004642 	bl	1edf8 <CString::Compare(char const*) const>
    d4ec:	e3500000 	cmp	r0, #0
    d4f0:	0a000005 	beq	d50c <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x250>
    d4f4:	e3051028 	movw	r1, #20520	; 0x5028
    d4f8:	e3401002 	movt	r1, #2
    d4fc:	e1a00004 	mov	r0, r4
    d500:	eb00463c 	bl	1edf8 <CString::Compare(char const*) const>
    d504:	e3500000 	cmp	r0, #0
    d508:	1a000005 	bne	d524 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x268>
    d50c:	e3a00e13 	mov	r0, #304	; 0x130
    d510:	eb0052da 	bl	22080 <operator new(unsigned int)>
    d514:	e1a01006 	mov	r1, r6
    d518:	e1a05000 	mov	r5, r0
    d51c:	eb0012b6 	bl	11ffc <CUSBGamePadXbox360Device::CUSBGamePadXbox360Device(CUSBFunction*)>
    d520:	eaffff7c 	b	d318 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x5c>
    d524:	e3051034 	movw	r1, #20532	; 0x5034
    d528:	e3401002 	movt	r1, #2
    d52c:	e1a00004 	mov	r0, r4
    d530:	eb004630 	bl	1edf8 <CString::Compare(char const*) const>
    d534:	e3500000 	cmp	r0, #0
    d538:	0a000005 	beq	d554 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x298>
    d53c:	e3051040 	movw	r1, #20544	; 0x5040
    d540:	e3401002 	movt	r1, #2
    d544:	e1a00004 	mov	r0, r4
    d548:	eb00462a 	bl	1edf8 <CString::Compare(char const*) const>
    d54c:	e3500000 	cmp	r0, #0
    d550:	1a000005 	bne	d56c <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x2b0>
    d554:	e3a00f4d 	mov	r0, #308	; 0x134
    d558:	eb0052c8 	bl	22080 <operator new(unsigned int)>
    d55c:	e1a01006 	mov	r1, r6
    d560:	e1a05000 	mov	r5, r0
    d564:	eb0013af 	bl	12428 <CUSBGamePadXboxOneDevice::CUSBGamePadXboxOneDevice(CUSBFunction*)>
    d568:	eaffff6a 	b	d318 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x5c>
    d56c:	e305104c 	movw	r1, #20556	; 0x504c
    d570:	e3401002 	movt	r1, #2
    d574:	e1a00004 	mov	r0, r4
    d578:	eb00461e 	bl	1edf8 <CString::Compare(char const*) const>
    d57c:	e3500000 	cmp	r0, #0
    d580:	0afffff3 	beq	d554 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x298>
    d584:	e3051058 	movw	r1, #20568	; 0x5058
    d588:	e3401002 	movt	r1, #2
    d58c:	e1a00004 	mov	r0, r4
    d590:	eb004618 	bl	1edf8 <CString::Compare(char const*) const>
    d594:	e3500000 	cmp	r0, #0
    d598:	0affffed 	beq	d554 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x298>
    d59c:	e3051064 	movw	r1, #20580	; 0x5064
    d5a0:	e3401002 	movt	r1, #2
    d5a4:	e1a00004 	mov	r0, r4
    d5a8:	eb004612 	bl	1edf8 <CString::Compare(char const*) const>
    d5ac:	e3500000 	cmp	r0, #0
    d5b0:	1a000005 	bne	d5cc <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x310>
    d5b4:	e3a00f4d 	mov	r0, #308	; 0x134
    d5b8:	eb0052b0 	bl	22080 <operator new(unsigned int)>
    d5bc:	e1a01006 	mov	r1, r6
    d5c0:	e1a05000 	mov	r5, r0
    d5c4:	eb0014c7 	bl	128e8 <CUSBGamePadSwitchProDevice::CUSBGamePadSwitchProDevice(CUSBFunction*)>
    d5c8:	eaffff52 	b	d318 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x5c>
    d5cc:	e3051070 	movw	r1, #20592	; 0x5070
    d5d0:	e3401002 	movt	r1, #2
    d5d4:	e1a00004 	mov	r0, r4
    d5d8:	eb004606 	bl	1edf8 <CString::Compare(char const*) const>
    d5dc:	e3500000 	cmp	r0, #0
    d5e0:	0a000005 	beq	d5fc <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x340>
    d5e4:	e305107c 	movw	r1, #20604	; 0x507c
    d5e8:	e3401002 	movt	r1, #2
    d5ec:	e1a00004 	mov	r0, r4
    d5f0:	eb004600 	bl	1edf8 <CString::Compare(char const*) const>
    d5f4:	e3500000 	cmp	r0, #0
    d5f8:	1a000005 	bne	d614 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x358>
    d5fc:	e3a0001c 	mov	r0, #28
    d600:	eb00529e 	bl	22080 <operator new(unsigned int)>
    d604:	e1a01006 	mov	r1, r6
    d608:	e1a05000 	mov	r5, r0
    d60c:	eb00184f 	bl	13750 <CUSBPrinterDevice::CUSBPrinterDevice(CUSBFunction*)>
    d610:	eaffff40 	b	d318 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x5c>
    d614:	e3051088 	movw	r1, #20616	; 0x5088
    d618:	e3401002 	movt	r1, #2
    d61c:	e1a00004 	mov	r0, r4
    d620:	eb0045f4 	bl	1edf8 <CString::Compare(char const*) const>
    d624:	e3500000 	cmp	r0, #0
    d628:	1a000005 	bne	d644 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x388>
    d62c:	e3a00020 	mov	r0, #32
    d630:	eb005292 	bl	22080 <operator new(unsigned int)>
    d634:	e1a01006 	mov	r1, r6
    d638:	e1a05000 	mov	r5, r0
    d63c:	eb0020ad 	bl	158f8 <CSMSC951xDevice::CSMSC951xDevice(CUSBFunction*)>
    d640:	eaffff34 	b	d318 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x5c>
    d644:	e3051094 	movw	r1, #20628	; 0x5094
    d648:	e3401002 	movt	r1, #2
    d64c:	e1a00004 	mov	r0, r4
    d650:	eb0045e8 	bl	1edf8 <CString::Compare(char const*) const>
    d654:	e3500000 	cmp	r0, #0
    d658:	1a000005 	bne	d674 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x3b8>
    d65c:	e3a00020 	mov	r0, #32
    d660:	eb005286 	bl	22080 <operator new(unsigned int)>
    d664:	e1a01006 	mov	r1, r6
    d668:	e1a05000 	mov	r5, r0
    d66c:	eb00236d 	bl	16428 <CLAN7800Device::CLAN7800Device(CUSBFunction*)>
    d670:	eaffff28 	b	d318 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x5c>
    d674:	e30510a0 	movw	r1, #20640	; 0x50a0
    d678:	e3401002 	movt	r1, #2
    d67c:	e1a00004 	mov	r0, r4
    d680:	eb0045dc 	bl	1edf8 <CString::Compare(char const*) const>
    d684:	e3500000 	cmp	r0, #0
    d688:	0a000005 	beq	d6a4 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x3e8>
    d68c:	e30510ac 	movw	r1, #20652	; 0x50ac
    d690:	e3401002 	movt	r1, #2
    d694:	e1a00004 	mov	r0, r4
    d698:	eb0045d6 	bl	1edf8 <CString::Compare(char const*) const>
    d69c:	e3500000 	cmp	r0, #0
    d6a0:	1a000005 	bne	d6bc <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x400>
    d6a4:	e3a00028 	mov	r0, #40	; 0x28
    d6a8:	eb005274 	bl	22080 <operator new(unsigned int)>
    d6ac:	e1a01006 	mov	r1, r6
    d6b0:	e1a05000 	mov	r5, r0
    d6b4:	eb0018e8 	bl	13a5c <CUSBBluetoothDevice::CUSBBluetoothDevice(CUSBFunction*)>
    d6b8:	eaffff16 	b	d318 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x5c>
    d6bc:	e30510b8 	movw	r1, #20664	; 0x50b8
    d6c0:	e3401002 	movt	r1, #2
    d6c4:	e1a00004 	mov	r0, r4
    d6c8:	eb0045ca 	bl	1edf8 <CString::Compare(char const*) const>
    d6cc:	e3500000 	cmp	r0, #0
    d6d0:	1a000005 	bne	d6ec <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x430>
    d6d4:	e3a00028 	mov	r0, #40	; 0x28
    d6d8:	eb005268 	bl	22080 <operator new(unsigned int)>
    d6dc:	e1a01006 	mov	r1, r6
    d6e0:	e1a05000 	mov	r5, r0
    d6e4:	eb001a5d 	bl	14060 <CUSBMIDIDevice::CUSBMIDIDevice(CUSBFunction*)>
    d6e8:	eaffff0a 	b	d318 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x5c>
    d6ec:	e30510c4 	movw	r1, #20676	; 0x50c4
    d6f0:	e3401002 	movt	r1, #2
    d6f4:	e1a00004 	mov	r0, r4
    d6f8:	eb0045be 	bl	1edf8 <CString::Compare(char const*) const>
    d6fc:	e3500000 	cmp	r0, #0
    d700:	0afffff3 	beq	d6d4 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x418>
    d704:	e30510d0 	movw	r1, #20688	; 0x50d0
    d708:	e3401002 	movt	r1, #2
    d70c:	e1a00004 	mov	r0, r4
    d710:	eb0045b8 	bl	1edf8 <CString::Compare(char const*) const>
    d714:	e3500000 	cmp	r0, #0
    d718:	13a05000 	movne	r5, #0
    d71c:	1affff08 	bne	d344 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x88>
    d720:	e3a00020 	mov	r0, #32
    d724:	eb005255 	bl	22080 <operator new(unsigned int)>
    d728:	e1a01006 	mov	r1, r6
    d72c:	e1a05000 	mov	r5, r0
    d730:	eb001c86 	bl	14950 <CUSBCDCEthernetDevice::CUSBCDCEthernetDevice(CUSBFunction*)>
    d734:	eafffef7 	b	d318 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x5c>

0000d738 <CUSBStandardHub::~CUSBStandardHub()>:
    d738:	e5903014 	ldr	r3, [r0, #20]
    d73c:	e59f2088 	ldr	r2, [pc, #136]	; d7cc <CUSBStandardHub::~CUSBStandardHub()+0x94>
    d740:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    d744:	e3530000 	cmp	r3, #0
    d748:	e1a08000 	mov	r8, r0
    d74c:	e5802000 	str	r2, [r0]
    d750:	0a000013 	beq	d7a4 <CUSBStandardHub::~CUSBStandardHub()+0x6c>
    d754:	e3a05000 	mov	r5, #0
    d758:	e2807018 	add	r7, r0, #24
    d75c:	e1a09005 	mov	r9, r5
    d760:	e280603c 	add	r6, r0, #60	; 0x3c
    d764:	e5960000 	ldr	r0, [r6]
    d768:	e3a01004 	mov	r1, #4
    d76c:	eb005247 	bl	22090 <operator delete(void*, unsigned int)>
    d770:	e5b74004 	ldr	r4, [r7, #4]!
    d774:	e2855001 	add	r5, r5, #1
    d778:	e4869004 	str	r9, [r6], #4
    d77c:	e2540000 	subs	r0, r4, #0
    d780:	0a000003 	beq	d794 <CUSBStandardHub::~CUSBStandardHub()+0x5c>
    d784:	ebfff8a3 	bl	ba18 <CUSBDevice::~CUSBDevice()>
    d788:	e1a00004 	mov	r0, r4
    d78c:	e3a01044 	mov	r1, #68	; 0x44
    d790:	eb00523e 	bl	22090 <operator delete(void*, unsigned int)>
    d794:	e5983014 	ldr	r3, [r8, #20]
    d798:	e5879000 	str	r9, [r7]
    d79c:	e1530005 	cmp	r3, r5
    d7a0:	8affffef 	bhi	d764 <CUSBStandardHub::~CUSBStandardHub()+0x2c>
    d7a4:	e3a04000 	mov	r4, #0
    d7a8:	e3a01009 	mov	r1, #9
    d7ac:	e5980010 	ldr	r0, [r8, #16]
    d7b0:	e5884014 	str	r4, [r8, #20]
    d7b4:	eb005235 	bl	22090 <operator delete(void*, unsigned int)>
    d7b8:	e5884010 	str	r4, [r8, #16]
    d7bc:	e1a00008 	mov	r0, r8
    d7c0:	eb001514 	bl	12c18 <CUSBFunction::~CUSBFunction()>
    d7c4:	e1a00008 	mov	r0, r8
    d7c8:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    d7cc:	00025100 	.word	0x00025100

0000d7d0 <CUSBStandardHub::~CUSBStandardHub()>:
    d7d0:	e92d4010 	push	{r4, lr}
    d7d4:	e1a04000 	mov	r4, r0
    d7d8:	ebffffd6 	bl	d738 <CUSBStandardHub::~CUSBStandardHub()>
    d7dc:	e1a00004 	mov	r0, r4
    d7e0:	e3a01064 	mov	r1, #100	; 0x64
    d7e4:	eb005229 	bl	22090 <operator delete(void*, unsigned int)>
    d7e8:	e1a00004 	mov	r0, r4
    d7ec:	e8bd8010 	pop	{r4, pc}

0000d7f0 <CUSBStandardHub::CUSBStandardHub(CUSBFunction*)>:
    d7f0:	e92d4010 	push	{r4, lr}
    d7f4:	e1a04000 	mov	r4, r0
    d7f8:	eb001558 	bl	12d60 <CUSBFunction::CUSBFunction(CUSBFunction*)>
    d7fc:	e3a0e000 	mov	lr, #0
    d800:	e59f303c 	ldr	r3, [pc, #60]	; d844 <CUSBStandardHub::CUSBStandardHub(CUSBFunction*)+0x54>
    d804:	e284103c 	add	r1, r4, #60	; 0x3c
    d808:	e5843000 	str	r3, [r4]
    d80c:	e1a0c001 	mov	ip, r1
    d810:	e284201c 	add	r2, r4, #28
    d814:	e284005c 	add	r0, r4, #92	; 0x5c
    d818:	e1a0300e 	mov	r3, lr
    d81c:	e584e010 	str	lr, [r4, #16]
    d820:	e584e014 	str	lr, [r4, #20]
    d824:	e5c4e018 	strb	lr, [r4, #24]
    d828:	e4823004 	str	r3, [r2], #4
    d82c:	e4813004 	str	r3, [r1], #4
    d830:	e152000c 	cmp	r2, ip
    d834:	e4c03001 	strb	r3, [r0], #1
    d838:	1afffffa 	bne	d828 <CUSBStandardHub::CUSBStandardHub(CUSBFunction*)+0x38>
    d83c:	e1a00004 	mov	r0, r4
    d840:	e8bd8010 	pop	{r4, pc}
    d844:	00025100 	.word	0x00025100

0000d848 <CUSBStandardHub::EnumeratePorts()>:
    d848:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d84c:	e1a06000 	mov	r6, r0
    d850:	e24dd02c 	sub	sp, sp, #44	; 0x2c
    d854:	eb0015d2 	bl	12fa4 <CUSBFunction::GetHost() const>
    d858:	e250b000 	subs	fp, r0, #0
    d85c:	0a00017c 	beq	de54 <CUSBStandardHub::EnumeratePorts()+0x60c>
    d860:	e1a00006 	mov	r0, r6
    d864:	eb0015bd 	bl	12f60 <CUSBFunction::GetEndpoint0() const>
    d868:	e250a000 	subs	sl, r0, #0
    d86c:	0a000182 	beq	de7c <CUSBStandardHub::EnumeratePorts()+0x634>
    d870:	e5963014 	ldr	r3, [r6, #20]
    d874:	e3530000 	cmp	r3, #0
    d878:	0a0000f2 	beq	dc48 <CUSBStandardHub::EnumeratePorts()+0x400>
    d87c:	e5d63018 	ldrb	r3, [r6, #24]
    d880:	e3530000 	cmp	r3, #0
    d884:	0a0000fb 	beq	dc78 <CUSBStandardHub::EnumeratePorts()+0x430>
    d888:	e3053128 	movw	r3, #20776	; 0x5128
    d88c:	e3403002 	movt	r3, #2
    d890:	e286401c 	add	r4, r6, #28
    d894:	e58d3014 	str	r3, [sp, #20]
    d898:	e3a05001 	mov	r5, #1
    d89c:	e3053238 	movw	r3, #21048	; 0x5238
    d8a0:	e3403002 	movt	r3, #2
    d8a4:	e58d3020 	str	r3, [sp, #32]
    d8a8:	e3053228 	movw	r3, #21032	; 0x5228
    d8ac:	e3403002 	movt	r3, #2
    d8b0:	e58d3024 	str	r3, [sp, #36]	; 0x24
    d8b4:	ea000068 	b	da5c <CUSBStandardHub::EnumeratePorts()+0x214>
    d8b8:	e594001c 	ldr	r0, [r4, #28]
    d8bc:	e3500000 	cmp	r0, #0
    d8c0:	0a0000d4 	beq	dc18 <CUSBStandardHub::EnumeratePorts()+0x3d0>
    d8c4:	e3a03000 	mov	r3, #0
    d8c8:	e58d0008 	str	r0, [sp, #8]
    d8cc:	e3a01004 	mov	r1, #4
    d8d0:	e58d3000 	str	r3, [sp]
    d8d4:	e58d100c 	str	r1, [sp, #12]
    d8d8:	e6ff9075 	uxth	r9, r5
    d8dc:	e3a020a3 	mov	r2, #163	; 0xa3
    d8e0:	e58d9004 	str	r9, [sp, #4]
    d8e4:	e1a0100a 	mov	r1, sl
    d8e8:	e1a0000b 	mov	r0, fp
    d8ec:	ebfffcf8 	bl	ccd4 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
    d8f0:	e3500004 	cmp	r0, #4
    d8f4:	1a0000b7 	bne	dbd8 <CUSBStandardHub::EnumeratePorts()+0x390>
    d8f8:	e594301c 	ldr	r3, [r4, #28]
    d8fc:	e1d330b0 	ldrh	r3, [r3]
    d900:	e3130c01 	tst	r3, #256	; 0x100
    d904:	0a0000bb 	beq	dbf8 <CUSBStandardHub::EnumeratePorts()+0x3b0>
    d908:	e3130001 	tst	r3, #1
    d90c:	0a00004d 	beq	da48 <CUSBStandardHub::EnumeratePorts()+0x200>
    d910:	e3a07000 	mov	r7, #0
    d914:	e58d9004 	str	r9, [sp, #4]
    d918:	e3a08004 	mov	r8, #4
    d91c:	e58d700c 	str	r7, [sp, #12]
    d920:	e58d7008 	str	r7, [sp, #8]
    d924:	e3a03003 	mov	r3, #3
    d928:	e58d8000 	str	r8, [sp]
    d92c:	e3a02023 	mov	r2, #35	; 0x23
    d930:	e1a0100a 	mov	r1, sl
    d934:	e1a0000b 	mov	r0, fp
    d938:	ebfffce5 	bl	ccd4 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
    d93c:	e1500007 	cmp	r0, r7
    d940:	ba0000b8 	blt	dc28 <CUSBStandardHub::EnumeratePorts()+0x3e0>
    d944:	eb004c33 	bl	20a18 <CTimer::Get()>
    d948:	e3a00064 	mov	r0, #100	; 0x64
    d94c:	eb004bf4 	bl	20924 <CTimer::SimpleMsDelay(unsigned int)>
    d950:	e58d800c 	str	r8, [sp, #12]
    d954:	e1a03007 	mov	r3, r7
    d958:	e3a020a3 	mov	r2, #163	; 0xa3
    d95c:	e594001c 	ldr	r0, [r4, #28]
    d960:	e1a0100a 	mov	r1, sl
    d964:	e58d0008 	str	r0, [sp, #8]
    d968:	e1a0000b 	mov	r0, fp
    d96c:	e88d0280 	stm	sp, {r7, r9}
    d970:	ebfffcd7 	bl	ccd4 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
    d974:	e3500004 	cmp	r0, #4
    d978:	1a000093 	bne	dbcc <CUSBStandardHub::EnumeratePorts()+0x384>
    d97c:	e594301c 	ldr	r3, [r4, #28]
    d980:	e1d330b0 	ldrh	r3, [r3]
    d984:	e3130002 	tst	r3, #2
    d988:	0a000114 	beq	dde0 <CUSBStandardHub::EnumeratePorts()+0x598>
    d98c:	e2132008 	ands	r2, r3, #8
    d990:	1a000179 	bne	df7c <CUSBStandardHub::EnumeratePorts()+0x734>
    d994:	e3130c02 	tst	r3, #512	; 0x200
    d998:	11a09002 	movne	r9, r2
    d99c:	1a000002 	bne	d9ac <CUSBStandardHub::EnumeratePorts()+0x164>
    d9a0:	e3130b01 	tst	r3, #1024	; 0x400
    d9a4:	03a09001 	moveq	r9, #1
    d9a8:	13a09002 	movne	r9, #2
    d9ac:	e1a00006 	mov	r0, r6
    d9b0:	eb00155a 	bl	12f20 <CUSBFunction::GetDevice() const>
    d9b4:	e2507000 	subs	r7, r0, #0
    d9b8:	0a000120 	beq	de40 <CUSBStandardHub::EnumeratePorts()+0x5f8>
    d9bc:	e1a00007 	mov	r0, r7
    d9c0:	ebfff8f2 	bl	bd90 <CUSBDevice::IsSplit() const>
    d9c4:	e1a08000 	mov	r8, r0
    d9c8:	e1a00007 	mov	r0, r7
    d9cc:	ebfff8f1 	bl	bd98 <CUSBDevice::GetHubAddress() const>
    d9d0:	e58d0018 	str	r0, [sp, #24]
    d9d4:	e1a00007 	mov	r0, r7
    d9d8:	ebfff8f0 	bl	bda0 <CUSBDevice::GetHubPortNumber() const>
    d9dc:	e3580000 	cmp	r8, #0
    d9e0:	e58d001c 	str	r0, [sp, #28]
    d9e4:	13a08001 	movne	r8, #1
    d9e8:	0a0000d9 	beq	dd54 <CUSBStandardHub::EnumeratePorts()+0x50c>
    d9ec:	e5143004 	ldr	r3, [r4, #-4]
    d9f0:	e3530000 	cmp	r3, #0
    d9f4:	0a000003 	beq	da08 <CUSBStandardHub::EnumeratePorts()+0x1c0>
    d9f8:	e3a02f49 	mov	r2, #292	; 0x124
    d9fc:	e59d1014 	ldr	r1, [sp, #20]
    da00:	e59d0020 	ldr	r0, [sp, #32]
    da04:	eb002e92 	bl	19454 <assertion_failed>
    da08:	e3a00044 	mov	r0, #68	; 0x44
    da0c:	eb00519b 	bl	22080 <operator new(unsigned int)>
    da10:	e59d301c 	ldr	r3, [sp, #28]
    da14:	e59d2018 	ldr	r2, [sp, #24]
    da18:	e1a07000 	mov	r7, r0
    da1c:	e58d3004 	str	r3, [sp, #4]
    da20:	e1a0100b 	mov	r1, fp
    da24:	e1a03008 	mov	r3, r8
    da28:	e58d2000 	str	r2, [sp]
    da2c:	e1a02009 	mov	r2, r9
    da30:	ebfff7c0 	bl	b938 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, bool, unsigned char, unsigned char)>
    da34:	e5047004 	str	r7, [r4, #-4]
    da38:	e1a00007 	mov	r0, r7
    da3c:	ebfff96c 	bl	bff4 <CUSBDevice::Initialize()>
    da40:	e3500000 	cmp	r0, #0
    da44:	0a0000b7 	beq	dd28 <CUSBStandardHub::EnumeratePorts()+0x4e0>
    da48:	e5963014 	ldr	r3, [r6, #20]
    da4c:	e2852001 	add	r2, r5, #1
    da50:	e1530005 	cmp	r3, r5
    da54:	9a000008 	bls	da7c <CUSBStandardHub::EnumeratePorts()+0x234>
    da58:	e1a05002 	mov	r5, r2
    da5c:	e4940004 	ldr	r0, [r4], #4
    da60:	e3500000 	cmp	r0, #0
    da64:	0affff93 	beq	d8b8 <CUSBStandardHub::EnumeratePorts()+0x70>
    da68:	ebfff814 	bl	bac0 <CUSBDevice::ReScanDevices()>
    da6c:	e5963014 	ldr	r3, [r6, #20]
    da70:	e2852001 	add	r2, r5, #1
    da74:	e1530005 	cmp	r3, r5
    da78:	8afffff6 	bhi	da58 <CUSBStandardHub::EnumeratePorts()+0x210>
    da7c:	e3530000 	cmp	r3, #0
    da80:	0a00001f 	beq	db04 <CUSBStandardHub::EnumeratePorts()+0x2bc>
    da84:	e30f8fa5 	movw	r8, #65445	; 0xffa5
    da88:	e34f8fff 	movt	r8, #65535	; 0xffff
    da8c:	e3059274 	movw	r9, #21108	; 0x5274
    da90:	e3409002 	movt	r9, #2
    da94:	e0488006 	sub	r8, r8, r6
    da98:	e2865018 	add	r5, r6, #24
    da9c:	e286405c 	add	r4, r6, #92	; 0x5c
    daa0:	e3052250 	movw	r2, #21072	; 0x5250
    daa4:	e3402002 	movt	r2, #2
    daa8:	e58d2014 	str	r2, [sp, #20]
    daac:	e5b52004 	ldr	r2, [r5, #4]!
    dab0:	e3a01001 	mov	r1, #1
    dab4:	e0887004 	add	r7, r8, r4
    dab8:	e2520000 	subs	r0, r2, #0
    dabc:	0a00000d 	beq	daf8 <CUSBStandardHub::EnumeratePorts()+0x2b0>
    dac0:	e5d42000 	ldrb	r2, [r4]
    dac4:	e3520000 	cmp	r2, #0
    dac8:	1a00000a 	bne	daf8 <CUSBStandardHub::EnumeratePorts()+0x2b0>
    dacc:	e5c41000 	strb	r1, [r4]
    dad0:	ebfffb0f 	bl	c714 <CUSBDevice::Configure()>
    dad4:	e3500000 	cmp	r0, #0
    dad8:	0a0000ad 	beq	dd94 <CUSBStandardHub::EnumeratePorts()+0x54c>
    dadc:	eb0038ba 	bl	1bdcc <CLogger::Get()>
    dae0:	e1a03009 	mov	r3, r9
    dae4:	e58d7000 	str	r7, [sp]
    dae8:	e3a02004 	mov	r2, #4
    daec:	e59f14d0 	ldr	r1, [pc, #1232]	; dfc4 <CUSBStandardHub::EnumeratePorts()+0x77c>
    daf0:	eb0037ec 	bl	1baa8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    daf4:	e5963014 	ldr	r3, [r6, #20]
    daf8:	e2844001 	add	r4, r4, #1
    dafc:	e1570003 	cmp	r7, r3
    db00:	3affffe9 	bcc	daac <CUSBStandardHub::EnumeratePorts()+0x264>
    db04:	e3a07000 	mov	r7, #0
    db08:	e3a00004 	mov	r0, #4
    db0c:	eb00515b 	bl	22080 <operator new(unsigned int)>
    db10:	e3a04004 	mov	r4, #4
    db14:	e58d0008 	str	r0, [sp, #8]
    db18:	e1a05000 	mov	r5, r0
    db1c:	e58d7004 	str	r7, [sp, #4]
    db20:	e1a03007 	mov	r3, r7
    db24:	e58d7000 	str	r7, [sp]
    db28:	e3a020a0 	mov	r2, #160	; 0xa0
    db2c:	e58d400c 	str	r4, [sp, #12]
    db30:	e1a0100a 	mov	r1, sl
    db34:	e1a0000b 	mov	r0, fp
    db38:	ebfffc65 	bl	ccd4 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
    db3c:	e1a08000 	mov	r8, r0
    db40:	e1500004 	cmp	r0, r4
    db44:	1a00006b 	bne	dcf8 <CUSBStandardHub::EnumeratePorts()+0x4b0>
    db48:	e1d530b0 	ldrh	r3, [r5]
    db4c:	e3130002 	tst	r3, #2
    db50:	0a0000d0 	beq	de98 <CUSBStandardHub::EnumeratePorts()+0x650>
    db54:	e5963014 	ldr	r3, [r6, #20]
    db58:	e3530000 	cmp	r3, #0
    db5c:	0a000010 	beq	dba4 <CUSBStandardHub::EnumeratePorts()+0x35c>
    db60:	e3a04001 	mov	r4, #1
    db64:	e3a08008 	mov	r8, #8
    db68:	e6ff1074 	uxth	r1, r4
    db6c:	e3a03001 	mov	r3, #1
    db70:	e3a02023 	mov	r2, #35	; 0x23
    db74:	e58d1004 	str	r1, [sp, #4]
    db78:	e58d700c 	str	r7, [sp, #12]
    db7c:	e1a0100a 	mov	r1, sl
    db80:	e58d7008 	str	r7, [sp, #8]
    db84:	e1a0000b 	mov	r0, fp
    db88:	e58d8000 	str	r8, [sp]
    db8c:	ebfffc50 	bl	ccd4 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
    db90:	e5962014 	ldr	r2, [r6, #20]
    db94:	e2843001 	add	r3, r4, #1
    db98:	e1520004 	cmp	r2, r4
    db9c:	e1a04003 	mov	r4, r3
    dba0:	8afffff0 	bhi	db68 <CUSBStandardHub::EnumeratePorts()+0x320>
    dba4:	eb003888 	bl	1bdcc <CLogger::Get()>
    dba8:	e59f1414 	ldr	r1, [pc, #1044]	; dfc4 <CUSBStandardHub::EnumeratePorts()+0x77c>
    dbac:	e30532a8 	movw	r3, #21160	; 0x52a8
    dbb0:	e3403002 	movt	r3, #2
    dbb4:	e3a02001 	mov	r2, #1
    dbb8:	e3a07000 	mov	r7, #0
    dbbc:	eb0037b9 	bl	1baa8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    dbc0:	e1a00005 	mov	r0, r5
    dbc4:	e3a01004 	mov	r1, #4
    dbc8:	eb005130 	bl	22090 <operator delete(void*, unsigned int)>
    dbcc:	e1a00007 	mov	r0, r7
    dbd0:	e28dd02c 	add	sp, sp, #44	; 0x2c
    dbd4:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    dbd8:	eb00387b 	bl	1bdcc <CLogger::Get()>
    dbdc:	e58d5000 	str	r5, [sp]
    dbe0:	e3053180 	movw	r3, #20864	; 0x5180
    dbe4:	e3403002 	movt	r3, #2
    dbe8:	e3a02001 	mov	r2, #1
    dbec:	e59f13d0 	ldr	r1, [pc, #976]	; dfc4 <CUSBStandardHub::EnumeratePorts()+0x77c>
    dbf0:	eb0037ac 	bl	1baa8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    dbf4:	eaffff93 	b	da48 <CUSBStandardHub::EnumeratePorts()+0x200>
    dbf8:	e30501a0 	movw	r0, #20896	; 0x51a0
    dbfc:	e3400002 	movt	r0, #2
    dc00:	e3a020d5 	mov	r2, #213	; 0xd5
    dc04:	e59d1014 	ldr	r1, [sp, #20]
    dc08:	eb002e11 	bl	19454 <assertion_failed>
    dc0c:	e594301c 	ldr	r3, [r4, #28]
    dc10:	e1d330b0 	ldrh	r3, [r3]
    dc14:	eaffff3b 	b	d908 <CUSBStandardHub::EnumeratePorts()+0xc0>
    dc18:	e3a00004 	mov	r0, #4
    dc1c:	eb005117 	bl	22080 <operator new(unsigned int)>
    dc20:	e584001c 	str	r0, [r4, #28]
    dc24:	eaffff26 	b	d8c4 <CUSBStandardHub::EnumeratePorts()+0x7c>
    dc28:	eb003867 	bl	1bdcc <CLogger::Get()>
    dc2c:	e58d5000 	str	r5, [sp]
    dc30:	e30531d4 	movw	r3, #20948	; 0x51d4
    dc34:	e3403002 	movt	r3, #2
    dc38:	e3a02001 	mov	r2, #1
    dc3c:	e59f1380 	ldr	r1, [pc, #896]	; dfc4 <CUSBStandardHub::EnumeratePorts()+0x77c>
    dc40:	eb003798 	bl	1baa8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    dc44:	eaffff7f 	b	da48 <CUSBStandardHub::EnumeratePorts()+0x200>
    dc48:	e3051128 	movw	r1, #20776	; 0x5128
    dc4c:	e3401002 	movt	r1, #2
    dc50:	e3050158 	movw	r0, #20824	; 0x5158
    dc54:	e3400002 	movt	r0, #2
    dc58:	e3a02098 	mov	r2, #152	; 0x98
    dc5c:	eb002dfc 	bl	19454 <assertion_failed>
    dc60:	e5d63018 	ldrb	r3, [r6, #24]
    dc64:	e3530000 	cmp	r3, #0
    dc68:	e5963014 	ldr	r3, [r6, #20]
    dc6c:	1a000070 	bne	de34 <CUSBStandardHub::EnumeratePorts()+0x5ec>
    dc70:	e3530000 	cmp	r3, #0
    dc74:	0a000061 	beq	de00 <CUSBStandardHub::EnumeratePorts()+0x5b8>
    dc78:	e3a04001 	mov	r4, #1
    dc7c:	e3a05000 	mov	r5, #0
    dc80:	e3a07008 	mov	r7, #8
    dc84:	ea000004 	b	dc9c <CUSBStandardHub::EnumeratePorts()+0x454>
    dc88:	e5962014 	ldr	r2, [r6, #20]
    dc8c:	e2843001 	add	r3, r4, #1
    dc90:	e1520004 	cmp	r2, r4
    dc94:	e1a04003 	mov	r4, r3
    dc98:	9a000058 	bls	de00 <CUSBStandardHub::EnumeratePorts()+0x5b8>
    dc9c:	e6ff1074 	uxth	r1, r4
    dca0:	e58d500c 	str	r5, [sp, #12]
    dca4:	e58d1004 	str	r1, [sp, #4]
    dca8:	e3a03003 	mov	r3, #3
    dcac:	e58d5008 	str	r5, [sp, #8]
    dcb0:	e3a02023 	mov	r2, #35	; 0x23
    dcb4:	e58d7000 	str	r7, [sp]
    dcb8:	e1a0100a 	mov	r1, sl
    dcbc:	e1a0000b 	mov	r0, fp
    dcc0:	ebfffc03 	bl	ccd4 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
    dcc4:	e3500000 	cmp	r0, #0
    dcc8:	aaffffee 	bge	dc88 <CUSBStandardHub::EnumeratePorts()+0x440>
    dccc:	eb00383e 	bl	1bdcc <CLogger::Get()>
    dcd0:	e3a07000 	mov	r7, #0
    dcd4:	e58d4000 	str	r4, [sp]
    dcd8:	e3a02001 	mov	r2, #1
    dcdc:	e59f12e0 	ldr	r1, [pc, #736]	; dfc4 <CUSBStandardHub::EnumeratePorts()+0x77c>
    dce0:	e3053168 	movw	r3, #20840	; 0x5168
    dce4:	e3403002 	movt	r3, #2
    dce8:	eb00376e 	bl	1baa8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    dcec:	e1a00007 	mov	r0, r7
    dcf0:	e28dd02c 	add	sp, sp, #44	; 0x2c
    dcf4:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    dcf8:	eb003833 	bl	1bdcc <CLogger::Get()>
    dcfc:	e3a02001 	mov	r2, #1
    dd00:	e59f12bc 	ldr	r1, [pc, #700]	; dfc4 <CUSBStandardHub::EnumeratePorts()+0x77c>
    dd04:	e3053290 	movw	r3, #21136	; 0x5290
    dd08:	e3403002 	movt	r3, #2
    dd0c:	eb003765 	bl	1baa8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    dd10:	e1a00005 	mov	r0, r5
    dd14:	e1a01004 	mov	r1, r4
    dd18:	eb0050dc 	bl	22090 <operator delete(void*, unsigned int)>
    dd1c:	e1a00007 	mov	r0, r7
    dd20:	e28dd02c 	add	sp, sp, #44	; 0x2c
    dd24:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    dd28:	e5147004 	ldr	r7, [r4, #-4]
    dd2c:	e3570000 	cmp	r7, #0
    dd30:	0a000004 	beq	dd48 <CUSBStandardHub::EnumeratePorts()+0x500>
    dd34:	e1a00007 	mov	r0, r7
    dd38:	ebfff736 	bl	ba18 <CUSBDevice::~CUSBDevice()>
    dd3c:	e1a00007 	mov	r0, r7
    dd40:	e3a01044 	mov	r1, #68	; 0x44
    dd44:	eb0050d1 	bl	22090 <operator delete(void*, unsigned int)>
    dd48:	e3a03000 	mov	r3, #0
    dd4c:	e5043004 	str	r3, [r4, #-4]
    dd50:	eaffff3c 	b	da48 <CUSBStandardHub::EnumeratePorts()+0x200>
    dd54:	e1a00007 	mov	r0, r7
    dd58:	ebfff80a 	bl	bd88 <CUSBDevice::GetSpeed() const>
    dd5c:	e2403002 	sub	r3, r0, #2
    dd60:	e3590002 	cmp	r9, #2
    dd64:	e16f3f13 	clz	r3, r3
    dd68:	e1a032a3 	lsr	r3, r3, #5
    dd6c:	03a03000 	moveq	r3, #0
    dd70:	e3530000 	cmp	r3, #0
    dd74:	0affff1c 	beq	d9ec <CUSBStandardHub::EnumeratePorts()+0x1a4>
    dd78:	e1a00007 	mov	r0, r7
    dd7c:	e1a08003 	mov	r8, r3
    dd80:	ebfff7fe 	bl	bd80 <CUSBDevice::GetAddress() const>
    dd84:	e6ef3075 	uxtb	r3, r5
    dd88:	e58d0018 	str	r0, [sp, #24]
    dd8c:	e58d301c 	str	r3, [sp, #28]
    dd90:	eaffff15 	b	d9ec <CUSBStandardHub::EnumeratePorts()+0x1a4>
    dd94:	eb00380c 	bl	1bdcc <CLogger::Get()>
    dd98:	e59d3014 	ldr	r3, [sp, #20]
    dd9c:	e58d7000 	str	r7, [sp]
    dda0:	e3a02002 	mov	r2, #2
    dda4:	e59f1218 	ldr	r1, [pc, #536]	; dfc4 <CUSBStandardHub::EnumeratePorts()+0x77c>
    dda8:	eb00373e 	bl	1baa8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    ddac:	e5953000 	ldr	r3, [r5]
    ddb0:	e58d3018 	str	r3, [sp, #24]
    ddb4:	e2530000 	subs	r0, r3, #0
    ddb8:	0a000004 	beq	ddd0 <CUSBStandardHub::EnumeratePorts()+0x588>
    ddbc:	ebfff715 	bl	ba18 <CUSBDevice::~CUSBDevice()>
    ddc0:	e59d3018 	ldr	r3, [sp, #24]
    ddc4:	e3a01044 	mov	r1, #68	; 0x44
    ddc8:	e1a00003 	mov	r0, r3
    ddcc:	eb0050af 	bl	22090 <operator delete(void*, unsigned int)>
    ddd0:	e3a03000 	mov	r3, #0
    ddd4:	e5853000 	str	r3, [r5]
    ddd8:	e5963014 	ldr	r3, [r6, #20]
    dddc:	eaffff45 	b	daf8 <CUSBStandardHub::EnumeratePorts()+0x2b0>
    dde0:	eb0037f9 	bl	1bdcc <CLogger::Get()>
    dde4:	e58d5000 	str	r5, [sp]
    dde8:	e30531ec 	movw	r3, #20972	; 0x51ec
    ddec:	e3403002 	movt	r3, #2
    ddf0:	e3a02001 	mov	r2, #1
    ddf4:	e59f11c8 	ldr	r1, [pc, #456]	; dfc4 <CUSBStandardHub::EnumeratePorts()+0x77c>
    ddf8:	eb00372a 	bl	1baa8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    ddfc:	eaffff11 	b	da48 <CUSBStandardHub::EnumeratePorts()+0x200>
    de00:	e3a03001 	mov	r3, #1
    de04:	e5c63018 	strb	r3, [r6, #24]
    de08:	eb0035aa 	bl	1b4b8 <CKernelOptions::Get()>
    de0c:	e3500000 	cmp	r0, #0
    de10:	0a000002 	beq	de20 <CUSBStandardHub::EnumeratePorts()+0x5d8>
    de14:	eb00359c 	bl	1b48c <CKernelOptions::GetUSBPowerDelay() const>
    de18:	e2504000 	subs	r4, r0, #0
    de1c:	1a000000 	bne	de24 <CUSBStandardHub::EnumeratePorts()+0x5dc>
    de20:	e30041fe 	movw	r4, #510	; 0x1fe
    de24:	eb004afb 	bl	20a18 <CTimer::Get()>
    de28:	e1a00004 	mov	r0, r4
    de2c:	eb004abc 	bl	20924 <CTimer::SimpleMsDelay(unsigned int)>
    de30:	e5963014 	ldr	r3, [r6, #20]
    de34:	e3530000 	cmp	r3, #0
    de38:	1afffe92 	bne	d888 <CUSBStandardHub::EnumeratePorts()+0x40>
    de3c:	eaffff30 	b	db04 <CUSBStandardHub::EnumeratePorts()+0x2bc>
    de40:	e3002113 	movw	r2, #275	; 0x113
    de44:	e59d1014 	ldr	r1, [sp, #20]
    de48:	e59d0024 	ldr	r0, [sp, #36]	; 0x24
    de4c:	eb002d80 	bl	19454 <assertion_failed>
    de50:	eafffed9 	b	d9bc <CUSBStandardHub::EnumeratePorts()+0x174>
    de54:	e3a02093 	mov	r2, #147	; 0x93
    de58:	e3051128 	movw	r1, #20776	; 0x5128
    de5c:	e3401002 	movt	r1, #2
    de60:	e305013c 	movw	r0, #20796	; 0x513c
    de64:	e3400002 	movt	r0, #2
    de68:	eb002d79 	bl	19454 <assertion_failed>
    de6c:	e1a00006 	mov	r0, r6
    de70:	eb00143a 	bl	12f60 <CUSBFunction::GetEndpoint0() const>
    de74:	e250a000 	subs	sl, r0, #0
    de78:	1afffe7c 	bne	d870 <CUSBStandardHub::EnumeratePorts()+0x28>
    de7c:	e3051128 	movw	r1, #20776	; 0x5128
    de80:	e3401002 	movt	r1, #2
    de84:	e3050148 	movw	r0, #20808	; 0x5148
    de88:	e3400002 	movt	r0, #2
    de8c:	e3a02096 	mov	r2, #150	; 0x96
    de90:	eb002d6f 	bl	19454 <assertion_failed>
    de94:	eafffe75 	b	d870 <CUSBStandardHub::EnumeratePorts()+0x28>
    de98:	e1a00005 	mov	r0, r5
    de9c:	e1a01008 	mov	r1, r8
    dea0:	eb00507a 	bl	22090 <operator delete(void*, unsigned int)>
    dea4:	e5963014 	ldr	r3, [r6, #20]
    dea8:	e3530000 	cmp	r3, #0
    deac:	03a07001 	moveq	r7, #1
    deb0:	0affff45 	beq	dbcc <CUSBStandardHub::EnumeratePorts()+0x384>
    deb4:	e3a04001 	mov	r4, #1
    deb8:	e58d8014 	str	r8, [sp, #20]
    debc:	e3053204 	movw	r3, #20996	; 0x5204
    dec0:	e3403002 	movt	r3, #2
    dec4:	e1a07004 	mov	r7, r4
    dec8:	e58d3018 	str	r3, [sp, #24]
    decc:	e2868038 	add	r8, r6, #56	; 0x38
    ded0:	ea000004 	b	dee8 <CUSBStandardHub::EnumeratePorts()+0x6a0>
    ded4:	e5962014 	ldr	r2, [r6, #20]
    ded8:	e2843001 	add	r3, r4, #1
    dedc:	e1520004 	cmp	r2, r4
    dee0:	e1a04003 	mov	r4, r3
    dee4:	9affff38 	bls	dbcc <CUSBStandardHub::EnumeratePorts()+0x384>
    dee8:	e5b82004 	ldr	r2, [r8, #4]!
    deec:	e3a05000 	mov	r5, #0
    def0:	e59d3014 	ldr	r3, [sp, #20]
    def4:	e6ff9074 	uxth	r9, r4
    def8:	e58d300c 	str	r3, [sp, #12]
    defc:	e1a0100a 	mov	r1, sl
    df00:	e58d2008 	str	r2, [sp, #8]
    df04:	e1a03005 	mov	r3, r5
    df08:	e58d5000 	str	r5, [sp]
    df0c:	e3a020a3 	mov	r2, #163	; 0xa3
    df10:	e58d9004 	str	r9, [sp, #4]
    df14:	e1a0000b 	mov	r0, fp
    df18:	ebfffb6d 	bl	ccd4 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
    df1c:	e3500004 	cmp	r0, #4
    df20:	1affffeb 	bne	ded4 <CUSBStandardHub::EnumeratePorts()+0x68c>
    df24:	e5983000 	ldr	r3, [r8]
    df28:	e1d330b0 	ldrh	r3, [r3]
    df2c:	e3130008 	tst	r3, #8
    df30:	0affffe7 	beq	ded4 <CUSBStandardHub::EnumeratePorts()+0x68c>
    df34:	e1a0100a 	mov	r1, sl
    df38:	e3a03001 	mov	r3, #1
    df3c:	e58d500c 	str	r5, [sp, #12]
    df40:	e3a02008 	mov	r2, #8
    df44:	e58d5008 	str	r5, [sp, #8]
    df48:	e1a0000b 	mov	r0, fp
    df4c:	e58d2000 	str	r2, [sp]
    df50:	e3a02023 	mov	r2, #35	; 0x23
    df54:	e58d9004 	str	r9, [sp, #4]
    df58:	e1a07005 	mov	r7, r5
    df5c:	ebfffb5c 	bl	ccd4 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
    df60:	eb003799 	bl	1bdcc <CLogger::Get()>
    df64:	e58d4000 	str	r4, [sp]
    df68:	e59d3018 	ldr	r3, [sp, #24]
    df6c:	e3a02001 	mov	r2, #1
    df70:	e59f104c 	ldr	r1, [pc, #76]	; dfc4 <CUSBStandardHub::EnumeratePorts()+0x77c>
    df74:	eb0036cb 	bl	1baa8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    df78:	eaffffd5 	b	ded4 <CUSBStandardHub::EnumeratePorts()+0x68c>
    df7c:	e1a0100a 	mov	r1, sl
    df80:	e3a03001 	mov	r3, #1
    df84:	e58d700c 	str	r7, [sp, #12]
    df88:	e1a0000b 	mov	r0, fp
    df8c:	e58d7008 	str	r7, [sp, #8]
    df90:	e3a02008 	mov	r2, #8
    df94:	e58d9004 	str	r9, [sp, #4]
    df98:	e58d2000 	str	r2, [sp]
    df9c:	e3a02023 	mov	r2, #35	; 0x23
    dfa0:	ebfffb4b 	bl	ccd4 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
    dfa4:	eb003788 	bl	1bdcc <CLogger::Get()>
    dfa8:	e58d5000 	str	r5, [sp]
    dfac:	e3053204 	movw	r3, #20996	; 0x5204
    dfb0:	e3403002 	movt	r3, #2
    dfb4:	e3a02001 	mov	r2, #1
    dfb8:	e59f1004 	ldr	r1, [pc, #4]	; dfc4 <CUSBStandardHub::EnumeratePorts()+0x77c>
    dfbc:	eb0036b9 	bl	1baa8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    dfc0:	eaffff01 	b	dbcc <CUSBStandardHub::EnumeratePorts()+0x384>
    dfc4:	00025120 	.word	0x00025120

0000dfc8 <CUSBStandardHub::ReScanDevices()>:
    dfc8:	eafffe1e 	b	d848 <CUSBStandardHub::EnumeratePorts()>

0000dfcc <CUSBStandardHub::Configure()>:
    dfcc:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    dfd0:	e1a04000 	mov	r4, r0
    dfd4:	e24dd024 	sub	sp, sp, #36	; 0x24
    dfd8:	eb0013c0 	bl	12ee0 <CUSBFunction::GetNumEndpoints() const>
    dfdc:	e3500001 	cmp	r0, #1
    dfe0:	0a000006 	beq	e000 <CUSBStandardHub::Configure()+0x34>
    dfe4:	e3a05000 	mov	r5, #0
    dfe8:	e1a00004 	mov	r0, r4
    dfec:	e59f11f4 	ldr	r1, [pc, #500]	; e1e8 <CUSBStandardHub::Configure()+0x21c>
    dff0:	eb001440 	bl	130f8 <CUSBFunction::ConfigurationError(char const*) const>
    dff4:	e1a00005 	mov	r0, r5
    dff8:	e28dd024 	add	sp, sp, #36	; 0x24
    dffc:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    e000:	e1a06000 	mov	r6, r0
    e004:	e3a01005 	mov	r1, #5
    e008:	e1a00004 	mov	r0, r4
    e00c:	eb001426 	bl	130ac <CUSBFunction::GetDescriptor(unsigned char)>
    e010:	e3500000 	cmp	r0, #0
    e014:	0afffff2 	beq	dfe4 <CUSBStandardHub::Configure()+0x18>
    e018:	e1d030d2 	ldrsb	r3, [r0, #2]
    e01c:	e3530000 	cmp	r3, #0
    e020:	aaffffef 	bge	dfe4 <CUSBStandardHub::Configure()+0x18>
    e024:	e5d03003 	ldrb	r3, [r0, #3]
    e028:	e203303f 	and	r3, r3, #63	; 0x3f
    e02c:	e3530003 	cmp	r3, #3
    e030:	1affffeb 	bne	dfe4 <CUSBStandardHub::Configure()+0x18>
    e034:	e1a00004 	mov	r0, r4
    e038:	eb0013ea 	bl	12fe8 <CUSBFunction::Configure()>
    e03c:	e2505000 	subs	r5, r0, #0
    e040:	0a00004c 	beq	e178 <CUSBStandardHub::Configure()+0x1ac>
    e044:	e5943010 	ldr	r3, [r4, #16]
    e048:	e3530000 	cmp	r3, #0
    e04c:	0a000005 	beq	e068 <CUSBStandardHub::Configure()+0x9c>
    e050:	e3051128 	movw	r1, #20776	; 0x5128
    e054:	e3401002 	movt	r1, #2
    e058:	e30502dc 	movw	r0, #21212	; 0x52dc
    e05c:	e3400002 	movt	r0, #2
    e060:	e3a0205c 	mov	r2, #92	; 0x5c
    e064:	eb002cfa 	bl	19454 <assertion_failed>
    e068:	e3a00009 	mov	r0, #9
    e06c:	e3a06000 	mov	r6, #0
    e070:	eb005002 	bl	22080 <operator new(unsigned int)>
    e074:	e5840010 	str	r0, [r4, #16]
    e078:	e1a00004 	mov	r0, r4
    e07c:	e3a05009 	mov	r5, #9
    e080:	eb0013c7 	bl	12fa4 <CUSBFunction::GetHost() const>
    e084:	e1a07000 	mov	r7, r0
    e088:	e1a00004 	mov	r0, r4
    e08c:	eb0013b3 	bl	12f60 <CUSBFunction::GetEndpoint0() const>
    e090:	e5942010 	ldr	r2, [r4, #16]
    e094:	e1a01000 	mov	r1, r0
    e098:	e58d2000 	str	r2, [sp]
    e09c:	e1a00007 	mov	r0, r7
    e0a0:	e3a0c0a0 	mov	ip, #160	; 0xa0
    e0a4:	e58d600c 	str	r6, [sp, #12]
    e0a8:	e1a03006 	mov	r3, r6
    e0ac:	e58d5004 	str	r5, [sp, #4]
    e0b0:	e3a02029 	mov	r2, #41	; 0x29
    e0b4:	e58dc008 	str	ip, [sp, #8]
    e0b8:	ebfffb31 	bl	cd84 <CUSBHostController::GetDescriptor(CUSBEndpoint*, unsigned char, unsigned char, void*, unsigned int, unsigned char, unsigned short)>
    e0bc:	e1a07000 	mov	r7, r0
    e0c0:	e1500005 	cmp	r0, r5
    e0c4:	1a00001f 	bne	e148 <CUSBStandardHub::Configure()+0x17c>
    e0c8:	e5943010 	ldr	r3, [r4, #16]
    e0cc:	e5d33002 	ldrb	r3, [r3, #2]
    e0d0:	e5843014 	str	r3, [r4, #20]
    e0d4:	e3530008 	cmp	r3, #8
    e0d8:	8a00002d 	bhi	e194 <CUSBStandardHub::Configure()+0x1c8>
    e0dc:	e28d0010 	add	r0, sp, #16
    e0e0:	eb0042da 	bl	1ec50 <CString::CString()>
    e0e4:	e30b301c 	movw	r3, #45084	; 0xb01c
    e0e8:	e3403002 	movt	r3, #2
    e0ec:	e28d0010 	add	r0, sp, #16
    e0f0:	e305131c 	movw	r1, #21276	; 0x531c
    e0f4:	e3401002 	movt	r1, #2
    e0f8:	e5932000 	ldr	r2, [r3]
    e0fc:	e282c001 	add	ip, r2, #1
    e100:	e583c000 	str	ip, [r3]
    e104:	eb00469a 	bl	1fb74 <CString::Format(char const*, ...)>
    e108:	eb002f90 	bl	19f50 <CDeviceNameService::Get()>
    e10c:	e1a05000 	mov	r5, r0
    e110:	e28d0010 	add	r0, sp, #16
    e114:	eb0042e4 	bl	1ecac <CString::operator char const*() const>
    e118:	e1a03006 	mov	r3, r6
    e11c:	e1a01000 	mov	r1, r0
    e120:	e1a02004 	mov	r2, r4
    e124:	e1a00005 	mov	r0, r5
    e128:	eb002ede 	bl	19ca8 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)>
    e12c:	e1a00004 	mov	r0, r4
    e130:	ebfffdc4 	bl	d848 <CUSBStandardHub::EnumeratePorts()>
    e134:	e2505000 	subs	r5, r0, #0
    e138:	0a000023 	beq	e1cc <CUSBStandardHub::Configure()+0x200>
    e13c:	e28d0010 	add	r0, sp, #16
    e140:	eb004290 	bl	1eb88 <CString::~CString()>
    e144:	eaffffaa 	b	dff4 <CUSBStandardHub::Configure()+0x28>
    e148:	eb00371f 	bl	1bdcc <CLogger::Get()>
    e14c:	e3a02001 	mov	r2, #1
    e150:	e59f1090 	ldr	r1, [pc, #144]	; e1e8 <CUSBStandardHub::Configure()+0x21c>
    e154:	e30532ec 	movw	r3, #21228	; 0x52ec
    e158:	e3403002 	movt	r3, #2
    e15c:	eb003651 	bl	1baa8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    e160:	e1a01005 	mov	r1, r5
    e164:	e5940010 	ldr	r0, [r4, #16]
    e168:	e1a05006 	mov	r5, r6
    e16c:	eb004fc7 	bl	22090 <operator delete(void*, unsigned int)>
    e170:	e5846010 	str	r6, [r4, #16]
    e174:	eaffff9e 	b	dff4 <CUSBStandardHub::Configure()+0x28>
    e178:	eb003713 	bl	1bdcc <CLogger::Get()>
    e17c:	e1a02006 	mov	r2, r6
    e180:	e30532c4 	movw	r3, #21188	; 0x52c4
    e184:	e3403002 	movt	r3, #2
    e188:	e59f1058 	ldr	r1, [pc, #88]	; e1e8 <CUSBStandardHub::Configure()+0x21c>
    e18c:	eb003645 	bl	1baa8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    e190:	eaffff97 	b	dff4 <CUSBStandardHub::Configure()+0x28>
    e194:	eb00370c 	bl	1bdcc <CLogger::Get()>
    e198:	e5943014 	ldr	r3, [r4, #20]
    e19c:	e58d3000 	str	r3, [sp]
    e1a0:	e3a02001 	mov	r2, #1
    e1a4:	e59f103c 	ldr	r1, [pc, #60]	; e1e8 <CUSBStandardHub::Configure()+0x21c>
    e1a8:	e3053308 	movw	r3, #21256	; 0x5308
    e1ac:	e3403002 	movt	r3, #2
    e1b0:	eb00363c 	bl	1baa8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    e1b4:	e1a01007 	mov	r1, r7
    e1b8:	e5940010 	ldr	r0, [r4, #16]
    e1bc:	e1a05006 	mov	r5, r6
    e1c0:	eb004fb2 	bl	22090 <operator delete(void*, unsigned int)>
    e1c4:	e5846010 	str	r6, [r4, #16]
    e1c8:	eaffff89 	b	dff4 <CUSBStandardHub::Configure()+0x28>
    e1cc:	eb0036fe 	bl	1bdcc <CLogger::Get()>
    e1d0:	e3053324 	movw	r3, #21284	; 0x5324
    e1d4:	e3403002 	movt	r3, #2
    e1d8:	e3a02001 	mov	r2, #1
    e1dc:	e59f1004 	ldr	r1, [pc, #4]	; e1e8 <CUSBStandardHub::Configure()+0x21c>
    e1e0:	eb003630 	bl	1baa8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    e1e4:	eaffffd4 	b	e13c <CUSBStandardHub::Configure()+0x170>
    e1e8:	00025120 	.word	0x00025120

0000e1ec <CUSBBulkOnlyMassStorageDevice::Seek(unsigned long long)>:
    e1ec:	e1c022f0 	strd	r2, [r0, #32]
    e1f0:	e1a01003 	mov	r1, r3
    e1f4:	e1a00002 	mov	r0, r2
    e1f8:	e12fff1e 	bx	lr

0000e1fc <CUSBBulkOnlyMassStorageDevice::~CUSBBulkOnlyMassStorageDevice()>:
    e1fc:	e92d4070 	push	{r4, r5, r6, lr}
    e200:	e1a04000 	mov	r4, r0
    e204:	e5905028 	ldr	r5, [r0, #40]	; 0x28
    e208:	e59f3084 	ldr	r3, [pc, #132]	; e294 <CUSBBulkOnlyMassStorageDevice::~CUSBBulkOnlyMassStorageDevice()+0x98>
    e20c:	e5803000 	str	r3, [r0]
    e210:	e3550000 	cmp	r5, #0
    e214:	0a000004 	beq	e22c <CUSBBulkOnlyMassStorageDevice::~CUSBBulkOnlyMassStorageDevice()+0x30>
    e218:	e1a00005 	mov	r0, r5
    e21c:	eb00282c 	bl	182d4 <CPartitionManager::~CPartitionManager()>
    e220:	e1a00005 	mov	r0, r5
    e224:	e3a01024 	mov	r1, #36	; 0x24
    e228:	eb004f98 	bl	22090 <operator delete(void*, unsigned int)>
    e22c:	e5945014 	ldr	r5, [r4, #20]
    e230:	e3a03000 	mov	r3, #0
    e234:	e5843028 	str	r3, [r4, #40]	; 0x28
    e238:	e1550003 	cmp	r5, r3
    e23c:	0a000004 	beq	e254 <CUSBBulkOnlyMassStorageDevice::~CUSBBulkOnlyMassStorageDevice()+0x58>
    e240:	e1a00005 	mov	r0, r5
    e244:	ebfffa1c 	bl	cabc <CUSBEndpoint::~CUSBEndpoint()>
    e248:	e1a00005 	mov	r0, r5
    e24c:	e3a01014 	mov	r1, #20
    e250:	eb004f8e 	bl	22090 <operator delete(void*, unsigned int)>
    e254:	e5945010 	ldr	r5, [r4, #16]
    e258:	e3a03000 	mov	r3, #0
    e25c:	e5843014 	str	r3, [r4, #20]
    e260:	e1550003 	cmp	r5, r3
    e264:	0a000004 	beq	e27c <CUSBBulkOnlyMassStorageDevice::~CUSBBulkOnlyMassStorageDevice()+0x80>
    e268:	e1a00005 	mov	r0, r5
    e26c:	ebfffa12 	bl	cabc <CUSBEndpoint::~CUSBEndpoint()>
    e270:	e1a00005 	mov	r0, r5
    e274:	e3a01014 	mov	r1, #20
    e278:	eb004f84 	bl	22090 <operator delete(void*, unsigned int)>
    e27c:	e3a03000 	mov	r3, #0
    e280:	e1a00004 	mov	r0, r4
    e284:	e5843010 	str	r3, [r4, #16]
    e288:	eb001262 	bl	12c18 <CUSBFunction::~CUSBFunction()>
    e28c:	e1a00004 	mov	r0, r4
    e290:	e8bd8070 	pop	{r4, r5, r6, pc}
    e294:	00025344 	.word	0x00025344

0000e298 <CUSBBulkOnlyMassStorageDevice::~CUSBBulkOnlyMassStorageDevice()>:
    e298:	e92d4010 	push	{r4, lr}
    e29c:	e1a04000 	mov	r4, r0
    e2a0:	ebffffd5 	bl	e1fc <CUSBBulkOnlyMassStorageDevice::~CUSBBulkOnlyMassStorageDevice()>
    e2a4:	e1a00004 	mov	r0, r4
    e2a8:	e3a01030 	mov	r1, #48	; 0x30
    e2ac:	eb004f77 	bl	22090 <operator delete(void*, unsigned int)>
    e2b0:	e1a00004 	mov	r0, r4
    e2b4:	e8bd8010 	pop	{r4, pc}

0000e2b8 <CUSBBulkOnlyMassStorageDevice::CUSBBulkOnlyMassStorageDevice(CUSBFunction*)>:
    e2b8:	e92d4010 	push	{r4, lr}
    e2bc:	e1a04000 	mov	r4, r0
    e2c0:	eb0012a6 	bl	12d60 <CUSBFunction::CUSBFunction(CUSBFunction*)>
    e2c4:	f2c00010 	vmov.i32	d16, #0	; 0x00000000
    e2c8:	e59f2024 	ldr	r2, [pc, #36]	; e2f4 <CUSBBulkOnlyMassStorageDevice::CUSBBulkOnlyMassStorageDevice(CUSBFunction*)+0x3c>
    e2cc:	e3a03000 	mov	r3, #0
    e2d0:	e1a00004 	mov	r0, r4
    e2d4:	e5842000 	str	r2, [r4]
    e2d8:	e5843010 	str	r3, [r4, #16]
    e2dc:	e5843014 	str	r3, [r4, #20]
    e2e0:	edc40b08 	vstr	d16, [r4, #32]
    e2e4:	e5843018 	str	r3, [r4, #24]
    e2e8:	e584301c 	str	r3, [r4, #28]
    e2ec:	e5843028 	str	r3, [r4, #40]	; 0x28
    e2f0:	e8bd8010 	pop	{r4, pc}
    e2f4:	00025344 	.word	0x00025344

0000e2f8 <CUSBBulkOnlyMassStorageDevice::GetCapacity() const>:
    e2f8:	e590001c 	ldr	r0, [r0, #28]
    e2fc:	e12fff1e 	bx	lr

0000e300 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)>:
    e300:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
    e304:	e1a04000 	mov	r4, r0
    e308:	e1a06002 	mov	r6, r2
    e30c:	e24dd03c 	sub	sp, sp, #60	; 0x3c
    e310:	e1a08003 	mov	r8, r3
    e314:	e2519000 	subs	r9, r1, #0
    e318:	e59d5058 	ldr	r5, [sp, #88]	; 0x58
    e31c:	e5dd705c 	ldrb	r7, [sp, #92]	; 0x5c
    e320:	0a00006a 	beq	e4d0 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x1d0>
    e324:	e2463006 	sub	r3, r6, #6
    e328:	e353000a 	cmp	r3, #10
    e32c:	8a000052 	bhi	e47c <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x17c>
    e330:	e2983000 	adds	r3, r8, #0
    e334:	13a03001 	movne	r3, #1
    e338:	e3550000 	cmp	r5, #0
    e33c:	03a03001 	moveq	r3, #1
    e340:	e3530000 	cmp	r3, #0
    e344:	0a000053 	beq	e498 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x198>
    e348:	f2c00050 	vmov.i32	q8, #0	; 0x00000000
    e34c:	e5943018 	ldr	r3, [r4, #24]
    e350:	e28d2024 	add	r2, sp, #36	; 0x24
    e354:	e28d002f 	add	r0, sp, #47	; 0x2f
    e358:	e2833001 	add	r3, r3, #1
    e35c:	e5843018 	str	r3, [r4, #24]
    e360:	e3570000 	cmp	r7, #0
    e364:	e1a01009 	mov	r1, r9
    e368:	e58d301c 	str	r3, [sp, #28]
    e36c:	03a03000 	moveq	r3, #0
    e370:	f4420a0f 	vst1.8	{d16-d17}, [r2]
    e374:	e1a02006 	mov	r2, r6
    e378:	e5ddc026 	ldrb	ip, [sp, #38]	; 0x26
    e37c:	f440070f 	vst1.8	{d16}, [r0]
    e380:	e28d0027 	add	r0, sp, #39	; 0x27
    e384:	13a03080 	movne	r3, #128	; 0x80
    e388:	e58d5020 	str	r5, [sp, #32]
    e38c:	e7c4c016 	bfi	ip, r6, #0, #5
    e390:	e5cd3024 	strb	r3, [sp, #36]	; 0x24
    e394:	e5cdc026 	strb	ip, [sp, #38]	; 0x26
    e398:	e3053355 	movw	r3, #21333	; 0x5355
    e39c:	e3443342 	movt	r3, #17218	; 0x4342
    e3a0:	e58d3018 	str	r3, [sp, #24]
    e3a4:	eb004b51 	bl	210f0 <memcpy>
    e3a8:	e1a00004 	mov	r0, r4
    e3ac:	eb0012fc 	bl	12fa4 <CUSBFunction::GetHost() const>
    e3b0:	e2506000 	subs	r6, r0, #0
    e3b4:	0a00003e 	beq	e4b4 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x1b4>
    e3b8:	e5941014 	ldr	r1, [r4, #20]
    e3bc:	e3a09000 	mov	r9, #0
    e3c0:	e3a0301f 	mov	r3, #31
    e3c4:	e58d9000 	str	r9, [sp]
    e3c8:	e28d2018 	add	r2, sp, #24
    e3cc:	e1a00006 	mov	r0, r6
    e3d0:	ebfffa9f 	bl	ce54 <CUSBHostController::Transfer(CUSBEndpoint*, void*, unsigned int, unsigned int)>
    e3d4:	e1500009 	cmp	r0, r9
    e3d8:	ba000065 	blt	e574 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x274>
    e3dc:	e3550000 	cmp	r5, #0
    e3e0:	e5941010 	ldr	r1, [r4, #16]
    e3e4:	0a00000a 	beq	e414 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x114>
    e3e8:	e5940014 	ldr	r0, [r4, #20]
    e3ec:	e3570000 	cmp	r7, #0
    e3f0:	e1a03005 	mov	r3, r5
    e3f4:	e58d9000 	str	r9, [sp]
    e3f8:	01a01000 	moveq	r1, r0
    e3fc:	e1a02008 	mov	r2, r8
    e400:	e1a00006 	mov	r0, r6
    e404:	ebfffa92 	bl	ce54 <CUSBHostController::Transfer(CUSBEndpoint*, void*, unsigned int, unsigned int)>
    e408:	e2505000 	subs	r5, r0, #0
    e40c:	ba000060 	blt	e594 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x294>
    e410:	e5941010 	ldr	r1, [r4, #16]
    e414:	e3a02000 	mov	r2, #0
    e418:	e1a00006 	mov	r0, r6
    e41c:	e58d2000 	str	r2, [sp]
    e420:	e3a0300d 	mov	r3, #13
    e424:	e28d2008 	add	r2, sp, #8
    e428:	ebfffa89 	bl	ce54 <CUSBHostController::Transfer(CUSBEndpoint*, void*, unsigned int, unsigned int)>
    e42c:	e350000d 	cmp	r0, #13
    e430:	1a00002d 	bne	e4ec <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x1ec>
    e434:	e59d2008 	ldr	r2, [sp, #8]
    e438:	e3053355 	movw	r3, #21333	; 0x5355
    e43c:	e3453342 	movt	r3, #21314	; 0x5342
    e440:	e1520003 	cmp	r2, r3
    e444:	1a000032 	bne	e514 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x214>
    e448:	e5943018 	ldr	r3, [r4, #24]
    e44c:	e59d200c 	ldr	r2, [sp, #12]
    e450:	e1520003 	cmp	r2, r3
    e454:	1a000036 	bne	e534 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x234>
    e458:	e5dd3014 	ldrb	r3, [sp, #20]
    e45c:	e3530000 	cmp	r3, #0
    e460:	1a000029 	bne	e50c <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x20c>
    e464:	e59d3010 	ldr	r3, [sp, #16]
    e468:	e3530000 	cmp	r3, #0
    e46c:	1a000038 	bne	e554 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x254>
    e470:	e1a00005 	mov	r0, r5
    e474:	e28dd03c 	add	sp, sp, #60	; 0x3c
    e478:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
    e47c:	e305136c 	movw	r1, #21356	; 0x536c
    e480:	e3401002 	movt	r1, #2
    e484:	e3050390 	movw	r0, #21392	; 0x5390
    e488:	e3400002 	movt	r0, #2
    e48c:	e3002216 	movw	r2, #534	; 0x216
    e490:	eb002bef 	bl	19454 <assertion_failed>
    e494:	eaffffa5 	b	e330 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x30>
    e498:	e305136c 	movw	r1, #21356	; 0x536c
    e49c:	e3401002 	movt	r1, #2
    e4a0:	e30503b4 	movw	r0, #21428	; 0x53b4
    e4a4:	e3400002 	movt	r0, #2
    e4a8:	e3002217 	movw	r2, #535	; 0x217
    e4ac:	eb002be8 	bl	19454 <assertion_failed>
    e4b0:	eaffffa4 	b	e348 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x48>
    e4b4:	e305136c 	movw	r1, #21356	; 0x536c
    e4b8:	e3401002 	movt	r1, #2
    e4bc:	e305013c 	movw	r0, #20796	; 0x513c
    e4c0:	e3400002 	movt	r0, #2
    e4c4:	e3002226 	movw	r2, #550	; 0x226
    e4c8:	eb002be1 	bl	19454 <assertion_failed>
    e4cc:	eaffffb9 	b	e3b8 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0xb8>
    e4d0:	e305136c 	movw	r1, #21356	; 0x536c
    e4d4:	e3401002 	movt	r1, #2
    e4d8:	e3050380 	movw	r0, #21376	; 0x5380
    e4dc:	e3400002 	movt	r0, #2
    e4e0:	e3002215 	movw	r2, #533	; 0x215
    e4e4:	eb002bda 	bl	19454 <assertion_failed>
    e4e8:	eaffff8d 	b	e324 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x24>
    e4ec:	eb003636 	bl	1bdcc <CLogger::Get()>
    e4f0:	e3053400 	movw	r3, #21504	; 0x5400
    e4f4:	e3403002 	movt	r3, #2
    e4f8:	e3a02001 	mov	r2, #1
    e4fc:	e59f10b0 	ldr	r1, [pc, #176]	; e5b4 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x2b4>
    e500:	eb003568 	bl	1baa8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    e504:	e3e05000 	mvn	r5, #0
    e508:	eaffffd8 	b	e470 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x170>
    e50c:	e3e05000 	mvn	r5, #0
    e510:	eaffffd6 	b	e470 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x170>
    e514:	eb00362c 	bl	1bdcc <CLogger::Get()>
    e518:	e3053414 	movw	r3, #21524	; 0x5414
    e51c:	e3403002 	movt	r3, #2
    e520:	e3a02001 	mov	r2, #1
    e524:	e59f1088 	ldr	r1, [pc, #136]	; e5b4 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x2b4>
    e528:	eb00355e 	bl	1baa8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    e52c:	e3e05000 	mvn	r5, #0
    e530:	eaffffce 	b	e470 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x170>
    e534:	eb003624 	bl	1bdcc <CLogger::Get()>
    e538:	e305342c 	movw	r3, #21548	; 0x542c
    e53c:	e3403002 	movt	r3, #2
    e540:	e3a02001 	mov	r2, #1
    e544:	e59f1068 	ldr	r1, [pc, #104]	; e5b4 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x2b4>
    e548:	eb003556 	bl	1baa8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    e54c:	e3e05000 	mvn	r5, #0
    e550:	eaffffc6 	b	e470 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x170>
    e554:	eb00361c 	bl	1bdcc <CLogger::Get()>
    e558:	e3053440 	movw	r3, #21568	; 0x5440
    e55c:	e3403002 	movt	r3, #2
    e560:	e3a02001 	mov	r2, #1
    e564:	e59f1048 	ldr	r1, [pc, #72]	; e5b4 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x2b4>
    e568:	eb00354e 	bl	1baa8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    e56c:	e3e05000 	mvn	r5, #0
    e570:	eaffffbe 	b	e470 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x170>
    e574:	eb003614 	bl	1bdcc <CLogger::Get()>
    e578:	e30533d4 	movw	r3, #21460	; 0x53d4
    e57c:	e3403002 	movt	r3, #2
    e580:	e3a02001 	mov	r2, #1
    e584:	e59f1028 	ldr	r1, [pc, #40]	; e5b4 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x2b4>
    e588:	eb003546 	bl	1baa8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    e58c:	e3e05000 	mvn	r5, #0
    e590:	eaffffb6 	b	e470 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x170>
    e594:	eb00360c 	bl	1bdcc <CLogger::Get()>
    e598:	e30533e8 	movw	r3, #21480	; 0x53e8
    e59c:	e3403002 	movt	r3, #2
    e5a0:	e3a02001 	mov	r2, #1
    e5a4:	e59f1008 	ldr	r1, [pc, #8]	; e5b4 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x2b4>
    e5a8:	eb00353e 	bl	1baa8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    e5ac:	e3e05000 	mvn	r5, #0
    e5b0:	eaffffae 	b	e470 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x170>
    e5b4:	00025364 	.word	0x00025364

0000e5b8 <CUSBBulkOnlyMassStorageDevice::TryRead(void*, unsigned int)>:
    e5b8:	e92d4df0 	push	{r4, r5, r6, r7, r8, sl, fp, lr}
    e5bc:	e1a05000 	mov	r5, r0
    e5c0:	e1a04002 	mov	r4, r2
    e5c4:	e24dd018 	sub	sp, sp, #24
    e5c8:	e2518000 	subs	r8, r1, #0
    e5cc:	0a000029 	beq	e678 <CUSBBulkOnlyMassStorageDevice::TryRead(void*, unsigned int)+0xc0>
    e5d0:	e1c522d0 	ldrd	r2, [r5, #32]
    e5d4:	e3a01000 	mov	r1, #0
    e5d8:	e30001ff 	movw	r0, #511	; 0x1ff
    e5dc:	e30071ff 	movw	r7, #511	; 0x1ff
    e5e0:	e001b003 	and	fp, r1, r3
    e5e4:	e000a002 	and	sl, r0, r2
    e5e8:	e19a100b 	orrs	r1, sl, fp
    e5ec:	e3e06000 	mvn	r6, #0
    e5f0:	13a01001 	movne	r1, #1
    e5f4:	03a01000 	moveq	r1, #0
    e5f8:	e1530007 	cmp	r3, r7
    e5fc:	01520006 	cmpeq	r2, r6
    e600:	83811001 	orrhi	r1, r1, #1
    e604:	e3510000 	cmp	r1, #0
    e608:	1a000021 	bne	e694 <CUSBBulkOnlyMassStorageDevice::TryRead(void*, unsigned int)+0xdc>
    e60c:	e7e8c054 	ubfx	ip, r4, #0, #9
    e610:	e1a064a2 	lsr	r6, r2, #9
    e614:	e1866b83 	orr	r6, r6, r3, lsl #23
    e618:	e35c0000 	cmp	ip, #0
    e61c:	1a00001c 	bne	e694 <CUSBBulkOnlyMassStorageDevice::TryRead(void*, unsigned int)+0xdc>
    e620:	e1a00005 	mov	r0, r5
    e624:	e6bf2f36 	rev	r2, r6
    e628:	e58d4000 	str	r4, [sp]
    e62c:	e1a03008 	mov	r3, r8
    e630:	e58d200e 	str	r2, [sp, #14]
    e634:	e1a0e4a4 	lsr	lr, r4, #9
    e638:	e3a05001 	mov	r5, #1
    e63c:	e3a0200a 	mov	r2, #10
    e640:	e58d5004 	str	r5, [sp, #4]
    e644:	e28d100c 	add	r1, sp, #12
    e648:	e6bfefbe 	rev16	lr, lr
    e64c:	e5cdc012 	strb	ip, [sp, #18]
    e650:	e5cdc015 	strb	ip, [sp, #21]
    e654:	e3a0c028 	mov	ip, #40	; 0x28
    e658:	e1cde1b3 	strh	lr, [sp, #19]
    e65c:	e1cdc0bc 	strh	ip, [sp, #12]
    e660:	ebffff26 	bl	e300 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)>
    e664:	e1500004 	cmp	r0, r4
    e668:	1a00000b 	bne	e69c <CUSBBulkOnlyMassStorageDevice::TryRead(void*, unsigned int)+0xe4>
    e66c:	e1a00004 	mov	r0, r4
    e670:	e28dd018 	add	sp, sp, #24
    e674:	e8bd8df0 	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
    e678:	e305136c 	movw	r1, #21356	; 0x536c
    e67c:	e3401002 	movt	r1, #2
    e680:	e30503c4 	movw	r0, #21444	; 0x53c4
    e684:	e3400002 	movt	r0, #2
    e688:	e30021ca 	movw	r2, #458	; 0x1ca
    e68c:	eb002b70 	bl	19454 <assertion_failed>
    e690:	eaffffce 	b	e5d0 <CUSBBulkOnlyMassStorageDevice::TryRead(void*, unsigned int)+0x18>
    e694:	e3e04000 	mvn	r4, #0
    e698:	eafffff3 	b	e66c <CUSBBulkOnlyMassStorageDevice::TryRead(void*, unsigned int)+0xb4>
    e69c:	eb0035ca 	bl	1bdcc <CLogger::Get()>
    e6a0:	e1a02005 	mov	r2, r5
    e6a4:	e3053458 	movw	r3, #21592	; 0x5458
    e6a8:	e3403002 	movt	r3, #2
    e6ac:	e59f1008 	ldr	r1, [pc, #8]	; e6bc <CUSBBulkOnlyMassStorageDevice::TryRead(void*, unsigned int)+0x104>
    e6b0:	e3e04000 	mvn	r4, #0
    e6b4:	eb0034fb 	bl	1baa8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    e6b8:	eaffffeb 	b	e66c <CUSBBulkOnlyMassStorageDevice::TryRead(void*, unsigned int)+0xb4>
    e6bc:	00025364 	.word	0x00025364

0000e6c0 <CUSBBulkOnlyMassStorageDevice::TryWrite(void const*, unsigned int)>:
    e6c0:	e92d4df0 	push	{r4, r5, r6, r7, r8, sl, fp, lr}
    e6c4:	e1a05000 	mov	r5, r0
    e6c8:	e1a04002 	mov	r4, r2
    e6cc:	e24dd018 	sub	sp, sp, #24
    e6d0:	e2518000 	subs	r8, r1, #0
    e6d4:	0a000028 	beq	e77c <CUSBBulkOnlyMassStorageDevice::TryWrite(void const*, unsigned int)+0xbc>
    e6d8:	e1c522d0 	ldrd	r2, [r5, #32]
    e6dc:	e3a01000 	mov	r1, #0
    e6e0:	e30001ff 	movw	r0, #511	; 0x1ff
    e6e4:	e30071ff 	movw	r7, #511	; 0x1ff
    e6e8:	e001b003 	and	fp, r1, r3
    e6ec:	e000a002 	and	sl, r0, r2
    e6f0:	e19a100b 	orrs	r1, sl, fp
    e6f4:	e3e06000 	mvn	r6, #0
    e6f8:	13a01001 	movne	r1, #1
    e6fc:	03a01000 	moveq	r1, #0
    e700:	e1530007 	cmp	r3, r7
    e704:	01520006 	cmpeq	r2, r6
    e708:	83811001 	orrhi	r1, r1, #1
    e70c:	e3510000 	cmp	r1, #0
    e710:	1a000020 	bne	e798 <CUSBBulkOnlyMassStorageDevice::TryWrite(void const*, unsigned int)+0xd8>
    e714:	e7e8e054 	ubfx	lr, r4, #0, #9
    e718:	e1a064a2 	lsr	r6, r2, #9
    e71c:	e1866b83 	orr	r6, r6, r3, lsl #23
    e720:	e35e0000 	cmp	lr, #0
    e724:	1a00001b 	bne	e798 <CUSBBulkOnlyMassStorageDevice::TryWrite(void const*, unsigned int)+0xd8>
    e728:	e6bf1f36 	rev	r1, r6
    e72c:	e58de004 	str	lr, [sp, #4]
    e730:	e58d100e 	str	r1, [sp, #14]
    e734:	e1a03008 	mov	r3, r8
    e738:	e58d4000 	str	r4, [sp]
    e73c:	e1a00005 	mov	r0, r5
    e740:	e1a0c4a4 	lsr	ip, r4, #9
    e744:	e3a0200a 	mov	r2, #10
    e748:	e28d100c 	add	r1, sp, #12
    e74c:	e6bfcfbc 	rev16	ip, ip
    e750:	e5cde012 	strb	lr, [sp, #18]
    e754:	e1cdc1b3 	strh	ip, [sp, #19]
    e758:	e300c82a 	movw	ip, #2090	; 0x82a
    e75c:	e5cde015 	strb	lr, [sp, #21]
    e760:	e1cdc0bc 	strh	ip, [sp, #12]
    e764:	ebfffee5 	bl	e300 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)>
    e768:	e3500000 	cmp	r0, #0
    e76c:	a1a00004 	movge	r0, r4
    e770:	ba00000a 	blt	e7a0 <CUSBBulkOnlyMassStorageDevice::TryWrite(void const*, unsigned int)+0xe0>
    e774:	e28dd018 	add	sp, sp, #24
    e778:	e8bd8df0 	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
    e77c:	e305136c 	movw	r1, #21356	; 0x536c
    e780:	e3401002 	movt	r1, #2
    e784:	e30503c4 	movw	r0, #21444	; 0x53c4
    e788:	e3400002 	movt	r0, #2
    e78c:	e30021ef 	movw	r2, #495	; 0x1ef
    e790:	eb002b2f 	bl	19454 <assertion_failed>
    e794:	eaffffcf 	b	e6d8 <CUSBBulkOnlyMassStorageDevice::TryWrite(void const*, unsigned int)+0x18>
    e798:	e3e00000 	mvn	r0, #0
    e79c:	eafffff4 	b	e774 <CUSBBulkOnlyMassStorageDevice::TryWrite(void const*, unsigned int)+0xb4>
    e7a0:	eb003589 	bl	1bdcc <CLogger::Get()>
    e7a4:	e3053468 	movw	r3, #21608	; 0x5468
    e7a8:	e3403002 	movt	r3, #2
    e7ac:	e3a02001 	mov	r2, #1
    e7b0:	e59f1008 	ldr	r1, [pc, #8]	; e7c0 <CUSBBulkOnlyMassStorageDevice::TryWrite(void const*, unsigned int)+0x100>
    e7b4:	eb0034bb 	bl	1baa8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    e7b8:	e3e00000 	mvn	r0, #0
    e7bc:	eaffffec 	b	e774 <CUSBBulkOnlyMassStorageDevice::TryWrite(void const*, unsigned int)+0xb4>
    e7c0:	00025364 	.word	0x00025364

0000e7c4 <CUSBBulkOnlyMassStorageDevice::Reset()>:
    e7c4:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    e7c8:	e1a05000 	mov	r5, r0
    e7cc:	e24dd014 	sub	sp, sp, #20
    e7d0:	eb0011f3 	bl	12fa4 <CUSBFunction::GetHost() const>
    e7d4:	e2506000 	subs	r6, r0, #0
    e7d8:	0a00002f 	beq	e89c <CUSBBulkOnlyMassStorageDevice::Reset()+0xd8>
    e7dc:	e1a00005 	mov	r0, r5
    e7e0:	e3a04000 	mov	r4, #0
    e7e4:	eb0011dd 	bl	12f60 <CUSBFunction::GetEndpoint0() const>
    e7e8:	e58d400c 	str	r4, [sp, #12]
    e7ec:	e1a01000 	mov	r1, r0
    e7f0:	e58d4008 	str	r4, [sp, #8]
    e7f4:	e58d4004 	str	r4, [sp, #4]
    e7f8:	e3a030ff 	mov	r3, #255	; 0xff
    e7fc:	e58d4000 	str	r4, [sp]
    e800:	e3a02021 	mov	r2, #33	; 0x21
    e804:	e1a00006 	mov	r0, r6
    e808:	ebfff931 	bl	ccd4 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
    e80c:	e1500004 	cmp	r0, r4
    e810:	ba000028 	blt	e8b8 <CUSBBulkOnlyMassStorageDevice::Reset()+0xf4>
    e814:	e3a07001 	mov	r7, #1
    e818:	e1a00005 	mov	r0, r5
    e81c:	eb0011cf 	bl	12f60 <CUSBFunction::GetEndpoint0() const>
    e820:	e58d400c 	str	r4, [sp, #12]
    e824:	e1a01000 	mov	r1, r0
    e828:	e58d4008 	str	r4, [sp, #8]
    e82c:	e58d4000 	str	r4, [sp]
    e830:	e1a03007 	mov	r3, r7
    e834:	e58d7004 	str	r7, [sp, #4]
    e838:	e3a02002 	mov	r2, #2
    e83c:	e1a00006 	mov	r0, r6
    e840:	ebfff923 	bl	ccd4 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
    e844:	e3500000 	cmp	r0, #0
    e848:	ba000022 	blt	e8d8 <CUSBBulkOnlyMassStorageDevice::Reset()+0x114>
    e84c:	e1a00005 	mov	r0, r5
    e850:	eb0011c2 	bl	12f60 <CUSBFunction::GetEndpoint0() const>
    e854:	e3a02002 	mov	r2, #2
    e858:	e1a01000 	mov	r1, r0
    e85c:	e58d400c 	str	r4, [sp, #12]
    e860:	e58d4008 	str	r4, [sp, #8]
    e864:	e1a03007 	mov	r3, r7
    e868:	e58d4000 	str	r4, [sp]
    e86c:	e1a00006 	mov	r0, r6
    e870:	e58d2004 	str	r2, [sp, #4]
    e874:	ebfff916 	bl	ccd4 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
    e878:	e3500000 	cmp	r0, #0
    e87c:	ba00001d 	blt	e8f8 <CUSBBulkOnlyMassStorageDevice::Reset()+0x134>
    e880:	e5950010 	ldr	r0, [r5, #16]
    e884:	ebfff8f9 	bl	cc70 <CUSBEndpoint::ResetPID()>
    e888:	e5950014 	ldr	r0, [r5, #20]
    e88c:	ebfff8f7 	bl	cc70 <CUSBEndpoint::ResetPID()>
    e890:	e1a00004 	mov	r0, r4
    e894:	e28dd014 	add	sp, sp, #20
    e898:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    e89c:	e305136c 	movw	r1, #21356	; 0x536c
    e8a0:	e3401002 	movt	r1, #2
    e8a4:	e305013c 	movw	r0, #20796	; 0x513c
    e8a8:	e3400002 	movt	r0, #2
    e8ac:	e3002265 	movw	r2, #613	; 0x265
    e8b0:	eb002ae7 	bl	19454 <assertion_failed>
    e8b4:	eaffffc8 	b	e7dc <CUSBBulkOnlyMassStorageDevice::Reset()+0x18>
    e8b8:	eb003543 	bl	1bdcc <CLogger::Get()>
    e8bc:	e3053478 	movw	r3, #21624	; 0x5478
    e8c0:	e3403002 	movt	r3, #2
    e8c4:	e3a02004 	mov	r2, #4
    e8c8:	e59f1048 	ldr	r1, [pc, #72]	; e918 <CUSBBulkOnlyMassStorageDevice::Reset()+0x154>
    e8cc:	eb003475 	bl	1baa8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    e8d0:	e3e00000 	mvn	r0, #0
    e8d4:	eaffffee 	b	e894 <CUSBBulkOnlyMassStorageDevice::Reset()+0xd0>
    e8d8:	eb00353b 	bl	1bdcc <CLogger::Get()>
    e8dc:	e305348c 	movw	r3, #21644	; 0x548c
    e8e0:	e3403002 	movt	r3, #2
    e8e4:	e3a02004 	mov	r2, #4
    e8e8:	e59f1028 	ldr	r1, [pc, #40]	; e918 <CUSBBulkOnlyMassStorageDevice::Reset()+0x154>
    e8ec:	eb00346d 	bl	1baa8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    e8f0:	e3e00000 	mvn	r0, #0
    e8f4:	eaffffe6 	b	e894 <CUSBBulkOnlyMassStorageDevice::Reset()+0xd0>
    e8f8:	eb003533 	bl	1bdcc <CLogger::Get()>
    e8fc:	e30534ac 	movw	r3, #21676	; 0x54ac
    e900:	e3403002 	movt	r3, #2
    e904:	e3a02004 	mov	r2, #4
    e908:	e59f1008 	ldr	r1, [pc, #8]	; e918 <CUSBBulkOnlyMassStorageDevice::Reset()+0x154>
    e90c:	eb003465 	bl	1baa8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    e910:	e3e00000 	mvn	r0, #0
    e914:	eaffffde 	b	e894 <CUSBBulkOnlyMassStorageDevice::Reset()+0xd0>
    e918:	00025364 	.word	0x00025364

0000e91c <CUSBBulkOnlyMassStorageDevice::Read(void*, unsigned int)>:
    e91c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    e920:	e1a07000 	mov	r7, r0
    e924:	e1a08001 	mov	r8, r1
    e928:	e1a06002 	mov	r6, r2
    e92c:	e3a04004 	mov	r4, #4
    e930:	e1a02006 	mov	r2, r6
    e934:	e1a01008 	mov	r1, r8
    e938:	e1a00007 	mov	r0, r7
    e93c:	ebffff1d 	bl	e5b8 <CUSBBulkOnlyMassStorageDevice::TryRead(void*, unsigned int)>
    e940:	e1a05000 	mov	r5, r0
    e944:	e1550006 	cmp	r5, r6
    e948:	e1a00007 	mov	r0, r7
    e94c:	1a000001 	bne	e958 <CUSBBulkOnlyMassStorageDevice::Read(void*, unsigned int)+0x3c>
    e950:	e1a00005 	mov	r0, r5
    e954:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    e958:	ebffff99 	bl	e7c4 <CUSBBulkOnlyMassStorageDevice::Reset()>
    e95c:	e3500000 	cmp	r0, #0
    e960:	1a000003 	bne	e974 <CUSBBulkOnlyMassStorageDevice::Read(void*, unsigned int)+0x58>
    e964:	e2544001 	subs	r4, r4, #1
    e968:	1afffff0 	bne	e930 <CUSBBulkOnlyMassStorageDevice::Read(void*, unsigned int)+0x14>
    e96c:	e1a00005 	mov	r0, r5
    e970:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    e974:	e1a05000 	mov	r5, r0
    e978:	eafffff4 	b	e950 <CUSBBulkOnlyMassStorageDevice::Read(void*, unsigned int)+0x34>

0000e97c <CUSBBulkOnlyMassStorageDevice::Write(void const*, unsigned int)>:
    e97c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    e980:	e1a07000 	mov	r7, r0
    e984:	e1a08001 	mov	r8, r1
    e988:	e1a06002 	mov	r6, r2
    e98c:	e3a04004 	mov	r4, #4
    e990:	e1a02006 	mov	r2, r6
    e994:	e1a01008 	mov	r1, r8
    e998:	e1a00007 	mov	r0, r7
    e99c:	ebffff47 	bl	e6c0 <CUSBBulkOnlyMassStorageDevice::TryWrite(void const*, unsigned int)>
    e9a0:	e1a05000 	mov	r5, r0
    e9a4:	e1550006 	cmp	r5, r6
    e9a8:	e1a00007 	mov	r0, r7
    e9ac:	1a000001 	bne	e9b8 <CUSBBulkOnlyMassStorageDevice::Write(void const*, unsigned int)+0x3c>
    e9b0:	e1a00005 	mov	r0, r5
    e9b4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    e9b8:	ebffff81 	bl	e7c4 <CUSBBulkOnlyMassStorageDevice::Reset()>
    e9bc:	e3500000 	cmp	r0, #0
    e9c0:	1a000003 	bne	e9d4 <CUSBBulkOnlyMassStorageDevice::Write(void const*, unsigned int)+0x58>
    e9c4:	e2544001 	subs	r4, r4, #1
    e9c8:	1afffff0 	bne	e990 <CUSBBulkOnlyMassStorageDevice::Write(void const*, unsigned int)+0x14>
    e9cc:	e1a00005 	mov	r0, r5
    e9d0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    e9d4:	e1a05000 	mov	r5, r0
    e9d8:	eafffff4 	b	e9b0 <CUSBBulkOnlyMassStorageDevice::Write(void const*, unsigned int)+0x34>

0000e9dc <CUSBBulkOnlyMassStorageDevice::Configure()>:
    e9dc:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    e9e0:	e1a05000 	mov	r5, r0
    e9e4:	e24dd064 	sub	sp, sp, #100	; 0x64
    e9e8:	eb00113c 	bl	12ee0 <CUSBFunction::GetNumEndpoints() const>
    e9ec:	e3500001 	cmp	r0, #1
    e9f0:	8a000004 	bhi	ea08 <CUSBBulkOnlyMassStorageDevice::Configure()+0x2c>
    e9f4:	ea000096 	b	ec54 <CUSBBulkOnlyMassStorageDevice::Configure()+0x278>
    e9f8:	e5d43003 	ldrb	r3, [r4, #3]
    e9fc:	e203303f 	and	r3, r3, #63	; 0x3f
    ea00:	e3530002 	cmp	r3, #2
    ea04:	0a000099 	beq	ec70 <CUSBBulkOnlyMassStorageDevice::Configure()+0x294>
    ea08:	e3a01005 	mov	r1, #5
    ea0c:	e1a00005 	mov	r0, r5
    ea10:	eb0011a5 	bl	130ac <CUSBFunction::GetDescriptor(unsigned char)>
    ea14:	e2504000 	subs	r4, r0, #0
    ea18:	1afffff6 	bne	e9f8 <CUSBBulkOnlyMassStorageDevice::Configure()+0x1c>
    ea1c:	e5953010 	ldr	r3, [r5, #16]
    ea20:	e1a00005 	mov	r0, r5
    ea24:	e3530000 	cmp	r3, #0
    ea28:	0a00008a 	beq	ec58 <CUSBBulkOnlyMassStorageDevice::Configure()+0x27c>
    ea2c:	e5953014 	ldr	r3, [r5, #20]
    ea30:	e3530000 	cmp	r3, #0
    ea34:	0a000087 	beq	ec58 <CUSBBulkOnlyMassStorageDevice::Configure()+0x27c>
    ea38:	eb00116a 	bl	12fe8 <CUSBFunction::Configure()>
    ea3c:	e2506000 	subs	r6, r0, #0
    ea40:	0a0000b0 	beq	ed08 <CUSBBulkOnlyMassStorageDevice::Configure()+0x32c>
    ea44:	e3a0c024 	mov	ip, #36	; 0x24
    ea48:	e3a06001 	mov	r6, #1
    ea4c:	e58dc000 	str	ip, [sp]
    ea50:	e28d303c 	add	r3, sp, #60	; 0x3c
    ea54:	e58d6004 	str	r6, [sp, #4]
    ea58:	e3a02006 	mov	r2, #6
    ea5c:	e28d100c 	add	r1, sp, #12
    ea60:	e1a00005 	mov	r0, r5
    ea64:	e1cdc1b0 	strh	ip, [sp, #16]
    ea68:	e3a0c012 	mov	ip, #18
    ea6c:	e58dc00c 	str	ip, [sp, #12]
    ea70:	ebfffe22 	bl	e300 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)>
    ea74:	e3500024 	cmp	r0, #36	; 0x24
    ea78:	1a00009a 	bne	ece8 <CUSBBulkOnlyMassStorageDevice::Configure()+0x30c>
    ea7c:	e5dd303c 	ldrb	r3, [sp, #60]	; 0x3c
    ea80:	e213301f 	ands	r3, r3, #31
    ea84:	01a04003 	moveq	r4, r3
    ea88:	03a06063 	moveq	r6, #99	; 0x63
    ea8c:	0a00000a 	beq	eabc <CUSBBulkOnlyMassStorageDevice::Configure()+0xe0>
    ea90:	ea0000ad 	b	ed4c <CUSBBulkOnlyMassStorageDevice::Configure()+0x370>
    ea94:	e58d7004 	str	r7, [sp, #4]
    ea98:	e3a0e003 	mov	lr, #3
    ea9c:	e58dc000 	str	ip, [sp]
    eaa0:	e1cdc2b0 	strh	ip, [sp, #32]
    eaa4:	e58de01c 	str	lr, [sp, #28]
    eaa8:	ebfffe14 	bl	e300 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)>
    eaac:	e3500000 	cmp	r0, #0
    eab0:	ba00009d 	blt	ed2c <CUSBBulkOnlyMassStorageDevice::Configure()+0x350>
    eab4:	e2566001 	subs	r6, r6, #1
    eab8:	0a0000ae 	beq	ed78 <CUSBBulkOnlyMassStorageDevice::Configure()+0x39c>
    eabc:	eb0047d5 	bl	20a18 <CTimer::Get()>
    eac0:	e3a00064 	mov	r0, #100	; 0x64
    eac4:	eb004796 	bl	20924 <CTimer::SimpleMsDelay(unsigned int)>
    eac8:	e3a03000 	mov	r3, #0
    eacc:	e3a02006 	mov	r2, #6
    ead0:	e28d1014 	add	r1, sp, #20
    ead4:	e58d4004 	str	r4, [sp, #4]
    ead8:	e1a00005 	mov	r0, r5
    eadc:	e58d4000 	str	r4, [sp]
    eae0:	e3a07001 	mov	r7, #1
    eae4:	e58d4014 	str	r4, [sp, #20]
    eae8:	e1cd41b8 	strh	r4, [sp, #24]
    eaec:	ebfffe03 	bl	e300 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)>
    eaf0:	e3a0c012 	mov	ip, #18
    eaf4:	e3500000 	cmp	r0, #0
    eaf8:	e28d3028 	add	r3, sp, #40	; 0x28
    eafc:	e3a02006 	mov	r2, #6
    eb00:	e28d101c 	add	r1, sp, #28
    eb04:	e1a00005 	mov	r0, r5
    eb08:	baffffe1 	blt	ea94 <CUSBBulkOnlyMassStorageDevice::Configure()+0xb8>
    eb0c:	e3a00008 	mov	r0, #8
    eb10:	e28d3014 	add	r3, sp, #20
    eb14:	e58d0000 	str	r0, [sp]
    eb18:	e28d101c 	add	r1, sp, #28
    eb1c:	e3a06001 	mov	r6, #1
    eb20:	e3a0200a 	mov	r2, #10
    eb24:	e58d6004 	str	r6, [sp, #4]
    eb28:	e1a00005 	mov	r0, r5
    eb2c:	e3a0c025 	mov	ip, #37	; 0x25
    eb30:	e58d4020 	str	r4, [sp, #32]
    eb34:	e1cd42b4 	strh	r4, [sp, #36]	; 0x24
    eb38:	e58dc01c 	str	ip, [sp, #28]
    eb3c:	ebfffdef 	bl	e300 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)>
    eb40:	e3500008 	cmp	r0, #8
    eb44:	1a000092 	bne	ed94 <CUSBBulkOnlyMassStorageDevice::Configure()+0x3b8>
    eb48:	e59d4018 	ldr	r4, [sp, #24]
    eb4c:	e6bf4f34 	rev	r4, r4
    eb50:	e3540c02 	cmp	r4, #512	; 0x200
    eb54:	1a000096 	bne	edb4 <CUSBBulkOnlyMassStorageDevice::Configure()+0x3d8>
    eb58:	e59d3014 	ldr	r3, [sp, #20]
    eb5c:	e6bf3f33 	rev	r3, r3
    eb60:	e585301c 	str	r3, [r5, #28]
    eb64:	e3730001 	cmn	r3, #1
    eb68:	0a00009a 	beq	edd8 <CUSBBulkOnlyMassStorageDevice::Configure()+0x3fc>
    eb6c:	e2833001 	add	r3, r3, #1
    eb70:	e585301c 	str	r3, [r5, #28]
    eb74:	eb003494 	bl	1bdcc <CLogger::Get()>
    eb78:	e595101c 	ldr	r1, [r5, #28]
    eb7c:	e30b4020 	movw	r4, #45088	; 0xb020
    eb80:	e3404002 	movt	r4, #2
    eb84:	e3a02004 	mov	r2, #4
    eb88:	e305356c 	movw	r3, #21868	; 0x556c
    eb8c:	e3403002 	movt	r3, #2
    eb90:	e1a015a1 	lsr	r1, r1, #11
    eb94:	e58d1000 	str	r1, [sp]
    eb98:	e59f1258 	ldr	r1, [pc, #600]	; edf8 <CUSBBulkOnlyMassStorageDevice::Configure()+0x41c>
    eb9c:	eb0033c1 	bl	1baa8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    eba0:	e28d0028 	add	r0, sp, #40	; 0x28
    eba4:	eb004029 	bl	1ec50 <CString::CString()>
    eba8:	e5942000 	ldr	r2, [r4]
    ebac:	e28d0028 	add	r0, sp, #40	; 0x28
    ebb0:	e3051584 	movw	r1, #21892	; 0x5584
    ebb4:	e3401002 	movt	r1, #2
    ebb8:	eb0043ed 	bl	1fb74 <CString::Format(char const*, ...)>
    ebbc:	e5953028 	ldr	r3, [r5, #40]	; 0x28
    ebc0:	e3530000 	cmp	r3, #0
    ebc4:	0a000005 	beq	ebe0 <CUSBBulkOnlyMassStorageDevice::Configure()+0x204>
    ebc8:	e305136c 	movw	r1, #21356	; 0x536c
    ebcc:	e3401002 	movt	r1, #2
    ebd0:	e305058c 	movw	r0, #21900	; 0x558c
    ebd4:	e3400002 	movt	r0, #2
    ebd8:	e3a02f5f 	mov	r2, #380	; 0x17c
    ebdc:	eb002a1c 	bl	19454 <assertion_failed>
    ebe0:	e28d0028 	add	r0, sp, #40	; 0x28
    ebe4:	eb004030 	bl	1ecac <CString::operator char const*() const>
    ebe8:	e1a07000 	mov	r7, r0
    ebec:	e3a00024 	mov	r0, #36	; 0x24
    ebf0:	eb004d22 	bl	22080 <operator new(unsigned int)>
    ebf4:	e1a02007 	mov	r2, r7
    ebf8:	e1a06000 	mov	r6, r0
    ebfc:	e1a01005 	mov	r1, r5
    ec00:	eb0025a7 	bl	182a4 <CPartitionManager::CPartitionManager(CDevice*, char const*)>
    ec04:	e5856028 	str	r6, [r5, #40]	; 0x28
    ec08:	e1a00006 	mov	r0, r6
    ec0c:	eb0025c3 	bl	18320 <CPartitionManager::Initialize()>
    ec10:	e2506000 	subs	r6, r0, #0
    ec14:	0a00000b 	beq	ec48 <CUSBBulkOnlyMassStorageDevice::Configure()+0x26c>
    ec18:	eb002ccc 	bl	19f50 <CDeviceNameService::Get()>
    ec1c:	e1a07000 	mov	r7, r0
    ec20:	e28d0028 	add	r0, sp, #40	; 0x28
    ec24:	eb004020 	bl	1ecac <CString::operator char const*() const>
    ec28:	e3a03001 	mov	r3, #1
    ec2c:	e1a01000 	mov	r1, r0
    ec30:	e1a02005 	mov	r2, r5
    ec34:	e1a00007 	mov	r0, r7
    ec38:	eb002c1a 	bl	19ca8 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)>
    ec3c:	e5943000 	ldr	r3, [r4]
    ec40:	e2833001 	add	r3, r3, #1
    ec44:	e5843000 	str	r3, [r4]
    ec48:	e28d0028 	add	r0, sp, #40	; 0x28
    ec4c:	eb003fcd 	bl	1eb88 <CString::~CString()>
    ec50:	ea000003 	b	ec64 <CUSBBulkOnlyMassStorageDevice::Configure()+0x288>
    ec54:	e1a00005 	mov	r0, r5
    ec58:	e3a06000 	mov	r6, #0
    ec5c:	e59f1194 	ldr	r1, [pc, #404]	; edf8 <CUSBBulkOnlyMassStorageDevice::Configure()+0x41c>
    ec60:	eb001124 	bl	130f8 <CUSBFunction::ConfigurationError(char const*) const>
    ec64:	e1a00006 	mov	r0, r6
    ec68:	e28dd064 	add	sp, sp, #100	; 0x64
    ec6c:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    ec70:	e1d430d2 	ldrsb	r3, [r4, #2]
    ec74:	e1a00005 	mov	r0, r5
    ec78:	e3530000 	cmp	r3, #0
    ec7c:	ba00000c 	blt	ecb4 <CUSBBulkOnlyMassStorageDevice::Configure()+0x2d8>
    ec80:	e5953014 	ldr	r3, [r5, #20]
    ec84:	e3530000 	cmp	r3, #0
    ec88:	1afffff1 	bne	ec54 <CUSBBulkOnlyMassStorageDevice::Configure()+0x278>
    ec8c:	eb0010a3 	bl	12f20 <CUSBFunction::GetDevice() const>
    ec90:	e1a07000 	mov	r7, r0
    ec94:	e3a00014 	mov	r0, #20
    ec98:	eb004cf8 	bl	22080 <operator new(unsigned int)>
    ec9c:	e1a02004 	mov	r2, r4
    eca0:	e1a01007 	mov	r1, r7
    eca4:	e1a06000 	mov	r6, r0
    eca8:	ebfff6f3 	bl	c87c <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
    ecac:	e5856014 	str	r6, [r5, #20]
    ecb0:	eaffff54 	b	ea08 <CUSBBulkOnlyMassStorageDevice::Configure()+0x2c>
    ecb4:	e5953010 	ldr	r3, [r5, #16]
    ecb8:	e3530000 	cmp	r3, #0
    ecbc:	1affffe5 	bne	ec58 <CUSBBulkOnlyMassStorageDevice::Configure()+0x27c>
    ecc0:	eb001096 	bl	12f20 <CUSBFunction::GetDevice() const>
    ecc4:	e1a07000 	mov	r7, r0
    ecc8:	e3a00014 	mov	r0, #20
    eccc:	eb004ceb 	bl	22080 <operator new(unsigned int)>
    ecd0:	e1a02004 	mov	r2, r4
    ecd4:	e1a01007 	mov	r1, r7
    ecd8:	e1a06000 	mov	r6, r0
    ecdc:	ebfff6e6 	bl	c87c <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
    ece0:	e5856010 	str	r6, [r5, #16]
    ece4:	eaffff47 	b	ea08 <CUSBBulkOnlyMassStorageDevice::Configure()+0x2c>
    ece8:	eb003437 	bl	1bdcc <CLogger::Get()>
    ecec:	e1a02006 	mov	r2, r6
    ecf0:	e30534cc 	movw	r3, #21708	; 0x54cc
    ecf4:	e3403002 	movt	r3, #2
    ecf8:	e59f10f8 	ldr	r1, [pc, #248]	; edf8 <CUSBBulkOnlyMassStorageDevice::Configure()+0x41c>
    ecfc:	e1a06004 	mov	r6, r4
    ed00:	eb003368 	bl	1baa8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    ed04:	eaffffd6 	b	ec64 <CUSBBulkOnlyMassStorageDevice::Configure()+0x288>
    ed08:	eb00342f 	bl	1bdcc <CLogger::Get()>
    ed0c:	e3a02001 	mov	r2, #1
    ed10:	e59f10e0 	ldr	r1, [pc, #224]	; edf8 <CUSBBulkOnlyMassStorageDevice::Configure()+0x41c>
    ed14:	e30532c4 	movw	r3, #21188	; 0x52c4
    ed18:	e3403002 	movt	r3, #2
    ed1c:	eb003361 	bl	1baa8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    ed20:	e1a00006 	mov	r0, r6
    ed24:	e28dd064 	add	sp, sp, #100	; 0x64
    ed28:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    ed2c:	eb003426 	bl	1bdcc <CLogger::Get()>
    ed30:	e1a02007 	mov	r2, r7
    ed34:	e3053504 	movw	r3, #21764	; 0x5504
    ed38:	e3403002 	movt	r3, #2
    ed3c:	e59f10b4 	ldr	r1, [pc, #180]	; edf8 <CUSBBulkOnlyMassStorageDevice::Configure()+0x41c>
    ed40:	e3a06000 	mov	r6, #0
    ed44:	eb003357 	bl	1baa8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    ed48:	eaffffc5 	b	ec64 <CUSBBulkOnlyMassStorageDevice::Configure()+0x288>
    ed4c:	eb00341e 	bl	1bdcc <CLogger::Get()>
    ed50:	e5dd103c 	ldrb	r1, [sp, #60]	; 0x3c
    ed54:	e1a02006 	mov	r2, r6
    ed58:	e30534e4 	movw	r3, #21732	; 0x54e4
    ed5c:	e3403002 	movt	r3, #2
    ed60:	e201101f 	and	r1, r1, #31
    ed64:	e58d1000 	str	r1, [sp]
    ed68:	e59f1088 	ldr	r1, [pc, #136]	; edf8 <CUSBBulkOnlyMassStorageDevice::Configure()+0x41c>
    ed6c:	e1a06004 	mov	r6, r4
    ed70:	eb00334c 	bl	1baa8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    ed74:	eaffffba 	b	ec64 <CUSBBulkOnlyMassStorageDevice::Configure()+0x288>
    ed78:	eb003413 	bl	1bdcc <CLogger::Get()>
    ed7c:	e1a02007 	mov	r2, r7
    ed80:	e30535a8 	movw	r3, #21928	; 0x55a8
    ed84:	e3403002 	movt	r3, #2
    ed88:	e59f1068 	ldr	r1, [pc, #104]	; edf8 <CUSBBulkOnlyMassStorageDevice::Configure()+0x41c>
    ed8c:	eb003345 	bl	1baa8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    ed90:	eaffffb3 	b	ec64 <CUSBBulkOnlyMassStorageDevice::Configure()+0x288>
    ed94:	eb00340c 	bl	1bdcc <CLogger::Get()>
    ed98:	e1a02006 	mov	r2, r6
    ed9c:	e305351c 	movw	r3, #21788	; 0x551c
    eda0:	e3403002 	movt	r3, #2
    eda4:	e59f104c 	ldr	r1, [pc, #76]	; edf8 <CUSBBulkOnlyMassStorageDevice::Configure()+0x41c>
    eda8:	e3a06000 	mov	r6, #0
    edac:	eb00333d 	bl	1baa8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    edb0:	eaffffab 	b	ec64 <CUSBBulkOnlyMassStorageDevice::Configure()+0x288>
    edb4:	eb003404 	bl	1bdcc <CLogger::Get()>
    edb8:	e1a02006 	mov	r2, r6
    edbc:	e58d4000 	str	r4, [sp]
    edc0:	e3053534 	movw	r3, #21812	; 0x5534
    edc4:	e3403002 	movt	r3, #2
    edc8:	e59f1028 	ldr	r1, [pc, #40]	; edf8 <CUSBBulkOnlyMassStorageDevice::Configure()+0x41c>
    edcc:	e3a06000 	mov	r6, #0
    edd0:	eb003334 	bl	1baa8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    edd4:	eaffffa2 	b	ec64 <CUSBBulkOnlyMassStorageDevice::Configure()+0x288>
    edd8:	eb0033fb 	bl	1bdcc <CLogger::Get()>
    eddc:	e1a02006 	mov	r2, r6
    ede0:	e3053550 	movw	r3, #21840	; 0x5550
    ede4:	e3403002 	movt	r3, #2
    ede8:	e59f1008 	ldr	r1, [pc, #8]	; edf8 <CUSBBulkOnlyMassStorageDevice::Configure()+0x41c>
    edec:	e3a06000 	mov	r6, #0
    edf0:	eb00332c 	bl	1baa8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    edf4:	eaffff9a 	b	ec64 <CUSBBulkOnlyMassStorageDevice::Configure()+0x288>
    edf8:	00025364 	.word	0x00025364

0000edfc <CDWHCIFrameSchedulerNonPeriodic::~CDWHCIFrameSchedulerNonPeriodic()>:
    edfc:	e12fff1e 	bx	lr

0000ee00 <CDWHCIFrameSchedulerNonPeriodic::StartSplit()>:
    ee00:	e3a03000 	mov	r3, #0
    ee04:	e5803008 	str	r3, [r0, #8]
    ee08:	e12fff1e 	bx	lr

0000ee0c <CDWHCIFrameSchedulerNonPeriodic::WaitForFrame()>:
    ee0c:	e12fff1e 	bx	lr

0000ee10 <CDWHCIFrameSchedulerNonPeriodic::IsOddFrame() const>:
    ee10:	e3a00000 	mov	r0, #0
    ee14:	e12fff1e 	bx	lr

0000ee18 <CDWHCIFrameSchedulerNonPeriodic::CompleteSplit()>:
    ee18:	e5903008 	ldr	r3, [r0, #8]
    ee1c:	e92d4010 	push	{r4, lr}
    ee20:	e2433001 	sub	r3, r3, #1
    ee24:	e3530004 	cmp	r3, #4
    ee28:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    ee2c:	ea000011 	b	ee78 <CDWHCIFrameSchedulerNonPeriodic::CompleteSplit()+0x60>
    ee30:	0000ee5c 	.word	0x0000ee5c
    ee34:	0000ee4c 	.word	0x0000ee4c
    ee38:	0000ee4c 	.word	0x0000ee4c
    ee3c:	0000ee44 	.word	0x0000ee44
    ee40:	0000ee44 	.word	0x0000ee44
    ee44:	e3a00000 	mov	r0, #0
    ee48:	e8bd8010 	pop	{r4, pc}
    ee4c:	e3000271 	movw	r0, #625	; 0x271
    ee50:	eb0046ba 	bl	20940 <CTimer::SimpleusDelay(unsigned int)>
    ee54:	e3a00001 	mov	r0, #1
    ee58:	e8bd8010 	pop	{r4, pc}
    ee5c:	e1a02000 	mov	r2, r0
    ee60:	e3a01002 	mov	r1, #2
    ee64:	e3a03003 	mov	r3, #3
    ee68:	e5801008 	str	r1, [r0, #8]
    ee6c:	e3a00001 	mov	r0, #1
    ee70:	e582300c 	str	r3, [r2, #12]
    ee74:	e8bd8010 	pop	{r4, pc}
    ee78:	e3a0205f 	mov	r2, #95	; 0x5f
    ee7c:	e30515e0 	movw	r1, #21984	; 0x55e0
    ee80:	e3401002 	movt	r1, #2
    ee84:	e3040ad8 	movw	r0, #19160	; 0x4ad8
    ee88:	e3400002 	movt	r0, #2
    ee8c:	eb002970 	bl	19454 <assertion_failed>
    ee90:	e3a00000 	mov	r0, #0
    ee94:	e8bd8010 	pop	{r4, pc}

0000ee98 <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)>:
    ee98:	e92d4010 	push	{r4, lr}
    ee9c:	e1a04000 	mov	r4, r0
    eea0:	e5903008 	ldr	r3, [r0, #8]
    eea4:	e24dd010 	sub	sp, sp, #16
    eea8:	e3530000 	cmp	r3, #0
    eeac:	0a000019 	beq	ef18 <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)+0x80>
    eeb0:	e2433002 	sub	r3, r3, #2
    eeb4:	e3530001 	cmp	r3, #1
    eeb8:	9a000007 	bls	eedc <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)+0x44>
    eebc:	e30515e0 	movw	r1, #21984	; 0x55e0
    eec0:	e3401002 	movt	r1, #2
    eec4:	e3040ad8 	movw	r0, #19160	; 0x4ad8
    eec8:	e3400002 	movt	r0, #2
    eecc:	e3a0209b 	mov	r2, #155	; 0x9b
    eed0:	e28dd010 	add	sp, sp, #16
    eed4:	e8bd4010 	pop	{r4, lr}
    eed8:	ea00295d 	b	19454 <assertion_failed>
    eedc:	e3110001 	tst	r1, #1
    eee0:	13a03004 	movne	r3, #4
    eee4:	15803008 	strne	r3, [r0, #8]
    eee8:	1a000008 	bne	ef10 <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)+0x78>
    eeec:	e3110060 	tst	r1, #96	; 0x60
    eef0:	0a000014 	beq	ef48 <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)+0xb0>
    eef4:	e590300c 	ldr	r3, [r0, #12]
    eef8:	e3530000 	cmp	r3, #0
    eefc:	e2433001 	sub	r3, r3, #1
    ef00:	e580300c 	str	r3, [r0, #12]
    ef04:	1a000016 	bne	ef64 <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)+0xcc>
    ef08:	e3a03005 	mov	r3, #5
    ef0c:	e5843008 	str	r3, [r4, #8]
    ef10:	e28dd010 	add	sp, sp, #16
    ef14:	e8bd8010 	pop	{r4, pc}
    ef18:	e3110020 	tst	r1, #32
    ef1c:	1a000005 	bne	ef38 <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)+0xa0>
    ef20:	e30515e0 	movw	r1, #21984	; 0x55e0
    ef24:	e3401002 	movt	r1, #2
    ef28:	e30505f8 	movw	r0, #22008	; 0x55f8
    ef2c:	e3400002 	movt	r0, #2
    ef30:	e3a0206b 	mov	r2, #107	; 0x6b
    ef34:	eb002946 	bl	19454 <assertion_failed>
    ef38:	e3a03001 	mov	r3, #1
    ef3c:	e5843008 	str	r3, [r4, #8]
    ef40:	e28dd010 	add	sp, sp, #16
    ef44:	e8bd8010 	pop	{r4, pc}
    ef48:	e3110010 	tst	r1, #16
    ef4c:	0a00000a 	beq	ef7c <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)+0xe4>
    ef50:	e590300c 	ldr	r3, [r0, #12]
    ef54:	e3530000 	cmp	r3, #0
    ef58:	e2433001 	sub	r3, r3, #1
    ef5c:	e580300c 	str	r3, [r0, #12]
    ef60:	0a000002 	beq	ef70 <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)+0xd8>
    ef64:	e3a03003 	mov	r3, #3
    ef68:	e5843008 	str	r3, [r4, #8]
    ef6c:	eaffffe7 	b	ef10 <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)+0x78>
    ef70:	e3000271 	movw	r0, #625	; 0x271
    ef74:	eb004671 	bl	20940 <CTimer::SimpleusDelay(unsigned int)>
    ef78:	eaffffe2 	b	ef08 <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)+0x70>
    ef7c:	e58d100c 	str	r1, [sp, #12]
    ef80:	eb003391 	bl	1bdcc <CLogger::Get()>
    ef84:	e59d100c 	ldr	r1, [sp, #12]
    ef88:	e3a02001 	mov	r2, #1
    ef8c:	e58d1000 	str	r1, [sp]
    ef90:	e305361c 	movw	r3, #22044	; 0x561c
    ef94:	e3403002 	movt	r3, #2
    ef98:	e3051630 	movw	r1, #22064	; 0x5630
    ef9c:	e3401002 	movt	r1, #2
    efa0:	eb0032c0 	bl	1baa8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    efa4:	e30515e0 	movw	r1, #21984	; 0x55e0
    efa8:	e3401002 	movt	r1, #2
    efac:	e3040ad8 	movw	r0, #19160	; 0x4ad8
    efb0:	e3400002 	movt	r0, #2
    efb4:	e3a02096 	mov	r2, #150	; 0x96
    efb8:	eaffffc4 	b	eed0 <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)+0x38>

0000efbc <CDWHCIFrameSchedulerNonPeriodic::CDWHCIFrameSchedulerNonPeriodic()>:
    efbc:	e92d4010 	push	{r4, lr}
    efc0:	e1a04000 	mov	r4, r0
    efc4:	e59f3040 	ldr	r3, [pc, #64]	; f00c <CDWHCIFrameSchedulerNonPeriodic::CDWHCIFrameSchedulerNonPeriodic()+0x50>
    efc8:	e5803000 	str	r3, [r0]
    efcc:	eb004691 	bl	20a18 <CTimer::Get()>
    efd0:	e3a03006 	mov	r3, #6
    efd4:	e3500000 	cmp	r0, #0
    efd8:	e5840004 	str	r0, [r4, #4]
    efdc:	e5843008 	str	r3, [r4, #8]
    efe0:	0a000001 	beq	efec <CDWHCIFrameSchedulerNonPeriodic::CDWHCIFrameSchedulerNonPeriodic()+0x30>
    efe4:	e1a00004 	mov	r0, r4
    efe8:	e8bd8010 	pop	{r4, pc}
    efec:	e3a0202e 	mov	r2, #46	; 0x2e
    eff0:	e30515e0 	movw	r1, #21984	; 0x55e0
    eff4:	e3401002 	movt	r1, #2
    eff8:	e3040270 	movw	r0, #17008	; 0x4270
    effc:	e3400002 	movt	r0, #2
    f000:	eb002913 	bl	19454 <assertion_failed>
    f004:	e1a00004 	mov	r0, r4
    f008:	e8bd8010 	pop	{r4, pc}
    f00c:	000255c4 	.word	0x000255c4

0000f010 <CDWHCIFrameSchedulerNonPeriodic::operator new(unsigned int)>:
    f010:	e92d4010 	push	{r4, lr}
    f014:	e3500010 	cmp	r0, #16
    f018:	0a000005 	beq	f034 <CDWHCIFrameSchedulerNonPeriodic::operator new(unsigned int)+0x24>
    f01c:	e30515e0 	movw	r1, #21984	; 0x55e0
    f020:	e3401002 	movt	r1, #2
    f024:	e3050638 	movw	r0, #22072	; 0x5638
    f028:	e3400002 	movt	r0, #2
    f02c:	e3a020bd 	mov	r2, #189	; 0xbd
    f030:	eb002907 	bl	19454 <assertion_failed>
    f034:	e30b4494 	movw	r4, #46228	; 0xb494
    f038:	e3404002 	movt	r4, #2
    f03c:	e5940000 	ldr	r0, [r4]
    f040:	e3500000 	cmp	r0, #0
    f044:	0a000001 	beq	f050 <CDWHCIFrameSchedulerNonPeriodic::operator new(unsigned int)+0x40>
    f048:	e8bd4010 	pop	{r4, lr}
    f04c:	ea002a09 	b	19878 <CClassAllocator::Allocate()>
    f050:	e30515e0 	movw	r1, #21984	; 0x55e0
    f054:	e3401002 	movt	r1, #2
    f058:	e30409d0 	movw	r0, #18896	; 0x49d0
    f05c:	e3400002 	movt	r0, #2
    f060:	e3a020bd 	mov	r2, #189	; 0xbd
    f064:	eb0028fa 	bl	19454 <assertion_failed>
    f068:	e5940000 	ldr	r0, [r4]
    f06c:	e8bd4010 	pop	{r4, lr}
    f070:	ea002a00 	b	19878 <CClassAllocator::Allocate()>

0000f074 <CDWHCIFrameSchedulerNonPeriodic::operator delete(void*, unsigned int)>:
    f074:	e92d4070 	push	{r4, r5, r6, lr}
    f078:	e3510010 	cmp	r1, #16
    f07c:	e1a05000 	mov	r5, r0
    f080:	0a000005 	beq	f09c <CDWHCIFrameSchedulerNonPeriodic::operator delete(void*, unsigned int)+0x28>
    f084:	e30515e0 	movw	r1, #21984	; 0x55e0
    f088:	e3401002 	movt	r1, #2
    f08c:	e3050638 	movw	r0, #22072	; 0x5638
    f090:	e3400002 	movt	r0, #2
    f094:	e3a020bd 	mov	r2, #189	; 0xbd
    f098:	eb0028ed 	bl	19454 <assertion_failed>
    f09c:	e30b4494 	movw	r4, #46228	; 0xb494
    f0a0:	e3404002 	movt	r4, #2
    f0a4:	e5940000 	ldr	r0, [r4]
    f0a8:	e3500000 	cmp	r0, #0
    f0ac:	0a000002 	beq	f0bc <CDWHCIFrameSchedulerNonPeriodic::operator delete(void*, unsigned int)+0x48>
    f0b0:	e1a01005 	mov	r1, r5
    f0b4:	e8bd4070 	pop	{r4, r5, r6, lr}
    f0b8:	ea002a25 	b	19954 <CClassAllocator::Free(void*)>
    f0bc:	e30515e0 	movw	r1, #21984	; 0x55e0
    f0c0:	e3401002 	movt	r1, #2
    f0c4:	e30409d0 	movw	r0, #18896	; 0x49d0
    f0c8:	e3400002 	movt	r0, #2
    f0cc:	e3a020bd 	mov	r2, #189	; 0xbd
    f0d0:	eb0028df 	bl	19454 <assertion_failed>
    f0d4:	e5940000 	ldr	r0, [r4]
    f0d8:	e1a01005 	mov	r1, r5
    f0dc:	e8bd4070 	pop	{r4, r5, r6, lr}
    f0e0:	ea002a1b 	b	19954 <CClassAllocator::Free(void*)>

0000f0e4 <CDWHCIFrameSchedulerNonPeriodic::~CDWHCIFrameSchedulerNonPeriodic()>:
    f0e4:	e92d4010 	push	{r4, lr}
    f0e8:	e3a01010 	mov	r1, #16
    f0ec:	e1a04000 	mov	r4, r0
    f0f0:	ebffffdf 	bl	f074 <CDWHCIFrameSchedulerNonPeriodic::operator delete(void*, unsigned int)>
    f0f4:	e1a00004 	mov	r0, r4
    f0f8:	e8bd8010 	pop	{r4, pc}

0000f0fc <CDWHCIFrameSchedulerNonPeriodic::InitAllocator(unsigned int)>:
    f0fc:	e92d4070 	push	{r4, r5, r6, lr}
    f100:	e30b4494 	movw	r4, #46228	; 0xb494
    f104:	e3404002 	movt	r4, #2
    f108:	e1a06000 	mov	r6, r0
    f10c:	e5943000 	ldr	r3, [r4]
    f110:	e3530000 	cmp	r3, #0
    f114:	0a000005 	beq	f130 <CDWHCIFrameSchedulerNonPeriodic::InitAllocator(unsigned int)+0x34>
    f118:	e30515e0 	movw	r1, #21984	; 0x55e0
    f11c:	e3401002 	movt	r1, #2
    f120:	e30409e4 	movw	r0, #18916	; 0x49e4
    f124:	e3400002 	movt	r0, #2
    f128:	e3a020bd 	mov	r2, #189	; 0xbd
    f12c:	eb0028c8 	bl	19454 <assertion_failed>
    f130:	e3a00020 	mov	r0, #32
    f134:	eb004bd1 	bl	22080 <operator new(unsigned int)>
    f138:	e1a02006 	mov	r2, r6
    f13c:	e305366c 	movw	r3, #22124	; 0x566c
    f140:	e3403002 	movt	r3, #2
    f144:	e3a01010 	mov	r1, #16
    f148:	e1a05000 	mov	r5, r0
    f14c:	eb0029a3 	bl	197e0 <CClassAllocator::CClassAllocator(unsigned int, unsigned int, char const*)>
    f150:	e5845000 	str	r5, [r4]
    f154:	e8bd8070 	pop	{r4, r5, r6, pc}

0000f158 <CDWHCIFrameSchedulerNonPeriodic::InitProtectedAllocator(unsigned int, unsigned int)>:
    f158:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    f15c:	e30b4494 	movw	r4, #46228	; 0xb494
    f160:	e3404002 	movt	r4, #2
    f164:	e24dd00c 	sub	sp, sp, #12
    f168:	e1a06000 	mov	r6, r0
    f16c:	e1a07001 	mov	r7, r1
    f170:	e5943000 	ldr	r3, [r4]
    f174:	e3530000 	cmp	r3, #0
    f178:	0a000005 	beq	f194 <CDWHCIFrameSchedulerNonPeriodic::InitProtectedAllocator(unsigned int, unsigned int)+0x3c>
    f17c:	e30515e0 	movw	r1, #21984	; 0x55e0
    f180:	e3401002 	movt	r1, #2
    f184:	e30409e4 	movw	r0, #18916	; 0x49e4
    f188:	e3400002 	movt	r0, #2
    f18c:	e3a020bd 	mov	r2, #189	; 0xbd
    f190:	eb0028af 	bl	19454 <assertion_failed>
    f194:	e3a00020 	mov	r0, #32
    f198:	eb004bb8 	bl	22080 <operator new(unsigned int)>
    f19c:	e1a03007 	mov	r3, r7
    f1a0:	e1a02006 	mov	r2, r6
    f1a4:	e305166c 	movw	r1, #22124	; 0x566c
    f1a8:	e3401002 	movt	r1, #2
    f1ac:	e58d1000 	str	r1, [sp]
    f1b0:	e3a01010 	mov	r1, #16
    f1b4:	e1a05000 	mov	r5, r0
    f1b8:	eb00299a 	bl	19828 <CClassAllocator::CClassAllocator(unsigned int, unsigned int, unsigned int, char const*)>
    f1bc:	e5845000 	str	r5, [r4]
    f1c0:	e28dd00c 	add	sp, sp, #12
    f1c4:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}

0000f1c8 <CDWHCIFrameSchedulerPeriodic::~CDWHCIFrameSchedulerPeriodic()>:
    f1c8:	e12fff1e 	bx	lr

0000f1cc <CDWHCIFrameSchedulerPeriodic::StartSplit()>:
    f1cc:	e3a02901 	mov	r2, #16384	; 0x4000
    f1d0:	e3a03000 	mov	r3, #0
    f1d4:	e1c021b0 	strh	r2, [r0, #16]
    f1d8:	e5803008 	str	r3, [r0, #8]
    f1dc:	e12fff1e 	bx	lr

0000f1e0 <CDWHCIFrameSchedulerPeriodic::IsOddFrame() const>:
    f1e0:	e1d001b0 	ldrh	r0, [r0, #16]
    f1e4:	e2000001 	and	r0, r0, #1
    f1e8:	e12fff1e 	bx	lr

0000f1ec <CDWHCIFrameSchedulerPeriodic::WaitForFrame()>:
    f1ec:	e92d4010 	push	{r4, lr}
    f1f0:	e1a04000 	mov	r4, r0
    f1f4:	e3001408 	movw	r1, #1032	; 0x408
    f1f8:	e3431f98 	movt	r1, #16280	; 0x3f98
    f1fc:	e24dd010 	sub	sp, sp, #16
    f200:	e28d0004 	add	r0, sp, #4
    f204:	ebffee17 	bl	aa68 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    f208:	e1d431b0 	ldrh	r3, [r4, #16]
    f20c:	e3530901 	cmp	r3, #16384	; 0x4000
    f210:	0a000009 	beq	f23c <CDWHCIFrameSchedulerPeriodic::WaitForFrame()+0x50>
    f214:	e28d0004 	add	r0, sp, #4
    f218:	ebffee1b 	bl	aa8c <CDWHCIRegister::Read()>
    f21c:	e1d431b0 	ldrh	r3, [r4, #16]
    f220:	e2000007 	and	r0, r0, #7
    f224:	e1500003 	cmp	r0, r3
    f228:	1afffff9 	bne	f214 <CDWHCIFrameSchedulerPeriodic::WaitForFrame()+0x28>
    f22c:	e28d0004 	add	r0, sp, #4
    f230:	ebffee14 	bl	aa88 <CDWHCIRegister::~CDWHCIRegister()>
    f234:	e28dd010 	add	sp, sp, #16
    f238:	e8bd8010 	pop	{r4, pc}
    f23c:	e28d0004 	add	r0, sp, #4
    f240:	ebffee11 	bl	aa8c <CDWHCIRegister::Read()>
    f244:	e2800001 	add	r0, r0, #1
    f248:	e2000007 	and	r0, r0, #7
    f24c:	e3500006 	cmp	r0, #6
    f250:	11c401b0 	strhne	r0, [r4, #16]
    f254:	03a03007 	moveq	r3, #7
    f258:	01c431b0 	strheq	r3, [r4, #16]
    f25c:	eaffffec 	b	f214 <CDWHCIFrameSchedulerPeriodic::WaitForFrame()+0x28>

0000f260 <CDWHCIFrameSchedulerPeriodic::CompleteSplit()>:
    f260:	e5903008 	ldr	r3, [r0, #8]
    f264:	e92d4010 	push	{r4, lr}
    f268:	e1a04000 	mov	r4, r0
    f26c:	e2433001 	sub	r3, r3, #1
    f270:	e3530004 	cmp	r3, #4
    f274:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    f278:	ea00001c 	b	f2f0 <CDWHCIFrameSchedulerPeriodic::CompleteSplit()+0x90>
    f27c:	0000f2b8 	.word	0x0000f2b8
    f280:	0000f2f0 	.word	0x0000f2f0
    f284:	0000f298 	.word	0x0000f298
    f288:	0000f290 	.word	0x0000f290
    f28c:	0000f290 	.word	0x0000f290
    f290:	e3a00000 	mov	r0, #0
    f294:	e8bd8010 	pop	{r4, pc}
    f298:	e1d031b0 	ldrh	r3, [r0, #16]
    f29c:	e3530901 	cmp	r3, #16384	; 0x4000
    f2a0:	0a00001a 	beq	f310 <CDWHCIFrameSchedulerPeriodic::CompleteSplit()+0xb0>
    f2a4:	e2833001 	add	r3, r3, #1
    f2a8:	e3a00001 	mov	r0, #1
    f2ac:	e2033007 	and	r3, r3, #7
    f2b0:	e1c431b0 	strh	r3, [r4, #16]
    f2b4:	e8bd8010 	pop	{r4, pc}
    f2b8:	e1d031b0 	ldrh	r3, [r0, #16]
    f2bc:	e3a02002 	mov	r2, #2
    f2c0:	e5802008 	str	r2, [r0, #8]
    f2c4:	e3530901 	cmp	r3, #16384	; 0x4000
    f2c8:	0a000018 	beq	f330 <CDWHCIFrameSchedulerPeriodic::CompleteSplit()+0xd0>
    f2cc:	e3530005 	cmp	r3, #5
    f2d0:	e2833002 	add	r3, r3, #2
    f2d4:	e2033007 	and	r3, r3, #7
    f2d8:	03a02002 	moveq	r2, #2
    f2dc:	13a02003 	movne	r2, #3
    f2e0:	e1c431b0 	strh	r3, [r4, #16]
    f2e4:	e3a00001 	mov	r0, #1
    f2e8:	e584200c 	str	r2, [r4, #12]
    f2ec:	e8bd8010 	pop	{r4, pc}
    f2f0:	e3a0206e 	mov	r2, #110	; 0x6e
    f2f4:	e30516b0 	movw	r1, #22192	; 0x56b0
    f2f8:	e3401002 	movt	r1, #2
    f2fc:	e3040ad8 	movw	r0, #19160	; 0x4ad8
    f300:	e3400002 	movt	r0, #2
    f304:	eb002852 	bl	19454 <assertion_failed>
    f308:	e3a00000 	mov	r0, #0
    f30c:	e8bd8010 	pop	{r4, pc}
    f310:	e30516b0 	movw	r1, #22192	; 0x56b0
    f314:	e3401002 	movt	r1, #2
    f318:	e30506c8 	movw	r0, #22216	; 0x56c8
    f31c:	e3400002 	movt	r0, #2
    f320:	e3a02062 	mov	r2, #98	; 0x62
    f324:	eb00284a 	bl	19454 <assertion_failed>
    f328:	e1d431b0 	ldrh	r3, [r4, #16]
    f32c:	eaffffdc 	b	f2a4 <CDWHCIFrameSchedulerPeriodic::CompleteSplit()+0x44>
    f330:	e30516b0 	movw	r1, #22192	; 0x56b0
    f334:	e3401002 	movt	r1, #2
    f338:	e30506c8 	movw	r0, #22216	; 0x56c8
    f33c:	e3400002 	movt	r0, #2
    f340:	e3a02054 	mov	r2, #84	; 0x54
    f344:	eb002842 	bl	19454 <assertion_failed>
    f348:	e1d431b0 	ldrh	r3, [r4, #16]
    f34c:	eaffffde 	b	f2cc <CDWHCIFrameSchedulerPeriodic::CompleteSplit()+0x6c>

0000f350 <CDWHCIFrameSchedulerPeriodic::TransactionComplete(unsigned int)>:
    f350:	e92d4010 	push	{r4, lr}
    f354:	e1a04000 	mov	r4, r0
    f358:	e5903008 	ldr	r3, [r0, #8]
    f35c:	e24dd010 	sub	sp, sp, #16
    f360:	e3530000 	cmp	r3, #0
    f364:	0a000019 	beq	f3d0 <CDWHCIFrameSchedulerPeriodic::TransactionComplete(unsigned int)+0x80>
    f368:	e2433002 	sub	r3, r3, #2
    f36c:	e3530001 	cmp	r3, #1
    f370:	9a000007 	bls	f394 <CDWHCIFrameSchedulerPeriodic::TransactionComplete(unsigned int)+0x44>
    f374:	e30516b0 	movw	r1, #22192	; 0x56b0
    f378:	e3401002 	movt	r1, #2
    f37c:	e3040ad8 	movw	r0, #19160	; 0x4ad8
    f380:	e3400002 	movt	r0, #2
    f384:	e3a020a6 	mov	r2, #166	; 0xa6
    f388:	e28dd010 	add	sp, sp, #16
    f38c:	e8bd4010 	pop	{r4, lr}
    f390:	ea00282f 	b	19454 <assertion_failed>
    f394:	e3110001 	tst	r1, #1
    f398:	13a03004 	movne	r3, #4
    f39c:	15803008 	strne	r3, [r0, #8]
    f3a0:	1a000008 	bne	f3c8 <CDWHCIFrameSchedulerPeriodic::TransactionComplete(unsigned int)+0x78>
    f3a4:	e3110060 	tst	r1, #96	; 0x60
    f3a8:	0a000014 	beq	f400 <CDWHCIFrameSchedulerPeriodic::TransactionComplete(unsigned int)+0xb0>
    f3ac:	e590300c 	ldr	r3, [r0, #12]
    f3b0:	e3530000 	cmp	r3, #0
    f3b4:	e2433001 	sub	r3, r3, #1
    f3b8:	e580300c 	str	r3, [r0, #12]
    f3bc:	13a03003 	movne	r3, #3
    f3c0:	15803008 	strne	r3, [r0, #8]
    f3c4:	0a000024 	beq	f45c <CDWHCIFrameSchedulerPeriodic::TransactionComplete(unsigned int)+0x10c>
    f3c8:	e28dd010 	add	sp, sp, #16
    f3cc:	e8bd8010 	pop	{r4, pc}
    f3d0:	e3110020 	tst	r1, #32
    f3d4:	1a000005 	bne	f3f0 <CDWHCIFrameSchedulerPeriodic::TransactionComplete(unsigned int)+0xa0>
    f3d8:	e30516b0 	movw	r1, #22192	; 0x56b0
    f3dc:	e3401002 	movt	r1, #2
    f3e0:	e30505f8 	movw	r0, #22008	; 0x55f8
    f3e4:	e3400002 	movt	r0, #2
    f3e8:	e3a0207a 	mov	r2, #122	; 0x7a
    f3ec:	eb002818 	bl	19454 <assertion_failed>
    f3f0:	e3a03001 	mov	r3, #1
    f3f4:	e5843008 	str	r3, [r4, #8]
    f3f8:	e28dd010 	add	sp, sp, #16
    f3fc:	e8bd8010 	pop	{r4, pc}
    f400:	e3110010 	tst	r1, #16
    f404:	0a000004 	beq	f41c <CDWHCIFrameSchedulerPeriodic::TransactionComplete(unsigned int)+0xcc>
    f408:	e3000271 	movw	r0, #625	; 0x271
    f40c:	eb00454b 	bl	20940 <CTimer::SimpleusDelay(unsigned int)>
    f410:	e3a03005 	mov	r3, #5
    f414:	e5843008 	str	r3, [r4, #8]
    f418:	eaffffea 	b	f3c8 <CDWHCIFrameSchedulerPeriodic::TransactionComplete(unsigned int)+0x78>
    f41c:	e58d100c 	str	r1, [sp, #12]
    f420:	eb003269 	bl	1bdcc <CLogger::Get()>
    f424:	e59d100c 	ldr	r1, [sp, #12]
    f428:	e3a02001 	mov	r2, #1
    f42c:	e58d1000 	str	r1, [sp]
    f430:	e305361c 	movw	r3, #22044	; 0x561c
    f434:	e3403002 	movt	r3, #2
    f438:	e3051630 	movw	r1, #22064	; 0x5630
    f43c:	e3401002 	movt	r1, #2
    f440:	eb003198 	bl	1baa8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    f444:	e30516b0 	movw	r1, #22192	; 0x56b0
    f448:	e3401002 	movt	r1, #2
    f44c:	e3040ad8 	movw	r0, #19160	; 0x4ad8
    f450:	e3400002 	movt	r0, #2
    f454:	e3a020a1 	mov	r2, #161	; 0xa1
    f458:	eaffffca 	b	f388 <CDWHCIFrameSchedulerPeriodic::TransactionComplete(unsigned int)+0x38>
    f45c:	e3a03005 	mov	r3, #5
    f460:	e3a00ffa 	mov	r0, #1000	; 0x3e8
    f464:	e5843008 	str	r3, [r4, #8]
    f468:	e28dd010 	add	sp, sp, #16
    f46c:	e8bd4010 	pop	{r4, lr}
    f470:	ea004532 	b	20940 <CTimer::SimpleusDelay(unsigned int)>

0000f474 <CDWHCIFrameSchedulerPeriodic::CDWHCIFrameSchedulerPeriodic()>:
    f474:	e92d4010 	push	{r4, lr}
    f478:	e1a04000 	mov	r4, r0
    f47c:	e59f3048 	ldr	r3, [pc, #72]	; f4cc <CDWHCIFrameSchedulerPeriodic::CDWHCIFrameSchedulerPeriodic()+0x58>
    f480:	e5803000 	str	r3, [r0]
    f484:	eb004563 	bl	20a18 <CTimer::Get()>
    f488:	e3a02006 	mov	r2, #6
    f48c:	e3a03901 	mov	r3, #16384	; 0x4000
    f490:	e3500000 	cmp	r0, #0
    f494:	e5840004 	str	r0, [r4, #4]
    f498:	e5842008 	str	r2, [r4, #8]
    f49c:	e1c431b0 	strh	r3, [r4, #16]
    f4a0:	0a000001 	beq	f4ac <CDWHCIFrameSchedulerPeriodic::CDWHCIFrameSchedulerPeriodic()+0x38>
    f4a4:	e1a00004 	mov	r0, r4
    f4a8:	e8bd8010 	pop	{r4, pc}
    f4ac:	e3a02034 	mov	r2, #52	; 0x34
    f4b0:	e30516b0 	movw	r1, #22192	; 0x56b0
    f4b4:	e3401002 	movt	r1, #2
    f4b8:	e3040270 	movw	r0, #17008	; 0x4270
    f4bc:	e3400002 	movt	r0, #2
    f4c0:	eb0027e3 	bl	19454 <assertion_failed>
    f4c4:	e1a00004 	mov	r0, r4
    f4c8:	e8bd8010 	pop	{r4, pc}
    f4cc:	00025694 	.word	0x00025694

0000f4d0 <CDWHCIFrameSchedulerPeriodic::operator new(unsigned int)>:
    f4d0:	e92d4010 	push	{r4, lr}
    f4d4:	e3500014 	cmp	r0, #20
    f4d8:	0a000005 	beq	f4f4 <CDWHCIFrameSchedulerPeriodic::operator new(unsigned int)+0x24>
    f4dc:	e30516b0 	movw	r1, #22192	; 0x56b0
    f4e0:	e3401002 	movt	r1, #2
    f4e4:	e30506e8 	movw	r0, #22248	; 0x56e8
    f4e8:	e3400002 	movt	r0, #2
    f4ec:	e3a020e2 	mov	r2, #226	; 0xe2
    f4f0:	eb0027d7 	bl	19454 <assertion_failed>
    f4f4:	e30b4498 	movw	r4, #46232	; 0xb498
    f4f8:	e3404002 	movt	r4, #2
    f4fc:	e5940000 	ldr	r0, [r4]
    f500:	e3500000 	cmp	r0, #0
    f504:	0a000001 	beq	f510 <CDWHCIFrameSchedulerPeriodic::operator new(unsigned int)+0x40>
    f508:	e8bd4010 	pop	{r4, lr}
    f50c:	ea0028d9 	b	19878 <CClassAllocator::Allocate()>
    f510:	e30516b0 	movw	r1, #22192	; 0x56b0
    f514:	e3401002 	movt	r1, #2
    f518:	e30409d0 	movw	r0, #18896	; 0x49d0
    f51c:	e3400002 	movt	r0, #2
    f520:	e3a020e2 	mov	r2, #226	; 0xe2
    f524:	eb0027ca 	bl	19454 <assertion_failed>
    f528:	e5940000 	ldr	r0, [r4]
    f52c:	e8bd4010 	pop	{r4, lr}
    f530:	ea0028d0 	b	19878 <CClassAllocator::Allocate()>

0000f534 <CDWHCIFrameSchedulerPeriodic::operator delete(void*, unsigned int)>:
    f534:	e92d4070 	push	{r4, r5, r6, lr}
    f538:	e3510014 	cmp	r1, #20
    f53c:	e1a05000 	mov	r5, r0
    f540:	0a000005 	beq	f55c <CDWHCIFrameSchedulerPeriodic::operator delete(void*, unsigned int)+0x28>
    f544:	e30516b0 	movw	r1, #22192	; 0x56b0
    f548:	e3401002 	movt	r1, #2
    f54c:	e30506e8 	movw	r0, #22248	; 0x56e8
    f550:	e3400002 	movt	r0, #2
    f554:	e3a020e2 	mov	r2, #226	; 0xe2
    f558:	eb0027bd 	bl	19454 <assertion_failed>
    f55c:	e30b4498 	movw	r4, #46232	; 0xb498
    f560:	e3404002 	movt	r4, #2
    f564:	e5940000 	ldr	r0, [r4]
    f568:	e3500000 	cmp	r0, #0
    f56c:	0a000002 	beq	f57c <CDWHCIFrameSchedulerPeriodic::operator delete(void*, unsigned int)+0x48>
    f570:	e1a01005 	mov	r1, r5
    f574:	e8bd4070 	pop	{r4, r5, r6, lr}
    f578:	ea0028f5 	b	19954 <CClassAllocator::Free(void*)>
    f57c:	e30516b0 	movw	r1, #22192	; 0x56b0
    f580:	e3401002 	movt	r1, #2
    f584:	e30409d0 	movw	r0, #18896	; 0x49d0
    f588:	e3400002 	movt	r0, #2
    f58c:	e3a020e2 	mov	r2, #226	; 0xe2
    f590:	eb0027af 	bl	19454 <assertion_failed>
    f594:	e5940000 	ldr	r0, [r4]
    f598:	e1a01005 	mov	r1, r5
    f59c:	e8bd4070 	pop	{r4, r5, r6, lr}
    f5a0:	ea0028eb 	b	19954 <CClassAllocator::Free(void*)>

0000f5a4 <CDWHCIFrameSchedulerPeriodic::~CDWHCIFrameSchedulerPeriodic()>:
    f5a4:	e92d4010 	push	{r4, lr}
    f5a8:	e3a01014 	mov	r1, #20
    f5ac:	e1a04000 	mov	r4, r0
    f5b0:	ebffffdf 	bl	f534 <CDWHCIFrameSchedulerPeriodic::operator delete(void*, unsigned int)>
    f5b4:	e1a00004 	mov	r0, r4
    f5b8:	e8bd8010 	pop	{r4, pc}

0000f5bc <CDWHCIFrameSchedulerPeriodic::InitAllocator(unsigned int)>:
    f5bc:	e92d4070 	push	{r4, r5, r6, lr}
    f5c0:	e30b4498 	movw	r4, #46232	; 0xb498
    f5c4:	e3404002 	movt	r4, #2
    f5c8:	e1a06000 	mov	r6, r0
    f5cc:	e5943000 	ldr	r3, [r4]
    f5d0:	e3530000 	cmp	r3, #0
    f5d4:	0a000005 	beq	f5f0 <CDWHCIFrameSchedulerPeriodic::InitAllocator(unsigned int)+0x34>
    f5d8:	e30516b0 	movw	r1, #22192	; 0x56b0
    f5dc:	e3401002 	movt	r1, #2
    f5e0:	e30409e4 	movw	r0, #18916	; 0x49e4
    f5e4:	e3400002 	movt	r0, #2
    f5e8:	e3a020e2 	mov	r2, #226	; 0xe2
    f5ec:	eb002798 	bl	19454 <assertion_failed>
    f5f0:	e3a00020 	mov	r0, #32
    f5f4:	eb004aa1 	bl	22080 <operator new(unsigned int)>
    f5f8:	e1a02006 	mov	r2, r6
    f5fc:	e3053718 	movw	r3, #22296	; 0x5718
    f600:	e3403002 	movt	r3, #2
    f604:	e3a01014 	mov	r1, #20
    f608:	e1a05000 	mov	r5, r0
    f60c:	eb002873 	bl	197e0 <CClassAllocator::CClassAllocator(unsigned int, unsigned int, char const*)>
    f610:	e5845000 	str	r5, [r4]
    f614:	e8bd8070 	pop	{r4, r5, r6, pc}

0000f618 <CDWHCIFrameSchedulerPeriodic::InitProtectedAllocator(unsigned int, unsigned int)>:
    f618:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    f61c:	e30b4498 	movw	r4, #46232	; 0xb498
    f620:	e3404002 	movt	r4, #2
    f624:	e24dd00c 	sub	sp, sp, #12
    f628:	e1a06000 	mov	r6, r0
    f62c:	e1a07001 	mov	r7, r1
    f630:	e5943000 	ldr	r3, [r4]
    f634:	e3530000 	cmp	r3, #0
    f638:	0a000005 	beq	f654 <CDWHCIFrameSchedulerPeriodic::InitProtectedAllocator(unsigned int, unsigned int)+0x3c>
    f63c:	e30516b0 	movw	r1, #22192	; 0x56b0
    f640:	e3401002 	movt	r1, #2
    f644:	e30409e4 	movw	r0, #18916	; 0x49e4
    f648:	e3400002 	movt	r0, #2
    f64c:	e3a020e2 	mov	r2, #226	; 0xe2
    f650:	eb00277f 	bl	19454 <assertion_failed>
    f654:	e3a00020 	mov	r0, #32
    f658:	eb004a88 	bl	22080 <operator new(unsigned int)>
    f65c:	e1a03007 	mov	r3, r7
    f660:	e1a02006 	mov	r2, r6
    f664:	e3051718 	movw	r1, #22296	; 0x5718
    f668:	e3401002 	movt	r1, #2
    f66c:	e58d1000 	str	r1, [sp]
    f670:	e3a01014 	mov	r1, #20
    f674:	e1a05000 	mov	r5, r0
    f678:	eb00286a 	bl	19828 <CClassAllocator::CClassAllocator(unsigned int, unsigned int, unsigned int, char const*)>
    f67c:	e5845000 	str	r5, [r4]
    f680:	e28dd00c 	add	sp, sp, #12
    f684:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}

0000f688 <CUSBKeyboardDevice::~CUSBKeyboardDevice()>:
    f688:	e92d4070 	push	{r4, r5, r6, lr}
    f68c:	e1a04000 	mov	r4, r0
    f690:	e3055738 	movw	r5, #22328	; 0x5738
    f694:	e3405002 	movt	r5, #2
    f698:	e2853008 	add	r3, r5, #8
    f69c:	e3a06000 	mov	r6, #0
    f6a0:	e5803000 	str	r3, [r0]
    f6a4:	e580643c 	str	r6, [r0, #1084]	; 0x43c
    f6a8:	eb002a28 	bl	19f50 <CDeviceNameService::Get()>
    f6ac:	e1a03006 	mov	r3, r6
    f6b0:	e285102c 	add	r1, r5, #44	; 0x2c
    f6b4:	e594244c 	ldr	r2, [r4, #1100]	; 0x44c
    f6b8:	eb002a4c 	bl	19ff0 <CDeviceNameService::RemoveDevice(char const*, unsigned int, bool)>
    f6bc:	e2840024 	add	r0, r4, #36	; 0x24
    f6c0:	eb001f92 	bl	17510 <CKeyboardBehaviour::~CKeyboardBehaviour()>
    f6c4:	e1a00004 	mov	r0, r4
    f6c8:	eb0001d5 	bl	fe24 <CUSBHIDDevice::~CUSBHIDDevice()>
    f6cc:	e1a00004 	mov	r0, r4
    f6d0:	e8bd8070 	pop	{r4, r5, r6, pc}

0000f6d4 <CUSBKeyboardDevice::~CUSBKeyboardDevice()>:
    f6d4:	e92d4010 	push	{r4, lr}
    f6d8:	e1a04000 	mov	r4, r0
    f6dc:	ebffffe9 	bl	f688 <CUSBKeyboardDevice::~CUSBKeyboardDevice()>
    f6e0:	e1a00004 	mov	r0, r4
    f6e4:	e3a01e45 	mov	r1, #1104	; 0x450
    f6e8:	eb004a68 	bl	22090 <operator delete(void*, unsigned int)>
    f6ec:	e1a00004 	mov	r0, r4
    f6f0:	e8bd8010 	pop	{r4, pc}

0000f6f4 <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)>:
    f6f4:	e2522008 	subs	r2, r2, #8
    f6f8:	13a02001 	movne	r2, #1
    f6fc:	e3510000 	cmp	r1, #0
    f700:	03a02001 	moveq	r2, #1
    f704:	e3520000 	cmp	r2, #0
    f708:	112fff1e 	bxne	lr
    f70c:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f710:	e1a06001 	mov	r6, r1
    f714:	e590343c 	ldr	r3, [r0, #1084]	; 0x43c
    f718:	e24dd004 	sub	sp, sp, #4
    f71c:	e4d62002 	ldrb	r2, [r6], #2
    f720:	e3530000 	cmp	r3, #0
    f724:	0a000004 	beq	f73c <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0x48>
    f728:	e1a01006 	mov	r1, r6
    f72c:	e1a00002 	mov	r0, r2
    f730:	e28dd004 	add	sp, sp, #4
    f734:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f738:	e12fff13 	bx	r3
    f73c:	e1a07001 	mov	r7, r1
    f740:	e1a05000 	mov	r5, r0
    f744:	e1a04003 	mov	r4, r3
    f748:	e3a09001 	mov	r9, #1
    f74c:	e2808024 	add	r8, r0, #36	; 0x24
    f750:	ea000005 	b	f76c <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0x78>
    f754:	e3530000 	cmp	r3, #0
    f758:	1a00000f 	bne	f79c <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0xa8>
    f75c:	e2844001 	add	r4, r4, #1
    f760:	e3540008 	cmp	r4, #8
    f764:	0a000011 	beq	f7b0 <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0xbc>
    f768:	e5d72000 	ldrb	r2, [r7]
    f76c:	e5d53440 	ldrb	r3, [r5, #1088]	; 0x440
    f770:	e1a01419 	lsl	r1, r9, r4
    f774:	e1120001 	tst	r2, r1
    f778:	e0033001 	and	r3, r3, r1
    f77c:	0afffff4 	beq	f754 <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0x60>
    f780:	e3530000 	cmp	r3, #0
    f784:	1afffff4 	bne	f75c <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0x68>
    f788:	e2441080 	sub	r1, r4, #128	; 0x80
    f78c:	e1a00008 	mov	r0, r8
    f790:	e6ef1071 	uxtb	r1, r1
    f794:	eb001fcb 	bl	176c8 <CKeyboardBehaviour::KeyPressed(unsigned char)>
    f798:	eaffffef 	b	f75c <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0x68>
    f79c:	e2441080 	sub	r1, r4, #128	; 0x80
    f7a0:	e1a00008 	mov	r0, r8
    f7a4:	e6ef1071 	uxtb	r1, r1
    f7a8:	eb001fd7 	bl	1770c <CKeyboardBehaviour::KeyReleased(unsigned char)>
    f7ac:	eaffffea 	b	f75c <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0x68>
    f7b0:	e2859d11 	add	r9, r5, #1088	; 0x440
    f7b4:	e287b008 	add	fp, r7, #8
    f7b8:	e1a08009 	mov	r8, r9
    f7bc:	e2899002 	add	r9, r9, #2
    f7c0:	e2888008 	add	r8, r8, #8
    f7c4:	e1a0a009 	mov	sl, r9
    f7c8:	e2854024 	add	r4, r5, #36	; 0x24
    f7cc:	ea000001 	b	f7d8 <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0xe4>
    f7d0:	e158000a 	cmp	r8, sl
    f7d4:	0a00000b 	beq	f808 <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0x114>
    f7d8:	e4da1001 	ldrb	r1, [sl], #1
    f7dc:	e3510000 	cmp	r1, #0
    f7e0:	11a03006 	movne	r3, r6
    f7e4:	0afffff9 	beq	f7d0 <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0xdc>
    f7e8:	e4d32001 	ldrb	r2, [r3], #1
    f7ec:	e1520001 	cmp	r2, r1
    f7f0:	0afffff6 	beq	f7d0 <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0xdc>
    f7f4:	e15b0003 	cmp	fp, r3
    f7f8:	1afffffa 	bne	f7e8 <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0xf4>
    f7fc:	e1a00004 	mov	r0, r4
    f800:	eb001fc1 	bl	1770c <CKeyboardBehaviour::KeyReleased(unsigned char)>
    f804:	eafffff1 	b	f7d0 <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0xdc>
    f808:	e2874001 	add	r4, r7, #1
    f80c:	e287a007 	add	sl, r7, #7
    f810:	e2856024 	add	r6, r5, #36	; 0x24
    f814:	ea000001 	b	f820 <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0x12c>
    f818:	e15a0004 	cmp	sl, r4
    f81c:	0a00000b 	beq	f850 <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0x15c>
    f820:	e5f41001 	ldrb	r1, [r4, #1]!
    f824:	e3510000 	cmp	r1, #0
    f828:	11a03009 	movne	r3, r9
    f82c:	0afffff9 	beq	f818 <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0x124>
    f830:	e4d32001 	ldrb	r2, [r3], #1
    f834:	e1520001 	cmp	r2, r1
    f838:	0afffff6 	beq	f818 <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0x124>
    f83c:	e1530008 	cmp	r3, r8
    f840:	1afffffa 	bne	f830 <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0x13c>
    f844:	e1a00006 	mov	r0, r6
    f848:	eb001f9e 	bl	176c8 <CKeyboardBehaviour::KeyPressed(unsigned char)>
    f84c:	eafffff1 	b	f818 <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0x124>
    f850:	e5973000 	ldr	r3, [r7]
    f854:	e5972004 	ldr	r2, [r7, #4]
    f858:	e5852444 	str	r2, [r5, #1092]	; 0x444
    f85c:	e5853440 	str	r3, [r5, #1088]	; 0x440
    f860:	e28dd004 	add	sp, sp, #4
    f864:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000f868 <CUSBKeyboardDevice::CUSBKeyboardDevice(CUSBFunction*)>:
    f868:	e92d4010 	push	{r4, lr}
    f86c:	e3a02008 	mov	r2, #8
    f870:	e1a04000 	mov	r4, r0
    f874:	eb000156 	bl	fdd4 <CUSBHIDDevice::CUSBHIDDevice(CUSBFunction*, unsigned int)>
    f878:	e1a00004 	mov	r0, r4
    f87c:	e59f3028 	ldr	r3, [pc, #40]	; f8ac <CUSBKeyboardDevice::CUSBKeyboardDevice(CUSBFunction*)+0x44>
    f880:	e4803024 	str	r3, [r0], #36	; 0x24
    f884:	eb001f15 	bl	174e0 <CKeyboardBehaviour::CKeyboardBehaviour()>
    f888:	f2c00010 	vmov.i32	d16, #0	; 0x00000000
    f88c:	e2842d11 	add	r2, r4, #1088	; 0x440
    f890:	e3a03000 	mov	r3, #0
    f894:	e1a00004 	mov	r0, r4
    f898:	e584343c 	str	r3, [r4, #1084]	; 0x43c
    f89c:	e5c43448 	strb	r3, [r4, #1096]	; 0x448
    f8a0:	e584344c 	str	r3, [r4, #1100]	; 0x44c
    f8a4:	f442070f 	vst1.8	{d16}, [r2]
    f8a8:	e8bd8010 	pop	{r4, pc}
    f8ac:	00025740 	.word	0x00025740

0000f8b0 <CUSBKeyboardDevice::RegisterKeyPressedHandler(void (*)(char const*))>:
    f8b0:	e2800024 	add	r0, r0, #36	; 0x24
    f8b4:	ea001f1f 	b	17538 <CKeyboardBehaviour::RegisterKeyPressedHandler(void (*)(char const*))>

0000f8b8 <CUSBKeyboardDevice::RegisterSelectConsoleHandler(void (*)(unsigned int))>:
    f8b8:	e2800024 	add	r0, r0, #36	; 0x24
    f8bc:	ea001f2b 	b	17570 <CKeyboardBehaviour::RegisterSelectConsoleHandler(void (*)(unsigned int))>

0000f8c0 <CUSBKeyboardDevice::RegisterShutdownHandler(void (*)())>:
    f8c0:	e2800024 	add	r0, r0, #36	; 0x24
    f8c4:	ea001f37 	b	175a8 <CKeyboardBehaviour::RegisterShutdownHandler(void (*)())>

0000f8c8 <CUSBKeyboardDevice::GetLEDStatus() const>:
    f8c8:	e92d4010 	push	{r4, lr}
    f8cc:	e2800024 	add	r0, r0, #36	; 0x24
    f8d0:	eb001f42 	bl	175e0 <CKeyboardBehaviour::GetLEDStatus() const>
    f8d4:	e2003001 	and	r3, r0, #1
    f8d8:	e3100002 	tst	r0, #2
    f8dc:	13833002 	orrne	r3, r3, #2
    f8e0:	e3100004 	tst	r0, #4
    f8e4:	13833004 	orrne	r3, r3, #4
    f8e8:	e1a00003 	mov	r0, r3
    f8ec:	e8bd8010 	pop	{r4, pc}

0000f8f0 <CUSBKeyboardDevice::RegisterKeyStatusHandlerRaw(void (*)(unsigned char, unsigned char const*))>:
    f8f0:	e92d4070 	push	{r4, r5, r6, lr}
    f8f4:	e1a04000 	mov	r4, r0
    f8f8:	e2515000 	subs	r5, r1, #0
    f8fc:	0a000001 	beq	f908 <CUSBKeyboardDevice::RegisterKeyStatusHandlerRaw(void (*)(unsigned char, unsigned char const*))+0x18>
    f900:	e584543c 	str	r5, [r4, #1084]	; 0x43c
    f904:	e8bd8070 	pop	{r4, r5, r6, pc}
    f908:	e3051774 	movw	r1, #22388	; 0x5774
    f90c:	e3401002 	movt	r1, #2
    f910:	e3050784 	movw	r0, #22404	; 0x5784
    f914:	e3400002 	movt	r0, #2
    f918:	e3a0207d 	mov	r2, #125	; 0x7d
    f91c:	eb0026cc 	bl	19454 <assertion_failed>
    f920:	e584543c 	str	r5, [r4, #1084]	; 0x43c
    f924:	e8bd8070 	pop	{r4, r5, r6, pc}

0000f928 <CUSBKeyboardDevice::SetLEDs(unsigned char)>:
    f928:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    f92c:	e1a05000 	mov	r5, r0
    f930:	e24dd01c 	sub	sp, sp, #28
    f934:	e28d4018 	add	r4, sp, #24
    f938:	e5641004 	strb	r1, [r4, #-4]!
    f93c:	eb000d98 	bl	12fa4 <CUSBFunction::GetHost() const>
    f940:	e1a06000 	mov	r6, r0
    f944:	e1a00005 	mov	r0, r5
    f948:	eb000d84 	bl	12f60 <CUSBFunction::GetEndpoint0() const>
    f94c:	e1a07000 	mov	r7, r0
    f950:	e1a00005 	mov	r0, r5
    f954:	eb000e41 	bl	13260 <CUSBFunction::GetInterfaceNumber() const>
    f958:	e58d4008 	str	r4, [sp, #8]
    f95c:	e6ff0070 	uxth	r0, r0
    f960:	e1a01007 	mov	r1, r7
    f964:	e58d0004 	str	r0, [sp, #4]
    f968:	e3a03001 	mov	r3, #1
    f96c:	e1a00006 	mov	r0, r6
    f970:	e58d300c 	str	r3, [sp, #12]
    f974:	e3a02c02 	mov	r2, #512	; 0x200
    f978:	e3a03009 	mov	r3, #9
    f97c:	e58d2000 	str	r2, [sp]
    f980:	e3a02021 	mov	r2, #33	; 0x21
    f984:	ebfff4d2 	bl	ccd4 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
    f988:	e1e00000 	mvn	r0, r0
    f98c:	e1a00fa0 	lsr	r0, r0, #31
    f990:	e28dd01c 	add	sp, sp, #28
    f994:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}

0000f998 <CUSBKeyboardDevice::Configure()>:
    f998:	e92d4030 	push	{r4, r5, lr}
    f99c:	e3a01000 	mov	r1, #0
    f9a0:	e1a04000 	mov	r4, r0
    f9a4:	e24dd00c 	sub	sp, sp, #12
    f9a8:	eb000148 	bl	fed0 <CUSBHIDDevice::Configure(unsigned int)>
    f9ac:	e2505000 	subs	r5, r0, #0
    f9b0:	0a000013 	beq	fa04 <CUSBKeyboardDevice::Configure()+0x6c>
    f9b4:	e5d41448 	ldrb	r1, [r4, #1096]	; 0x448
    f9b8:	e1a00004 	mov	r0, r4
    f9bc:	ebffffd9 	bl	f928 <CUSBKeyboardDevice::SetLEDs(unsigned char)>
    f9c0:	e30b3024 	movw	r3, #45092	; 0xb024
    f9c4:	e3403002 	movt	r3, #2
    f9c8:	e5932000 	ldr	r2, [r3]
    f9cc:	e584244c 	str	r2, [r4, #1100]	; 0x44c
    f9d0:	e2822001 	add	r2, r2, #1
    f9d4:	e5832000 	str	r2, [r3]
    f9d8:	eb00295c 	bl	19f50 <CDeviceNameService::Get()>
    f9dc:	e594244c 	ldr	r2, [r4, #1100]	; 0x44c
    f9e0:	e3a01000 	mov	r1, #0
    f9e4:	e1a03004 	mov	r3, r4
    f9e8:	e58d1000 	str	r1, [sp]
    f9ec:	e59f1034 	ldr	r1, [pc, #52]	; fa28 <CUSBKeyboardDevice::Configure()+0x90>
    f9f0:	eb002964 	bl	19f88 <CDeviceNameService::AddDevice(char const*, unsigned int, CDevice*, bool)>
    f9f4:	e1a00004 	mov	r0, r4
    f9f8:	e28dd00c 	add	sp, sp, #12
    f9fc:	e8bd4030 	pop	{r4, r5, lr}
    fa00:	ea000265 	b	1039c <CUSBHIDDevice::StartRequest()>
    fa04:	eb0030f0 	bl	1bdcc <CLogger::Get()>
    fa08:	e3a02001 	mov	r2, #1
    fa0c:	e59f1018 	ldr	r1, [pc, #24]	; fa2c <CUSBKeyboardDevice::Configure()+0x94>
    fa10:	e30537a0 	movw	r3, #22432	; 0x57a0
    fa14:	e3403002 	movt	r3, #2
    fa18:	eb003022 	bl	1baa8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    fa1c:	e1a00005 	mov	r0, r5
    fa20:	e28dd00c 	add	sp, sp, #12
    fa24:	e8bd8030 	pop	{r4, r5, pc}
    fa28:	00025764 	.word	0x00025764
    fa2c:	0002576c 	.word	0x0002576c

0000fa30 <CUSBKeyboardDevice::UpdateLEDs()>:
    fa30:	e590243c 	ldr	r2, [r0, #1084]	; 0x43c
    fa34:	e3520000 	cmp	r2, #0
    fa38:	112fff1e 	bxne	lr
    fa3c:	e92d4010 	push	{r4, lr}
    fa40:	e1a04000 	mov	r4, r0
    fa44:	ebffff9f 	bl	f8c8 <CUSBKeyboardDevice::GetLEDStatus() const>
    fa48:	e5d43448 	ldrb	r3, [r4, #1096]	; 0x448
    fa4c:	e1530000 	cmp	r3, r0
    fa50:	08bd8010 	popeq	{r4, pc}
    fa54:	e5c40448 	strb	r0, [r4, #1096]	; 0x448
    fa58:	e1a01000 	mov	r1, r0
    fa5c:	e1a00004 	mov	r0, r4
    fa60:	ebffffb0 	bl	f928 <CUSBKeyboardDevice::SetLEDs(unsigned char)>
    fa64:	e3500000 	cmp	r0, #0
    fa68:	18bd8010 	popne	{r4, pc}
    fa6c:	eb0030d6 	bl	1bdcc <CLogger::Get()>
    fa70:	e30537bc 	movw	r3, #22460	; 0x57bc
    fa74:	e3403002 	movt	r3, #2
    fa78:	e3a02001 	mov	r2, #1
    fa7c:	e59f1004 	ldr	r1, [pc, #4]	; fa88 <CUSBKeyboardDevice::UpdateLEDs()+0x58>
    fa80:	e8bd4010 	pop	{r4, lr}
    fa84:	ea003007 	b	1baa8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    fa88:	0002576c 	.word	0x0002576c

0000fa8c <CUSBKeyboardDevice::FindByte(unsigned char const*, unsigned char, unsigned int)>:
    fa8c:	e0802002 	add	r2, r0, r2
    fa90:	ea000002 	b	faa0 <CUSBKeyboardDevice::FindByte(unsigned char const*, unsigned char, unsigned int)+0x14>
    fa94:	e4d03001 	ldrb	r3, [r0], #1
    fa98:	e1530001 	cmp	r3, r1
    fa9c:	0a000003 	beq	fab0 <CUSBKeyboardDevice::FindByte(unsigned char const*, unsigned char, unsigned int)+0x24>
    faa0:	e1500002 	cmp	r0, r2
    faa4:	1afffffa 	bne	fa94 <CUSBKeyboardDevice::FindByte(unsigned char const*, unsigned char, unsigned int)+0x8>
    faa8:	e3a00000 	mov	r0, #0
    faac:	e12fff1e 	bx	lr
    fab0:	e3a00001 	mov	r0, #1
    fab4:	e12fff1e 	bx	lr

0000fab8 <CDWHCIRootPort::CDWHCIRootPort(CDWHCIDevice*)>:
    fab8:	e92d4010 	push	{r4, lr}
    fabc:	e3a03000 	mov	r3, #0
    fac0:	e1a04000 	mov	r4, r0
    fac4:	e3510000 	cmp	r1, #0
    fac8:	e880000a 	stm	r0, {r1, r3}
    facc:	0a000001 	beq	fad8 <CDWHCIRootPort::CDWHCIRootPort(CDWHCIDevice*)+0x20>
    fad0:	e1a00004 	mov	r0, r4
    fad4:	e8bd8010 	pop	{r4, pc}
    fad8:	e3a0201f 	mov	r2, #31
    fadc:	e30517dc 	movw	r1, #22492	; 0x57dc
    fae0:	e3401002 	movt	r1, #2
    fae4:	e3040a28 	movw	r0, #18984	; 0x4a28
    fae8:	e3400002 	movt	r0, #2
    faec:	eb002658 	bl	19454 <assertion_failed>
    faf0:	e1a00004 	mov	r0, r4
    faf4:	e8bd8010 	pop	{r4, pc}

0000faf8 <CDWHCIRootPort::~CDWHCIRootPort()>:
    faf8:	e92d4070 	push	{r4, r5, r6, lr}
    fafc:	e1a05000 	mov	r5, r0
    fb00:	e5904004 	ldr	r4, [r0, #4]
    fb04:	e3540000 	cmp	r4, #0
    fb08:	0a000004 	beq	fb20 <CDWHCIRootPort::~CDWHCIRootPort()+0x28>
    fb0c:	e1a00004 	mov	r0, r4
    fb10:	ebffefc0 	bl	ba18 <CUSBDevice::~CUSBDevice()>
    fb14:	e1a00004 	mov	r0, r4
    fb18:	e3a01044 	mov	r1, #68	; 0x44
    fb1c:	eb00495b 	bl	22090 <operator delete(void*, unsigned int)>
    fb20:	e1a00005 	mov	r0, r5
    fb24:	e8bd8070 	pop	{r4, r5, r6, pc}

0000fb28 <CDWHCIRootPort::Initialize()>:
    fb28:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    fb2c:	e1a04000 	mov	r4, r0
    fb30:	e5900000 	ldr	r0, [r0]
    fb34:	e24dd00c 	sub	sp, sp, #12
    fb38:	e3500000 	cmp	r0, #0
    fb3c:	0a00005a 	beq	fcac <CDWHCIRootPort::Initialize()+0x184>
    fb40:	ebffe293 	bl	8594 <CDWHCIDevice::GetPortSpeed()>
    fb44:	e1a05000 	mov	r5, r0
    fb48:	e3500003 	cmp	r0, #3
    fb4c:	0a00004b 	beq	fc80 <CDWHCIRootPort::Initialize()+0x158>
    fb50:	e5943004 	ldr	r3, [r4, #4]
    fb54:	e3530000 	cmp	r3, #0
    fb58:	0a000005 	beq	fb74 <CDWHCIRootPort::Initialize()+0x4c>
    fb5c:	e30517dc 	movw	r1, #22492	; 0x57dc
    fb60:	e3401002 	movt	r1, #2
    fb64:	e305080c 	movw	r0, #22540	; 0x580c
    fb68:	e3400002 	movt	r0, #2
    fb6c:	e3a02036 	mov	r2, #54	; 0x36
    fb70:	eb002637 	bl	19454 <assertion_failed>
    fb74:	e3a00044 	mov	r0, #68	; 0x44
    fb78:	e3a07001 	mov	r7, #1
    fb7c:	eb00493f 	bl	22080 <operator new(unsigned int)>
    fb80:	e5941000 	ldr	r1, [r4]
    fb84:	e1a06000 	mov	r6, r0
    fb88:	e3a03000 	mov	r3, #0
    fb8c:	e1a02005 	mov	r2, r5
    fb90:	e88d0088 	stm	sp, {r3, r7}
    fb94:	ebffef67 	bl	b938 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, bool, unsigned char, unsigned char)>
    fb98:	e5846004 	str	r6, [r4, #4]
    fb9c:	e1a00006 	mov	r0, r6
    fba0:	ebfff113 	bl	bff4 <CUSBDevice::Initialize()>
    fba4:	e3500000 	cmp	r0, #0
    fba8:	1a00000d 	bne	fbe4 <CDWHCIRootPort::Initialize()+0xbc>
    fbac:	e5945004 	ldr	r5, [r4, #4]
    fbb0:	e3550000 	cmp	r5, #0
    fbb4:	0a000004 	beq	fbcc <CDWHCIRootPort::Initialize()+0xa4>
    fbb8:	e1a00005 	mov	r0, r5
    fbbc:	ebffef95 	bl	ba18 <CUSBDevice::~CUSBDevice()>
    fbc0:	e1a00005 	mov	r0, r5
    fbc4:	e3a01044 	mov	r1, #68	; 0x44
    fbc8:	eb004930 	bl	22090 <operator delete(void*, unsigned int)>
    fbcc:	e3a00000 	mov	r0, #0
    fbd0:	e5840004 	str	r0, [r4, #4]
    fbd4:	e1a05000 	mov	r5, r0
    fbd8:	e1a00005 	mov	r0, r5
    fbdc:	e28dd00c 	add	sp, sp, #12
    fbe0:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    fbe4:	e5940004 	ldr	r0, [r4, #4]
    fbe8:	ebfff2c9 	bl	c714 <CUSBDevice::Configure()>
    fbec:	e2505000 	subs	r5, r0, #0
    fbf0:	1a00000a 	bne	fc20 <CDWHCIRootPort::Initialize()+0xf8>
    fbf4:	eb003074 	bl	1bdcc <CLogger::Get()>
    fbf8:	e305381c 	movw	r3, #22556	; 0x581c
    fbfc:	e3403002 	movt	r3, #2
    fc00:	e30517d4 	movw	r1, #22484	; 0x57d4
    fc04:	e3401002 	movt	r1, #2
    fc08:	e3a02002 	mov	r2, #2
    fc0c:	eb002fa5 	bl	1baa8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    fc10:	e5945004 	ldr	r5, [r4, #4]
    fc14:	e3550000 	cmp	r5, #0
    fc18:	1affffe6 	bne	fbb8 <CDWHCIRootPort::Initialize()+0x90>
    fc1c:	eaffffea 	b	fbcc <CDWHCIRootPort::Initialize()+0xa4>
    fc20:	eb003069 	bl	1bdcc <CLogger::Get()>
    fc24:	e3a02004 	mov	r2, #4
    fc28:	e3053834 	movw	r3, #22580	; 0x5834
    fc2c:	e3403002 	movt	r3, #2
    fc30:	e30517d4 	movw	r1, #22484	; 0x57d4
    fc34:	e3401002 	movt	r1, #2
    fc38:	eb002f9a 	bl	1baa8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    fc3c:	e5940000 	ldr	r0, [r4]
    fc40:	ebffe266 	bl	85e0 <CDWHCIDevice::OvercurrentDetected()>
    fc44:	e3500000 	cmp	r0, #0
    fc48:	0affffe2 	beq	fbd8 <CDWHCIRootPort::Initialize()+0xb0>
    fc4c:	eb00305e 	bl	1bdcc <CLogger::Get()>
    fc50:	e1a02007 	mov	r2, r7
    fc54:	e3053848 	movw	r3, #22600	; 0x5848
    fc58:	e3403002 	movt	r3, #2
    fc5c:	e30517d4 	movw	r1, #22484	; 0x57d4
    fc60:	e3401002 	movt	r1, #2
    fc64:	eb002f8f 	bl	1baa8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    fc68:	e5940000 	ldr	r0, [r4]
    fc6c:	ebffe269 	bl	8618 <CDWHCIDevice::DisableRootPort()>
    fc70:	e5945004 	ldr	r5, [r4, #4]
    fc74:	e3550000 	cmp	r5, #0
    fc78:	1affffce 	bne	fbb8 <CDWHCIRootPort::Initialize()+0x90>
    fc7c:	eaffffd2 	b	fbcc <CDWHCIRootPort::Initialize()+0xa4>
    fc80:	eb003051 	bl	1bdcc <CLogger::Get()>
    fc84:	e3a05000 	mov	r5, #0
    fc88:	e3a02001 	mov	r2, #1
    fc8c:	e30537f0 	movw	r3, #22512	; 0x57f0
    fc90:	e3403002 	movt	r3, #2
    fc94:	e30517d4 	movw	r1, #22484	; 0x57d4
    fc98:	e3401002 	movt	r1, #2
    fc9c:	eb002f81 	bl	1baa8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    fca0:	e1a00005 	mov	r0, r5
    fca4:	e28dd00c 	add	sp, sp, #12
    fca8:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    fcac:	e30517dc 	movw	r1, #22492	; 0x57dc
    fcb0:	e3401002 	movt	r1, #2
    fcb4:	e3040a28 	movw	r0, #18984	; 0x4a28
    fcb8:	e3400002 	movt	r0, #2
    fcbc:	e3a0202c 	mov	r2, #44	; 0x2c
    fcc0:	eb0025e3 	bl	19454 <assertion_failed>
    fcc4:	e5940000 	ldr	r0, [r4]
    fcc8:	eaffff9c 	b	fb40 <CDWHCIRootPort::Initialize()+0x18>

0000fccc <CDWHCIRootPort::ReScanDevices()>:
    fccc:	e92d4010 	push	{r4, lr}
    fcd0:	e5904004 	ldr	r4, [r0, #4]
    fcd4:	e3540000 	cmp	r4, #0
    fcd8:	0a000002 	beq	fce8 <CDWHCIRootPort::ReScanDevices()+0x1c>
    fcdc:	e1a00004 	mov	r0, r4
    fce0:	e8bd4010 	pop	{r4, lr}
    fce4:	eaffef75 	b	bac0 <CUSBDevice::ReScanDevices()>
    fce8:	eb003037 	bl	1bdcc <CLogger::Get()>
    fcec:	e3a02002 	mov	r2, #2
    fcf0:	e3053860 	movw	r3, #22624	; 0x5860
    fcf4:	e3403002 	movt	r3, #2
    fcf8:	e30517d4 	movw	r1, #22484	; 0x57d4
    fcfc:	e3401002 	movt	r1, #2
    fd00:	eb002f68 	bl	1baa8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    fd04:	e1a00004 	mov	r0, r4
    fd08:	e8bd8010 	pop	{r4, pc}

0000fd0c <CUSBHIDDevice::SendCompletionRoutine(CUSBRequest*, void*, void*)>:
    fd0c:	e92d4070 	push	{r4, r5, r6, lr}
    fd10:	e1a04001 	mov	r4, r1
    fd14:	e2505000 	subs	r5, r0, #0
    fd18:	0a000014 	beq	fd70 <CUSBHIDDevice::SendCompletionRoutine(CUSBRequest*, void*, void*)+0x64>
    fd1c:	ebfff4a1 	bl	cfa8 <CUSBRequest::GetStatus() const>
    fd20:	e3500000 	cmp	r0, #0
    fd24:	0a000009 	beq	fd50 <CUSBHIDDevice::SendCompletionRoutine(CUSBRequest*, void*, void*)+0x44>
    fd28:	e1a00005 	mov	r0, r5
    fd2c:	ebfff488 	bl	cf54 <CUSBRequest::~CUSBRequest()>
    fd30:	e1a00005 	mov	r0, r5
    fd34:	e3a01028 	mov	r1, #40	; 0x28
    fd38:	ebfff510 	bl	d180 <CUSBRequest::operator delete(void*, unsigned int)>
    fd3c:	e3540000 	cmp	r4, #0
    fd40:	0a00001c 	beq	fdb8 <CUSBHIDDevice::SendCompletionRoutine(CUSBRequest*, void*, void*)+0xac>
    fd44:	e1a00004 	mov	r0, r4
    fd48:	e8bd4070 	pop	{r4, r5, r6, lr}
    fd4c:	ea0048ce 	b	2208c <operator delete[](void*)>
    fd50:	eb00301d 	bl	1bdcc <CLogger::Get()>
    fd54:	e30538ec 	movw	r3, #22764	; 0x58ec
    fd58:	e3403002 	movt	r3, #2
    fd5c:	e3051890 	movw	r1, #22672	; 0x5890
    fd60:	e3401002 	movt	r1, #2
    fd64:	e3a02002 	mov	r2, #2
    fd68:	eb002f4e 	bl	1baa8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    fd6c:	eaffffed 	b	fd28 <CUSBHIDDevice::SendCompletionRoutine(CUSBRequest*, void*, void*)+0x1c>
    fd70:	e3a020af 	mov	r2, #175	; 0xaf
    fd74:	e30518c4 	movw	r1, #22724	; 0x58c4
    fd78:	e3401002 	movt	r1, #2
    fd7c:	e304030c 	movw	r0, #17164	; 0x430c
    fd80:	e3400002 	movt	r0, #2
    fd84:	eb0025b2 	bl	19454 <assertion_failed>
    fd88:	e1a00005 	mov	r0, r5
    fd8c:	ebfff485 	bl	cfa8 <CUSBRequest::GetStatus() const>
    fd90:	e3500000 	cmp	r0, #0
    fd94:	1affffe8 	bne	fd3c <CUSBHIDDevice::SendCompletionRoutine(CUSBRequest*, void*, void*)+0x30>
    fd98:	eb00300b 	bl	1bdcc <CLogger::Get()>
    fd9c:	e30538ec 	movw	r3, #22764	; 0x58ec
    fda0:	e3403002 	movt	r3, #2
    fda4:	e3051890 	movw	r1, #22672	; 0x5890
    fda8:	e3401002 	movt	r1, #2
    fdac:	e3a02002 	mov	r2, #2
    fdb0:	eb002f3c 	bl	1baa8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    fdb4:	eaffffe0 	b	fd3c <CUSBHIDDevice::SendCompletionRoutine(CUSBRequest*, void*, void*)+0x30>
    fdb8:	e30518c4 	movw	r1, #22724	; 0x58c4
    fdbc:	e3401002 	movt	r1, #2
    fdc0:	e30508d8 	movw	r0, #22744	; 0x58d8
    fdc4:	e3400002 	movt	r0, #2
    fdc8:	e3a020b8 	mov	r2, #184	; 0xb8
    fdcc:	e8bd4070 	pop	{r4, r5, r6, lr}
    fdd0:	ea00259f 	b	19454 <assertion_failed>

0000fdd4 <CUSBHIDDevice::CUSBHIDDevice(CUSBFunction*, unsigned int)>:
    fdd4:	e92d4070 	push	{r4, r5, r6, lr}
    fdd8:	e1a04000 	mov	r4, r0
    fddc:	e1a05002 	mov	r5, r2
    fde0:	eb000bde 	bl	12d60 <CUSBFunction::CUSBFunction(CUSBFunction*)>
    fde4:	e59f2034 	ldr	r2, [pc, #52]	; fe20 <CUSBHIDDevice::CUSBHIDDevice(CUSBFunction*, unsigned int)+0x4c>
    fde8:	e3a03000 	mov	r3, #0
    fdec:	e3550000 	cmp	r5, #0
    fdf0:	e5845010 	str	r5, [r4, #16]
    fdf4:	e5842000 	str	r2, [r4]
    fdf8:	e5843014 	str	r3, [r4, #20]
    fdfc:	e5843018 	str	r3, [r4, #24]
    fe00:	e584301c 	str	r3, [r4, #28]
    fe04:	e5843020 	str	r3, [r4, #32]
    fe08:	0a000002 	beq	fe18 <CUSBHIDDevice::CUSBHIDDevice(CUSBFunction*, unsigned int)+0x44>
    fe0c:	e1a00005 	mov	r0, r5
    fe10:	eb00489b 	bl	22084 <operator new[](unsigned int)>
    fe14:	e5840020 	str	r0, [r4, #32]
    fe18:	e1a00004 	mov	r0, r4
    fe1c:	e8bd8070 	pop	{r4, r5, r6, pc}
    fe20:	000258a0 	.word	0x000258a0

0000fe24 <CUSBHIDDevice::~CUSBHIDDevice()>:
    fe24:	e92d4070 	push	{r4, r5, r6, lr}
    fe28:	e1a04000 	mov	r4, r0
    fe2c:	e5900020 	ldr	r0, [r0, #32]
    fe30:	e59f3074 	ldr	r3, [pc, #116]	; feac <CUSBHIDDevice::~CUSBHIDDevice()+0x88>
    fe34:	e5843000 	str	r3, [r4]
    fe38:	e3500000 	cmp	r0, #0
    fe3c:	0a000000 	beq	fe44 <CUSBHIDDevice::~CUSBHIDDevice()+0x20>
    fe40:	eb004891 	bl	2208c <operator delete[](void*)>
    fe44:	e5945018 	ldr	r5, [r4, #24]
    fe48:	e3a03000 	mov	r3, #0
    fe4c:	e5843020 	str	r3, [r4, #32]
    fe50:	e1550003 	cmp	r5, r3
    fe54:	0a000004 	beq	fe6c <CUSBHIDDevice::~CUSBHIDDevice()+0x48>
    fe58:	e1a00005 	mov	r0, r5
    fe5c:	ebfff316 	bl	cabc <CUSBEndpoint::~CUSBEndpoint()>
    fe60:	e1a00005 	mov	r0, r5
    fe64:	e3a01014 	mov	r1, #20
    fe68:	eb004888 	bl	22090 <operator delete(void*, unsigned int)>
    fe6c:	e5945014 	ldr	r5, [r4, #20]
    fe70:	e3a03000 	mov	r3, #0
    fe74:	e5843018 	str	r3, [r4, #24]
    fe78:	e1550003 	cmp	r5, r3
    fe7c:	0a000004 	beq	fe94 <CUSBHIDDevice::~CUSBHIDDevice()+0x70>
    fe80:	e1a00005 	mov	r0, r5
    fe84:	ebfff30c 	bl	cabc <CUSBEndpoint::~CUSBEndpoint()>
    fe88:	e1a00005 	mov	r0, r5
    fe8c:	e3a01014 	mov	r1, #20
    fe90:	eb00487e 	bl	22090 <operator delete(void*, unsigned int)>
    fe94:	e3a03000 	mov	r3, #0
    fe98:	e1a00004 	mov	r0, r4
    fe9c:	e5843014 	str	r3, [r4, #20]
    fea0:	eb000b5c 	bl	12c18 <CUSBFunction::~CUSBFunction()>
    fea4:	e1a00004 	mov	r0, r4
    fea8:	e8bd8070 	pop	{r4, r5, r6, pc}
    feac:	000258a0 	.word	0x000258a0

0000feb0 <CUSBHIDDevice::~CUSBHIDDevice()>:
    feb0:	e92d4010 	push	{r4, lr}
    feb4:	e1a04000 	mov	r4, r0
    feb8:	ebffffd9 	bl	fe24 <CUSBHIDDevice::~CUSBHIDDevice()>
    febc:	e1a00004 	mov	r0, r4
    fec0:	e3a01024 	mov	r1, #36	; 0x24
    fec4:	eb004871 	bl	22090 <operator delete(void*, unsigned int)>
    fec8:	e1a00004 	mov	r0, r4
    fecc:	e8bd8010 	pop	{r4, pc}

0000fed0 <CUSBHIDDevice::Configure(unsigned int)>:
    fed0:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    fed4:	e1a07001 	mov	r7, r1
    fed8:	e1a05000 	mov	r5, r0
    fedc:	e24dd010 	sub	sp, sp, #16
    fee0:	eb000bfe 	bl	12ee0 <CUSBFunction::GetNumEndpoints() const>
    fee4:	e2506000 	subs	r6, r0, #0
    fee8:	1a000004 	bne	ff00 <CUSBHIDDevice::Configure(unsigned int)+0x30>
    feec:	ea00004c 	b	10024 <CUSBHIDDevice::Configure(unsigned int)+0x154>
    fef0:	e5d43003 	ldrb	r3, [r4, #3]
    fef4:	e203303f 	and	r3, r3, #63	; 0x3f
    fef8:	e3530003 	cmp	r3, #3
    fefc:	0a00002a 	beq	ffac <CUSBHIDDevice::Configure(unsigned int)+0xdc>
    ff00:	e3a01005 	mov	r1, #5
    ff04:	e1a00005 	mov	r0, r5
    ff08:	eb000c67 	bl	130ac <CUSBFunction::GetDescriptor(unsigned char)>
    ff0c:	e2504000 	subs	r4, r0, #0
    ff10:	1afffff6 	bne	fef0 <CUSBHIDDevice::Configure(unsigned int)+0x20>
    ff14:	e5956014 	ldr	r6, [r5, #20]
    ff18:	e1a00005 	mov	r0, r5
    ff1c:	e3560000 	cmp	r6, #0
    ff20:	0a000050 	beq	10068 <CUSBHIDDevice::Configure(unsigned int)+0x198>
    ff24:	eb000c2f 	bl	12fe8 <CUSBFunction::Configure()>
    ff28:	e2506000 	subs	r6, r0, #0
    ff2c:	0a000043 	beq	10040 <CUSBHIDDevice::Configure(unsigned int)+0x170>
    ff30:	e1a00005 	mov	r0, r5
    ff34:	eb000cd9 	bl	132a0 <CUSBFunction::GetInterfaceClass() const>
    ff38:	e3500003 	cmp	r0, #3
    ff3c:	0a000059 	beq	100a8 <CUSBHIDDevice::Configure(unsigned int)+0x1d8>
    ff40:	e5953010 	ldr	r3, [r5, #16]
    ff44:	e3530000 	cmp	r3, #0
    ff48:	1a00004c 	bne	10080 <CUSBHIDDevice::Configure(unsigned int)+0x1b0>
    ff4c:	e5857010 	str	r7, [r5, #16]
    ff50:	e3570000 	cmp	r7, #0
    ff54:	1a000005 	bne	ff70 <CUSBHIDDevice::Configure(unsigned int)+0xa0>
    ff58:	e30518c4 	movw	r1, #22724	; 0x58c4
    ff5c:	e3401002 	movt	r1, #2
    ff60:	e3050924 	movw	r0, #22820	; 0x5924
    ff64:	e3400002 	movt	r0, #2
    ff68:	e3a0207d 	mov	r2, #125	; 0x7d
    ff6c:	eb002538 	bl	19454 <assertion_failed>
    ff70:	e5953020 	ldr	r3, [r5, #32]
    ff74:	e3530000 	cmp	r3, #0
    ff78:	0a000005 	beq	ff94 <CUSBHIDDevice::Configure(unsigned int)+0xc4>
    ff7c:	e30518c4 	movw	r1, #22724	; 0x58c4
    ff80:	e3401002 	movt	r1, #2
    ff84:	e305093c 	movw	r0, #22844	; 0x593c
    ff88:	e3400002 	movt	r0, #2
    ff8c:	e3a0207f 	mov	r2, #127	; 0x7f
    ff90:	eb00252f 	bl	19454 <assertion_failed>
    ff94:	e5950010 	ldr	r0, [r5, #16]
    ff98:	eb004839 	bl	22084 <operator new[](unsigned int)>
    ff9c:	e5850020 	str	r0, [r5, #32]
    ffa0:	e1a00006 	mov	r0, r6
    ffa4:	e28dd010 	add	sp, sp, #16
    ffa8:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    ffac:	e1d430d2 	ldrsb	r3, [r4, #2]
    ffb0:	e1a00005 	mov	r0, r5
    ffb4:	e3530000 	cmp	r3, #0
    ffb8:	ba00000c 	blt	fff0 <CUSBHIDDevice::Configure(unsigned int)+0x120>
    ffbc:	e5953018 	ldr	r3, [r5, #24]
    ffc0:	e3530000 	cmp	r3, #0
    ffc4:	1a000059 	bne	10130 <CUSBHIDDevice::Configure(unsigned int)+0x260>
    ffc8:	eb000bd4 	bl	12f20 <CUSBFunction::GetDevice() const>
    ffcc:	e1a08000 	mov	r8, r0
    ffd0:	e3a00014 	mov	r0, #20
    ffd4:	eb004829 	bl	22080 <operator new(unsigned int)>
    ffd8:	e1a02004 	mov	r2, r4
    ffdc:	e1a01008 	mov	r1, r8
    ffe0:	e1a06000 	mov	r6, r0
    ffe4:	ebfff224 	bl	c87c <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
    ffe8:	e5856018 	str	r6, [r5, #24]
    ffec:	eaffffc3 	b	ff00 <CUSBHIDDevice::Configure(unsigned int)+0x30>
    fff0:	e5953014 	ldr	r3, [r5, #20]
    fff4:	e3530000 	cmp	r3, #0
    fff8:	1a00004c 	bne	10130 <CUSBHIDDevice::Configure(unsigned int)+0x260>
    fffc:	eb000bc7 	bl	12f20 <CUSBFunction::GetDevice() const>
   10000:	e1a08000 	mov	r8, r0
   10004:	e3a00014 	mov	r0, #20
   10008:	eb00481c 	bl	22080 <operator new(unsigned int)>
   1000c:	e1a02004 	mov	r2, r4
   10010:	e1a01008 	mov	r1, r8
   10014:	e1a06000 	mov	r6, r0
   10018:	ebfff217 	bl	c87c <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   1001c:	e5856014 	str	r6, [r5, #20]
   10020:	eaffffb6 	b	ff00 <CUSBHIDDevice::Configure(unsigned int)+0x30>
   10024:	e3051890 	movw	r1, #22672	; 0x5890
   10028:	e3401002 	movt	r1, #2
   1002c:	e1a00005 	mov	r0, r5
   10030:	eb000c30 	bl	130f8 <CUSBFunction::ConfigurationError(char const*) const>
   10034:	e1a00006 	mov	r0, r6
   10038:	e28dd010 	add	sp, sp, #16
   1003c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   10040:	eb002f61 	bl	1bdcc <CLogger::Get()>
   10044:	e3a02001 	mov	r2, #1
   10048:	e30532c4 	movw	r3, #21188	; 0x52c4
   1004c:	e3403002 	movt	r3, #2
   10050:	e3051890 	movw	r1, #22672	; 0x5890
   10054:	e3401002 	movt	r1, #2
   10058:	eb002e92 	bl	1baa8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1005c:	e1a00006 	mov	r0, r6
   10060:	e28dd010 	add	sp, sp, #16
   10064:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   10068:	e3051890 	movw	r1, #22672	; 0x5890
   1006c:	e3401002 	movt	r1, #2
   10070:	eb000c20 	bl	130f8 <CUSBFunction::ConfigurationError(char const*) const>
   10074:	e1a00006 	mov	r0, r6
   10078:	e28dd010 	add	sp, sp, #16
   1007c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   10080:	e5953020 	ldr	r3, [r5, #32]
   10084:	e3530000 	cmp	r3, #0
   10088:	1affffe9 	bne	10034 <CUSBHIDDevice::Configure(unsigned int)+0x164>
   1008c:	e30518c4 	movw	r1, #22724	; 0x58c4
   10090:	e3401002 	movt	r1, #2
   10094:	e3050954 	movw	r0, #22868	; 0x5954
   10098:	e3400002 	movt	r0, #2
   1009c:	e3a02082 	mov	r2, #130	; 0x82
   100a0:	eb0024eb 	bl	19454 <assertion_failed>
   100a4:	eaffffe2 	b	10034 <CUSBHIDDevice::Configure(unsigned int)+0x164>
   100a8:	e1a00005 	mov	r0, r5
   100ac:	eb000c8b 	bl	132e0 <CUSBFunction::GetInterfaceSubClass() const>
   100b0:	e1a08000 	mov	r8, r0
   100b4:	e3500001 	cmp	r0, #1
   100b8:	1affffa0 	bne	ff40 <CUSBHIDDevice::Configure(unsigned int)+0x70>
   100bc:	e1a00005 	mov	r0, r5
   100c0:	eb000bb7 	bl	12fa4 <CUSBFunction::GetHost() const>
   100c4:	e1a09000 	mov	r9, r0
   100c8:	e1a00005 	mov	r0, r5
   100cc:	eb000ba3 	bl	12f60 <CUSBFunction::GetEndpoint0() const>
   100d0:	e1a0a000 	mov	sl, r0
   100d4:	e1a00005 	mov	r0, r5
   100d8:	eb000c60 	bl	13260 <CUSBFunction::GetInterfaceNumber() const>
   100dc:	e1a0100a 	mov	r1, sl
   100e0:	e6ff0070 	uxth	r0, r0
   100e4:	e58d400c 	str	r4, [sp, #12]
   100e8:	e58d0004 	str	r0, [sp, #4]
   100ec:	e3a0300b 	mov	r3, #11
   100f0:	e1a00009 	mov	r0, r9
   100f4:	e58d4008 	str	r4, [sp, #8]
   100f8:	e58d4000 	str	r4, [sp]
   100fc:	e3a02021 	mov	r2, #33	; 0x21
   10100:	ebfff2f3 	bl	ccd4 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   10104:	e3500000 	cmp	r0, #0
   10108:	aaffff8c 	bge	ff40 <CUSBHIDDevice::Configure(unsigned int)+0x70>
   1010c:	eb002f2e 	bl	1bdcc <CLogger::Get()>
   10110:	e1a02008 	mov	r2, r8
   10114:	e3053908 	movw	r3, #22792	; 0x5908
   10118:	e3403002 	movt	r3, #2
   1011c:	e3051890 	movw	r1, #22672	; 0x5890
   10120:	e3401002 	movt	r1, #2
   10124:	e1a06004 	mov	r6, r4
   10128:	eb002e5e 	bl	1baa8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1012c:	eaffffc0 	b	10034 <CUSBHIDDevice::Configure(unsigned int)+0x164>
   10130:	e3051890 	movw	r1, #22672	; 0x5890
   10134:	e3401002 	movt	r1, #2
   10138:	eb000bee 	bl	130f8 <CUSBFunction::ConfigurationError(char const*) const>
   1013c:	e3a06000 	mov	r6, #0
   10140:	eaffffbb 	b	10034 <CUSBHIDDevice::Configure(unsigned int)+0x164>

00010144 <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)>:
   10144:	e590c018 	ldr	ip, [r0, #24]
   10148:	e35c0000 	cmp	ip, #0
   1014c:	0a00001b 	beq	101c0 <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)+0x7c>
   10150:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   10154:	e3510000 	cmp	r1, #0
   10158:	e1a07003 	mov	r7, r3
   1015c:	e24dd00c 	sub	sp, sp, #12
   10160:	e1a06002 	mov	r6, r2
   10164:	e1a05001 	mov	r5, r1
   10168:	e1a04000 	mov	r4, r0
   1016c:	0a000015 	beq	101c8 <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)+0x84>
   10170:	e3560000 	cmp	r6, #0
   10174:	0a00000a 	beq	101a4 <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)+0x60>
   10178:	e1a00004 	mov	r0, r4
   1017c:	eb000b88 	bl	12fa4 <CUSBFunction::GetHost() const>
   10180:	e5941018 	ldr	r1, [r4, #24]
   10184:	e1a03006 	mov	r3, r6
   10188:	e58d7000 	str	r7, [sp]
   1018c:	e1a02005 	mov	r2, r5
   10190:	ebfff32f 	bl	ce54 <CUSBHostController::Transfer(CUSBEndpoint*, void*, unsigned int, unsigned int)>
   10194:	e1e00000 	mvn	r0, r0
   10198:	e1a00fa0 	lsr	r0, r0, #31
   1019c:	e28dd00c 	add	sp, sp, #12
   101a0:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   101a4:	e30518c4 	movw	r1, #22724	; 0x58c4
   101a8:	e3401002 	movt	r1, #2
   101ac:	e305096c 	movw	r0, #22892	; 0x596c
   101b0:	e3400002 	movt	r0, #2
   101b4:	e3a0208f 	mov	r2, #143	; 0x8f
   101b8:	eb0024a5 	bl	19454 <assertion_failed>
   101bc:	eaffffed 	b	10178 <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)+0x34>
   101c0:	e1a0000c 	mov	r0, ip
   101c4:	e12fff1e 	bx	lr
   101c8:	e30518c4 	movw	r1, #22724	; 0x58c4
   101cc:	e3401002 	movt	r1, #2
   101d0:	e30503c4 	movw	r0, #21444	; 0x53c4
   101d4:	e3400002 	movt	r0, #2
   101d8:	e3a0208e 	mov	r2, #142	; 0x8e
   101dc:	eb00249c 	bl	19454 <assertion_failed>
   101e0:	eaffffe2 	b	10170 <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)+0x2c>

000101e4 <CUSBHIDDevice::SendToEndpointOutAsync(void const*, unsigned int, unsigned int)>:
   101e4:	e590c018 	ldr	ip, [r0, #24]
   101e8:	e35c0000 	cmp	ip, #0
   101ec:	0a00002e 	beq	102ac <CUSBHIDDevice::SendToEndpointOutAsync(void const*, unsigned int, unsigned int)+0xc8>
   101f0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   101f4:	e3510000 	cmp	r1, #0
   101f8:	e1a07003 	mov	r7, r3
   101fc:	e24dd008 	sub	sp, sp, #8
   10200:	e1a05002 	mov	r5, r2
   10204:	e1a06001 	mov	r6, r1
   10208:	e1a04000 	mov	r4, r0
   1020c:	0a000028 	beq	102b4 <CUSBHIDDevice::SendToEndpointOutAsync(void const*, unsigned int, unsigned int)+0xd0>
   10210:	e3550000 	cmp	r5, #0
   10214:	0a00001d 	beq	10290 <CUSBHIDDevice::SendToEndpointOutAsync(void const*, unsigned int, unsigned int)+0xac>
   10218:	e1a00005 	mov	r0, r5
   1021c:	eb004798 	bl	22084 <operator new[](unsigned int)>
   10220:	e1a02005 	mov	r2, r5
   10224:	e1a01006 	mov	r1, r6
   10228:	e1a08000 	mov	r8, r0
   1022c:	eb0043af 	bl	210f0 <memcpy>
   10230:	e3a00028 	mov	r0, #40	; 0x28
   10234:	ebfff3b8 	bl	d11c <CUSBRequest::operator new(unsigned int)>
   10238:	e3a0c000 	mov	ip, #0
   1023c:	e1a06000 	mov	r6, r0
   10240:	e5941018 	ldr	r1, [r4, #24]
   10244:	e1a03005 	mov	r3, r5
   10248:	e58dc000 	str	ip, [sp]
   1024c:	e1a02008 	mov	r2, r8
   10250:	ebfff318 	bl	ceb8 <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)>
   10254:	e1a03004 	mov	r3, r4
   10258:	e1a02008 	mov	r2, r8
   1025c:	e1a00006 	mov	r0, r6
   10260:	e30f1d0c 	movw	r1, #64780	; 0xfd0c
   10264:	e3401000 	movt	r1, #0
   10268:	ebfff38a 	bl	d098 <CUSBRequest::SetCompletionRoutine(void (*)(CUSBRequest*, void*, void*), void*, void*)>
   1026c:	e1a00004 	mov	r0, r4
   10270:	eb000b4b 	bl	12fa4 <CUSBFunction::GetHost() const>
   10274:	e5903000 	ldr	r3, [r0]
   10278:	e1a01006 	mov	r1, r6
   1027c:	e1a02007 	mov	r2, r7
   10280:	e593300c 	ldr	r3, [r3, #12]
   10284:	e28dd008 	add	sp, sp, #8
   10288:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   1028c:	e12fff13 	bx	r3
   10290:	e30518c4 	movw	r1, #22724	; 0x58c4
   10294:	e3401002 	movt	r1, #2
   10298:	e305096c 	movw	r0, #22892	; 0x596c
   1029c:	e3400002 	movt	r0, #2
   102a0:	e3a020a1 	mov	r2, #161	; 0xa1
   102a4:	eb00246a 	bl	19454 <assertion_failed>
   102a8:	eaffffda 	b	10218 <CUSBHIDDevice::SendToEndpointOutAsync(void const*, unsigned int, unsigned int)+0x34>
   102ac:	e1a0000c 	mov	r0, ip
   102b0:	e12fff1e 	bx	lr
   102b4:	e30518c4 	movw	r1, #22724	; 0x58c4
   102b8:	e3401002 	movt	r1, #2
   102bc:	e30503c4 	movw	r0, #21444	; 0x53c4
   102c0:	e3400002 	movt	r0, #2
   102c4:	e3a020a0 	mov	r2, #160	; 0xa0
   102c8:	eb002461 	bl	19454 <assertion_failed>
   102cc:	eaffffcf 	b	10210 <CUSBHIDDevice::SendToEndpointOutAsync(void const*, unsigned int, unsigned int)+0x2c>

000102d0 <CUSBHIDDevice::ReceiveFromEndpointIn(void*, unsigned int, unsigned int)>:
   102d0:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   102d4:	e1a07003 	mov	r7, r3
   102d8:	e590301c 	ldr	r3, [r0, #28]
   102dc:	e24dd00c 	sub	sp, sp, #12
   102e0:	e1a04000 	mov	r4, r0
   102e4:	e1a05001 	mov	r5, r1
   102e8:	e1a06002 	mov	r6, r2
   102ec:	e3530000 	cmp	r3, #0
   102f0:	0a000005 	beq	1030c <CUSBHIDDevice::ReceiveFromEndpointIn(void*, unsigned int, unsigned int)+0x3c>
   102f4:	e30518c4 	movw	r1, #22724	; 0x58c4
   102f8:	e3401002 	movt	r1, #2
   102fc:	e305097c 	movw	r0, #22908	; 0x597c
   10300:	e3400002 	movt	r0, #2
   10304:	e3a020be 	mov	r2, #190	; 0xbe
   10308:	eb002451 	bl	19454 <assertion_failed>
   1030c:	e5943014 	ldr	r3, [r4, #20]
   10310:	e3530000 	cmp	r3, #0
   10314:	0a000019 	beq	10380 <CUSBHIDDevice::ReceiveFromEndpointIn(void*, unsigned int, unsigned int)+0xb0>
   10318:	e3550000 	cmp	r5, #0
   1031c:	0a000010 	beq	10364 <CUSBHIDDevice::ReceiveFromEndpointIn(void*, unsigned int, unsigned int)+0x94>
   10320:	e3560000 	cmp	r6, #0
   10324:	1a000005 	bne	10340 <CUSBHIDDevice::ReceiveFromEndpointIn(void*, unsigned int, unsigned int)+0x70>
   10328:	e30518c4 	movw	r1, #22724	; 0x58c4
   1032c:	e3401002 	movt	r1, #2
   10330:	e305096c 	movw	r0, #22892	; 0x596c
   10334:	e3400002 	movt	r0, #2
   10338:	e3a020c2 	mov	r2, #194	; 0xc2
   1033c:	eb002444 	bl	19454 <assertion_failed>
   10340:	e1a00004 	mov	r0, r4
   10344:	eb000b16 	bl	12fa4 <CUSBFunction::GetHost() const>
   10348:	e5941014 	ldr	r1, [r4, #20]
   1034c:	e1a03006 	mov	r3, r6
   10350:	e58d7000 	str	r7, [sp]
   10354:	e1a02005 	mov	r2, r5
   10358:	ebfff2bd 	bl	ce54 <CUSBHostController::Transfer(CUSBEndpoint*, void*, unsigned int, unsigned int)>
   1035c:	e28dd00c 	add	sp, sp, #12
   10360:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   10364:	e30518c4 	movw	r1, #22724	; 0x58c4
   10368:	e3401002 	movt	r1, #2
   1036c:	e30503c4 	movw	r0, #21444	; 0x53c4
   10370:	e3400002 	movt	r0, #2
   10374:	e3a020c1 	mov	r2, #193	; 0xc1
   10378:	eb002435 	bl	19454 <assertion_failed>
   1037c:	eaffffe7 	b	10320 <CUSBHIDDevice::ReceiveFromEndpointIn(void*, unsigned int, unsigned int)+0x50>
   10380:	e30518c4 	movw	r1, #22724	; 0x58c4
   10384:	e3401002 	movt	r1, #2
   10388:	e3050988 	movw	r0, #22920	; 0x5988
   1038c:	e3400002 	movt	r0, #2
   10390:	e3a020c0 	mov	r2, #192	; 0xc0
   10394:	eb00242e 	bl	19454 <assertion_failed>
   10398:	eaffffde 	b	10318 <CUSBHIDDevice::ReceiveFromEndpointIn(void*, unsigned int, unsigned int)+0x48>

0001039c <CUSBHIDDevice::StartRequest()>:
   1039c:	e92d4070 	push	{r4, r5, r6, lr}
   103a0:	e1a04000 	mov	r4, r0
   103a4:	e5903014 	ldr	r3, [r0, #20]
   103a8:	e24dd008 	sub	sp, sp, #8
   103ac:	e3530000 	cmp	r3, #0
   103b0:	0a000034 	beq	10488 <CUSBHIDDevice::StartRequest()+0xec>
   103b4:	e5943020 	ldr	r3, [r4, #32]
   103b8:	e3530000 	cmp	r3, #0
   103bc:	0a00002a 	beq	1046c <CUSBHIDDevice::StartRequest()+0xd0>
   103c0:	e594301c 	ldr	r3, [r4, #28]
   103c4:	e3530000 	cmp	r3, #0
   103c8:	0a000005 	beq	103e4 <CUSBHIDDevice::StartRequest()+0x48>
   103cc:	e30518c4 	movw	r1, #22724	; 0x58c4
   103d0:	e3401002 	movt	r1, #2
   103d4:	e305097c 	movw	r0, #22908	; 0x597c
   103d8:	e3400002 	movt	r0, #2
   103dc:	e3a020cb 	mov	r2, #203	; 0xcb
   103e0:	eb00241b 	bl	19454 <assertion_failed>
   103e4:	e5943010 	ldr	r3, [r4, #16]
   103e8:	e3530000 	cmp	r3, #0
   103ec:	1a000005 	bne	10408 <CUSBHIDDevice::StartRequest()+0x6c>
   103f0:	e30518c4 	movw	r1, #22724	; 0x58c4
   103f4:	e3401002 	movt	r1, #2
   103f8:	e3050924 	movw	r0, #22820	; 0x5924
   103fc:	e3400002 	movt	r0, #2
   10400:	e3a020cc 	mov	r2, #204	; 0xcc
   10404:	eb002412 	bl	19454 <assertion_failed>
   10408:	e3a00028 	mov	r0, #40	; 0x28
   1040c:	e3a05000 	mov	r5, #0
   10410:	ebfff341 	bl	d11c <CUSBRequest::operator new(unsigned int)>
   10414:	e5943010 	ldr	r3, [r4, #16]
   10418:	e1a06000 	mov	r6, r0
   1041c:	e5942020 	ldr	r2, [r4, #32]
   10420:	e5941014 	ldr	r1, [r4, #20]
   10424:	e58d5000 	str	r5, [sp]
   10428:	ebfff2a2 	bl	ceb8 <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)>
   1042c:	e1a02005 	mov	r2, r5
   10430:	e1a03004 	mov	r3, r4
   10434:	e1a00006 	mov	r0, r6
   10438:	e584601c 	str	r6, [r4, #28]
   1043c:	e3001594 	movw	r1, #1428	; 0x594
   10440:	e3401001 	movt	r1, #1
   10444:	ebfff313 	bl	d098 <CUSBRequest::SetCompletionRoutine(void (*)(CUSBRequest*, void*, void*), void*, void*)>
   10448:	e1a00004 	mov	r0, r4
   1044c:	eb000ad4 	bl	12fa4 <CUSBFunction::GetHost() const>
   10450:	e5903000 	ldr	r3, [r0]
   10454:	e1a02005 	mov	r2, r5
   10458:	e594101c 	ldr	r1, [r4, #28]
   1045c:	e593300c 	ldr	r3, [r3, #12]
   10460:	e28dd008 	add	sp, sp, #8
   10464:	e8bd4070 	pop	{r4, r5, r6, lr}
   10468:	e12fff13 	bx	r3
   1046c:	e30518c4 	movw	r1, #22724	; 0x58c4
   10470:	e3401002 	movt	r1, #2
   10474:	e3050954 	movw	r0, #22868	; 0x5954
   10478:	e3400002 	movt	r0, #2
   1047c:	e3a020c9 	mov	r2, #201	; 0xc9
   10480:	eb0023f3 	bl	19454 <assertion_failed>
   10484:	eaffffcd 	b	103c0 <CUSBHIDDevice::StartRequest()+0x24>
   10488:	e30518c4 	movw	r1, #22724	; 0x58c4
   1048c:	e3401002 	movt	r1, #2
   10490:	e3050988 	movw	r0, #22920	; 0x5988
   10494:	e3400002 	movt	r0, #2
   10498:	e3a020c8 	mov	r2, #200	; 0xc8
   1049c:	eb0023ec 	bl	19454 <assertion_failed>
   104a0:	eaffffc3 	b	103b4 <CUSBHIDDevice::StartRequest()+0x18>

000104a4 <CUSBHIDDevice::CompletionRoutine(CUSBRequest*)>:
   104a4:	e92d4070 	push	{r4, r5, r6, lr}
   104a8:	e1a04000 	mov	r4, r0
   104ac:	e2515000 	subs	r5, r1, #0
   104b0:	0a000030 	beq	10578 <CUSBHIDDevice::CompletionRoutine(CUSBRequest*)+0xd4>
   104b4:	e594301c 	ldr	r3, [r4, #28]
   104b8:	e1530005 	cmp	r3, r5
   104bc:	0a000005 	beq	104d8 <CUSBHIDDevice::CompletionRoutine(CUSBRequest*)+0x34>
   104c0:	e30518c4 	movw	r1, #22724	; 0x58c4
   104c4:	e3401002 	movt	r1, #2
   104c8:	e30509a0 	movw	r0, #22944	; 0x59a0
   104cc:	e3400002 	movt	r0, #2
   104d0:	e3a020d7 	mov	r2, #215	; 0xd7
   104d4:	eb0023de 	bl	19454 <assertion_failed>
   104d8:	e1a00005 	mov	r0, r5
   104dc:	ebfff2b1 	bl	cfa8 <CUSBRequest::GetStatus() const>
   104e0:	e5943000 	ldr	r3, [r4]
   104e4:	e2502000 	subs	r2, r0, #0
   104e8:	1a000019 	bne	10554 <CUSBHIDDevice::CompletionRoutine(CUSBRequest*)+0xb0>
   104ec:	e1a01002 	mov	r1, r2
   104f0:	e1a00004 	mov	r0, r4
   104f4:	e5933020 	ldr	r3, [r3, #32]
   104f8:	e12fff33 	blx	r3
   104fc:	e594501c 	ldr	r5, [r4, #28]
   10500:	e3550000 	cmp	r5, #0
   10504:	0a000004 	beq	1051c <CUSBHIDDevice::CompletionRoutine(CUSBRequest*)+0x78>
   10508:	e1a00005 	mov	r0, r5
   1050c:	ebfff290 	bl	cf54 <CUSBRequest::~CUSBRequest()>
   10510:	e1a00005 	mov	r0, r5
   10514:	e3a01028 	mov	r1, #40	; 0x28
   10518:	ebfff318 	bl	d180 <CUSBRequest::operator delete(void*, unsigned int)>
   1051c:	e3a03000 	mov	r3, #0
   10520:	e1a00004 	mov	r0, r4
   10524:	e584301c 	str	r3, [r4, #28]
   10528:	ebffff9b 	bl	1039c <CUSBHIDDevice::StartRequest()>
   1052c:	e3500000 	cmp	r0, #0
   10530:	18bd8070 	popne	{r4, r5, r6, pc}
   10534:	eb002e24 	bl	1bdcc <CLogger::Get()>
   10538:	e30539b0 	movw	r3, #22960	; 0x59b0
   1053c:	e3403002 	movt	r3, #2
   10540:	e3051890 	movw	r1, #22672	; 0x5890
   10544:	e3401002 	movt	r1, #2
   10548:	e3a02001 	mov	r2, #1
   1054c:	e8bd4070 	pop	{r4, r5, r6, lr}
   10550:	ea002d54 	b	1baa8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   10554:	e5946020 	ldr	r6, [r4, #32]
   10558:	e1a00005 	mov	r0, r5
   1055c:	e5935020 	ldr	r5, [r3, #32]
   10560:	ebfff292 	bl	cfb0 <CUSBRequest::GetResultLength() const>
   10564:	e1a01006 	mov	r1, r6
   10568:	e1a02000 	mov	r2, r0
   1056c:	e1a00004 	mov	r0, r4
   10570:	e12fff35 	blx	r5
   10574:	eaffffe0 	b	104fc <CUSBHIDDevice::CompletionRoutine(CUSBRequest*)+0x58>
   10578:	e30518c4 	movw	r1, #22724	; 0x58c4
   1057c:	e3401002 	movt	r1, #2
   10580:	e304030c 	movw	r0, #17164	; 0x430c
   10584:	e3400002 	movt	r0, #2
   10588:	e3a020d6 	mov	r2, #214	; 0xd6
   1058c:	eb0023b0 	bl	19454 <assertion_failed>
   10590:	eaffffc7 	b	104b4 <CUSBHIDDevice::CompletionRoutine(CUSBRequest*)+0x10>

00010594 <CUSBHIDDevice::CompletionStub(CUSBRequest*, void*, void*)>:
   10594:	e92d4070 	push	{r4, r5, r6, lr}
   10598:	e1a05000 	mov	r5, r0
   1059c:	e2524000 	subs	r4, r2, #0
   105a0:	0a000003 	beq	105b4 <CUSBHIDDevice::CompletionStub(CUSBRequest*, void*, void*)+0x20>
   105a4:	e1a01005 	mov	r1, r5
   105a8:	e1a00004 	mov	r0, r4
   105ac:	e8bd4070 	pop	{r4, r5, r6, lr}
   105b0:	eaffffbb 	b	104a4 <CUSBHIDDevice::CompletionRoutine(CUSBRequest*)>
   105b4:	e30518c4 	movw	r1, #22724	; 0x58c4
   105b8:	e3401002 	movt	r1, #2
   105bc:	e3040220 	movw	r0, #16928	; 0x4220
   105c0:	e3400002 	movt	r0, #2
   105c4:	e3a020ee 	mov	r2, #238	; 0xee
   105c8:	eb0023a1 	bl	19454 <assertion_failed>
   105cc:	e1a01005 	mov	r1, r5
   105d0:	e1a00004 	mov	r0, r4
   105d4:	e8bd4070 	pop	{r4, r5, r6, lr}
   105d8:	eaffffb1 	b	104a4 <CUSBHIDDevice::CompletionRoutine(CUSBRequest*)>

000105dc <CUSBMouseDevice::~CUSBMouseDevice()>:
   105dc:	e92d4010 	push	{r4, lr}
   105e0:	e1a04000 	mov	r4, r0
   105e4:	e5900024 	ldr	r0, [r0, #36]	; 0x24
   105e8:	e59f3044 	ldr	r3, [pc, #68]	; 10634 <CUSBMouseDevice::~CUSBMouseDevice()+0x58>
   105ec:	e5843000 	str	r3, [r4]
   105f0:	e3500000 	cmp	r0, #0
   105f4:	0a000002 	beq	10604 <CUSBMouseDevice::~CUSBMouseDevice()+0x28>
   105f8:	e5903000 	ldr	r3, [r0]
   105fc:	e5933004 	ldr	r3, [r3, #4]
   10600:	e12fff33 	blx	r3
   10604:	e5940028 	ldr	r0, [r4, #40]	; 0x28
   10608:	e3a03000 	mov	r3, #0
   1060c:	e5843024 	str	r3, [r4, #36]	; 0x24
   10610:	e1500003 	cmp	r0, r3
   10614:	0a000000 	beq	1061c <CUSBMouseDevice::~CUSBMouseDevice()+0x40>
   10618:	eb00469b 	bl	2208c <operator delete[](void*)>
   1061c:	e3a03000 	mov	r3, #0
   10620:	e1a00004 	mov	r0, r4
   10624:	e5843028 	str	r3, [r4, #40]	; 0x28
   10628:	ebfffdfd 	bl	fe24 <CUSBHIDDevice::~CUSBHIDDevice()>
   1062c:	e1a00004 	mov	r0, r4
   10630:	e8bd8010 	pop	{r4, pc}
   10634:	000259d0 	.word	0x000259d0

00010638 <CUSBMouseDevice::~CUSBMouseDevice()>:
   10638:	e92d4010 	push	{r4, lr}
   1063c:	e1a04000 	mov	r4, r0
   10640:	ebffffe5 	bl	105dc <CUSBMouseDevice::~CUSBMouseDevice()>
   10644:	e1a00004 	mov	r0, r4
   10648:	e3a01030 	mov	r1, #48	; 0x30
   1064c:	eb00468f 	bl	22090 <operator delete(void*, unsigned int)>
   10650:	e1a00004 	mov	r0, r4
   10654:	e8bd8010 	pop	{r4, pc}

00010658 <CUSBMouseDevice::Configure()>:
   10658:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   1065c:	e3a01021 	mov	r1, #33	; 0x21
   10660:	e1a04000 	mov	r4, r0
   10664:	e24dd014 	sub	sp, sp, #20
   10668:	eb000a8f 	bl	130ac <CUSBFunction::GetDescriptor(unsigned char)>
   1066c:	e2505000 	subs	r5, r0, #0
   10670:	0a000003 	beq	10684 <CUSBMouseDevice::Configure()+0x2c>
   10674:	e1d530b7 	ldrh	r3, [r5, #7]
   10678:	e6ff0073 	uxth	r0, r3
   1067c:	e3500000 	cmp	r0, #0
   10680:	1a000005 	bne	1069c <CUSBMouseDevice::Configure()+0x44>
   10684:	e1a00004 	mov	r0, r4
   10688:	e59f10f4 	ldr	r1, [pc, #244]	; 10784 <CUSBMouseDevice::Configure()+0x12c>
   1068c:	eb000a99 	bl	130f8 <CUSBFunction::ConfigurationError(char const*) const>
   10690:	e3a00000 	mov	r0, #0
   10694:	e28dd014 	add	sp, sp, #20
   10698:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   1069c:	e1c432bc 	strh	r3, [r4, #44]	; 0x2c
   106a0:	eb004677 	bl	22084 <operator new[](unsigned int)>
   106a4:	e5840028 	str	r0, [r4, #40]	; 0x28
   106a8:	e1a00004 	mov	r0, r4
   106ac:	eb000a3c 	bl	12fa4 <CUSBFunction::GetHost() const>
   106b0:	e1a06000 	mov	r6, r0
   106b4:	e1a00004 	mov	r0, r4
   106b8:	eb000a28 	bl	12f60 <CUSBFunction::GetEndpoint0() const>
   106bc:	e5d55006 	ldrb	r5, [r5, #6]
   106c0:	e1a07000 	mov	r7, r0
   106c4:	e5949028 	ldr	r9, [r4, #40]	; 0x28
   106c8:	e1d482bc 	ldrh	r8, [r4, #44]	; 0x2c
   106cc:	e1a00004 	mov	r0, r4
   106d0:	eb000ae2 	bl	13260 <CUSBFunction::GetInterfaceNumber() const>
   106d4:	e3a0c081 	mov	ip, #129	; 0x81
   106d8:	e6ff0070 	uxth	r0, r0
   106dc:	e3a03000 	mov	r3, #0
   106e0:	e58d000c 	str	r0, [sp, #12]
   106e4:	e1a02005 	mov	r2, r5
   106e8:	e58d9000 	str	r9, [sp]
   106ec:	e1a01007 	mov	r1, r7
   106f0:	e58d8004 	str	r8, [sp, #4]
   106f4:	e1a00006 	mov	r0, r6
   106f8:	e58dc008 	str	ip, [sp, #8]
   106fc:	ebfff1a0 	bl	cd84 <CUSBHostController::GetDescriptor(CUSBEndpoint*, unsigned char, unsigned char, void*, unsigned int, unsigned char, unsigned short)>
   10700:	e1d432bc 	ldrh	r3, [r4, #44]	; 0x2c
   10704:	e1500003 	cmp	r0, r3
   10708:	0a000008 	beq	10730 <CUSBMouseDevice::Configure()+0xd8>
   1070c:	eb002dae 	bl	1bdcc <CLogger::Get()>
   10710:	e3a02001 	mov	r2, #1
   10714:	e59f1068 	ldr	r1, [pc, #104]	; 10784 <CUSBMouseDevice::Configure()+0x12c>
   10718:	e30539fc 	movw	r3, #23036	; 0x59fc
   1071c:	e3403002 	movt	r3, #2
   10720:	eb002ce0 	bl	1baa8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   10724:	e3a00000 	mov	r0, #0
   10728:	e28dd014 	add	sp, sp, #20
   1072c:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   10730:	e3a01000 	mov	r1, #0
   10734:	e1a00004 	mov	r0, r4
   10738:	ebfffde4 	bl	fed0 <CUSBHIDDevice::Configure(unsigned int)>
   1073c:	e3500000 	cmp	r0, #0
   10740:	0a000008 	beq	10768 <CUSBMouseDevice::Configure()+0x110>
   10744:	e3a00028 	mov	r0, #40	; 0x28
   10748:	eb00464c 	bl	22080 <operator new(unsigned int)>
   1074c:	e1a05000 	mov	r5, r0
   10750:	eb001d46 	bl	17c70 <CMouseDevice::CMouseDevice()>
   10754:	e5845024 	str	r5, [r4, #36]	; 0x24
   10758:	e1a00004 	mov	r0, r4
   1075c:	e28dd014 	add	sp, sp, #20
   10760:	e8bd43f0 	pop	{r4, r5, r6, r7, r8, r9, lr}
   10764:	eaffff0c 	b	1039c <CUSBHIDDevice::StartRequest()>
   10768:	eb002d97 	bl	1bdcc <CLogger::Get()>
   1076c:	e30537a0 	movw	r3, #22432	; 0x57a0
   10770:	e3403002 	movt	r3, #2
   10774:	e3a02001 	mov	r2, #1
   10778:	e59f1004 	ldr	r1, [pc, #4]	; 10784 <CUSBMouseDevice::Configure()+0x12c>
   1077c:	eb002cc9 	bl	1baa8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   10780:	eaffffc2 	b	10690 <CUSBMouseDevice::Configure()+0x38>
   10784:	000259f4 	.word	0x000259f4

00010788 <CUSBMouseDevice::ReportHandler(unsigned char const*, unsigned int)>:
   10788:	e2422003 	sub	r2, r2, #3
   1078c:	e3510000 	cmp	r1, #0
   10790:	e16f2f12 	clz	r2, r2
   10794:	e1a0c001 	mov	ip, r1
   10798:	e1a022a2 	lsr	r2, r2, #5
   1079c:	03a02000 	moveq	r2, #0
   107a0:	e3520000 	cmp	r2, #0
   107a4:	012fff1e 	bxeq	lr
   107a8:	e5d13000 	ldrb	r3, [r1]
   107ac:	e5900024 	ldr	r0, [r0, #36]	; 0x24
   107b0:	e3130002 	tst	r3, #2
   107b4:	e2031001 	and	r1, r3, #1
   107b8:	13811002 	orrne	r1, r1, #2
   107bc:	e3130004 	tst	r3, #4
   107c0:	13811004 	orrne	r1, r1, #4
   107c4:	e3500000 	cmp	r0, #0
   107c8:	012fff1e 	bxeq	lr
   107cc:	e1dc30d2 	ldrsb	r3, [ip, #2]
   107d0:	e1dc20d1 	ldrsb	r2, [ip, #1]
   107d4:	ea001d63 	b	17d68 <CMouseDevice::ReportHandler(unsigned int, int, int)>

000107d8 <CUSBMouseDevice::CUSBMouseDevice(CUSBFunction*)>:
   107d8:	e92d4010 	push	{r4, lr}
   107dc:	e1a04000 	mov	r4, r0
   107e0:	e3a02003 	mov	r2, #3
   107e4:	ebfffd7a 	bl	fdd4 <CUSBHIDDevice::CUSBHIDDevice(CUSBFunction*, unsigned int)>
   107e8:	e59f2014 	ldr	r2, [pc, #20]	; 10804 <CUSBMouseDevice::CUSBMouseDevice(CUSBFunction*)+0x2c>
   107ec:	e3a03000 	mov	r3, #0
   107f0:	e1a00004 	mov	r0, r4
   107f4:	e5842000 	str	r2, [r4]
   107f8:	e5843024 	str	r3, [r4, #36]	; 0x24
   107fc:	e5843028 	str	r3, [r4, #40]	; 0x28
   10800:	e8bd8010 	pop	{r4, pc}
   10804:	000259d0 	.word	0x000259d0

00010808 <CUSBGamePadStandardDevice::~CUSBGamePadStandardDevice()>:
   10808:	e92d4010 	push	{r4, lr}
   1080c:	e1a04000 	mov	r4, r0
   10810:	e5900134 	ldr	r0, [r0, #308]	; 0x134
   10814:	e59f3024 	ldr	r3, [pc, #36]	; 10840 <CUSBGamePadStandardDevice::~CUSBGamePadStandardDevice()+0x38>
   10818:	e5843000 	str	r3, [r4]
   1081c:	e3500000 	cmp	r0, #0
   10820:	0a000000 	beq	10828 <CUSBGamePadStandardDevice::~CUSBGamePadStandardDevice()+0x20>
   10824:	eb004618 	bl	2208c <operator delete[](void*)>
   10828:	e3a03000 	mov	r3, #0
   1082c:	e1a00004 	mov	r0, r4
   10830:	e5843134 	str	r3, [r4, #308]	; 0x134
   10834:	eb001b10 	bl	1747c <CUSBGamePadDevice::~CUSBGamePadDevice()>
   10838:	e1a00004 	mov	r0, r4
   1083c:	e8bd8010 	pop	{r4, pc}
   10840:	00025a28 	.word	0x00025a28

00010844 <CUSBGamePadStandardDevice::~CUSBGamePadStandardDevice()>:
   10844:	e92d4010 	push	{r4, lr}
   10848:	e1a04000 	mov	r4, r0
   1084c:	ebffffed 	bl	10808 <CUSBGamePadStandardDevice::~CUSBGamePadStandardDevice()>
   10850:	e1a00004 	mov	r0, r4
   10854:	e3a01f4f 	mov	r1, #316	; 0x13c
   10858:	eb00460c 	bl	22090 <operator delete(void*, unsigned int)>
   1085c:	e1a00004 	mov	r0, r4
   10860:	e8bd8010 	pop	{r4, pc}

00010864 <CUSBGamePadStandardDevice::CUSBGamePadStandardDevice(CUSBFunction*, bool)>:
   10864:	e92d4070 	push	{r4, r5, r6, lr}
   10868:	e1a04000 	mov	r4, r0
   1086c:	e1a05002 	mov	r5, r2
   10870:	eb001aef 	bl	17434 <CUSBGamePadDevice::CUSBGamePadDevice(CUSBFunction*)>
   10874:	e2841f4e 	add	r1, r4, #312	; 0x138
   10878:	e59fc018 	ldr	ip, [pc, #24]	; 10898 <CUSBGamePadStandardDevice::CUSBGamePadStandardDevice(CUSBFunction*, bool)+0x34>
   1087c:	e3a03000 	mov	r3, #0
   10880:	e5c45130 	strb	r5, [r4, #304]	; 0x130
   10884:	e1a00004 	mov	r0, r4
   10888:	e584c000 	str	ip, [r4]
   1088c:	e5843134 	str	r3, [r4, #308]	; 0x134
   10890:	e1c130b0 	strh	r3, [r1]
   10894:	e8bd8070 	pop	{r4, r5, r6, pc}
   10898:	00025a28 	.word	0x00025a28

0001089c <CUSBGamePadStandardDevice::BitGetUnsigned(void const*, unsigned int, unsigned int)>:
   1089c:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   108a0:	e081e002 	add	lr, r1, r2
   108a4:	e28e8007 	add	r8, lr, #7
   108a8:	e1a041a1 	lsr	r4, r1, #3
   108ac:	e1a031a8 	lsr	r3, r8, #3
   108b0:	e1540003 	cmp	r4, r3
   108b4:	e24dd00c 	sub	sp, sp, #12
   108b8:	23a00000 	movcs	r0, #0
   108bc:	2a000030 	bcs	10984 <CUSBGamePadStandardDevice::BitGetUnsigned(void const*, unsigned int, unsigned int)+0xe8>
   108c0:	e2011007 	and	r1, r1, #7
   108c4:	e1a09000 	mov	r9, r0
   108c8:	e3a05001 	mov	r5, #1
   108cc:	e0810002 	add	r0, r1, r2
   108d0:	e24ee001 	sub	lr, lr, #1
   108d4:	e244c001 	sub	ip, r4, #1
   108d8:	e1a06115 	lsl	r6, r5, r1
   108dc:	e2498001 	sub	r8, r9, #1
   108e0:	e1a05015 	lsl	r5, r5, r0
   108e4:	e6ef6076 	uxtb	r6, r6
   108e8:	e6ef5075 	uxtb	r5, r5
   108ec:	e266a000 	rsb	sl, r6, #0
   108f0:	e2450001 	sub	r0, r5, #1
   108f4:	e0455006 	sub	r5, r5, r6
   108f8:	e3a06000 	mov	r6, #0
   108fc:	e6ef0070 	uxtb	r0, r0
   10900:	e1a0e1ae 	lsr	lr, lr, #3
   10904:	e58d0004 	str	r0, [sp, #4]
   10908:	e6ef5075 	uxtb	r5, r5
   1090c:	e6efa07a 	uxtb	sl, sl
   10910:	e261b008 	rsb	fp, r1, #8
   10914:	e089c00c 	add	ip, r9, ip
   10918:	e0888003 	add	r8, r8, r3
   1091c:	e1a00006 	mov	r0, r6
   10920:	ea000008 	b	10948 <CUSBGamePadStandardDevice::BitGetUnsigned(void const*, unsigned int, unsigned int)+0xac>
   10924:	e15e0003 	cmp	lr, r3
   10928:	12866008 	addne	r6, r6, #8
   1092c:	10423006 	subne	r3, r2, r6
   10930:	059d3004 	ldreq	r3, [sp, #4]
   10934:	11800317 	orrne	r0, r0, r7, lsl r3
   10938:	00077003 	andeq	r7, r7, r3
   1093c:	01800007 	orreq	r0, r0, r7
   10940:	e15c0008 	cmp	ip, r8
   10944:	0a00000e 	beq	10984 <CUSBGamePadStandardDevice::BitGetUnsigned(void const*, unsigned int, unsigned int)+0xe8>
   10948:	e5fc7001 	ldrb	r7, [ip, #1]!
   1094c:	e15e0004 	cmp	lr, r4
   10950:	00050007 	andeq	r0, r5, r7
   10954:	01a00150 	asreq	r0, r0, r1
   10958:	0afffff8 	beq	10940 <CUSBGamePadStandardDevice::BitGetUnsigned(void const*, unsigned int, unsigned int)+0xa4>
   1095c:	e04c3009 	sub	r3, ip, r9
   10960:	e1530004 	cmp	r3, r4
   10964:	1affffee 	bne	10924 <CUSBGamePadStandardDevice::BitGetUnsigned(void const*, unsigned int, unsigned int)+0x88>
   10968:	e086600b 	add	r6, r6, fp
   1096c:	e00a0007 	and	r0, sl, r7
   10970:	e1a00150 	asr	r0, r0, r1
   10974:	e0423006 	sub	r3, r2, r6
   10978:	e15c0008 	cmp	ip, r8
   1097c:	e1a00310 	lsl	r0, r0, r3
   10980:	1afffff0 	bne	10948 <CUSBGamePadStandardDevice::BitGetUnsigned(void const*, unsigned int, unsigned int)+0xac>
   10984:	e28dd00c 	add	sp, sp, #12
   10988:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

0001098c <CUSBGamePadStandardDevice::BitGetSigned(void const*, unsigned int, unsigned int)>:
   1098c:	e92d4010 	push	{r4, lr}
   10990:	e1a04002 	mov	r4, r2
   10994:	ebffffc0 	bl	1089c <CUSBGamePadStandardDevice::BitGetUnsigned(void const*, unsigned int, unsigned int)>
   10998:	e2423001 	sub	r3, r2, #1
   1099c:	e3a02001 	mov	r2, #1
   109a0:	e0103312 	ands	r3, r0, r2, lsl r3
   109a4:	11a02412 	lslne	r2, r2, r4
   109a8:	12622000 	rsbne	r2, r2, #0
   109ac:	11800002 	orrne	r0, r0, r2
   109b0:	e8bd8010 	pop	{r4, pc}

000109b4 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)>:
   109b4:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   109b8:	e1a0b000 	mov	fp, r0
   109bc:	e5905134 	ldr	r5, [r0, #308]	; 0x134
   109c0:	e24dd034 	sub	sp, sp, #52	; 0x34
   109c4:	e1a08001 	mov	r8, r1
   109c8:	e3550000 	cmp	r5, #0
   109cc:	0a0000a1 	beq	10c58 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x2a4>
   109d0:	e28b3f4e 	add	r3, fp, #312	; 0x138
   109d4:	e1d340b0 	ldrh	r4, [r3]
   109d8:	e3540000 	cmp	r4, #0
   109dc:	0a000106 	beq	10dfc <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x448>
   109e0:	e3a07000 	mov	r7, #0
   109e4:	e30392eb 	movw	r9, #13035	; 0x32eb
   109e8:	e34f98a4 	movt	r9, #63652	; 0xf8a4
   109ec:	e58d900c 	str	r9, [sp, #12]
   109f0:	e58d901c 	str	r9, [sp, #28]
   109f4:	e1a06007 	mov	r6, r7
   109f8:	e58d9004 	str	r9, [sp, #4]
   109fc:	e1a0a007 	mov	sl, r7
   10a00:	e58d9008 	str	r9, [sp, #8]
   10a04:	e1a09008 	mov	r9, r8
   10a08:	e58db010 	str	fp, [sp, #16]
   10a0c:	e1a0b007 	mov	fp, r7
   10a10:	e58d7018 	str	r7, [sp, #24]
   10a14:	e58d7014 	str	r7, [sp, #20]
   10a18:	e58d7000 	str	r7, [sp]
   10a1c:	ea00000e 	b	10a5c <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0xa8>
   10a20:	e3530034 	cmp	r3, #52	; 0x34
   10a24:	0a000064 	beq	10bbc <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x208>
   10a28:	ca000039 	bgt	10b14 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x160>
   10a2c:	e3530008 	cmp	r3, #8
   10a30:	0a000059 	beq	10b9c <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x1e8>
   10a34:	da000062 	ble	10bc4 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x210>
   10a38:	e3530014 	cmp	r3, #20
   10a3c:	058d801c 	streq	r8, [sp, #28]
   10a40:	0a000003 	beq	10a54 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0xa0>
   10a44:	e59d2004 	ldr	r2, [sp, #4]
   10a48:	e3530024 	cmp	r3, #36	; 0x24
   10a4c:	01a02008 	moveq	r2, r8
   10a50:	e58d2004 	str	r2, [sp, #4]
   10a54:	e3540000 	cmp	r4, #0
   10a58:	0a000022 	beq	10ae8 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x134>
   10a5c:	e1d530d0 	ldrsb	r3, [r5]
   10a60:	e2038003 	and	r8, r3, #3
   10a64:	e3580001 	cmp	r8, #1
   10a68:	0a00003b 	beq	10b5c <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x1a8>
   10a6c:	e3580002 	cmp	r8, #2
   10a70:	0a000032 	beq	10b40 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x18c>
   10a74:	e3580000 	cmp	r8, #0
   10a78:	0a00003c 	beq	10b70 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x1bc>
   10a7c:	e1d580d3 	ldrsb	r8, [r5, #3]
   10a80:	e2444005 	sub	r4, r4, #5
   10a84:	e1d500d2 	ldrsb	r0, [r5, #2]
   10a88:	e6ff4074 	uxth	r4, r4
   10a8c:	e1d510d1 	ldrsb	r1, [r5, #1]
   10a90:	e2855005 	add	r5, r5, #5
   10a94:	e15520d1 	ldrsb	r2, [r5, #-1]
   10a98:	e1a08808 	lsl	r8, r8, #16
   10a9c:	e1888400 	orr	r8, r8, r0, lsl #8
   10aa0:	e1888001 	orr	r8, r8, r1
   10aa4:	e1888c02 	orr	r8, r8, r2, lsl #24
   10aa8:	e20330fc 	and	r3, r3, #252	; 0xfc
   10aac:	e3530084 	cmp	r3, #132	; 0x84
   10ab0:	1affffda 	bne	10a20 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x6c>
   10ab4:	e3560000 	cmp	r6, #0
   10ab8:	1a00000a 	bne	10ae8 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x134>
   10abc:	e1a01006 	mov	r1, r6
   10ac0:	e3a02008 	mov	r2, #8
   10ac4:	e1a00009 	mov	r0, r9
   10ac8:	ebffff73 	bl	1089c <CUSBGamePadStandardDevice::BitGetUnsigned(void const*, unsigned int, unsigned int)>
   10acc:	e3500000 	cmp	r0, #0
   10ad0:	11500008 	cmpne	r0, r8
   10ad4:	1a00000c 	bne	10b0c <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x158>
   10ad8:	e1a06008 	mov	r6, r8
   10adc:	e3a0a008 	mov	sl, #8
   10ae0:	e3540000 	cmp	r4, #0
   10ae4:	1affffdc 	bne	10a5c <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0xa8>
   10ae8:	e28a4007 	add	r4, sl, #7
   10aec:	e59db010 	ldr	fp, [sp, #16]
   10af0:	e7ef41d4 	ubfx	r4, r4, #3, #16
   10af4:	e28b3f4a 	add	r3, fp, #296	; 0x128
   10af8:	e59d2014 	ldr	r2, [sp, #20]
   10afc:	e58b2024 	str	r2, [fp, #36]	; 0x24
   10b00:	e59d2018 	ldr	r2, [sp, #24]
   10b04:	e58b20e8 	str	r2, [fp, #232]	; 0xe8
   10b08:	e1c340b0 	strh	r4, [r3]
   10b0c:	e28dd034 	add	sp, sp, #52	; 0x34
   10b10:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10b14:	e3530074 	cmp	r3, #116	; 0x74
   10b18:	01a0b008 	moveq	fp, r8
   10b1c:	0affffcc 	beq	10a54 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0xa0>
   10b20:	da00002e 	ble	10be0 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x22c>
   10b24:	e3530080 	cmp	r3, #128	; 0x80
   10b28:	0a000014 	beq	10b80 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x1cc>
   10b2c:	e59d2000 	ldr	r2, [sp]
   10b30:	e3530094 	cmp	r3, #148	; 0x94
   10b34:	01a02008 	moveq	r2, r8
   10b38:	e58d2000 	str	r2, [sp]
   10b3c:	eaffffc4 	b	10a54 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0xa0>
   10b40:	e5d58001 	ldrb	r8, [r5, #1]
   10b44:	e2444003 	sub	r4, r4, #3
   10b48:	e1d520d2 	ldrsb	r2, [r5, #2]
   10b4c:	e6ff4074 	uxth	r4, r4
   10b50:	e2855003 	add	r5, r5, #3
   10b54:	e1888402 	orr	r8, r8, r2, lsl #8
   10b58:	eaffffd2 	b	10aa8 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0xf4>
   10b5c:	e2444002 	sub	r4, r4, #2
   10b60:	e1d580d1 	ldrsb	r8, [r5, #1]
   10b64:	e6ff4074 	uxth	r4, r4
   10b68:	e2855002 	add	r5, r5, #2
   10b6c:	eaffffcd 	b	10aa8 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0xf4>
   10b70:	e2444001 	sub	r4, r4, #1
   10b74:	e2855001 	add	r5, r5, #1
   10b78:	e6ff4074 	uxth	r4, r4
   10b7c:	eaffffc9 	b	10aa8 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0xf4>
   10b80:	e59d2000 	ldr	r2, [sp]
   10b84:	e2083003 	and	r3, r8, #3
   10b88:	e3530002 	cmp	r3, #2
   10b8c:	e008029b 	mul	r8, fp, r2
   10b90:	0a00001c 	beq	10c08 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x254>
   10b94:	e08aa008 	add	sl, sl, r8
   10b98:	eaffffad 	b	10a54 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0xa0>
   10b9c:	e3580036 	cmp	r8, #54	; 0x36
   10ba0:	ca000013 	bgt	10bf4 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x240>
   10ba4:	e3580030 	cmp	r8, #48	; 0x30
   10ba8:	aa000027 	bge	10c4c <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x298>
   10bac:	e2488004 	sub	r8, r8, #4
   10bb0:	e3580001 	cmp	r8, #1
   10bb4:	93a07001 	movls	r7, #1
   10bb8:	eaffffa5 	b	10a54 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0xa0>
   10bbc:	e58d800c 	str	r8, [sp, #12]
   10bc0:	eaffffa3 	b	10a54 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0xa0>
   10bc4:	e3530004 	cmp	r3, #4
   10bc8:	1affffa1 	bne	10a54 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0xa0>
   10bcc:	e3580009 	cmp	r8, #9
   10bd0:	1affff9f 	bne	10a54 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0xa0>
   10bd4:	e3570001 	cmp	r7, #1
   10bd8:	03a07002 	moveq	r7, #2
   10bdc:	eaffff9c 	b	10a54 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0xa0>
   10be0:	e59d2008 	ldr	r2, [sp, #8]
   10be4:	e3530044 	cmp	r3, #68	; 0x44
   10be8:	01a02008 	moveq	r2, r8
   10bec:	e58d2008 	str	r2, [sp, #8]
   10bf0:	eaffff97 	b	10a54 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0xa0>
   10bf4:	e3580039 	cmp	r8, #57	; 0x39
   10bf8:	1affff95 	bne	10a54 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0xa0>
   10bfc:	e3570001 	cmp	r7, #1
   10c00:	03a07004 	moveq	r7, #4
   10c04:	eaffff92 	b	10a54 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0xa0>
   10c08:	e3570003 	cmp	r7, #3
   10c0c:	0a000019 	beq	10c78 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x2c4>
   10c10:	e3570004 	cmp	r7, #4
   10c14:	0a000048 	beq	10d3c <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x388>
   10c18:	e3570002 	cmp	r7, #2
   10c1c:	1affffdc 	bne	10b94 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x1e0>
   10c20:	e59d3010 	ldr	r3, [sp, #16]
   10c24:	e1a0100a 	mov	r1, sl
   10c28:	e59d2000 	ldr	r2, [sp]
   10c2c:	e1a00009 	mov	r0, r9
   10c30:	e3a07001 	mov	r7, #1
   10c34:	e5832104 	str	r2, [r3, #260]	; 0x104
   10c38:	e1a02008 	mov	r2, r8
   10c3c:	ebffff16 	bl	1089c <CUSBGamePadStandardDevice::BitGetUnsigned(void const*, unsigned int, unsigned int)>
   10c40:	e59d3010 	ldr	r3, [sp, #16]
   10c44:	e5830108 	str	r0, [r3, #264]	; 0x108
   10c48:	eaffffd1 	b	10b94 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x1e0>
   10c4c:	e3570001 	cmp	r7, #1
   10c50:	03a07003 	moveq	r7, #3
   10c54:	eaffff7e 	b	10a54 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0xa0>
   10c58:	e3051a74 	movw	r1, #23156	; 0x5a74
   10c5c:	e3401002 	movt	r1, #2
   10c60:	e3050a8c 	movw	r0, #23180	; 0x5a8c
   10c64:	e3400002 	movt	r0, #2
   10c68:	e3a020a2 	mov	r2, #162	; 0xa2
   10c6c:	eb0021f8 	bl	19454 <assertion_failed>
   10c70:	e59b5134 	ldr	r5, [fp, #308]	; 0x134
   10c74:	eaffff55 	b	109d0 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x1c>
   10c78:	e3520000 	cmp	r2, #0
   10c7c:	0a000054 	beq	10dd4 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x420>
   10c80:	e59d0014 	ldr	r0, [sp, #20]
   10c84:	e3a0300c 	mov	r3, #12
   10c88:	e59d2010 	ldr	r2, [sp, #16]
   10c8c:	e303c2eb 	movw	ip, #13035	; 0x32eb
   10c90:	e34fc8a4 	movt	ip, #63652	; 0xf8a4
   10c94:	e59d100c 	ldr	r1, [sp, #12]
   10c98:	e59de008 	ldr	lr, [sp, #8]
   10c9c:	e0272093 	mla	r7, r3, r0, r2
   10ca0:	e59d301c 	ldr	r3, [sp, #28]
   10ca4:	e58d5014 	str	r5, [sp, #20]
   10ca8:	e1a0500a 	mov	r5, sl
   10cac:	e1a02003 	mov	r2, r3
   10cb0:	e153000c 	cmp	r3, ip
   10cb4:	e59d3004 	ldr	r3, [sp, #4]
   10cb8:	01a02001 	moveq	r2, r1
   10cbc:	e58d4020 	str	r4, [sp, #32]
   10cc0:	e153000c 	cmp	r3, ip
   10cc4:	e1a01003 	mov	r1, r3
   10cc8:	01a0100e 	moveq	r1, lr
   10ccc:	e3a03000 	mov	r3, #0
   10cd0:	e58da024 	str	sl, [sp, #36]	; 0x24
   10cd4:	e1a04003 	mov	r4, r3
   10cd8:	e58d6028 	str	r6, [sp, #40]	; 0x28
   10cdc:	e1a0a001 	mov	sl, r1
   10ce0:	e58d802c 	str	r8, [sp, #44]	; 0x2c
   10ce4:	e1a06002 	mov	r6, r2
   10ce8:	e1a08000 	mov	r8, r0
   10cec:	ea000009 	b	10d18 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x364>
   10cf0:	ebfffee9 	bl	1089c <CUSBGamePadStandardDevice::BitGetUnsigned(void const*, unsigned int, unsigned int)>
   10cf4:	e59d3000 	ldr	r3, [sp]
   10cf8:	e2844001 	add	r4, r4, #1
   10cfc:	e5870028 	str	r0, [r7, #40]	; 0x28
   10d00:	e2888001 	add	r8, r8, #1
   10d04:	e354000f 	cmp	r4, #15
   10d08:	91540003 	cmpls	r4, r3
   10d0c:	e287700c 	add	r7, r7, #12
   10d10:	e085500b 	add	r5, r5, fp
   10d14:	2a000030 	bcs	10ddc <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x428>
   10d18:	e1a01005 	mov	r1, r5
   10d1c:	e1a0200b 	mov	r2, fp
   10d20:	e1a00009 	mov	r0, r9
   10d24:	e587602c 	str	r6, [r7, #44]	; 0x2c
   10d28:	e587a030 	str	sl, [r7, #48]	; 0x30
   10d2c:	e3560000 	cmp	r6, #0
   10d30:	aaffffee 	bge	10cf0 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x33c>
   10d34:	ebffff14 	bl	1098c <CUSBGamePadStandardDevice::BitGetSigned(void const*, unsigned int, unsigned int)>
   10d38:	eaffffed 	b	10cf4 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x340>
   10d3c:	e59d1000 	ldr	r1, [sp]
   10d40:	e3510000 	cmp	r1, #0
   10d44:	0a000022 	beq	10dd4 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x420>
   10d48:	e59d0018 	ldr	r0, [sp, #24]
   10d4c:	e3a07000 	mov	r7, #0
   10d50:	e59d3010 	ldr	r3, [sp, #16]
   10d54:	e58d5018 	str	r5, [sp, #24]
   10d58:	e58d4020 	str	r4, [sp, #32]
   10d5c:	e1a0400a 	mov	r4, sl
   10d60:	e0832100 	add	r2, r3, r0, lsl #2
   10d64:	e1a03008 	mov	r3, r8
   10d68:	e28220e8 	add	r2, r2, #232	; 0xe8
   10d6c:	e58da024 	str	sl, [sp, #36]	; 0x24
   10d70:	e58d6028 	str	r6, [sp, #40]	; 0x28
   10d74:	e1a0800b 	mov	r8, fp
   10d78:	e1a05002 	mov	r5, r2
   10d7c:	e1a06001 	mov	r6, r1
   10d80:	e1a0a000 	mov	sl, r0
   10d84:	e1a0b003 	mov	fp, r3
   10d88:	e1a01004 	mov	r1, r4
   10d8c:	e2877001 	add	r7, r7, #1
   10d90:	e1a02008 	mov	r2, r8
   10d94:	e1a00009 	mov	r0, r9
   10d98:	ebfffebf 	bl	1089c <CUSBGamePadStandardDevice::BitGetUnsigned(void const*, unsigned int, unsigned int)>
   10d9c:	e28aa001 	add	sl, sl, #1
   10da0:	e0844008 	add	r4, r4, r8
   10da4:	e3570005 	cmp	r7, #5
   10da8:	91570006 	cmpls	r7, r6
   10dac:	e5a50004 	str	r0, [r5, #4]!
   10db0:	3afffff4 	bcc	10d88 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x3d4>
   10db4:	e1a0300b 	mov	r3, fp
   10db8:	e59d5018 	ldr	r5, [sp, #24]
   10dbc:	e59d4020 	ldr	r4, [sp, #32]
   10dc0:	e1a0b008 	mov	fp, r8
   10dc4:	e58da018 	str	sl, [sp, #24]
   10dc8:	e1a08003 	mov	r8, r3
   10dcc:	e59d6028 	ldr	r6, [sp, #40]	; 0x28
   10dd0:	e59da024 	ldr	sl, [sp, #36]	; 0x24
   10dd4:	e3a07001 	mov	r7, #1
   10dd8:	eaffff6d 	b	10b94 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x1e0>
   10ddc:	e59d5014 	ldr	r5, [sp, #20]
   10de0:	e3a07001 	mov	r7, #1
   10de4:	e58d8014 	str	r8, [sp, #20]
   10de8:	e59d4020 	ldr	r4, [sp, #32]
   10dec:	e59da024 	ldr	sl, [sp, #36]	; 0x24
   10df0:	e59d6028 	ldr	r6, [sp, #40]	; 0x28
   10df4:	e59d802c 	ldr	r8, [sp, #44]	; 0x2c
   10df8:	eaffff65 	b	10b94 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x1e0>
   10dfc:	e58d4018 	str	r4, [sp, #24]
   10e00:	e58d4014 	str	r4, [sp, #20]
   10e04:	eaffff3a 	b	10af4 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x140>

00010e08 <CUSBGamePadStandardDevice::Configure()>:
   10e08:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   10e0c:	e3a01021 	mov	r1, #33	; 0x21
   10e10:	e1a04000 	mov	r4, r0
   10e14:	e24dd078 	sub	sp, sp, #120	; 0x78
   10e18:	eb0008a3 	bl	130ac <CUSBFunction::GetDescriptor(unsigned char)>
   10e1c:	e2505000 	subs	r5, r0, #0
   10e20:	0a000003 	beq	10e34 <CUSBGamePadStandardDevice::Configure()+0x2c>
   10e24:	e1d530b7 	ldrh	r3, [r5, #7]
   10e28:	e6ff0073 	uxth	r0, r3
   10e2c:	e3500000 	cmp	r0, #0
   10e30:	1a000006 	bne	10e50 <CUSBGamePadStandardDevice::Configure()+0x48>
   10e34:	e3a05000 	mov	r5, #0
   10e38:	e1a00004 	mov	r0, r4
   10e3c:	e59f1168 	ldr	r1, [pc, #360]	; 10fac <CUSBGamePadStandardDevice::Configure()+0x1a4>
   10e40:	eb0008ac 	bl	130f8 <CUSBFunction::ConfigurationError(char const*) const>
   10e44:	e1a00005 	mov	r0, r5
   10e48:	e28dd078 	add	sp, sp, #120	; 0x78
   10e4c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   10e50:	e2846f4e 	add	r6, r4, #312	; 0x138
   10e54:	e1c630b0 	strh	r3, [r6]
   10e58:	eb004489 	bl	22084 <operator new[](unsigned int)>
   10e5c:	e5840134 	str	r0, [r4, #308]	; 0x134
   10e60:	e1a00004 	mov	r0, r4
   10e64:	eb00084e 	bl	12fa4 <CUSBFunction::GetHost() const>
   10e68:	e1a07000 	mov	r7, r0
   10e6c:	e1a00004 	mov	r0, r4
   10e70:	eb00083a 	bl	12f60 <CUSBFunction::GetEndpoint0() const>
   10e74:	e5d55006 	ldrb	r5, [r5, #6]
   10e78:	e1a08000 	mov	r8, r0
   10e7c:	e1d6a0b0 	ldrh	sl, [r6]
   10e80:	e5949134 	ldr	r9, [r4, #308]	; 0x134
   10e84:	e1a00004 	mov	r0, r4
   10e88:	eb0008f4 	bl	13260 <CUSBFunction::GetInterfaceNumber() const>
   10e8c:	e3a0c081 	mov	ip, #129	; 0x81
   10e90:	e6ff0070 	uxth	r0, r0
   10e94:	e3a03000 	mov	r3, #0
   10e98:	e58d000c 	str	r0, [sp, #12]
   10e9c:	e1a02005 	mov	r2, r5
   10ea0:	e58da004 	str	sl, [sp, #4]
   10ea4:	e1a01008 	mov	r1, r8
   10ea8:	e58d9000 	str	r9, [sp]
   10eac:	e1a00007 	mov	r0, r7
   10eb0:	e58dc008 	str	ip, [sp, #8]
   10eb4:	ebffefb2 	bl	cd84 <CUSBHostController::GetDescriptor(CUSBEndpoint*, unsigned char, unsigned char, void*, unsigned int, unsigned char, unsigned short)>
   10eb8:	e1d630b0 	ldrh	r3, [r6]
   10ebc:	e1500003 	cmp	r0, r3
   10ec0:	0a000009 	beq	10eec <CUSBGamePadStandardDevice::Configure()+0xe4>
   10ec4:	eb002bc0 	bl	1bdcc <CLogger::Get()>
   10ec8:	e3a05000 	mov	r5, #0
   10ecc:	e3a02001 	mov	r2, #1
   10ed0:	e59f10d4 	ldr	r1, [pc, #212]	; 10fac <CUSBGamePadStandardDevice::Configure()+0x1a4>
   10ed4:	e30539fc 	movw	r3, #23036	; 0x59fc
   10ed8:	e3403002 	movt	r3, #2
   10edc:	eb002af1 	bl	1baa8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   10ee0:	e1a00005 	mov	r0, r5
   10ee4:	e28dd078 	add	sp, sp, #120	; 0x78
   10ee8:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   10eec:	e3a02064 	mov	r2, #100	; 0x64
   10ef0:	e3a01000 	mov	r1, #0
   10ef4:	e28d0014 	add	r0, sp, #20
   10ef8:	eb003ed4 	bl	20a50 <memset>
   10efc:	e5943000 	ldr	r3, [r4]
   10f00:	e28d1014 	add	r1, sp, #20
   10f04:	e1a00004 	mov	r0, r4
   10f08:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
   10f0c:	e12fff33 	blx	r3
   10f10:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   10f14:	e3530000 	cmp	r3, #0
   10f18:	1a000002 	bne	10f28 <CUSBGamePadStandardDevice::Configure()+0x120>
   10f1c:	e59430e8 	ldr	r3, [r4, #232]	; 0xe8
   10f20:	e3530000 	cmp	r3, #0
   10f24:	0a00000e 	beq	10f64 <CUSBGamePadStandardDevice::Configure()+0x15c>
   10f28:	e2843f4a 	add	r3, r4, #296	; 0x128
   10f2c:	e1d330b0 	ldrh	r3, [r3]
   10f30:	e3530000 	cmp	r3, #0
   10f34:	0a00000e 	beq	10f74 <CUSBGamePadStandardDevice::Configure()+0x16c>
   10f38:	e1a00004 	mov	r0, r4
   10f3c:	eb00190e 	bl	1737c <CUSBGamePadDevice::Configure()>
   10f40:	e2505000 	subs	r5, r0, #0
   10f44:	0a000011 	beq	10f90 <CUSBGamePadStandardDevice::Configure()+0x188>
   10f48:	e5d43130 	ldrb	r3, [r4, #304]	; 0x130
   10f4c:	e3530000 	cmp	r3, #0
   10f50:	0affffbb 	beq	10e44 <CUSBGamePadStandardDevice::Configure()+0x3c>
   10f54:	e1a00004 	mov	r0, r4
   10f58:	ebfffd0f 	bl	1039c <CUSBHIDDevice::StartRequest()>
   10f5c:	e1a05000 	mov	r5, r0
   10f60:	eaffffb7 	b	10e44 <CUSBGamePadStandardDevice::Configure()+0x3c>
   10f64:	e5945104 	ldr	r5, [r4, #260]	; 0x104
   10f68:	e3550000 	cmp	r5, #0
   10f6c:	1affffed 	bne	10f28 <CUSBGamePadStandardDevice::Configure()+0x120>
   10f70:	eaffffb3 	b	10e44 <CUSBGamePadStandardDevice::Configure()+0x3c>
   10f74:	e3051a74 	movw	r1, #23156	; 0x5a74
   10f78:	e3401002 	movt	r1, #2
   10f7c:	e3050aa8 	movw	r0, #23208	; 0x5aa8
   10f80:	e3400002 	movt	r0, #2
   10f84:	e3a02085 	mov	r2, #133	; 0x85
   10f88:	eb002131 	bl	19454 <assertion_failed>
   10f8c:	eaffffe9 	b	10f38 <CUSBGamePadStandardDevice::Configure()+0x130>
   10f90:	eb002b8d 	bl	1bdcc <CLogger::Get()>
   10f94:	e3053abc 	movw	r3, #23228	; 0x5abc
   10f98:	e3403002 	movt	r3, #2
   10f9c:	e3a02001 	mov	r2, #1
   10fa0:	e59f1004 	ldr	r1, [pc, #4]	; 10fac <CUSBGamePadStandardDevice::Configure()+0x1a4>
   10fa4:	eb002abf 	bl	1baa8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   10fa8:	eaffffa5 	b	10e44 <CUSBGamePadStandardDevice::Configure()+0x3c>
   10fac:	00025a68 	.word	0x00025a68

00010fb0 <CUSBGamePadDevice::GetProperties()>:
   10fb0:	e3a00000 	mov	r0, #0
   10fb4:	e12fff1e 	bx	lr

00010fb8 <CUSBGamePadDevice::SetLEDMode(TGamePadLEDMode)>:
   10fb8:	e3a00000 	mov	r0, #0
   10fbc:	e12fff1e 	bx	lr

00010fc0 <CUSBGamePadDevice::SetLEDMode(unsigned int, unsigned char, unsigned char)>:
   10fc0:	e3a00000 	mov	r0, #0
   10fc4:	e12fff1e 	bx	lr

00010fc8 <CUSBGamePadDevice::SetRumbleMode(TGamePadRumbleMode)>:
   10fc8:	e3a00000 	mov	r0, #0
   10fcc:	e12fff1e 	bx	lr

00010fd0 <CUSBGamePadPS3Device::~CUSBGamePadPS3Device()>:
   10fd0:	e59f3014 	ldr	r3, [pc, #20]	; 10fec <CUSBGamePadPS3Device::~CUSBGamePadPS3Device()+0x1c>
   10fd4:	e92d4010 	push	{r4, lr}
   10fd8:	e1a04000 	mov	r4, r0
   10fdc:	e5803000 	str	r3, [r0]
   10fe0:	ebfffe08 	bl	10808 <CUSBGamePadStandardDevice::~CUSBGamePadStandardDevice()>
   10fe4:	e1a00004 	mov	r0, r4
   10fe8:	e8bd8010 	pop	{r4, pc}
   10fec:	00025ae4 	.word	0x00025ae4

00010ff0 <CUSBGamePadPS3Device::~CUSBGamePadPS3Device()>:
   10ff0:	e59f3020 	ldr	r3, [pc, #32]	; 11018 <CUSBGamePadPS3Device::~CUSBGamePadPS3Device()+0x28>
   10ff4:	e92d4010 	push	{r4, lr}
   10ff8:	e1a04000 	mov	r4, r0
   10ffc:	e5803000 	str	r3, [r0]
   11000:	ebfffe00 	bl	10808 <CUSBGamePadStandardDevice::~CUSBGamePadStandardDevice()>
   11004:	e1a00004 	mov	r0, r4
   11008:	e3a01f5b 	mov	r1, #364	; 0x16c
   1100c:	eb00441f 	bl	22090 <operator delete(void*, unsigned int)>
   11010:	e1a00004 	mov	r0, r4
   11014:	e8bd8010 	pop	{r4, pc}
   11018:	00025ae4 	.word	0x00025ae4

0001101c <CUSBGamePadPS3Device::SetRumbleMode(TGamePadRumbleMode)>:
   1101c:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   11020:	e280cf4f 	add	ip, r0, #316	; 0x13c
   11024:	e1a04000 	mov	r4, r0
   11028:	e24dd044 	sub	sp, sp, #68	; 0x44
   1102c:	e1a07001 	mov	r7, r1
   11030:	e2806f5b 	add	r6, r0, #364	; 0x16c
   11034:	e28d5010 	add	r5, sp, #16
   11038:	e1a0e005 	mov	lr, r5
   1103c:	e59c0000 	ldr	r0, [ip]
   11040:	e59c1004 	ldr	r1, [ip, #4]
   11044:	e28cc010 	add	ip, ip, #16
   11048:	e51c2008 	ldr	r2, [ip, #-8]
   1104c:	e2855010 	add	r5, r5, #16
   11050:	e51c3004 	ldr	r3, [ip, #-4]
   11054:	e15c0006 	cmp	ip, r6
   11058:	e8ae000f 	stmia	lr!, {r0, r1, r2, r3}
   1105c:	1afffff5 	bne	11038 <CUSBGamePadPS3Device::SetRumbleMode(TGamePadRumbleMode)+0x1c>
   11060:	e3570001 	cmp	r7, #1
   11064:	0a000027 	beq	11108 <CUSBGamePadPS3Device::SetRumbleMode(TGamePadRumbleMode)+0xec>
   11068:	3a000009 	bcc	11094 <CUSBGamePadPS3Device::SetRumbleMode(TGamePadRumbleMode)+0x78>
   1106c:	e3570002 	cmp	r7, #2
   11070:	1a00002c 	bne	11128 <CUSBGamePadPS3Device::SetRumbleMode(TGamePadRumbleMode)+0x10c>
   11074:	e3e03001 	mvn	r3, #1
   11078:	e3a01000 	mov	r1, #0
   1107c:	e3e02000 	mvn	r2, #0
   11080:	e5cd3011 	strb	r3, [sp, #17]
   11084:	e5cd3013 	strb	r3, [sp, #19]
   11088:	e5cd1012 	strb	r1, [sp, #18]
   1108c:	e5cd2014 	strb	r2, [sp, #20]
   11090:	ea000004 	b	110a8 <CUSBGamePadPS3Device::SetRumbleMode(TGamePadRumbleMode)+0x8c>
   11094:	e3a03000 	mov	r3, #0
   11098:	e5cd3011 	strb	r3, [sp, #17]
   1109c:	e5cd3012 	strb	r3, [sp, #18]
   110a0:	e5cd3013 	strb	r3, [sp, #19]
   110a4:	e5cd3014 	strb	r3, [sp, #20]
   110a8:	e1a00004 	mov	r0, r4
   110ac:	eb0007bc 	bl	12fa4 <CUSBFunction::GetHost() const>
   110b0:	e1a05000 	mov	r5, r0
   110b4:	e1a00004 	mov	r0, r4
   110b8:	eb0007a8 	bl	12f60 <CUSBFunction::GetEndpoint0() const>
   110bc:	e1a06000 	mov	r6, r0
   110c0:	e1a00004 	mov	r0, r4
   110c4:	eb000865 	bl	13260 <CUSBFunction::GetInterfaceNumber() const>
   110c8:	e28d3010 	add	r3, sp, #16
   110cc:	e1a01006 	mov	r1, r6
   110d0:	e6ff0070 	uxth	r0, r0
   110d4:	e3002201 	movw	r2, #513	; 0x201
   110d8:	e98d0009 	stmib	sp, {r0, r3}
   110dc:	e58d2000 	str	r2, [sp]
   110e0:	e1a00005 	mov	r0, r5
   110e4:	e3a03030 	mov	r3, #48	; 0x30
   110e8:	e3a02021 	mov	r2, #33	; 0x21
   110ec:	e58d300c 	str	r3, [sp, #12]
   110f0:	e3a03009 	mov	r3, #9
   110f4:	ebffeef6 	bl	ccd4 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   110f8:	e1e00000 	mvn	r0, r0
   110fc:	e1a00fa0 	lsr	r0, r0, #31
   11100:	e28dd044 	add	sp, sp, #68	; 0x44
   11104:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   11108:	e3e03001 	mvn	r3, #1
   1110c:	e3e01000 	mvn	r1, #0
   11110:	e3a02000 	mov	r2, #0
   11114:	e5cd3011 	strb	r3, [sp, #17]
   11118:	e5cd3013 	strb	r3, [sp, #19]
   1111c:	e5cd1012 	strb	r1, [sp, #18]
   11120:	e5cd2014 	strb	r2, [sp, #20]
   11124:	eaffffdf 	b	110a8 <CUSBGamePadPS3Device::SetRumbleMode(TGamePadRumbleMode)+0x8c>
   11128:	e300210d 	movw	r2, #269	; 0x10d
   1112c:	e3051b9c 	movw	r1, #23452	; 0x5b9c
   11130:	e3401002 	movt	r1, #2
   11134:	e3040ad8 	movw	r0, #19160	; 0x4ad8
   11138:	e3400002 	movt	r0, #2
   1113c:	eb0020c4 	bl	19454 <assertion_failed>
   11140:	e3a00000 	mov	r0, #0
   11144:	e28dd044 	add	sp, sp, #68	; 0x44
   11148:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}

0001114c <CUSBGamePadPS3Device::SetLEDMode(TGamePadLEDMode)>:
   1114c:	e351000a 	cmp	r1, #10
   11150:	9a000001 	bls	1115c <CUSBGamePadPS3Device::SetLEDMode(TGamePadLEDMode)+0x10>
   11154:	e3a00000 	mov	r0, #0
   11158:	e12fff1e 	bx	lr
   1115c:	e3053adc 	movw	r3, #23260	; 0x5adc
   11160:	e3403002 	movt	r3, #2
   11164:	e0831001 	add	r1, r3, r1
   11168:	e92d4070 	push	{r4, r5, r6, lr}
   1116c:	e1a04000 	mov	r4, r0
   11170:	e24dd010 	sub	sp, sp, #16
   11174:	e5d13048 	ldrb	r3, [r1, #72]	; 0x48
   11178:	e1a03083 	lsl	r3, r3, #1
   1117c:	e5c03145 	strb	r3, [r0, #325]	; 0x145
   11180:	eb000787 	bl	12fa4 <CUSBFunction::GetHost() const>
   11184:	e1a05000 	mov	r5, r0
   11188:	e1a00004 	mov	r0, r4
   1118c:	eb000773 	bl	12f60 <CUSBFunction::GetEndpoint0() const>
   11190:	e1a06000 	mov	r6, r0
   11194:	e1a00004 	mov	r0, r4
   11198:	e2844f4f 	add	r4, r4, #316	; 0x13c
   1119c:	eb00082f 	bl	13260 <CUSBFunction::GetInterfaceNumber() const>
   111a0:	e1a01006 	mov	r1, r6
   111a4:	e6ff0070 	uxth	r0, r0
   111a8:	e58d4008 	str	r4, [sp, #8]
   111ac:	e58d0004 	str	r0, [sp, #4]
   111b0:	e3a02030 	mov	r2, #48	; 0x30
   111b4:	e1a00005 	mov	r0, r5
   111b8:	e58d200c 	str	r2, [sp, #12]
   111bc:	e3003201 	movw	r3, #513	; 0x201
   111c0:	e3a02021 	mov	r2, #33	; 0x21
   111c4:	e58d3000 	str	r3, [sp]
   111c8:	e3a03009 	mov	r3, #9
   111cc:	ebffeec0 	bl	ccd4 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   111d0:	e1e00000 	mvn	r0, r0
   111d4:	e1a00fa0 	lsr	r0, r0, #31
   111d8:	e28dd010 	add	sp, sp, #16
   111dc:	e8bd8070 	pop	{r4, r5, r6, pc}

000111e0 <CUSBGamePadPS3Device::CUSBGamePadPS3Device(CUSBFunction*)>:
   111e0:	e92d4070 	push	{r4, r5, r6, lr}
   111e4:	e1a05000 	mov	r5, r0
   111e8:	e3a02000 	mov	r2, #0
   111ec:	ebfffd9c 	bl	10864 <CUSBGamePadStandardDevice::CUSBGamePadStandardDevice(CUSBFunction*, bool)>
   111f0:	e59f4054 	ldr	r4, [pc, #84]	; 1124c <CUSBGamePadPS3Device::CUSBGamePadPS3Device(CUSBFunction*)+0x6c>
   111f4:	e3a03000 	mov	r3, #0
   111f8:	e5854000 	str	r4, [r5]
   111fc:	e1a00005 	mov	r0, r5
   11200:	e1a02003 	mov	r2, r3
   11204:	e3a01003 	mov	r1, #3
   11208:	e284604c 	add	r6, r4, #76	; 0x4c
   1120c:	eb0007d6 	bl	1316c <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char)>
   11210:	e284407c 	add	r4, r4, #124	; 0x7c
   11214:	e285ef4f 	add	lr, r5, #316	; 0x13c
   11218:	e5c5013a 	strb	r0, [r5, #314]	; 0x13a
   1121c:	e1a0c006 	mov	ip, r6
   11220:	e28ee010 	add	lr, lr, #16
   11224:	e2866010 	add	r6, r6, #16
   11228:	e8bc000f 	ldm	ip!, {r0, r1, r2, r3}
   1122c:	e50e0010 	str	r0, [lr, #-16]
   11230:	e50e100c 	str	r1, [lr, #-12]
   11234:	e50e2008 	str	r2, [lr, #-8]
   11238:	e50e3004 	str	r3, [lr, #-4]
   1123c:	e15c0004 	cmp	ip, r4
   11240:	1afffff5 	bne	1121c <CUSBGamePadPS3Device::CUSBGamePadPS3Device(CUSBFunction*)+0x3c>
   11244:	e1a00005 	mov	r0, r5
   11248:	e8bd8070 	pop	{r4, r5, r6, pc}
   1124c:	00025ae4 	.word	0x00025ae4

00011250 <CUSBGamePadPS3Device::PS3Enable()>:
   11250:	e92d4070 	push	{r4, r5, r6, lr}
   11254:	e1a04000 	mov	r4, r0
   11258:	e24dd010 	sub	sp, sp, #16
   1125c:	eb000750 	bl	12fa4 <CUSBFunction::GetHost() const>
   11260:	e1a05000 	mov	r5, r0
   11264:	e1a00004 	mov	r0, r4
   11268:	eb00073c 	bl	12f60 <CUSBFunction::GetEndpoint0() const>
   1126c:	e1a06000 	mov	r6, r0
   11270:	e1a00004 	mov	r0, r4
   11274:	eb0007f9 	bl	13260 <CUSBFunction::GetInterfaceNumber() const>
   11278:	e3a02ffd 	mov	r2, #1012	; 0x3f4
   1127c:	e6ff0070 	uxth	r0, r0
   11280:	e58d2000 	str	r2, [sp]
   11284:	e1a01006 	mov	r1, r6
   11288:	e30b3028 	movw	r3, #45096	; 0xb028
   1128c:	e3403002 	movt	r3, #2
   11290:	e98d0009 	stmib	sp, {r0, r3}
   11294:	e3a02021 	mov	r2, #33	; 0x21
   11298:	e3a03004 	mov	r3, #4
   1129c:	e1a00005 	mov	r0, r5
   112a0:	e58d300c 	str	r3, [sp, #12]
   112a4:	e3a03009 	mov	r3, #9
   112a8:	ebffee89 	bl	ccd4 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   112ac:	e3500000 	cmp	r0, #0
   112b0:	ba000006 	blt	112d0 <CUSBGamePadPS3Device::PS3Enable()+0x80>
   112b4:	e5943000 	ldr	r3, [r4]
   112b8:	e1a00004 	mov	r0, r4
   112bc:	e5d4112c 	ldrb	r1, [r4, #300]	; 0x12c
   112c0:	e5933030 	ldr	r3, [r3, #48]	; 0x30
   112c4:	e28dd010 	add	sp, sp, #16
   112c8:	e8bd4070 	pop	{r4, r5, r6, lr}
   112cc:	e12fff13 	bx	r3
   112d0:	e3a00000 	mov	r0, #0
   112d4:	e28dd010 	add	sp, sp, #16
   112d8:	e8bd8070 	pop	{r4, r5, r6, pc}

000112dc <CUSBGamePadPS3Device::Configure()>:
   112dc:	e92d4030 	push	{r4, r5, lr}
   112e0:	e5d0313a 	ldrb	r3, [r0, #314]	; 0x13a
   112e4:	e24dd00c 	sub	sp, sp, #12
   112e8:	e3530000 	cmp	r3, #0
   112ec:	0a00001e 	beq	1136c <CUSBGamePadPS3Device::Configure()+0x90>
   112f0:	e1a04000 	mov	r4, r0
   112f4:	ebfffec3 	bl	10e08 <CUSBGamePadStandardDevice::Configure()>
   112f8:	e3500000 	cmp	r0, #0
   112fc:	0a00001f 	beq	11380 <CUSBGamePadPS3Device::Configure()+0xa4>
   11300:	e2845f4a 	add	r5, r4, #296	; 0x128
   11304:	e1d530b0 	ldrh	r3, [r5]
   11308:	e2433031 	sub	r3, r3, #49	; 0x31
   1130c:	e3530001 	cmp	r3, #1
   11310:	8a00002c 	bhi	113c8 <CUSBGamePadPS3Device::Configure()+0xec>
   11314:	e1a03004 	mov	r3, r4
   11318:	e28400c0 	add	r0, r4, #192	; 0xc0
   1131c:	e3a02000 	mov	r2, #0
   11320:	e3a010ff 	mov	r1, #255	; 0xff
   11324:	e3a0c013 	mov	ip, #19
   11328:	e584c104 	str	ip, [r4, #260]	; 0x104
   1132c:	e3a0c010 	mov	ip, #16
   11330:	e584c024 	str	ip, [r4, #36]	; 0x24
   11334:	e583202c 	str	r2, [r3, #44]	; 0x2c
   11338:	e283300c 	add	r3, r3, #12
   1133c:	e5831024 	str	r1, [r3, #36]	; 0x24
   11340:	e1530000 	cmp	r3, r0
   11344:	1afffffa 	bne	11334 <CUSBGamePadPS3Device::Configure()+0x58>
   11348:	e58420e8 	str	r2, [r4, #232]	; 0xe8
   1134c:	e1a00004 	mov	r0, r4
   11350:	ebffffbe 	bl	11250 <CUSBGamePadPS3Device::PS3Enable()>
   11354:	e3500000 	cmp	r0, #0
   11358:	0a000011 	beq	113a4 <CUSBGamePadPS3Device::Configure()+0xc8>
   1135c:	e1a00004 	mov	r0, r4
   11360:	e28dd00c 	add	sp, sp, #12
   11364:	e8bd4030 	pop	{r4, r5, lr}
   11368:	eafffc0b 	b	1039c <CUSBHIDDevice::StartRequest()>
   1136c:	e59f1080 	ldr	r1, [pc, #128]	; 113f4 <CUSBGamePadPS3Device::Configure()+0x118>
   11370:	eb000760 	bl	130f8 <CUSBFunction::ConfigurationError(char const*) const>
   11374:	e3a00000 	mov	r0, #0
   11378:	e28dd00c 	add	sp, sp, #12
   1137c:	e8bd8030 	pop	{r4, r5, pc}
   11380:	eb002a91 	bl	1bdcc <CLogger::Get()>
   11384:	e3a02001 	mov	r2, #1
   11388:	e59f1064 	ldr	r1, [pc, #100]	; 113f4 <CUSBGamePadPS3Device::Configure()+0x118>
   1138c:	e3053abc 	movw	r3, #23228	; 0x5abc
   11390:	e3403002 	movt	r3, #2
   11394:	eb0029c3 	bl	1baa8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   11398:	e3a00000 	mov	r0, #0
   1139c:	e28dd00c 	add	sp, sp, #12
   113a0:	e8bd8030 	pop	{r4, r5, pc}
   113a4:	eb002a88 	bl	1bdcc <CLogger::Get()>
   113a8:	e3a02001 	mov	r2, #1
   113ac:	e59f1040 	ldr	r1, [pc, #64]	; 113f4 <CUSBGamePadPS3Device::Configure()+0x118>
   113b0:	e3053bcc 	movw	r3, #23500	; 0x5bcc
   113b4:	e3403002 	movt	r3, #2
   113b8:	eb0029ba 	bl	1baa8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   113bc:	e3a00000 	mov	r0, #0
   113c0:	e28dd00c 	add	sp, sp, #12
   113c4:	e8bd8030 	pop	{r4, r5, pc}
   113c8:	eb002a7f 	bl	1bdcc <CLogger::Get()>
   113cc:	e1d530b0 	ldrh	r3, [r5]
   113d0:	e58d3000 	str	r3, [sp]
   113d4:	e3a02001 	mov	r2, #1
   113d8:	e59f1014 	ldr	r1, [pc, #20]	; 113f4 <CUSBGamePadPS3Device::Configure()+0x118>
   113dc:	e3053bb0 	movw	r3, #23472	; 0x5bb0
   113e0:	e3403002 	movt	r3, #2
   113e4:	eb0029af 	bl	1baa8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   113e8:	e3a00000 	mov	r0, #0
   113ec:	e28dd00c 	add	sp, sp, #12
   113f0:	e8bd8030 	pop	{r4, r5, pc}
   113f4:	00025b60 	.word	0x00025b60

000113f8 <CUSBGamePadPS3Device::DecodeReport(unsigned char const*)>:
   113f8:	e2803f4a 	add	r3, r0, #296	; 0x128
   113fc:	e92d4070 	push	{r4, r5, r6, lr}
   11400:	e1a04000 	mov	r4, r0
   11404:	e1a05001 	mov	r5, r1
   11408:	e1d330b0 	ldrh	r3, [r3]
   1140c:	e3530031 	cmp	r3, #49	; 0x31
   11410:	0a000009 	beq	1143c <CUSBGamePadPS3Device::DecodeReport(unsigned char const*)+0x44>
   11414:	e3530032 	cmp	r3, #50	; 0x32
   11418:	0a00003f 	beq	1151c <CUSBGamePadPS3Device::DecodeReport(unsigned char const*)+0x124>
   1141c:	e3530000 	cmp	r3, #0
   11420:	0a00003b 	beq	11514 <CUSBGamePadPS3Device::DecodeReport(unsigned char const*)+0x11c>
   11424:	e3051b9c 	movw	r1, #23452	; 0x5b9c
   11428:	e3401002 	movt	r1, #2
   1142c:	e3040ad8 	movw	r0, #19160	; 0x4ad8
   11430:	e3400002 	movt	r0, #2
   11434:	e3a02091 	mov	r2, #145	; 0x91
   11438:	eb002005 	bl	19454 <assertion_failed>
   1143c:	e3550000 	cmp	r5, #0
   11440:	0a000038 	beq	11528 <CUSBGamePadPS3Device::DecodeReport(unsigned char const*)+0x130>
   11444:	e595c002 	ldr	ip, [r5, #2]
   11448:	e300e7f8 	movw	lr, #2040	; 0x7f8
   1144c:	e3a01b3e 	mov	r1, #63488	; 0xf800
   11450:	e3401007 	movt	r1, #7
   11454:	e59f00e8 	ldr	r0, [pc, #232]	; 11544 <CUSBGamePadPS3Device::DecodeReport(unsigned char const*)+0x14c>
   11458:	e285200d 	add	r2, r5, #13
   1145c:	e00ee2ac 	and	lr, lr, ip, lsr #5
   11460:	e7e2385c 	ubfx	r3, ip, #16, #3
   11464:	e001158c 	and	r1, r1, ip, lsl #11
   11468:	e183300e 	orr	r3, r3, lr
   1146c:	e1833001 	orr	r3, r3, r1
   11470:	e5843108 	str	r3, [r4, #264]	; 0x108
   11474:	e285e019 	add	lr, r5, #25
   11478:	e3a03006 	mov	r3, #6
   1147c:	e5d51006 	ldrb	r1, [r5, #6]
   11480:	e3a0c00c 	mov	ip, #12
   11484:	e5841028 	str	r1, [r4, #40]	; 0x28
   11488:	e5d51007 	ldrb	r1, [r5, #7]
   1148c:	e5841034 	str	r1, [r4, #52]	; 0x34
   11490:	e5d51008 	ldrb	r1, [r5, #8]
   11494:	e5841040 	str	r1, [r4, #64]	; 0x40
   11498:	e5d51009 	ldrb	r1, [r5, #9]
   1149c:	e584104c 	str	r1, [r4, #76]	; 0x4c
   114a0:	ea000000 	b	114a8 <CUSBGamePadPS3Device::DecodeReport(unsigned char const*)+0xb0>
   114a4:	e5b03004 	ldr	r3, [r0, #4]!
   114a8:	e023439c 	mla	r3, ip, r3, r4
   114ac:	e5f21001 	ldrb	r1, [r2, #1]!
   114b0:	e152000e 	cmp	r2, lr
   114b4:	e5831028 	str	r1, [r3, #40]	; 0x28
   114b8:	1afffff9 	bne	114a4 <CUSBGamePadPS3Device::DecodeReport(unsigned char const*)+0xac>
   114bc:	e1d532b9 	ldrh	r3, [r5, #41]	; 0x29
   114c0:	e30021ff 	movw	r2, #511	; 0x1ff
   114c4:	e6bf3fb3 	rev16	r3, r3
   114c8:	e6ff3073 	uxth	r3, r3
   114cc:	e0423003 	sub	r3, r2, r3
   114d0:	e584310c 	str	r3, [r4, #268]	; 0x10c
   114d4:	e1d532bb 	ldrh	r3, [r5, #43]	; 0x2b
   114d8:	e6bf3fb3 	rev16	r3, r3
   114dc:	e6ff3073 	uxth	r3, r3
   114e0:	e0423003 	sub	r3, r2, r3
   114e4:	e5843110 	str	r3, [r4, #272]	; 0x110
   114e8:	e1d532bd 	ldrh	r3, [r5, #45]	; 0x2d
   114ec:	e6bf3fb3 	rev16	r3, r3
   114f0:	e6ff3073 	uxth	r3, r3
   114f4:	e0422003 	sub	r2, r2, r3
   114f8:	e5842114 	str	r2, [r4, #276]	; 0x114
   114fc:	e1d532bf 	ldrh	r3, [r5, #47]	; 0x2f
   11500:	e6bf3fb3 	rev16	r3, r3
   11504:	e6ff3073 	uxth	r3, r3
   11508:	e2433006 	sub	r3, r3, #6
   1150c:	e5843120 	str	r3, [r4, #288]	; 0x120
   11510:	e8bd8070 	pop	{r4, r5, r6, pc}
   11514:	e8bd4070 	pop	{r4, r5, r6, lr}
   11518:	eafffd25 	b	109b4 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)>
   1151c:	e2815001 	add	r5, r1, #1
   11520:	e3550000 	cmp	r5, #0
   11524:	1affffc6 	bne	11444 <CUSBGamePadPS3Device::DecodeReport(unsigned char const*)+0x4c>
   11528:	e3051b9c 	movw	r1, #23452	; 0x5b9c
   1152c:	e3401002 	movt	r1, #2
   11530:	e3050bec 	movw	r0, #23532	; 0x5bec
   11534:	e3400002 	movt	r0, #2
   11538:	e3a02096 	mov	r2, #150	; 0x96
   1153c:	eb001fc4 	bl	19454 <assertion_failed>
   11540:	eaffffbf 	b	11444 <CUSBGamePadPS3Device::DecodeReport(unsigned char const*)+0x4c>
   11544:	00025b6c 	.word	0x00025b6c

00011548 <CUSBGamePadPS3Device::GetProperties()>:
   11548:	e3a0001b 	mov	r0, #27
   1154c:	e12fff1e 	bx	lr

00011550 <CUSBGamePadPS4Device::DecodeReport(unsigned char const*)>:
   11550:	e5d12001 	ldrb	r2, [r1, #1]
   11554:	e3053bfc 	movw	r3, #23548	; 0x5bfc
   11558:	e3403002 	movt	r3, #2
   1155c:	e5802028 	str	r2, [r0, #40]	; 0x28
   11560:	e5d12002 	ldrb	r2, [r1, #2]
   11564:	e5802034 	str	r2, [r0, #52]	; 0x34
   11568:	e5d12003 	ldrb	r2, [r1, #3]
   1156c:	e5802040 	str	r2, [r0, #64]	; 0x40
   11570:	e5d12004 	ldrb	r2, [r1, #4]
   11574:	e580204c 	str	r2, [r0, #76]	; 0x4c
   11578:	e5d12008 	ldrb	r2, [r1, #8]
   1157c:	e5802058 	str	r2, [r0, #88]	; 0x58
   11580:	e5d12009 	ldrb	r2, [r1, #9]
   11584:	e5802064 	str	r2, [r0, #100]	; 0x64
   11588:	e5d12005 	ldrb	r2, [r1, #5]
   1158c:	e202200f 	and	r2, r2, #15
   11590:	e58020ec 	str	r2, [r0, #236]	; 0xec
   11594:	e5d12005 	ldrb	r2, [r1, #5]
   11598:	e202200f 	and	r2, r2, #15
   1159c:	e7932102 	ldr	r2, [r3, r2, lsl #2]
   115a0:	e5802108 	str	r2, [r0, #264]	; 0x108
   115a4:	e5d13005 	ldrb	r3, [r1, #5]
   115a8:	e3130080 	tst	r3, #128	; 0x80
   115ac:	13822080 	orrne	r2, r2, #128	; 0x80
   115b0:	15802108 	strne	r2, [r0, #264]	; 0x108
   115b4:	15d13005 	ldrbne	r3, [r1, #5]
   115b8:	e3130040 	tst	r3, #64	; 0x40
   115bc:	15903108 	ldrne	r3, [r0, #264]	; 0x108
   115c0:	13833c01 	orrne	r3, r3, #256	; 0x100
   115c4:	15803108 	strne	r3, [r0, #264]	; 0x108
   115c8:	15d13005 	ldrbne	r3, [r1, #5]
   115cc:	e3130020 	tst	r3, #32
   115d0:	15903108 	ldrne	r3, [r0, #264]	; 0x108
   115d4:	13833c02 	orrne	r3, r3, #512	; 0x200
   115d8:	15803108 	strne	r3, [r0, #264]	; 0x108
   115dc:	15d13005 	ldrbne	r3, [r1, #5]
   115e0:	e3130010 	tst	r3, #16
   115e4:	15903108 	ldrne	r3, [r0, #264]	; 0x108
   115e8:	13833b01 	orrne	r3, r3, #1024	; 0x400
   115ec:	15803108 	strne	r3, [r0, #264]	; 0x108
   115f0:	e5d13006 	ldrb	r3, [r1, #6]
   115f4:	e3130080 	tst	r3, #128	; 0x80
   115f8:	15903108 	ldrne	r3, [r0, #264]	; 0x108
   115fc:	13833a02 	orrne	r3, r3, #8192	; 0x2000
   11600:	15803108 	strne	r3, [r0, #264]	; 0x108
   11604:	15d13006 	ldrbne	r3, [r1, #6]
   11608:	e3130040 	tst	r3, #64	; 0x40
   1160c:	15903108 	ldrne	r3, [r0, #264]	; 0x108
   11610:	13833a01 	orrne	r3, r3, #4096	; 0x1000
   11614:	15803108 	strne	r3, [r0, #264]	; 0x108
   11618:	15d13006 	ldrbne	r3, [r1, #6]
   1161c:	e3130020 	tst	r3, #32
   11620:	15903108 	ldrne	r3, [r0, #264]	; 0x108
   11624:	13833901 	orrne	r3, r3, #16384	; 0x4000
   11628:	15803108 	strne	r3, [r0, #264]	; 0x108
   1162c:	15d13006 	ldrbne	r3, [r1, #6]
   11630:	e3130010 	tst	r3, #16
   11634:	15903108 	ldrne	r3, [r0, #264]	; 0x108
   11638:	13833b02 	orrne	r3, r3, #2048	; 0x800
   1163c:	15803108 	strne	r3, [r0, #264]	; 0x108
   11640:	15d13006 	ldrbne	r3, [r1, #6]
   11644:	e3130008 	tst	r3, #8
   11648:	15903108 	ldrne	r3, [r0, #264]	; 0x108
   1164c:	13833010 	orrne	r3, r3, #16
   11650:	15803108 	strne	r3, [r0, #264]	; 0x108
   11654:	15d13006 	ldrbne	r3, [r1, #6]
   11658:	e3130004 	tst	r3, #4
   1165c:	15903108 	ldrne	r3, [r0, #264]	; 0x108
   11660:	13833008 	orrne	r3, r3, #8
   11664:	15803108 	strne	r3, [r0, #264]	; 0x108
   11668:	15d13006 	ldrbne	r3, [r1, #6]
   1166c:	e3130002 	tst	r3, #2
   11670:	15903108 	ldrne	r3, [r0, #264]	; 0x108
   11674:	13833040 	orrne	r3, r3, #64	; 0x40
   11678:	15803108 	strne	r3, [r0, #264]	; 0x108
   1167c:	15d13006 	ldrbne	r3, [r1, #6]
   11680:	e3130001 	tst	r3, #1
   11684:	15903108 	ldrne	r3, [r0, #264]	; 0x108
   11688:	13833020 	orrne	r3, r3, #32
   1168c:	15803108 	strne	r3, [r0, #264]	; 0x108
   11690:	e5d13007 	ldrb	r3, [r1, #7]
   11694:	e3130002 	tst	r3, #2
   11698:	15903108 	ldrne	r3, [r0, #264]	; 0x108
   1169c:	13833602 	orrne	r3, r3, #2097152	; 0x200000
   116a0:	15803108 	strne	r3, [r0, #264]	; 0x108
   116a4:	15d13007 	ldrbne	r3, [r1, #7]
   116a8:	e3130001 	tst	r3, #1
   116ac:	15903108 	ldrne	r3, [r0, #264]	; 0x108
   116b0:	13833001 	orrne	r3, r3, #1
   116b4:	15803108 	strne	r3, [r0, #264]	; 0x108
   116b8:	e1d131f3 	ldrsh	r3, [r1, #19]
   116bc:	e580310c 	str	r3, [r0, #268]	; 0x10c
   116c0:	e1d131f7 	ldrsh	r3, [r1, #23]
   116c4:	e5803110 	str	r3, [r0, #272]	; 0x110
   116c8:	e1d131f5 	ldrsh	r3, [r1, #21]
   116cc:	e5803114 	str	r3, [r0, #276]	; 0x114
   116d0:	e1d131f1 	ldrsh	r3, [r1, #17]
   116d4:	e5803118 	str	r3, [r0, #280]	; 0x118
   116d8:	e1d130fd 	ldrsh	r3, [r1, #13]
   116dc:	e580311c 	str	r3, [r0, #284]	; 0x11c
   116e0:	e1d130ff 	ldrsh	r3, [r1, #15]
   116e4:	e5803120 	str	r3, [r0, #288]	; 0x120
   116e8:	e12fff1e 	bx	lr

000116ec <CUSBGamePadPS4Device::~CUSBGamePadPS4Device()>:
   116ec:	e92d4010 	push	{r4, lr}
   116f0:	e1a04000 	mov	r4, r0
   116f4:	e5900140 	ldr	r0, [r0, #320]	; 0x140
   116f8:	e59f3034 	ldr	r3, [pc, #52]	; 11734 <CUSBGamePadPS4Device::~CUSBGamePadPS4Device()+0x48>
   116fc:	e5843000 	str	r3, [r4]
   11700:	e3500000 	cmp	r0, #0
   11704:	0a000002 	beq	11714 <CUSBGamePadPS4Device::~CUSBGamePadPS4Device()+0x28>
   11708:	e5903000 	ldr	r3, [r0]
   1170c:	e5933004 	ldr	r3, [r3, #4]
   11710:	e12fff33 	blx	r3
   11714:	e594013c 	ldr	r0, [r4, #316]	; 0x13c
   11718:	e3500000 	cmp	r0, #0
   1171c:	0a000000 	beq	11724 <CUSBGamePadPS4Device::~CUSBGamePadPS4Device()+0x38>
   11720:	eb004259 	bl	2208c <operator delete[](void*)>
   11724:	e1a00004 	mov	r0, r4
   11728:	eb001753 	bl	1747c <CUSBGamePadDevice::~CUSBGamePadDevice()>
   1172c:	e1a00004 	mov	r0, r4
   11730:	e8bd8010 	pop	{r4, pc}
   11734:	00025c28 	.word	0x00025c28

00011738 <CUSBGamePadPS4Device::~CUSBGamePadPS4Device()>:
   11738:	e92d4010 	push	{r4, lr}
   1173c:	e1a04000 	mov	r4, r0
   11740:	ebffffe9 	bl	116ec <CUSBGamePadPS4Device::~CUSBGamePadPS4Device()>
   11744:	e1a00004 	mov	r0, r4
   11748:	e3a01f53 	mov	r1, #332	; 0x14c
   1174c:	eb00424f 	bl	22090 <operator delete(void*, unsigned int)>
   11750:	e1a00004 	mov	r0, r4
   11754:	e8bd8010 	pop	{r4, pc}

00011758 <CUSBGamePadPS4Device::CUSBGamePadPS4Device(CUSBFunction*)>:
   11758:	e92d4010 	push	{r4, lr}
   1175c:	e1a04000 	mov	r4, r0
   11760:	eb001733 	bl	17434 <CUSBGamePadDevice::CUSBGamePadDevice(CUSBFunction*)>
   11764:	e3a03000 	mov	r3, #0
   11768:	e59f1030 	ldr	r1, [pc, #48]	; 117a0 <CUSBGamePadPS4Device::CUSBGamePadPS4Device(CUSBFunction*)+0x48>
   1176c:	e1a02003 	mov	r2, r3
   11770:	e5841000 	str	r1, [r4]
   11774:	e1a00004 	mov	r0, r4
   11778:	e3a01003 	mov	r1, #3
   1177c:	eb00067a 	bl	1316c <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char)>
   11780:	e3a03000 	mov	r3, #0
   11784:	e5c40130 	strb	r0, [r4, #304]	; 0x130
   11788:	e1a00004 	mov	r0, r4
   1178c:	e584313c 	str	r3, [r4, #316]	; 0x13c
   11790:	e5843140 	str	r3, [r4, #320]	; 0x140
   11794:	e5c43144 	strb	r3, [r4, #324]	; 0x144
   11798:	e5c43145 	strb	r3, [r4, #325]	; 0x145
   1179c:	e8bd8010 	pop	{r4, pc}
   117a0:	00025c28 	.word	0x00025c28

000117a4 <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)>:
   117a4:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   117a8:	e1a07001 	mov	r7, r1
   117ac:	e1a06000 	mov	r6, r0
   117b0:	e5d13007 	ldrb	r3, [r1, #7]
   117b4:	e24dd00c 	sub	sp, sp, #12
   117b8:	e5d0c144 	ldrb	ip, [r0, #324]	; 0x144
   117bc:	e3130002 	tst	r3, #2
   117c0:	1a000061 	bne	1194c <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0x1a8>
   117c4:	e35c0000 	cmp	ip, #0
   117c8:	1a000062 	bne	11958 <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0x1b4>
   117cc:	e5d78021 	ldrb	r8, [r7, #33]	; 0x21
   117d0:	e305bc88 	movw	fp, #23688	; 0x5c88
   117d4:	e340b002 	movt	fp, #2
   117d8:	e2483001 	sub	r3, r8, #1
   117dc:	e3a04000 	mov	r4, #0
   117e0:	e3530003 	cmp	r3, #3
   117e4:	e3059c74 	movw	r9, #23668	; 0x5c74
   117e8:	e3409002 	movt	r9, #2
   117ec:	e58d9000 	str	r9, [sp]
   117f0:	23a08001 	movcs	r8, #1
   117f4:	e1a01184 	lsl	r1, r4, #3
   117f8:	e081a004 	add	sl, r1, r4
   117fc:	e087a00a 	add	sl, r7, sl
   11800:	e28aa020 	add	sl, sl, #32
   11804:	e5da3003 	ldrb	r3, [sl, #3]
   11808:	e1b033a3 	lsrs	r3, r3, #7
   1180c:	1a000038 	bne	118f4 <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0x150>
   11810:	e5d63145 	ldrb	r3, [r6, #325]	; 0x145
   11814:	e3530000 	cmp	r3, #0
   11818:	0a000046 	beq	11938 <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0x194>
   1181c:	e5da9005 	ldrb	r9, [sl, #5]
   11820:	e3000146 	movw	r0, #326	; 0x146
   11824:	e5da2004 	ldrb	r2, [sl, #4]
   11828:	e286ef52 	add	lr, r6, #328	; 0x148
   1182c:	e5da3006 	ldrb	r3, [sl, #6]
   11830:	e209500f 	and	r5, r9, #15
   11834:	e196a0b0 	ldrh	sl, [r6, r0]
   11838:	e0860000 	add	r0, r6, r0
   1183c:	e1825405 	orr	r5, r2, r5, lsl #8
   11840:	e3e0207e 	mvn	r2, #126	; 0x7e
   11844:	e045500a 	sub	r5, r5, sl
   11848:	e1a03203 	lsl	r3, r3, #4
   1184c:	e355007f 	cmp	r5, #127	; 0x7f
   11850:	e1dea0b0 	ldrh	sl, [lr]
   11854:	a3a0507f 	movge	r5, #127	; 0x7f
   11858:	e1833229 	orr	r3, r3, r9, lsr #4
   1185c:	e043300a 	sub	r3, r3, sl
   11860:	e1550002 	cmp	r5, r2
   11864:	b1a05002 	movlt	r5, r2
   11868:	e353007f 	cmp	r3, #127	; 0x7f
   1186c:	a3a0307f 	movge	r3, #127	; 0x7f
   11870:	e1530002 	cmp	r3, r2
   11874:	b1a03002 	movlt	r3, r2
   11878:	e1952003 	orrs	r2, r5, r3
   1187c:	138cc001 	orrne	ip, ip, #1
   11880:	e0811004 	add	r1, r1, r4
   11884:	e3a02001 	mov	r2, #1
   11888:	e0871001 	add	r1, r7, r1
   1188c:	e5c62145 	strb	r2, [r6, #325]	; 0x145
   11890:	e35c0000 	cmp	ip, #0
   11894:	e2811020 	add	r1, r1, #32
   11898:	e5d1c005 	ldrb	ip, [r1, #5]
   1189c:	e5d12004 	ldrb	r2, [r1, #4]
   118a0:	e20cc00f 	and	ip, ip, #15
   118a4:	e182240c 	orr	r2, r2, ip, lsl #8
   118a8:	e1c020b0 	strh	r2, [r0]
   118ac:	e5d12006 	ldrb	r2, [r1, #6]
   118b0:	e5d11005 	ldrb	r1, [r1, #5]
   118b4:	e1a02202 	lsl	r2, r2, #4
   118b8:	e1822221 	orr	r2, r2, r1, lsr #4
   118bc:	e1ce20b0 	strh	r2, [lr]
   118c0:	0a000005 	beq	118dc <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0x138>
   118c4:	e5960140 	ldr	r0, [r6, #320]	; 0x140
   118c8:	e3500000 	cmp	r0, #0
   118cc:	0a000011 	beq	11918 <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0x174>
   118d0:	e1a02005 	mov	r2, r5
   118d4:	e5d61144 	ldrb	r1, [r6, #324]	; 0x144
   118d8:	eb001922 	bl	17d68 <CMouseDevice::ReportHandler(unsigned int, int, int)>
   118dc:	e2844001 	add	r4, r4, #1
   118e0:	e3a0c000 	mov	ip, #0
   118e4:	e1580004 	cmp	r8, r4
   118e8:	1affffc1 	bne	117f4 <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0x50>
   118ec:	e28dd00c 	add	sp, sp, #12
   118f0:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   118f4:	e3a03000 	mov	r3, #0
   118f8:	e35c0000 	cmp	ip, #0
   118fc:	e5c63145 	strb	r3, [r6, #325]	; 0x145
   11900:	0afffff5 	beq	118dc <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0x138>
   11904:	e5960140 	ldr	r0, [r6, #320]	; 0x140
   11908:	e3a03000 	mov	r3, #0
   1190c:	e1a05003 	mov	r5, r3
   11910:	e3500000 	cmp	r0, #0
   11914:	1affffed 	bne	118d0 <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0x12c>
   11918:	e1a0000b 	mov	r0, fp
   1191c:	e300215a 	movw	r2, #346	; 0x15a
   11920:	e59d1000 	ldr	r1, [sp]
   11924:	e58d3004 	str	r3, [sp, #4]
   11928:	eb001ec9 	bl	19454 <assertion_failed>
   1192c:	e5960140 	ldr	r0, [r6, #320]	; 0x140
   11930:	e59d3004 	ldr	r3, [sp, #4]
   11934:	eaffffe5 	b	118d0 <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0x12c>
   11938:	e2860f51 	add	r0, r6, #324	; 0x144
   1193c:	e1a05003 	mov	r5, r3
   11940:	e2800002 	add	r0, r0, #2
   11944:	e286ef52 	add	lr, r6, #328	; 0x148
   11948:	eaffffcc 	b	11880 <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0xdc>
   1194c:	e35c0000 	cmp	ip, #0
   11950:	13a0c000 	movne	ip, #0
   11954:	1affff9c 	bne	117cc <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0x28>
   11958:	e7e030d3 	ubfx	r3, r3, #1, #1
   1195c:	e3a0c001 	mov	ip, #1
   11960:	e5c63144 	strb	r3, [r6, #324]	; 0x144
   11964:	eaffff98 	b	117cc <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0x28>

00011968 <CUSBGamePadPS4Device::ReportHandler(unsigned char const*, unsigned int)>:
   11968:	e2422040 	sub	r2, r2, #64	; 0x40
   1196c:	e3510000 	cmp	r1, #0
   11970:	e16f2f12 	clz	r2, r2
   11974:	e1a022a2 	lsr	r2, r2, #5
   11978:	03a02000 	moveq	r2, #0
   1197c:	e3520000 	cmp	r2, #0
   11980:	012fff1e 	bxeq	lr
   11984:	e5903000 	ldr	r3, [r0]
   11988:	e92d4070 	push	{r4, r5, r6, lr}
   1198c:	e1a04000 	mov	r4, r0
   11990:	e1a05001 	mov	r5, r1
   11994:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
   11998:	e12fff33 	blx	r3
   1199c:	e5943124 	ldr	r3, [r4, #292]	; 0x124
   119a0:	e3530000 	cmp	r3, #0
   119a4:	0a000003 	beq	119b8 <CUSBGamePadPS4Device::ReportHandler(unsigned char const*, unsigned int)+0x50>
   119a8:	e594012c 	ldr	r0, [r4, #300]	; 0x12c
   119ac:	e2841024 	add	r1, r4, #36	; 0x24
   119b0:	e2400001 	sub	r0, r0, #1
   119b4:	e12fff33 	blx	r3
   119b8:	e5943140 	ldr	r3, [r4, #320]	; 0x140
   119bc:	e3530000 	cmp	r3, #0
   119c0:	08bd8070 	popeq	{r4, r5, r6, pc}
   119c4:	e1a01005 	mov	r1, r5
   119c8:	e1a00004 	mov	r0, r4
   119cc:	e8bd4070 	pop	{r4, r5, r6, lr}
   119d0:	eaffff73 	b	117a4 <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)>

000119d4 <CUSBGamePadPS4Device::SendLedRumbleCommand()>:
   119d4:	e590c13c 	ldr	ip, [r0, #316]	; 0x13c
   119d8:	e3a03000 	mov	r3, #0
   119dc:	e92d4010 	push	{r4, lr}
   119e0:	e3a02020 	mov	r2, #32
   119e4:	e5d0e131 	ldrb	lr, [r0, #305]	; 0x131
   119e8:	e5cce003 	strb	lr, [ip, #3]
   119ec:	e590c13c 	ldr	ip, [r0, #316]	; 0x13c
   119f0:	e5d0e133 	ldrb	lr, [r0, #307]	; 0x133
   119f4:	e5cce004 	strb	lr, [ip, #4]
   119f8:	e590c13c 	ldr	ip, [r0, #316]	; 0x13c
   119fc:	e5d0e132 	ldrb	lr, [r0, #306]	; 0x132
   11a00:	e5cce005 	strb	lr, [ip, #5]
   11a04:	e590c13c 	ldr	ip, [r0, #316]	; 0x13c
   11a08:	e5d0e134 	ldrb	lr, [r0, #308]	; 0x134
   11a0c:	e5cce006 	strb	lr, [ip, #6]
   11a10:	e590c13c 	ldr	ip, [r0, #316]	; 0x13c
   11a14:	e5d0e135 	ldrb	lr, [r0, #309]	; 0x135
   11a18:	e5cce007 	strb	lr, [ip, #7]
   11a1c:	e590c13c 	ldr	ip, [r0, #316]	; 0x13c
   11a20:	e5d0e136 	ldrb	lr, [r0, #310]	; 0x136
   11a24:	e5cce008 	strb	lr, [ip, #8]
   11a28:	e590c13c 	ldr	ip, [r0, #316]	; 0x13c
   11a2c:	e5d0e137 	ldrb	lr, [r0, #311]	; 0x137
   11a30:	e5cce009 	strb	lr, [ip, #9]
   11a34:	e590c13c 	ldr	ip, [r0, #316]	; 0x13c
   11a38:	e5d0e138 	ldrb	lr, [r0, #312]	; 0x138
   11a3c:	e5cce00a 	strb	lr, [ip, #10]
   11a40:	e590113c 	ldr	r1, [r0, #316]	; 0x13c
   11a44:	ebfff9be 	bl	10144 <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)>
   11a48:	e2504000 	subs	r4, r0, #0
   11a4c:	1a000005 	bne	11a68 <CUSBGamePadPS4Device::SendLedRumbleCommand()+0x94>
   11a50:	eb0028dd 	bl	1bdcc <CLogger::Get()>
   11a54:	e3053c9c 	movw	r3, #23708	; 0x5c9c
   11a58:	e3403002 	movt	r3, #2
   11a5c:	e3a02001 	mov	r2, #1
   11a60:	e59f1008 	ldr	r1, [pc, #8]	; 11a70 <CUSBGamePadPS4Device::SendLedRumbleCommand()+0x9c>
   11a64:	eb00280f 	bl	1baa8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   11a68:	e1a00004 	mov	r0, r4
   11a6c:	e8bd8010 	pop	{r4, pc}
   11a70:	00025c68 	.word	0x00025c68

00011a74 <CUSBGamePadPS4Device::SetLEDMode(TGamePadLEDMode)>:
   11a74:	e2411001 	sub	r1, r1, #1
   11a78:	e3510006 	cmp	r1, #6
   11a7c:	979ff101 	ldrls	pc, [pc, r1, lsl #2]
   11a80:	ea00002f 	b	11b44 <CUSBGamePadPS4Device::SetLEDMode(TGamePadLEDMode)+0xd0>
   11a84:	00011ab4 	.word	0x00011ab4
   11a88:	00011acc 	.word	0x00011acc
   11a8c:	00011ae4 	.word	0x00011ae4
   11a90:	00011afc 	.word	0x00011afc
   11a94:	00011b14 	.word	0x00011b14
   11a98:	00011b2c 	.word	0x00011b2c
   11a9c:	00011aa0 	.word	0x00011aa0
   11aa0:	e3e02102 	mvn	r2, #-2147483648	; 0x80000000
   11aa4:	e3e03000 	mvn	r3, #0
   11aa8:	e5802134 	str	r2, [r0, #308]	; 0x134
   11aac:	e5c03138 	strb	r3, [r0, #312]	; 0x138
   11ab0:	eaffffc7 	b	119d4 <CUSBGamePadPS4Device::SendLedRumbleCommand()>
   11ab4:	e3a03000 	mov	r3, #0
   11ab8:	e3473fff 	movt	r3, #32767	; 0x7fff
   11abc:	e3e02000 	mvn	r2, #0
   11ac0:	e5803134 	str	r3, [r0, #308]	; 0x134
   11ac4:	e5c02138 	strb	r2, [r0, #312]	; 0x138
   11ac8:	eaffffc1 	b	119d4 <CUSBGamePadPS4Device::SendLedRumbleCommand()>
   11acc:	e3a030ff 	mov	r3, #255	; 0xff
   11ad0:	e3473f00 	movt	r3, #32512	; 0x7f00
   11ad4:	e3e02000 	mvn	r2, #0
   11ad8:	e5803134 	str	r3, [r0, #308]	; 0x134
   11adc:	e5c02138 	strb	r2, [r0, #312]	; 0x138
   11ae0:	eaffffbb 	b	119d4 <CUSBGamePadPS4Device::SendLedRumbleCommand()>
   11ae4:	e3a030ff 	mov	r3, #255	; 0xff
   11ae8:	e3473fff 	movt	r3, #32767	; 0x7fff
   11aec:	e3e02000 	mvn	r2, #0
   11af0:	e5803134 	str	r3, [r0, #308]	; 0x134
   11af4:	e5c02138 	strb	r2, [r0, #312]	; 0x138
   11af8:	eaffffb5 	b	119d4 <CUSBGamePadPS4Device::SendLedRumbleCommand()>
   11afc:	e3a03cff 	mov	r3, #65280	; 0xff00
   11b00:	e3473f00 	movt	r3, #32512	; 0x7f00
   11b04:	e3e02000 	mvn	r2, #0
   11b08:	e5803134 	str	r3, [r0, #308]	; 0x134
   11b0c:	e5c02138 	strb	r2, [r0, #312]	; 0x138
   11b10:	eaffffaf 	b	119d4 <CUSBGamePadPS4Device::SendLedRumbleCommand()>
   11b14:	e3a03cff 	mov	r3, #65280	; 0xff00
   11b18:	e3473fff 	movt	r3, #32767	; 0x7fff
   11b1c:	e3e02000 	mvn	r2, #0
   11b20:	e5803134 	str	r3, [r0, #308]	; 0x134
   11b24:	e5c02138 	strb	r2, [r0, #312]	; 0x138
   11b28:	eaffffa9 	b	119d4 <CUSBGamePadPS4Device::SendLedRumbleCommand()>
   11b2c:	e30f3fff 	movw	r3, #65535	; 0xffff
   11b30:	e3473f00 	movt	r3, #32512	; 0x7f00
   11b34:	e3e02000 	mvn	r2, #0
   11b38:	e5803134 	str	r3, [r0, #308]	; 0x134
   11b3c:	e5c02138 	strb	r2, [r0, #312]	; 0x138
   11b40:	eaffffa3 	b	119d4 <CUSBGamePadPS4Device::SendLedRumbleCommand()>
   11b44:	e3a03000 	mov	r3, #0
   11b48:	e5803134 	str	r3, [r0, #308]	; 0x134
   11b4c:	e5c03138 	strb	r3, [r0, #312]	; 0x138
   11b50:	eaffff9f 	b	119d4 <CUSBGamePadPS4Device::SendLedRumbleCommand()>

00011b54 <CUSBGamePadPS4Device::SetLEDMode(unsigned int, unsigned char, unsigned char)>:
   11b54:	e92d4010 	push	{r4, lr}
   11b58:	e1a04821 	lsr	r4, r1, #16
   11b5c:	e1a0e421 	lsr	lr, r1, #8
   11b60:	e5c04134 	strb	r4, [r0, #308]	; 0x134
   11b64:	e5c01136 	strb	r1, [r0, #310]	; 0x136
   11b68:	e5c0e135 	strb	lr, [r0, #309]	; 0x135
   11b6c:	e5c02137 	strb	r2, [r0, #311]	; 0x137
   11b70:	e5c03138 	strb	r3, [r0, #312]	; 0x138
   11b74:	e8bd4010 	pop	{r4, lr}
   11b78:	eaffff95 	b	119d4 <CUSBGamePadPS4Device::SendLedRumbleCommand()>

00011b7c <CUSBGamePadPS4Device::SetRumbleMode(TGamePadRumbleMode)>:
   11b7c:	e3510001 	cmp	r1, #1
   11b80:	0a000011 	beq	11bcc <CUSBGamePadPS4Device::SetRumbleMode(TGamePadRumbleMode)+0x50>
   11b84:	3a00000a 	bcc	11bb4 <CUSBGamePadPS4Device::SetRumbleMode(TGamePadRumbleMode)+0x38>
   11b88:	e3510002 	cmp	r1, #2
   11b8c:	1a000006 	bne	11bac <CUSBGamePadPS4Device::SetRumbleMode(TGamePadRumbleMode)+0x30>
   11b90:	e3e0300c 	mvn	r3, #12
   11b94:	e3a02000 	mov	r2, #0
   11b98:	e5c03131 	strb	r3, [r0, #305]	; 0x131
   11b9c:	e3e03000 	mvn	r3, #0
   11ba0:	e5c02133 	strb	r2, [r0, #307]	; 0x133
   11ba4:	e5c03132 	strb	r3, [r0, #306]	; 0x132
   11ba8:	eaffff89 	b	119d4 <CUSBGamePadPS4Device::SendLedRumbleCommand()>
   11bac:	e3a00001 	mov	r0, #1
   11bb0:	e12fff1e 	bx	lr
   11bb4:	e3a03000 	mov	r3, #0
   11bb8:	e3e0200f 	mvn	r2, #15
   11bbc:	e5c03133 	strb	r3, [r0, #307]	; 0x133
   11bc0:	e5c02131 	strb	r2, [r0, #305]	; 0x131
   11bc4:	e5c03132 	strb	r3, [r0, #306]	; 0x132
   11bc8:	eaffff81 	b	119d4 <CUSBGamePadPS4Device::SendLedRumbleCommand()>
   11bcc:	e3e0300c 	mvn	r3, #12
   11bd0:	e3e02000 	mvn	r2, #0
   11bd4:	e5c03131 	strb	r3, [r0, #305]	; 0x131
   11bd8:	e3a03000 	mov	r3, #0
   11bdc:	e5c02133 	strb	r2, [r0, #307]	; 0x133
   11be0:	e5c03132 	strb	r3, [r0, #306]	; 0x132
   11be4:	eaffff7a 	b	119d4 <CUSBGamePadPS4Device::SendLedRumbleCommand()>

00011be8 <CUSBGamePadPS4Device::DisableTouchpad()>:
   11be8:	e30b302c 	movw	r3, #45100	; 0xb02c
   11bec:	e3403002 	movt	r3, #2
   11bf0:	e3a02000 	mov	r2, #0
   11bf4:	e5c32000 	strb	r2, [r3]
   11bf8:	e12fff1e 	bx	lr

00011bfc <CUSBGamePadPS4Device::Configure()>:
   11bfc:	e5d03130 	ldrb	r3, [r0, #304]	; 0x130
   11c00:	e92d4070 	push	{r4, r5, r6, lr}
   11c04:	e3530000 	cmp	r3, #0
   11c08:	0a00003f 	beq	11d0c <CUSBGamePadPS4Device::Configure()+0x110>
   11c0c:	e2803f4a 	add	r3, r0, #296	; 0x128
   11c10:	e3a02040 	mov	r2, #64	; 0x40
   11c14:	e1a04000 	mov	r4, r0
   11c18:	e1c320b0 	strh	r2, [r3]
   11c1c:	eb0015d6 	bl	1737c <CUSBGamePadDevice::Configure()>
   11c20:	e3500000 	cmp	r0, #0
   11c24:	0a00003c 	beq	11d1c <CUSBGamePadPS4Device::Configure()+0x120>
   11c28:	e30b302c 	movw	r3, #45100	; 0xb02c
   11c2c:	e3403002 	movt	r3, #2
   11c30:	e5d33000 	ldrb	r3, [r3]
   11c34:	e3530000 	cmp	r3, #0
   11c38:	1a00003f 	bne	11d3c <CUSBGamePadPS4Device::Configure()+0x140>
   11c3c:	e1a03004 	mov	r3, r4
   11c40:	e2841048 	add	r1, r4, #72	; 0x48
   11c44:	e3a05000 	mov	r5, #0
   11c48:	e3a020ff 	mov	r2, #255	; 0xff
   11c4c:	e3a0000e 	mov	r0, #14
   11c50:	e5840104 	str	r0, [r4, #260]	; 0x104
   11c54:	e3a00001 	mov	r0, #1
   11c58:	e58400e8 	str	r0, [r4, #232]	; 0xe8
   11c5c:	e3a00006 	mov	r0, #6
   11c60:	e5840024 	str	r0, [r4, #36]	; 0x24
   11c64:	e583502c 	str	r5, [r3, #44]	; 0x2c
   11c68:	e283300c 	add	r3, r3, #12
   11c6c:	e5832024 	str	r2, [r3, #36]	; 0x24
   11c70:	e1510003 	cmp	r1, r3
   11c74:	1afffffa 	bne	11c64 <CUSBGamePadPS4Device::Configure()+0x68>
   11c78:	e3a00020 	mov	r0, #32
   11c7c:	eb004100 	bl	22084 <operator new[](unsigned int)>
   11c80:	e1a03000 	mov	r3, r0
   11c84:	f2c00050 	vmov.i32	q8, #0	; 0x00000000
   11c88:	e2801010 	add	r1, r0, #16
   11c8c:	e3e02000 	mvn	r2, #0
   11c90:	e3a0c07f 	mov	ip, #127	; 0x7f
   11c94:	e584013c 	str	r0, [r4, #316]	; 0x13c
   11c98:	e3e0000f 	mvn	r0, #15
   11c9c:	e5c4c137 	strb	ip, [r4, #311]	; 0x137
   11ca0:	e5c40131 	strb	r0, [r4, #305]	; 0x131
   11ca4:	e1a00004 	mov	r0, r4
   11ca8:	f4430a0f 	vst1.8	{d16-d17}, [r3]
   11cac:	e5c42134 	strb	r2, [r4, #308]	; 0x134
   11cb0:	f4410a0f 	vst1.8	{d16-d17}, [r1]
   11cb4:	e3a01007 	mov	r1, #7
   11cb8:	e5c42135 	strb	r2, [r4, #309]	; 0x135
   11cbc:	e5c31001 	strb	r1, [r3, #1]
   11cc0:	e5c42136 	strb	r2, [r4, #310]	; 0x136
   11cc4:	e5c42138 	strb	r2, [r4, #312]	; 0x138
   11cc8:	e3a02005 	mov	r2, #5
   11ccc:	e5c45133 	strb	r5, [r4, #307]	; 0x133
   11cd0:	e5c32000 	strb	r2, [r3]
   11cd4:	e3a02004 	mov	r2, #4
   11cd8:	e5c45132 	strb	r5, [r4, #306]	; 0x132
   11cdc:	e5c32002 	strb	r2, [r3, #2]
   11ce0:	ebffff3b 	bl	119d4 <CUSBGamePadPS4Device::SendLedRumbleCommand()>
   11ce4:	e2843f4d 	add	r3, r4, #308	; 0x134
   11ce8:	e3a000fa 	mov	r0, #250	; 0xfa
   11cec:	e1c350b0 	strh	r5, [r3]
   11cf0:	e5c45136 	strb	r5, [r4, #310]	; 0x136
   11cf4:	eb003b0a 	bl	20924 <CTimer::SimpleMsDelay(unsigned int)>
   11cf8:	e1a00004 	mov	r0, r4
   11cfc:	ebffff34 	bl	119d4 <CUSBGamePadPS4Device::SendLedRumbleCommand()>
   11d00:	e1a00004 	mov	r0, r4
   11d04:	e8bd4070 	pop	{r4, r5, r6, lr}
   11d08:	eafff9a3 	b	1039c <CUSBHIDDevice::StartRequest()>
   11d0c:	e59f1040 	ldr	r1, [pc, #64]	; 11d54 <CUSBGamePadPS4Device::Configure()+0x158>
   11d10:	eb0004f8 	bl	130f8 <CUSBFunction::ConfigurationError(char const*) const>
   11d14:	e3a00000 	mov	r0, #0
   11d18:	e8bd8070 	pop	{r4, r5, r6, pc}
   11d1c:	eb00282a 	bl	1bdcc <CLogger::Get()>
   11d20:	e3a02001 	mov	r2, #1
   11d24:	e59f1028 	ldr	r1, [pc, #40]	; 11d54 <CUSBGamePadPS4Device::Configure()+0x158>
   11d28:	e3053abc 	movw	r3, #23228	; 0x5abc
   11d2c:	e3403002 	movt	r3, #2
   11d30:	eb00275c 	bl	1baa8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   11d34:	e3a00000 	mov	r0, #0
   11d38:	e8bd8070 	pop	{r4, r5, r6, pc}
   11d3c:	e3a00028 	mov	r0, #40	; 0x28
   11d40:	eb0040ce 	bl	22080 <operator new(unsigned int)>
   11d44:	e1a05000 	mov	r5, r0
   11d48:	eb0017c8 	bl	17c70 <CMouseDevice::CMouseDevice()>
   11d4c:	e5845140 	str	r5, [r4, #320]	; 0x140
   11d50:	eaffffb9 	b	11c3c <CUSBGamePadPS4Device::Configure()+0x40>
   11d54:	00025c68 	.word	0x00025c68

00011d58 <CUSBGamePadPS4Device::GetProperties()>:
   11d58:	e3a0003f 	mov	r0, #63	; 0x3f
   11d5c:	e12fff1e 	bx	lr

00011d60 <CUSBGamePadXbox360Device::~CUSBGamePadXbox360Device()>:
   11d60:	e59f3014 	ldr	r3, [pc, #20]	; 11d7c <CUSBGamePadXbox360Device::~CUSBGamePadXbox360Device()+0x1c>
   11d64:	e92d4010 	push	{r4, lr}
   11d68:	e1a04000 	mov	r4, r0
   11d6c:	e5803000 	str	r3, [r0]
   11d70:	eb0015c1 	bl	1747c <CUSBGamePadDevice::~CUSBGamePadDevice()>
   11d74:	e1a00004 	mov	r0, r4
   11d78:	e8bd8010 	pop	{r4, pc}
   11d7c:	00025cc4 	.word	0x00025cc4

00011d80 <CUSBGamePadXbox360Device::~CUSBGamePadXbox360Device()>:
   11d80:	e59f3020 	ldr	r3, [pc, #32]	; 11da8 <CUSBGamePadXbox360Device::~CUSBGamePadXbox360Device()+0x28>
   11d84:	e92d4010 	push	{r4, lr}
   11d88:	e1a04000 	mov	r4, r0
   11d8c:	e5803000 	str	r3, [r0]
   11d90:	eb0015b9 	bl	1747c <CUSBGamePadDevice::~CUSBGamePadDevice()>
   11d94:	e1a00004 	mov	r0, r4
   11d98:	e3a01e13 	mov	r1, #304	; 0x130
   11d9c:	eb0040bb 	bl	22090 <operator delete(void*, unsigned int)>
   11da0:	e1a00004 	mov	r0, r4
   11da4:	e8bd8010 	pop	{r4, pc}
   11da8:	00025cc4 	.word	0x00025cc4

00011dac <CUSBGamePadXbox360Device::DecodeReport(unsigned char const*)>:
   11dac:	e92d4070 	push	{r4, r5, r6, lr}
   11db0:	e1a04000 	mov	r4, r0
   11db4:	e2515000 	subs	r5, r1, #0
   11db8:	0a000039 	beq	11ea4 <CUSBGamePadXbox360Device::DecodeReport(unsigned char const*)+0xf8>
   11dbc:	e1d530b0 	ldrh	r3, [r5]
   11dc0:	e3530b05 	cmp	r3, #5120	; 0x1400
   11dc4:	0a000005 	beq	11de0 <CUSBGamePadXbox360Device::DecodeReport(unsigned char const*)+0x34>
   11dc8:	e3051d74 	movw	r1, #23924	; 0x5d74
   11dcc:	e3401002 	movt	r1, #2
   11dd0:	e3050d8c 	movw	r0, #23948	; 0x5d8c
   11dd4:	e3400002 	movt	r0, #2
   11dd8:	e3a02078 	mov	r2, #120	; 0x78
   11ddc:	eb001d9c 	bl	19454 <assertion_failed>
   11de0:	e59f30d8 	ldr	r3, [pc, #216]	; 11ec0 <CUSBGamePadXbox360Device::DecodeReport(unsigned char const*)+0x114>
   11de4:	e3a01000 	mov	r1, #0
   11de8:	e1d520b2 	ldrh	r2, [r5, #2]
   11dec:	e2830040 	add	r0, r3, #64	; 0x40
   11df0:	e5841108 	str	r1, [r4, #264]	; 0x108
   11df4:	e3120001 	tst	r2, #1
   11df8:	e2833004 	add	r3, r3, #4
   11dfc:	e1a020a2 	lsr	r2, r2, #1
   11e00:	1513c004 	ldrne	ip, [r3, #-4]
   11e04:	15941108 	ldrne	r1, [r4, #264]	; 0x108
   11e08:	1181100c 	orrne	r1, r1, ip
   11e0c:	15841108 	strne	r1, [r4, #264]	; 0x108
   11e10:	e1500003 	cmp	r0, r3
   11e14:	1afffff6 	bne	11df4 <CUSBGamePadXbox360Device::DecodeReport(unsigned char const*)+0x48>
   11e18:	e1d530f6 	ldrsh	r3, [r5, #6]
   11e1c:	e3a01000 	mov	r1, #0
   11e20:	e1a02001 	mov	r2, r1
   11e24:	e3a0e00c 	mov	lr, #12
   11e28:	e2833902 	add	r3, r3, #32768	; 0x8000
   11e2c:	e1a03423 	lsr	r3, r3, #8
   11e30:	e021419e 	mla	r1, lr, r1, r4
   11e34:	e2822001 	add	r2, r2, #1
   11e38:	e085c082 	add	ip, r5, r2, lsl #1
   11e3c:	e3520004 	cmp	r2, #4
   11e40:	e5813028 	str	r3, [r1, #40]	; 0x28
   11e44:	0a000007 	beq	11e68 <CUSBGamePadXbox360Device::DecodeReport(unsigned char const*)+0xbc>
   11e48:	e1dc30f6 	ldrsh	r3, [ip, #6]
   11e4c:	e7901102 	ldr	r1, [r0, r2, lsl #2]
   11e50:	e2833902 	add	r3, r3, #32768	; 0x8000
   11e54:	e3c1c002 	bic	ip, r1, #2
   11e58:	e1a03423 	lsr	r3, r3, #8
   11e5c:	e35c0001 	cmp	ip, #1
   11e60:	026330ff 	rsbeq	r3, r3, #255	; 0xff
   11e64:	eafffff1 	b	11e30 <CUSBGamePadXbox360Device::DecodeReport(unsigned char const*)+0x84>
   11e68:	e5d53004 	ldrb	r3, [r5, #4]
   11e6c:	e5843058 	str	r3, [r4, #88]	; 0x58
   11e70:	e1d530d4 	ldrsb	r3, [r5, #4]
   11e74:	e3530000 	cmp	r3, #0
   11e78:	b5943108 	ldrlt	r3, [r4, #264]	; 0x108
   11e7c:	b3833008 	orrlt	r3, r3, #8
   11e80:	b5843108 	strlt	r3, [r4, #264]	; 0x108
   11e84:	e5d53005 	ldrb	r3, [r5, #5]
   11e88:	e5843064 	str	r3, [r4, #100]	; 0x64
   11e8c:	e1d530d5 	ldrsb	r3, [r5, #5]
   11e90:	e3530000 	cmp	r3, #0
   11e94:	b5943108 	ldrlt	r3, [r4, #264]	; 0x108
   11e98:	b3833010 	orrlt	r3, r3, #16
   11e9c:	b5843108 	strlt	r3, [r4, #264]	; 0x108
   11ea0:	e8bd8070 	pop	{r4, r5, r6, pc}
   11ea4:	e3051d74 	movw	r1, #23924	; 0x5d74
   11ea8:	e3401002 	movt	r1, #2
   11eac:	e3050bec 	movw	r0, #23532	; 0x5bec
   11eb0:	e3400002 	movt	r0, #2
   11eb4:	e3a02077 	mov	r2, #119	; 0x77
   11eb8:	eb001d65 	bl	19454 <assertion_failed>
   11ebc:	eaffffbe 	b	11dbc <CUSBGamePadXbox360Device::DecodeReport(unsigned char const*)+0x10>
   11ec0:	00025d04 	.word	0x00025d04

00011ec4 <CUSBGamePadXbox360Device::ReportHandler(unsigned char const*, unsigned int)>:
   11ec4:	e242200e 	sub	r2, r2, #14
   11ec8:	e3510000 	cmp	r1, #0
   11ecc:	e16f2f12 	clz	r2, r2
   11ed0:	e1a022a2 	lsr	r2, r2, #5
   11ed4:	03a02000 	moveq	r2, #0
   11ed8:	e3520000 	cmp	r2, #0
   11edc:	012fff1e 	bxeq	lr
   11ee0:	e5d12000 	ldrb	r2, [r1]
   11ee4:	e3520000 	cmp	r2, #0
   11ee8:	112fff1e 	bxne	lr
   11eec:	e5d13001 	ldrb	r3, [r1, #1]
   11ef0:	e3530014 	cmp	r3, #20
   11ef4:	112fff1e 	bxne	lr
   11ef8:	e5903124 	ldr	r3, [r0, #292]	; 0x124
   11efc:	e92d4070 	push	{r4, r5, r6, lr}
   11f00:	e1a04000 	mov	r4, r0
   11f04:	e3530000 	cmp	r3, #0
   11f08:	08bd8070 	popeq	{r4, r5, r6, pc}
   11f0c:	e1a05000 	mov	r5, r0
   11f10:	e4953024 	ldr	r3, [r5], #36	; 0x24
   11f14:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
   11f18:	e12fff33 	blx	r3
   11f1c:	e594012c 	ldr	r0, [r4, #300]	; 0x12c
   11f20:	e1a01005 	mov	r1, r5
   11f24:	e5943124 	ldr	r3, [r4, #292]	; 0x124
   11f28:	e2400001 	sub	r0, r0, #1
   11f2c:	e8bd4070 	pop	{r4, r5, r6, lr}
   11f30:	e12fff13 	bx	r3

00011f34 <CUSBGamePadXbox360Device::SetLEDMode(TGamePadLEDMode)>:
   11f34:	e3510004 	cmp	r1, #4
   11f38:	9a000001 	bls	11f44 <CUSBGamePadXbox360Device::SetLEDMode(TGamePadLEDMode)+0x10>
   11f3c:	e3a00000 	mov	r0, #0
   11f40:	e12fff1e 	bx	lr
   11f44:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   11f48:	e3053cbc 	movw	r3, #23740	; 0x5cbc
   11f4c:	e3403002 	movt	r3, #2
   11f50:	e083c001 	add	ip, r3, r1
   11f54:	e24dd00c 	sub	sp, sp, #12
   11f58:	e3a03000 	mov	r3, #0
   11f5c:	e3a02003 	mov	r2, #3
   11f60:	e28d1004 	add	r1, sp, #4
   11f64:	e300e301 	movw	lr, #769	; 0x301
   11f68:	e5dcc0a0 	ldrb	ip, [ip, #160]	; 0xa0
   11f6c:	e1cde0b4 	strh	lr, [sp, #4]
   11f70:	e5cdc006 	strb	ip, [sp, #6]
   11f74:	ebfff872 	bl	10144 <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)>
   11f78:	e28dd00c 	add	sp, sp, #12
   11f7c:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

00011f80 <CUSBGamePadXbox360Device::SetRumbleMode(TGamePadRumbleMode)>:
   11f80:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   11f84:	f2c00010 	vmov.i32	d16, #0	; 0x00000000
   11f88:	e3a03008 	mov	r3, #8
   11f8c:	e24dd00c 	sub	sp, sp, #12
   11f90:	e3510001 	cmp	r1, #1
   11f94:	edcd0b00 	vstr	d16, [sp]
   11f98:	e5cd3001 	strb	r3, [sp, #1]
   11f9c:	0a000013 	beq	11ff0 <CUSBGamePadXbox360Device::SetRumbleMode(TGamePadRumbleMode)+0x70>
   11fa0:	3a000003 	bcc	11fb4 <CUSBGamePadXbox360Device::SetRumbleMode(TGamePadRumbleMode)+0x34>
   11fa4:	e3510002 	cmp	r1, #2
   11fa8:	1a000007 	bne	11fcc <CUSBGamePadXbox360Device::SetRumbleMode(TGamePadRumbleMode)+0x4c>
   11fac:	e3e03000 	mvn	r3, #0
   11fb0:	e5cd3003 	strb	r3, [sp, #3]
   11fb4:	e3a03000 	mov	r3, #0
   11fb8:	e3a02008 	mov	r2, #8
   11fbc:	e1a0100d 	mov	r1, sp
   11fc0:	ebfff85f 	bl	10144 <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)>
   11fc4:	e28dd00c 	add	sp, sp, #12
   11fc8:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   11fcc:	e3a020e5 	mov	r2, #229	; 0xe5
   11fd0:	e3051d74 	movw	r1, #23924	; 0x5d74
   11fd4:	e3401002 	movt	r1, #2
   11fd8:	e3040ad8 	movw	r0, #19160	; 0x4ad8
   11fdc:	e3400002 	movt	r0, #2
   11fe0:	eb001d1b 	bl	19454 <assertion_failed>
   11fe4:	e3a00000 	mov	r0, #0
   11fe8:	e28dd00c 	add	sp, sp, #12
   11fec:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   11ff0:	e3e03000 	mvn	r3, #0
   11ff4:	e5cd3004 	strb	r3, [sp, #4]
   11ff8:	eaffffed 	b	11fb4 <CUSBGamePadXbox360Device::SetRumbleMode(TGamePadRumbleMode)+0x34>

00011ffc <CUSBGamePadXbox360Device::CUSBGamePadXbox360Device(CUSBFunction*)>:
   11ffc:	e92d4010 	push	{r4, lr}
   12000:	e1a04000 	mov	r4, r0
   12004:	eb00150a 	bl	17434 <CUSBGamePadDevice::CUSBGamePadDevice(CUSBFunction*)>
   12008:	e59f3008 	ldr	r3, [pc, #8]	; 12018 <CUSBGamePadXbox360Device::CUSBGamePadXbox360Device(CUSBFunction*)+0x1c>
   1200c:	e1a00004 	mov	r0, r4
   12010:	e5843000 	str	r3, [r4]
   12014:	e8bd8010 	pop	{r4, pc}
   12018:	00025cc4 	.word	0x00025cc4

0001201c <CUSBGamePadXbox360Device::Configure()>:
   1201c:	e2803f4a 	add	r3, r0, #296	; 0x128
   12020:	e92d4070 	push	{r4, r5, r6, lr}
   12024:	e3a0200e 	mov	r2, #14
   12028:	e1a04000 	mov	r4, r0
   1202c:	e1c320b0 	strh	r2, [r3]
   12030:	eb0014d1 	bl	1737c <CUSBGamePadDevice::Configure()>
   12034:	e3500000 	cmp	r0, #0
   12038:	0a00001e 	beq	120b8 <CUSBGamePadXbox360Device::Configure()+0x9c>
   1203c:	e5941000 	ldr	r1, [r4]
   12040:	e3a02012 	mov	r2, #18
   12044:	e3a03006 	mov	r3, #6
   12048:	e5842104 	str	r2, [r4, #260]	; 0x104
   1204c:	e5843024 	str	r3, [r4, #36]	; 0x24
   12050:	e3a020ff 	mov	r2, #255	; 0xff
   12054:	e3a03000 	mov	r3, #0
   12058:	e1a00004 	mov	r0, r4
   1205c:	e5915030 	ldr	r5, [r1, #48]	; 0x30
   12060:	e584302c 	str	r3, [r4, #44]	; 0x2c
   12064:	e5843038 	str	r3, [r4, #56]	; 0x38
   12068:	e5843044 	str	r3, [r4, #68]	; 0x44
   1206c:	e5843050 	str	r3, [r4, #80]	; 0x50
   12070:	e584305c 	str	r3, [r4, #92]	; 0x5c
   12074:	e5843068 	str	r3, [r4, #104]	; 0x68
   12078:	e58430e8 	str	r3, [r4, #232]	; 0xe8
   1207c:	e5842030 	str	r2, [r4, #48]	; 0x30
   12080:	e584203c 	str	r2, [r4, #60]	; 0x3c
   12084:	e5842048 	str	r2, [r4, #72]	; 0x48
   12088:	e5842054 	str	r2, [r4, #84]	; 0x54
   1208c:	e5842060 	str	r2, [r4, #96]	; 0x60
   12090:	e584206c 	str	r2, [r4, #108]	; 0x6c
   12094:	e5d4112c 	ldrb	r1, [r4, #300]	; 0x12c
   12098:	e12fff35 	blx	r5
   1209c:	e3500000 	cmp	r0, #0
   120a0:	1a000001 	bne	120ac <CUSBGamePadXbox360Device::Configure()+0x90>
   120a4:	e3a00000 	mov	r0, #0
   120a8:	e8bd8070 	pop	{r4, r5, r6, pc}
   120ac:	e1a00004 	mov	r0, r4
   120b0:	e8bd4070 	pop	{r4, r5, r6, lr}
   120b4:	eafff8b8 	b	1039c <CUSBHIDDevice::StartRequest()>
   120b8:	eb002743 	bl	1bdcc <CLogger::Get()>
   120bc:	e3a02001 	mov	r2, #1
   120c0:	e59f1010 	ldr	r1, [pc, #16]	; 120d8 <CUSBGamePadXbox360Device::Configure()+0xbc>
   120c4:	e3053abc 	movw	r3, #23228	; 0x5abc
   120c8:	e3403002 	movt	r3, #2
   120cc:	eb002675 	bl	1baa8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   120d0:	e3a00000 	mov	r0, #0
   120d4:	e8bd8070 	pop	{r4, r5, r6, pc}
   120d8:	00025d64 	.word	0x00025d64

000120dc <CUSBGamePadXbox360Device::GetProperties()>:
   120dc:	e3a0000b 	mov	r0, #11
   120e0:	e12fff1e 	bx	lr

000120e4 <CUSBGamePadXboxOneDevice::DecodeReport(unsigned char const*)>:
   120e4:	e5d13004 	ldrb	r3, [r1, #4]
   120e8:	e3a02000 	mov	r2, #0
   120ec:	e5802108 	str	r2, [r0, #264]	; 0x108
   120f0:	e3130004 	tst	r3, #4
   120f4:	13a02901 	movne	r2, #16384	; 0x4000
   120f8:	15802108 	strne	r2, [r0, #264]	; 0x108
   120fc:	e3130008 	tst	r3, #8
   12100:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   12104:	13822b02 	orrne	r2, r2, #2048	; 0x800
   12108:	15802108 	strne	r2, [r0, #264]	; 0x108
   1210c:	e3130010 	tst	r3, #16
   12110:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   12114:	13822c02 	orrne	r2, r2, #512	; 0x200
   12118:	15802108 	strne	r2, [r0, #264]	; 0x108
   1211c:	e3130020 	tst	r3, #32
   12120:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   12124:	13822c01 	orrne	r2, r2, #256	; 0x100
   12128:	15802108 	strne	r2, [r0, #264]	; 0x108
   1212c:	e3130040 	tst	r3, #64	; 0x40
   12130:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   12134:	13822b01 	orrne	r2, r2, #1024	; 0x400
   12138:	15802108 	strne	r2, [r0, #264]	; 0x108
   1213c:	e1b033a3 	lsrs	r3, r3, #7
   12140:	15903108 	ldrne	r3, [r0, #264]	; 0x108
   12144:	13833080 	orrne	r3, r3, #128	; 0x80
   12148:	15803108 	strne	r3, [r0, #264]	; 0x108
   1214c:	e5d13005 	ldrb	r3, [r1, #5]
   12150:	e3130001 	tst	r3, #1
   12154:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   12158:	13822902 	orrne	r2, r2, #32768	; 0x8000
   1215c:	15802108 	strne	r2, [r0, #264]	; 0x108
   12160:	e3130002 	tst	r3, #2
   12164:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   12168:	13822802 	orrne	r2, r2, #131072	; 0x20000
   1216c:	15802108 	strne	r2, [r0, #264]	; 0x108
   12170:	e3130004 	tst	r3, #4
   12174:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   12178:	13822701 	orrne	r2, r2, #262144	; 0x40000
   1217c:	15802108 	strne	r2, [r0, #264]	; 0x108
   12180:	e3130008 	tst	r3, #8
   12184:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   12188:	13822801 	orrne	r2, r2, #65536	; 0x10000
   1218c:	15802108 	strne	r2, [r0, #264]	; 0x108
   12190:	e3130010 	tst	r3, #16
   12194:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   12198:	13822020 	orrne	r2, r2, #32
   1219c:	15802108 	strne	r2, [r0, #264]	; 0x108
   121a0:	e3130020 	tst	r3, #32
   121a4:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   121a8:	13822040 	orrne	r2, r2, #64	; 0x40
   121ac:	15802108 	strne	r2, [r0, #264]	; 0x108
   121b0:	e3130040 	tst	r3, #64	; 0x40
   121b4:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   121b8:	13822a01 	orrne	r2, r2, #4096	; 0x1000
   121bc:	15802108 	strne	r2, [r0, #264]	; 0x108
   121c0:	e1b033a3 	lsrs	r3, r3, #7
   121c4:	15903108 	ldrne	r3, [r0, #264]	; 0x108
   121c8:	13833a02 	orrne	r3, r3, #8192	; 0x2000
   121cc:	15803108 	strne	r3, [r0, #264]	; 0x108
   121d0:	e1d130b6 	ldrh	r3, [r1, #6]
   121d4:	e1a03143 	asr	r3, r3, #2
   121d8:	e5803058 	str	r3, [r0, #88]	; 0x58
   121dc:	e353007f 	cmp	r3, #127	; 0x7f
   121e0:	c5903108 	ldrgt	r3, [r0, #264]	; 0x108
   121e4:	c3833008 	orrgt	r3, r3, #8
   121e8:	c5803108 	strgt	r3, [r0, #264]	; 0x108
   121ec:	e1d130b8 	ldrh	r3, [r1, #8]
   121f0:	e1a03143 	asr	r3, r3, #2
   121f4:	e5803064 	str	r3, [r0, #100]	; 0x64
   121f8:	e353007f 	cmp	r3, #127	; 0x7f
   121fc:	c5903108 	ldrgt	r3, [r0, #264]	; 0x108
   12200:	c3833010 	orrgt	r3, r3, #16
   12204:	c5803108 	strgt	r3, [r0, #264]	; 0x108
   12208:	e1d130fa 	ldrsh	r3, [r1, #10]
   1220c:	e2833902 	add	r3, r3, #32768	; 0x8000
   12210:	e1a03423 	lsr	r3, r3, #8
   12214:	e5803028 	str	r3, [r0, #40]	; 0x28
   12218:	e1d130fc 	ldrsh	r3, [r1, #12]
   1221c:	e2833902 	add	r3, r3, #32768	; 0x8000
   12220:	e1a03423 	lsr	r3, r3, #8
   12224:	e22330ff 	eor	r3, r3, #255	; 0xff
   12228:	e5803034 	str	r3, [r0, #52]	; 0x34
   1222c:	e1d130fe 	ldrsh	r3, [r1, #14]
   12230:	e2833902 	add	r3, r3, #32768	; 0x8000
   12234:	e1a03423 	lsr	r3, r3, #8
   12238:	e5803040 	str	r3, [r0, #64]	; 0x40
   1223c:	e1d131f0 	ldrsh	r3, [r1, #16]
   12240:	e2833902 	add	r3, r3, #32768	; 0x8000
   12244:	e1a03423 	lsr	r3, r3, #8
   12248:	e22330ff 	eor	r3, r3, #255	; 0xff
   1224c:	e580304c 	str	r3, [r0, #76]	; 0x4c
   12250:	e12fff1e 	bx	lr

00012254 <CUSBGamePadXboxOneDevice::~CUSBGamePadXboxOneDevice()>:
   12254:	e59f3014 	ldr	r3, [pc, #20]	; 12270 <CUSBGamePadXboxOneDevice::~CUSBGamePadXboxOneDevice()+0x1c>
   12258:	e92d4010 	push	{r4, lr}
   1225c:	e1a04000 	mov	r4, r0
   12260:	e5803000 	str	r3, [r0]
   12264:	eb001484 	bl	1747c <CUSBGamePadDevice::~CUSBGamePadDevice()>
   12268:	e1a00004 	mov	r0, r4
   1226c:	e8bd8010 	pop	{r4, pc}
   12270:	00025db8 	.word	0x00025db8

00012274 <CUSBGamePadXboxOneDevice::~CUSBGamePadXboxOneDevice()>:
   12274:	e59f3020 	ldr	r3, [pc, #32]	; 1229c <CUSBGamePadXboxOneDevice::~CUSBGamePadXboxOneDevice()+0x28>
   12278:	e92d4010 	push	{r4, lr}
   1227c:	e1a04000 	mov	r4, r0
   12280:	e5803000 	str	r3, [r0]
   12284:	eb00147c 	bl	1747c <CUSBGamePadDevice::~CUSBGamePadDevice()>
   12288:	e1a00004 	mov	r0, r4
   1228c:	e3a01f4d 	mov	r1, #308	; 0x134
   12290:	eb003f7e 	bl	22090 <operator delete(void*, unsigned int)>
   12294:	e1a00004 	mov	r0, r4
   12298:	e8bd8010 	pop	{r4, pc}
   1229c:	00025db8 	.word	0x00025db8

000122a0 <CUSBGamePadXboxOneDevice::ReportHandler(unsigned char const*, unsigned int)>:
   122a0:	e2513000 	subs	r3, r1, #0
   122a4:	012fff1e 	bxeq	lr
   122a8:	e92d4030 	push	{r4, r5, lr}
   122ac:	e3520006 	cmp	r2, #6
   122b0:	e1a04000 	mov	r4, r0
   122b4:	e24dd014 	sub	sp, sp, #20
   122b8:	0a000009 	beq	122e4 <CUSBGamePadXboxOneDevice::ReportHandler(unsigned char const*, unsigned int)+0x44>
   122bc:	e590c124 	ldr	ip, [r0, #292]	; 0x124
   122c0:	e2422012 	sub	r2, r2, #18
   122c4:	e16f2f12 	clz	r2, r2
   122c8:	e35c0000 	cmp	ip, #0
   122cc:	e1a022a2 	lsr	r2, r2, #5
   122d0:	03a02000 	moveq	r2, #0
   122d4:	e3520000 	cmp	r2, #0
   122d8:	1a00001c 	bne	12350 <CUSBGamePadXboxOneDevice::ReportHandler(unsigned char const*, unsigned int)+0xb0>
   122dc:	e28dd014 	add	sp, sp, #20
   122e0:	e8bd8030 	pop	{r4, r5, pc}
   122e4:	e5d32000 	ldrb	r2, [r3]
   122e8:	e3520007 	cmp	r2, #7
   122ec:	1afffffa 	bne	122dc <CUSBGamePadXboxOneDevice::ReportHandler(unsigned char const*, unsigned int)+0x3c>
   122f0:	e5d32001 	ldrb	r2, [r3, #1]
   122f4:	e3520030 	cmp	r2, #48	; 0x30
   122f8:	1afffff7 	bne	122dc <CUSBGamePadXboxOneDevice::ReportHandler(unsigned char const*, unsigned int)+0x3c>
   122fc:	e59f5080 	ldr	r5, [pc, #128]	; 12384 <CUSBGamePadXboxOneDevice::ReportHandler(unsigned char const*, unsigned int)+0xe4>
   12300:	e1a0c00d 	mov	ip, sp
   12304:	e5d3e002 	ldrb	lr, [r3, #2]
   12308:	e895000f 	ldm	r5, {r0, r1, r2, r3}
   1230c:	e8ac0007 	stmia	ip!, {r0, r1, r2}
   12310:	e1a00004 	mov	r0, r4
   12314:	e5cc3000 	strb	r3, [ip]
   12318:	e3a0200d 	mov	r2, #13
   1231c:	e3a03000 	mov	r3, #0
   12320:	e1a0100d 	mov	r1, sp
   12324:	e5cde002 	strb	lr, [sp, #2]
   12328:	ebfff7ad 	bl	101e4 <CUSBHIDDevice::SendToEndpointOutAsync(void const*, unsigned int, unsigned int)>
   1232c:	e3500000 	cmp	r0, #0
   12330:	1affffe9 	bne	122dc <CUSBGamePadXboxOneDevice::ReportHandler(unsigned char const*, unsigned int)+0x3c>
   12334:	eb0026a4 	bl	1bdcc <CLogger::Get()>
   12338:	e2851010 	add	r1, r5, #16
   1233c:	e3053e30 	movw	r3, #24112	; 0x5e30
   12340:	e3403002 	movt	r3, #2
   12344:	e3a02001 	mov	r2, #1
   12348:	eb0025d6 	bl	1baa8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1234c:	eaffffe2 	b	122dc <CUSBGamePadXboxOneDevice::ReportHandler(unsigned char const*, unsigned int)+0x3c>
   12350:	e5d33000 	ldrb	r3, [r3]
   12354:	e3530020 	cmp	r3, #32
   12358:	1affffdf 	bne	122dc <CUSBGamePadXboxOneDevice::ReportHandler(unsigned char const*, unsigned int)+0x3c>
   1235c:	e1a05000 	mov	r5, r0
   12360:	e4953024 	ldr	r3, [r5], #36	; 0x24
   12364:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
   12368:	e12fff33 	blx	r3
   1236c:	e594012c 	ldr	r0, [r4, #300]	; 0x12c
   12370:	e1a01005 	mov	r1, r5
   12374:	e5943124 	ldr	r3, [r4, #292]	; 0x124
   12378:	e2400001 	sub	r0, r0, #1
   1237c:	e12fff33 	blx	r3
   12380:	eaffffd5 	b	122dc <CUSBGamePadXboxOneDevice::ReportHandler(unsigned char const*, unsigned int)+0x3c>
   12384:	00025df8 	.word	0x00025df8

00012388 <CUSBGamePadXboxOneDevice::SetRumbleMode(TGamePadRumbleMode)>:
   12388:	e92d4010 	push	{r4, lr}
   1238c:	e3510001 	cmp	r1, #1
   12390:	e59f308c 	ldr	r3, [pc, #140]	; 12424 <CUSBGamePadXboxOneDevice::SetRumbleMode(TGamePadRumbleMode)+0x9c>
   12394:	e24dd010 	sub	sp, sp, #16
   12398:	e1a0e000 	mov	lr, r0
   1239c:	e1a0c00d 	mov	ip, sp
   123a0:	e1a04001 	mov	r4, r1
   123a4:	e893000f 	ldm	r3, {r0, r1, r2, r3}
   123a8:	e8ac0007 	stmia	ip!, {r0, r1, r2}
   123ac:	e5cc3000 	strb	r3, [ip]
   123b0:	0a000018 	beq	12418 <CUSBGamePadXboxOneDevice::SetRumbleMode(TGamePadRumbleMode)+0x90>
   123b4:	3a000003 	bcc	123c8 <CUSBGamePadXboxOneDevice::SetRumbleMode(TGamePadRumbleMode)+0x40>
   123b8:	e3540002 	cmp	r4, #2
   123bc:	1a00000c 	bne	123f4 <CUSBGamePadXboxOneDevice::SetRumbleMode(TGamePadRumbleMode)+0x6c>
   123c0:	e3e03000 	mvn	r3, #0
   123c4:	e5cd3008 	strb	r3, [sp, #8]
   123c8:	e5dec130 	ldrb	ip, [lr, #304]	; 0x130
   123cc:	e1a0100d 	mov	r1, sp
   123d0:	e1a0000e 	mov	r0, lr
   123d4:	e3a03000 	mov	r3, #0
   123d8:	e28c2001 	add	r2, ip, #1
   123dc:	e5ce2130 	strb	r2, [lr, #304]	; 0x130
   123e0:	e3a0200d 	mov	r2, #13
   123e4:	e5cdc002 	strb	ip, [sp, #2]
   123e8:	ebfff755 	bl	10144 <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)>
   123ec:	e28dd010 	add	sp, sp, #16
   123f0:	e8bd8010 	pop	{r4, pc}
   123f4:	e3a020ee 	mov	r2, #238	; 0xee
   123f8:	e3051e44 	movw	r1, #24132	; 0x5e44
   123fc:	e3401002 	movt	r1, #2
   12400:	e3040ad8 	movw	r0, #19160	; 0x4ad8
   12404:	e3400002 	movt	r0, #2
   12408:	eb001c11 	bl	19454 <assertion_failed>
   1240c:	e3a00000 	mov	r0, #0
   12410:	e28dd010 	add	sp, sp, #16
   12414:	e8bd8010 	pop	{r4, pc}
   12418:	e3e03000 	mvn	r3, #0
   1241c:	e5cd3009 	strb	r3, [sp, #9]
   12420:	eaffffe8 	b	123c8 <CUSBGamePadXboxOneDevice::SetRumbleMode(TGamePadRumbleMode)+0x40>
   12424:	00025e18 	.word	0x00025e18

00012428 <CUSBGamePadXboxOneDevice::CUSBGamePadXboxOneDevice(CUSBFunction*)>:
   12428:	e92d4010 	push	{r4, lr}
   1242c:	e1a04000 	mov	r4, r0
   12430:	eb0013ff 	bl	17434 <CUSBGamePadDevice::CUSBGamePadDevice(CUSBFunction*)>
   12434:	e59f2010 	ldr	r2, [pc, #16]	; 1244c <CUSBGamePadXboxOneDevice::CUSBGamePadXboxOneDevice(CUSBFunction*)+0x24>
   12438:	e3a03000 	mov	r3, #0
   1243c:	e1a00004 	mov	r0, r4
   12440:	e5842000 	str	r2, [r4]
   12444:	e5c43130 	strb	r3, [r4, #304]	; 0x130
   12448:	e8bd8010 	pop	{r4, pc}
   1244c:	00025db8 	.word	0x00025db8

00012450 <CUSBGamePadXboxOneDevice::Configure()>:
   12450:	e2803f4a 	add	r3, r0, #296	; 0x128
   12454:	e92d4070 	push	{r4, r5, r6, lr}
   12458:	e3a02040 	mov	r2, #64	; 0x40
   1245c:	e24dd008 	sub	sp, sp, #8
   12460:	e1a04000 	mov	r4, r0
   12464:	e1c320b0 	strh	r2, [r3]
   12468:	eb0013c3 	bl	1737c <CUSBGamePadDevice::Configure()>
   1246c:	e2505000 	subs	r5, r0, #0
   12470:	0a00002c 	beq	12528 <CUSBGamePadXboxOneDevice::Configure()+0xd8>
   12474:	e59f60d0 	ldr	r6, [pc, #208]	; 1254c <CUSBGamePadXboxOneDevice::Configure()+0xfc>
   12478:	e3a02000 	mov	r2, #0
   1247c:	e3a0c0ff 	mov	ip, #255	; 0xff
   12480:	e1a03002 	mov	r3, r2
   12484:	e584202c 	str	r2, [r4, #44]	; 0x2c
   12488:	e3a0e010 	mov	lr, #16
   1248c:	e5842038 	str	r2, [r4, #56]	; 0x38
   12490:	e8960003 	ldm	r6, {r0, r1}
   12494:	e5842044 	str	r2, [r4, #68]	; 0x44
   12498:	e58d0000 	str	r0, [sp]
   1249c:	e3a00006 	mov	r0, #6
   124a0:	e5cd1004 	strb	r1, [sp, #4]
   124a4:	e1a0100d 	mov	r1, sp
   124a8:	e5842050 	str	r2, [r4, #80]	; 0x50
   124ac:	e584205c 	str	r2, [r4, #92]	; 0x5c
   124b0:	e5842068 	str	r2, [r4, #104]	; 0x68
   124b4:	e58420e8 	str	r2, [r4, #232]	; 0xe8
   124b8:	e3a02005 	mov	r2, #5
   124bc:	e5840024 	str	r0, [r4, #36]	; 0x24
   124c0:	e1a00004 	mov	r0, r4
   124c4:	e584e104 	str	lr, [r4, #260]	; 0x104
   124c8:	e584c030 	str	ip, [r4, #48]	; 0x30
   124cc:	e584c03c 	str	ip, [r4, #60]	; 0x3c
   124d0:	e584c048 	str	ip, [r4, #72]	; 0x48
   124d4:	e584c054 	str	ip, [r4, #84]	; 0x54
   124d8:	e584c060 	str	ip, [r4, #96]	; 0x60
   124dc:	e584c06c 	str	ip, [r4, #108]	; 0x6c
   124e0:	ebfff717 	bl	10144 <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)>
   124e4:	e2505000 	subs	r5, r0, #0
   124e8:	0a000005 	beq	12504 <CUSBGamePadXboxOneDevice::Configure()+0xb4>
   124ec:	e1a00004 	mov	r0, r4
   124f0:	ebfff7a9 	bl	1039c <CUSBHIDDevice::StartRequest()>
   124f4:	e1a05000 	mov	r5, r0
   124f8:	e1a00005 	mov	r0, r5
   124fc:	e28dd008 	add	sp, sp, #8
   12500:	e8bd8070 	pop	{r4, r5, r6, pc}
   12504:	eb002630 	bl	1bdcc <CLogger::Get()>
   12508:	e2461020 	sub	r1, r6, #32
   1250c:	e3a02001 	mov	r2, #1
   12510:	e3053e5c 	movw	r3, #24156	; 0x5e5c
   12514:	e3403002 	movt	r3, #2
   12518:	eb002562 	bl	1baa8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1251c:	e1a00005 	mov	r0, r5
   12520:	e28dd008 	add	sp, sp, #8
   12524:	e8bd8070 	pop	{r4, r5, r6, pc}
   12528:	eb002627 	bl	1bdcc <CLogger::Get()>
   1252c:	e3a02001 	mov	r2, #1
   12530:	e59f1018 	ldr	r1, [pc, #24]	; 12550 <CUSBGamePadXboxOneDevice::Configure()+0x100>
   12534:	e3053abc 	movw	r3, #23228	; 0x5abc
   12538:	e3403002 	movt	r3, #2
   1253c:	eb002559 	bl	1baa8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   12540:	e1a00005 	mov	r0, r5
   12544:	e28dd008 	add	sp, sp, #8
   12548:	e8bd8070 	pop	{r4, r5, r6, pc}
   1254c:	00025e28 	.word	0x00025e28
   12550:	00025e08 	.word	0x00025e08

00012554 <CUSBGamePadXboxOneDevice::GetProperties()>:
   12554:	e3a00009 	mov	r0, #9
   12558:	e12fff1e 	bx	lr

0001255c <CUSBGamePadSwitchProDevice::~CUSBGamePadSwitchProDevice()>:
   1255c:	e59f3014 	ldr	r3, [pc, #20]	; 12578 <CUSBGamePadSwitchProDevice::~CUSBGamePadSwitchProDevice()+0x1c>
   12560:	e92d4010 	push	{r4, lr}
   12564:	e1a04000 	mov	r4, r0
   12568:	e5803000 	str	r3, [r0]
   1256c:	eb0013c2 	bl	1747c <CUSBGamePadDevice::~CUSBGamePadDevice()>
   12570:	e1a00004 	mov	r0, r4
   12574:	e8bd8010 	pop	{r4, pc}
   12578:	00025e7c 	.word	0x00025e7c

0001257c <CUSBGamePadSwitchProDevice::~CUSBGamePadSwitchProDevice()>:
   1257c:	e59f3020 	ldr	r3, [pc, #32]	; 125a4 <CUSBGamePadSwitchProDevice::~CUSBGamePadSwitchProDevice()+0x28>
   12580:	e92d4010 	push	{r4, lr}
   12584:	e1a04000 	mov	r4, r0
   12588:	e5803000 	str	r3, [r0]
   1258c:	eb0013ba 	bl	1747c <CUSBGamePadDevice::~CUSBGamePadDevice()>
   12590:	e1a00004 	mov	r0, r4
   12594:	e3a01f4d 	mov	r1, #308	; 0x134
   12598:	eb003ebc 	bl	22090 <operator delete(void*, unsigned int)>
   1259c:	e1a00004 	mov	r0, r4
   125a0:	e8bd8010 	pop	{r4, pc}
   125a4:	00025e7c 	.word	0x00025e7c

000125a8 <CUSBGamePadSwitchProDevice::DecodeReport(unsigned char const*)>:
   125a8:	e5d13000 	ldrb	r3, [r1]
   125ac:	e3530030 	cmp	r3, #48	; 0x30
   125b0:	1a000067 	bne	12754 <CUSBGamePadSwitchProDevice::DecodeReport(unsigned char const*)+0x1ac>
   125b4:	e3a03000 	mov	r3, #0
   125b8:	e5803108 	str	r3, [r0, #264]	; 0x108
   125bc:	e5d13003 	ldrb	r3, [r1, #3]
   125c0:	e3130001 	tst	r3, #1
   125c4:	13a03080 	movne	r3, #128	; 0x80
   125c8:	15803108 	strne	r3, [r0, #264]	; 0x108
   125cc:	15d13003 	ldrbne	r3, [r1, #3]
   125d0:	e3130002 	tst	r3, #2
   125d4:	15903108 	ldrne	r3, [r0, #264]	; 0x108
   125d8:	13833b01 	orrne	r3, r3, #1024	; 0x400
   125dc:	15803108 	strne	r3, [r0, #264]	; 0x108
   125e0:	15d13003 	ldrbne	r3, [r1, #3]
   125e4:	e3130004 	tst	r3, #4
   125e8:	15903108 	ldrne	r3, [r0, #264]	; 0x108
   125ec:	13833c01 	orrne	r3, r3, #256	; 0x100
   125f0:	15803108 	strne	r3, [r0, #264]	; 0x108
   125f4:	15d13003 	ldrbne	r3, [r1, #3]
   125f8:	e3130008 	tst	r3, #8
   125fc:	15903108 	ldrne	r3, [r0, #264]	; 0x108
   12600:	13833c02 	orrne	r3, r3, #512	; 0x200
   12604:	15803108 	strne	r3, [r0, #264]	; 0x108
   12608:	15d13003 	ldrbne	r3, [r1, #3]
   1260c:	e3130040 	tst	r3, #64	; 0x40
   12610:	15903108 	ldrne	r3, [r0, #264]	; 0x108
   12614:	13833040 	orrne	r3, r3, #64	; 0x40
   12618:	15803108 	strne	r3, [r0, #264]	; 0x108
   1261c:	15d13003 	ldrbne	r3, [r1, #3]
   12620:	e3130080 	tst	r3, #128	; 0x80
   12624:	15903108 	ldrne	r3, [r0, #264]	; 0x108
   12628:	13833010 	orrne	r3, r3, #16
   1262c:	15803108 	strne	r3, [r0, #264]	; 0x108
   12630:	e5d13004 	ldrb	r3, [r1, #4]
   12634:	e3130001 	tst	r3, #1
   12638:	15903108 	ldrne	r3, [r0, #264]	; 0x108
   1263c:	13833702 	orrne	r3, r3, #524288	; 0x80000
   12640:	15803108 	strne	r3, [r0, #264]	; 0x108
   12644:	15d13004 	ldrbne	r3, [r1, #4]
   12648:	e3130002 	tst	r3, #2
   1264c:	15903108 	ldrne	r3, [r0, #264]	; 0x108
   12650:	13833601 	orrne	r3, r3, #1048576	; 0x100000
   12654:	15803108 	strne	r3, [r0, #264]	; 0x108
   12658:	15d13004 	ldrbne	r3, [r1, #4]
   1265c:	e3130004 	tst	r3, #4
   12660:	15903108 	ldrne	r3, [r0, #264]	; 0x108
   12664:	13833a02 	orrne	r3, r3, #8192	; 0x2000
   12668:	15803108 	strne	r3, [r0, #264]	; 0x108
   1266c:	15d13004 	ldrbne	r3, [r1, #4]
   12670:	e3130008 	tst	r3, #8
   12674:	15903108 	ldrne	r3, [r0, #264]	; 0x108
   12678:	13833a01 	orrne	r3, r3, #4096	; 0x1000
   1267c:	15803108 	strne	r3, [r0, #264]	; 0x108
   12680:	15d13004 	ldrbne	r3, [r1, #4]
   12684:	e3130010 	tst	r3, #16
   12688:	15903108 	ldrne	r3, [r0, #264]	; 0x108
   1268c:	13833001 	orrne	r3, r3, #1
   12690:	15803108 	strne	r3, [r0, #264]	; 0x108
   12694:	15d13004 	ldrbne	r3, [r1, #4]
   12698:	e3130020 	tst	r3, #32
   1269c:	15903108 	ldrne	r3, [r0, #264]	; 0x108
   126a0:	13833b02 	orrne	r3, r3, #2048	; 0x800
   126a4:	15803108 	strne	r3, [r0, #264]	; 0x108
   126a8:	e5d13005 	ldrb	r3, [r1, #5]
   126ac:	e3130001 	tst	r3, #1
   126b0:	15903108 	ldrne	r3, [r0, #264]	; 0x108
   126b4:	13833802 	orrne	r3, r3, #131072	; 0x20000
   126b8:	15803108 	strne	r3, [r0, #264]	; 0x108
   126bc:	15d13005 	ldrbne	r3, [r1, #5]
   126c0:	e3130002 	tst	r3, #2
   126c4:	15903108 	ldrne	r3, [r0, #264]	; 0x108
   126c8:	13833902 	orrne	r3, r3, #32768	; 0x8000
   126cc:	15803108 	strne	r3, [r0, #264]	; 0x108
   126d0:	15d13005 	ldrbne	r3, [r1, #5]
   126d4:	e3130004 	tst	r3, #4
   126d8:	15903108 	ldrne	r3, [r0, #264]	; 0x108
   126dc:	13833801 	orrne	r3, r3, #65536	; 0x10000
   126e0:	15803108 	strne	r3, [r0, #264]	; 0x108
   126e4:	15d13005 	ldrbne	r3, [r1, #5]
   126e8:	e3130008 	tst	r3, #8
   126ec:	15903108 	ldrne	r3, [r0, #264]	; 0x108
   126f0:	13833701 	orrne	r3, r3, #262144	; 0x40000
   126f4:	15803108 	strne	r3, [r0, #264]	; 0x108
   126f8:	15d13005 	ldrbne	r3, [r1, #5]
   126fc:	e3130040 	tst	r3, #64	; 0x40
   12700:	15903108 	ldrne	r3, [r0, #264]	; 0x108
   12704:	13833020 	orrne	r3, r3, #32
   12708:	15803108 	strne	r3, [r0, #264]	; 0x108
   1270c:	15d13005 	ldrbne	r3, [r1, #5]
   12710:	e3130080 	tst	r3, #128	; 0x80
   12714:	15903108 	ldrne	r3, [r0, #264]	; 0x108
   12718:	13833008 	orrne	r3, r3, #8
   1271c:	15803108 	strne	r3, [r0, #264]	; 0x108
   12720:	e1d130b6 	ldrh	r3, [r1, #6]
   12724:	e7e73253 	ubfx	r3, r3, #4, #8
   12728:	e5803028 	str	r3, [r0, #40]	; 0x28
   1272c:	e5d13008 	ldrb	r3, [r1, #8]
   12730:	e26330ff 	rsb	r3, r3, #255	; 0xff
   12734:	e5803034 	str	r3, [r0, #52]	; 0x34
   12738:	e1d130b9 	ldrh	r3, [r1, #9]
   1273c:	e7e73253 	ubfx	r3, r3, #4, #8
   12740:	e5803040 	str	r3, [r0, #64]	; 0x40
   12744:	e5d1300b 	ldrb	r3, [r1, #11]
   12748:	e26330ff 	rsb	r3, r3, #255	; 0xff
   1274c:	e580304c 	str	r3, [r0, #76]	; 0x4c
   12750:	e12fff1e 	bx	lr
   12754:	e92d4010 	push	{r4, lr}
   12758:	e1a04001 	mov	r4, r1
   1275c:	e24dd008 	sub	sp, sp, #8
   12760:	eb002599 	bl	1bdcc <CLogger::Get()>
   12764:	e5d43000 	ldrb	r3, [r4]
   12768:	e3a02003 	mov	r2, #3
   1276c:	e59f1014 	ldr	r1, [pc, #20]	; 12788 <CUSBGamePadSwitchProDevice::DecodeReport(unsigned char const*)+0x1e0>
   12770:	e58d3000 	str	r3, [sp]
   12774:	e3053ee4 	movw	r3, #24292	; 0x5ee4
   12778:	e3403002 	movt	r3, #2
   1277c:	eb0024c9 	bl	1baa8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   12780:	e28dd008 	add	sp, sp, #8
   12784:	e8bd8010 	pop	{r4, pc}
   12788:	00025ebc 	.word	0x00025ebc

0001278c <CUSBGamePadSwitchProDevice::SetLEDMode(TGamePadLEDMode)>:
   1278c:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   12790:	e1a05000 	mov	r5, r0
   12794:	e59f4068 	ldr	r4, [pc, #104]	; 12804 <CUSBGamePadSwitchProDevice::SetLEDMode(TGamePadLEDMode)+0x78>
   12798:	e24dd014 	sub	sp, sp, #20
   1279c:	e5d0c131 	ldrb	ip, [r0, #305]	; 0x131
   127a0:	e28de004 	add	lr, sp, #4
   127a4:	e1a06001 	mov	r6, r1
   127a8:	e28c7001 	add	r7, ip, #1
   127ac:	e3a03000 	mov	r3, #0
   127b0:	e8940007 	ldm	r4, {r0, r1, r2}
   127b4:	e88e0007 	stm	lr, {r0, r1, r2}
   127b8:	e1a00005 	mov	r0, r5
   127bc:	e5c57131 	strb	r7, [r5, #305]	; 0x131
   127c0:	e1a0100e 	mov	r1, lr
   127c4:	e3a0200c 	mov	r2, #12
   127c8:	e20cc00f 	and	ip, ip, #15
   127cc:	e5cd600f 	strb	r6, [sp, #15]
   127d0:	e5cdc005 	strb	ip, [sp, #5]
   127d4:	ebfff65a 	bl	10144 <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)>
   127d8:	e2505000 	subs	r5, r0, #0
   127dc:	1a000005 	bne	127f8 <CUSBGamePadSwitchProDevice::SetLEDMode(TGamePadLEDMode)+0x6c>
   127e0:	eb002579 	bl	1bdcc <CLogger::Get()>
   127e4:	e3053f00 	movw	r3, #24320	; 0x5f00
   127e8:	e3403002 	movt	r3, #2
   127ec:	e2441010 	sub	r1, r4, #16
   127f0:	e3a02001 	mov	r2, #1
   127f4:	eb0024ab 	bl	1baa8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   127f8:	e1a00005 	mov	r0, r5
   127fc:	e28dd014 	add	sp, sp, #20
   12800:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   12804:	00025ecc 	.word	0x00025ecc

00012808 <CUSBGamePadSwitchProDevice::SetRumbleMode(TGamePadRumbleMode)>:
   12808:	e92d4010 	push	{r4, lr}
   1280c:	e1a0c000 	mov	ip, r0
   12810:	e59f20c8 	ldr	r2, [pc, #200]	; 128e0 <CUSBGamePadSwitchProDevice::SetRumbleMode(TGamePadRumbleMode)+0xd8>
   12814:	e24dd010 	sub	sp, sp, #16
   12818:	e1a0e001 	mov	lr, r1
   1281c:	e28d3004 	add	r3, sp, #4
   12820:	e3510001 	cmp	r1, #1
   12824:	e8920007 	ldm	r2, {r0, r1, r2}
   12828:	e8a30003 	stmia	r3!, {r0, r1}
   1282c:	e1c320b0 	strh	r2, [r3]
   12830:	0a000025 	beq	128cc <CUSBGamePadSwitchProDevice::SetRumbleMode(TGamePadRumbleMode)+0xc4>
   12834:	3a000007 	bcc	12858 <CUSBGamePadSwitchProDevice::SetRumbleMode(TGamePadRumbleMode)+0x50>
   12838:	e35e0002 	cmp	lr, #2
   1283c:	1a00001e 	bne	128bc <CUSBGamePadSwitchProDevice::SetRumbleMode(TGamePadRumbleMode)+0xb4>
   12840:	e3a03020 	mov	r3, #32
   12844:	e3a02062 	mov	r2, #98	; 0x62
   12848:	e5cd3007 	strb	r3, [sp, #7]
   1284c:	e3e03000 	mvn	r3, #0
   12850:	e5cd2008 	strb	r2, [sp, #8]
   12854:	e5cd3009 	strb	r3, [sp, #9]
   12858:	e1a0200c 	mov	r2, ip
   1285c:	e5dcc131 	ldrb	ip, [ip, #305]	; 0x131
   12860:	e1a00002 	mov	r0, r2
   12864:	e28d1004 	add	r1, sp, #4
   12868:	e28ce001 	add	lr, ip, #1
   1286c:	e3a03000 	mov	r3, #0
   12870:	e5c2e131 	strb	lr, [r2, #305]	; 0x131
   12874:	e3a0200a 	mov	r2, #10
   12878:	e20cc00f 	and	ip, ip, #15
   1287c:	e5cdc005 	strb	ip, [sp, #5]
   12880:	ebfff62f 	bl	10144 <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)>
   12884:	e2504000 	subs	r4, r0, #0
   12888:	0a000002 	beq	12898 <CUSBGamePadSwitchProDevice::SetRumbleMode(TGamePadRumbleMode)+0x90>
   1288c:	e1a00004 	mov	r0, r4
   12890:	e28dd010 	add	sp, sp, #16
   12894:	e8bd8010 	pop	{r4, pc}
   12898:	eb00254b 	bl	1bdcc <CLogger::Get()>
   1289c:	e3a02001 	mov	r2, #1
   128a0:	e59f103c 	ldr	r1, [pc, #60]	; 128e4 <CUSBGamePadSwitchProDevice::SetRumbleMode(TGamePadRumbleMode)+0xdc>
   128a4:	e3053f14 	movw	r3, #24340	; 0x5f14
   128a8:	e3403002 	movt	r3, #2
   128ac:	eb00247d 	bl	1baa8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   128b0:	e1a00004 	mov	r0, r4
   128b4:	e28dd010 	add	sp, sp, #16
   128b8:	e8bd8010 	pop	{r4, pc}
   128bc:	e3a04001 	mov	r4, #1
   128c0:	e1a00004 	mov	r0, r4
   128c4:	e28dd010 	add	sp, sp, #16
   128c8:	e8bd8010 	pop	{r4, pc}
   128cc:	e3022098 	movw	r2, #8344	; 0x2098
   128d0:	e3e0309d 	mvn	r3, #157	; 0x9d
   128d4:	e1cd20ba 	strh	r2, [sp, #10]
   128d8:	e1cd30bc 	strh	r3, [sp, #12]
   128dc:	eaffffdd 	b	12858 <CUSBGamePadSwitchProDevice::SetRumbleMode(TGamePadRumbleMode)+0x50>
   128e0:	00025ed8 	.word	0x00025ed8
   128e4:	00025ebc 	.word	0x00025ebc

000128e8 <CUSBGamePadSwitchProDevice::CUSBGamePadSwitchProDevice(CUSBFunction*)>:
   128e8:	e92d4010 	push	{r4, lr}
   128ec:	e1a04000 	mov	r4, r0
   128f0:	eb0012cf 	bl	17434 <CUSBGamePadDevice::CUSBGamePadDevice(CUSBFunction*)>
   128f4:	e3a03000 	mov	r3, #0
   128f8:	e59f1024 	ldr	r1, [pc, #36]	; 12924 <CUSBGamePadSwitchProDevice::CUSBGamePadSwitchProDevice(CUSBFunction*)+0x3c>
   128fc:	e1a02003 	mov	r2, r3
   12900:	e5841000 	str	r1, [r4]
   12904:	e1a00004 	mov	r0, r4
   12908:	e3a01003 	mov	r1, #3
   1290c:	eb000216 	bl	1316c <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char)>
   12910:	e3a03000 	mov	r3, #0
   12914:	e5c40130 	strb	r0, [r4, #304]	; 0x130
   12918:	e1a00004 	mov	r0, r4
   1291c:	e5c43131 	strb	r3, [r4, #305]	; 0x131
   12920:	e8bd8010 	pop	{r4, pc}
   12924:	00025e7c 	.word	0x00025e7c

00012928 <CUSBGamePadSwitchProDevice::Configure()>:
   12928:	e92d4bf0 	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1292c:	e5d05130 	ldrb	r5, [r0, #304]	; 0x130
   12930:	e28db01c 	add	fp, sp, #28
   12934:	e3550000 	cmp	r5, #0
   12938:	0a00003e 	beq	12a38 <CUSBGamePadSwitchProDevice::Configure()+0x110>
   1293c:	e2807f4a 	add	r7, r0, #296	; 0x128
   12940:	e3a03040 	mov	r3, #64	; 0x40
   12944:	e1a04000 	mov	r4, r0
   12948:	e1c730b0 	strh	r3, [r7]
   1294c:	eb00128a 	bl	1737c <CUSBGamePadDevice::Configure()>
   12950:	e2505000 	subs	r5, r0, #0
   12954:	0a00003c 	beq	12a4c <CUSBGamePadSwitchProDevice::Configure()+0x124>
   12958:	e1d720b0 	ldrh	r2, [r7]
   1295c:	e1a0000d 	mov	r0, sp
   12960:	e3a06000 	mov	r6, #0
   12964:	e3a0c0ff 	mov	ip, #255	; 0xff
   12968:	e2821007 	add	r1, r2, #7
   1296c:	e1a03006 	mov	r3, r6
   12970:	e1a011a1 	lsr	r1, r1, #3
   12974:	e584c030 	str	ip, [r4, #48]	; 0x30
   12978:	e0401181 	sub	r1, r0, r1, lsl #3
   1297c:	e584c03c 	str	ip, [r4, #60]	; 0x3c
   12980:	e1a0d001 	mov	sp, r1
   12984:	e3a00012 	mov	r0, #18
   12988:	e584c048 	str	ip, [r4, #72]	; 0x48
   1298c:	e1a0800d 	mov	r8, sp
   12990:	e5840104 	str	r0, [r4, #260]	; 0x104
   12994:	e3a00004 	mov	r0, #4
   12998:	e584c054 	str	ip, [r4, #84]	; 0x54
   1299c:	e5840024 	str	r0, [r4, #36]	; 0x24
   129a0:	e1a00004 	mov	r0, r4
   129a4:	e58460e8 	str	r6, [r4, #232]	; 0xe8
   129a8:	e584602c 	str	r6, [r4, #44]	; 0x2c
   129ac:	e5846038 	str	r6, [r4, #56]	; 0x38
   129b0:	e5846044 	str	r6, [r4, #68]	; 0x44
   129b4:	e5846050 	str	r6, [r4, #80]	; 0x50
   129b8:	ebfff644 	bl	102d0 <CUSBHIDDevice::ReceiveFromEndpointIn(void*, unsigned int, unsigned int)>
   129bc:	e1a03006 	mov	r3, r6
   129c0:	e30b1030 	movw	r1, #45104	; 0xb030
   129c4:	e3401002 	movt	r1, #2
   129c8:	e3a02002 	mov	r2, #2
   129cc:	e1a00004 	mov	r0, r4
   129d0:	ebfff5db 	bl	10144 <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)>
   129d4:	e2505000 	subs	r5, r0, #0
   129d8:	0a000024 	beq	12a70 <CUSBGamePadSwitchProDevice::Configure()+0x148>
   129dc:	e1a03006 	mov	r3, r6
   129e0:	e1d720b0 	ldrh	r2, [r7]
   129e4:	e1a0100d 	mov	r1, sp
   129e8:	e1a00004 	mov	r0, r4
   129ec:	ebfff637 	bl	102d0 <CUSBHIDDevice::ReceiveFromEndpointIn(void*, unsigned int, unsigned int)>
   129f0:	e3500000 	cmp	r0, #0
   129f4:	da000026 	ble	12a94 <CUSBGamePadSwitchProDevice::Configure()+0x16c>
   129f8:	e5dd3000 	ldrb	r3, [sp]
   129fc:	e3530081 	cmp	r3, #129	; 0x81
   12a00:	1a000002 	bne	12a10 <CUSBGamePadSwitchProDevice::Configure()+0xe8>
   12a04:	e5dd3001 	ldrb	r3, [sp, #1]
   12a08:	e3530003 	cmp	r3, #3
   12a0c:	0a000028 	beq	12ab4 <CUSBGamePadSwitchProDevice::Configure()+0x18c>
   12a10:	eb0024ed 	bl	1bdcc <CLogger::Get()>
   12a14:	e3a05000 	mov	r5, #0
   12a18:	e3a02001 	mov	r2, #1
   12a1c:	e59f11d0 	ldr	r1, [pc, #464]	; 12bf4 <CUSBGamePadSwitchProDevice::Configure()+0x2cc>
   12a20:	e3053f2c 	movw	r3, #24364	; 0x5f2c
   12a24:	e3403002 	movt	r3, #2
   12a28:	eb00241e 	bl	1baa8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   12a2c:	e1a00005 	mov	r0, r5
   12a30:	e24bd01c 	sub	sp, fp, #28
   12a34:	e8bd8bf0 	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   12a38:	e59f11b4 	ldr	r1, [pc, #436]	; 12bf4 <CUSBGamePadSwitchProDevice::Configure()+0x2cc>
   12a3c:	eb0001ad 	bl	130f8 <CUSBFunction::ConfigurationError(char const*) const>
   12a40:	e1a00005 	mov	r0, r5
   12a44:	e24bd01c 	sub	sp, fp, #28
   12a48:	e8bd8bf0 	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   12a4c:	eb0024de 	bl	1bdcc <CLogger::Get()>
   12a50:	e3a02001 	mov	r2, #1
   12a54:	e59f1198 	ldr	r1, [pc, #408]	; 12bf4 <CUSBGamePadSwitchProDevice::Configure()+0x2cc>
   12a58:	e3053abc 	movw	r3, #23228	; 0x5abc
   12a5c:	e3403002 	movt	r3, #2
   12a60:	eb002410 	bl	1baa8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   12a64:	e1a00005 	mov	r0, r5
   12a68:	e24bd01c 	sub	sp, fp, #28
   12a6c:	e8bd8bf0 	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   12a70:	eb0024d5 	bl	1bdcc <CLogger::Get()>
   12a74:	e3a02001 	mov	r2, #1
   12a78:	e59f1174 	ldr	r1, [pc, #372]	; 12bf4 <CUSBGamePadSwitchProDevice::Configure()+0x2cc>
   12a7c:	e3053f2c 	movw	r3, #24364	; 0x5f2c
   12a80:	e3403002 	movt	r3, #2
   12a84:	eb002407 	bl	1baa8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   12a88:	e1a00005 	mov	r0, r5
   12a8c:	e24bd01c 	sub	sp, fp, #28
   12a90:	e8bd8bf0 	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   12a94:	eb0024cc 	bl	1bdcc <CLogger::Get()>
   12a98:	e3053f4c 	movw	r3, #24396	; 0x5f4c
   12a9c:	e3403002 	movt	r3, #2
   12aa0:	e3a02001 	mov	r2, #1
   12aa4:	e59f1148 	ldr	r1, [pc, #328]	; 12bf4 <CUSBGamePadSwitchProDevice::Configure()+0x2cc>
   12aa8:	e1a05006 	mov	r5, r6
   12aac:	eb0023fd 	bl	1baa8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   12ab0:	eaffffe2 	b	12a40 <CUSBGamePadSwitchProDevice::Configure()+0x118>
   12ab4:	e1a03006 	mov	r3, r6
   12ab8:	e3a02002 	mov	r2, #2
   12abc:	e59f1134 	ldr	r1, [pc, #308]	; 12bf8 <CUSBGamePadSwitchProDevice::Configure()+0x2d0>
   12ac0:	e1a00004 	mov	r0, r4
   12ac4:	ebfff59e 	bl	10144 <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)>
   12ac8:	e2505000 	subs	r5, r0, #0
   12acc:	0a000014 	beq	12b24 <CUSBGamePadSwitchProDevice::Configure()+0x1fc>
   12ad0:	e1a03006 	mov	r3, r6
   12ad4:	e1d720b0 	ldrh	r2, [r7]
   12ad8:	e1a0100d 	mov	r1, sp
   12adc:	e1a00004 	mov	r0, r4
   12ae0:	ebfff5fa 	bl	102d0 <CUSBHIDDevice::ReceiveFromEndpointIn(void*, unsigned int, unsigned int)>
   12ae4:	e3500000 	cmp	r0, #0
   12ae8:	da000014 	ble	12b40 <CUSBGamePadSwitchProDevice::Configure()+0x218>
   12aec:	e5dd3000 	ldrb	r3, [sp]
   12af0:	e3530081 	cmp	r3, #129	; 0x81
   12af4:	1a000002 	bne	12b04 <CUSBGamePadSwitchProDevice::Configure()+0x1dc>
   12af8:	e5dd3001 	ldrb	r3, [sp, #1]
   12afc:	e3530002 	cmp	r3, #2
   12b00:	0a000016 	beq	12b60 <CUSBGamePadSwitchProDevice::Configure()+0x238>
   12b04:	eb0024b0 	bl	1bdcc <CLogger::Get()>
   12b08:	e3053f6c 	movw	r3, #24428	; 0x5f6c
   12b0c:	e3403002 	movt	r3, #2
   12b10:	e3a02001 	mov	r2, #1
   12b14:	e59f10d8 	ldr	r1, [pc, #216]	; 12bf4 <CUSBGamePadSwitchProDevice::Configure()+0x2cc>
   12b18:	eb0023e2 	bl	1baa8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   12b1c:	e3a05000 	mov	r5, #0
   12b20:	eaffffc6 	b	12a40 <CUSBGamePadSwitchProDevice::Configure()+0x118>
   12b24:	eb0024a8 	bl	1bdcc <CLogger::Get()>
   12b28:	e3053f6c 	movw	r3, #24428	; 0x5f6c
   12b2c:	e3403002 	movt	r3, #2
   12b30:	e3a02001 	mov	r2, #1
   12b34:	e59f10b8 	ldr	r1, [pc, #184]	; 12bf4 <CUSBGamePadSwitchProDevice::Configure()+0x2cc>
   12b38:	eb0023da 	bl	1baa8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   12b3c:	eaffffbf 	b	12a40 <CUSBGamePadSwitchProDevice::Configure()+0x118>
   12b40:	eb0024a1 	bl	1bdcc <CLogger::Get()>
   12b44:	e3053f88 	movw	r3, #24456	; 0x5f88
   12b48:	e3403002 	movt	r3, #2
   12b4c:	e3a02001 	mov	r2, #1
   12b50:	e59f109c 	ldr	r1, [pc, #156]	; 12bf4 <CUSBGamePadSwitchProDevice::Configure()+0x2cc>
   12b54:	e1a05006 	mov	r5, r6
   12b58:	eb0023d2 	bl	1baa8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   12b5c:	eaffffb7 	b	12a40 <CUSBGamePadSwitchProDevice::Configure()+0x118>
   12b60:	e3a03000 	mov	r3, #0
   12b64:	e3a02002 	mov	r2, #2
   12b68:	e59f108c 	ldr	r1, [pc, #140]	; 12bfc <CUSBGamePadSwitchProDevice::Configure()+0x2d4>
   12b6c:	e1a00004 	mov	r0, r4
   12b70:	ebfff573 	bl	10144 <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)>
   12b74:	e2505000 	subs	r5, r0, #0
   12b78:	0a00000f 	beq	12bbc <CUSBGamePadSwitchProDevice::Configure()+0x294>
   12b7c:	e5943000 	ldr	r3, [r4]
   12b80:	e1a00004 	mov	r0, r4
   12b84:	e5d4112c 	ldrb	r1, [r4, #300]	; 0x12c
   12b88:	e5933030 	ldr	r3, [r3, #48]	; 0x30
   12b8c:	e12fff33 	blx	r3
   12b90:	e1d720b0 	ldrh	r2, [r7]
   12b94:	e1a01008 	mov	r1, r8
   12b98:	e3a03000 	mov	r3, #0
   12b9c:	e1a00004 	mov	r0, r4
   12ba0:	ebfff5ca 	bl	102d0 <CUSBHIDDevice::ReceiveFromEndpointIn(void*, unsigned int, unsigned int)>
   12ba4:	e3500000 	cmp	r0, #0
   12ba8:	da00000a 	ble	12bd8 <CUSBGamePadSwitchProDevice::Configure()+0x2b0>
   12bac:	e1a00004 	mov	r0, r4
   12bb0:	ebfff5f9 	bl	1039c <CUSBHIDDevice::StartRequest()>
   12bb4:	e1a05000 	mov	r5, r0
   12bb8:	eaffffa0 	b	12a40 <CUSBGamePadSwitchProDevice::Configure()+0x118>
   12bbc:	eb002482 	bl	1bdcc <CLogger::Get()>
   12bc0:	e3053fa4 	movw	r3, #24484	; 0x5fa4
   12bc4:	e3403002 	movt	r3, #2
   12bc8:	e3a02001 	mov	r2, #1
   12bcc:	e59f1020 	ldr	r1, [pc, #32]	; 12bf4 <CUSBGamePadSwitchProDevice::Configure()+0x2cc>
   12bd0:	eb0023b4 	bl	1baa8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   12bd4:	eaffff99 	b	12a40 <CUSBGamePadSwitchProDevice::Configure()+0x118>
   12bd8:	eb00247b 	bl	1bdcc <CLogger::Get()>
   12bdc:	e3053fc4 	movw	r3, #24516	; 0x5fc4
   12be0:	e3403002 	movt	r3, #2
   12be4:	e3a02001 	mov	r2, #1
   12be8:	e59f1004 	ldr	r1, [pc, #4]	; 12bf4 <CUSBGamePadSwitchProDevice::Configure()+0x2cc>
   12bec:	eb0023ad 	bl	1baa8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   12bf0:	eaffffed 	b	12bac <CUSBGamePadSwitchProDevice::Configure()+0x284>
   12bf4:	00025ebc 	.word	0x00025ebc
   12bf8:	0002b034 	.word	0x0002b034
   12bfc:	0002b038 	.word	0x0002b038

00012c00 <CUSBGamePadSwitchProDevice::GetProperties()>:
   12c00:	e3a0004b 	mov	r0, #75	; 0x4b
   12c04:	e12fff1e 	bx	lr

00012c08 <CUSBFunction::Initialize()>:
   12c08:	e3a00001 	mov	r0, #1
   12c0c:	e12fff1e 	bx	lr

00012c10 <CUSBFunction::ReScanDevices()>:
   12c10:	e3a00000 	mov	r0, #0
   12c14:	e12fff1e 	bx	lr

00012c18 <CUSBFunction::~CUSBFunction()>:
   12c18:	e92d4070 	push	{r4, r5, r6, lr}
   12c1c:	e3a03000 	mov	r3, #0
   12c20:	e5905008 	ldr	r5, [r0, #8]
   12c24:	e59f2040 	ldr	r2, [pc, #64]	; 12c6c <CUSBFunction::~CUSBFunction()+0x54>
   12c28:	e1a04000 	mov	r4, r0
   12c2c:	e5802000 	str	r2, [r0]
   12c30:	e1550003 	cmp	r5, r3
   12c34:	e580300c 	str	r3, [r0, #12]
   12c38:	0a000004 	beq	12c50 <CUSBFunction::~CUSBFunction()+0x38>
   12c3c:	e1a00005 	mov	r0, r5
   12c40:	eb00088f 	bl	14e84 <CUSBConfigurationParser::~CUSBConfigurationParser()>
   12c44:	e1a00005 	mov	r0, r5
   12c48:	e3a0101c 	mov	r1, #28
   12c4c:	eb003d0f 	bl	22090 <operator delete(void*, unsigned int)>
   12c50:	e3a03000 	mov	r3, #0
   12c54:	e1a00004 	mov	r0, r4
   12c58:	e5843008 	str	r3, [r4, #8]
   12c5c:	e5843004 	str	r3, [r4, #4]
   12c60:	eb001bd0 	bl	19ba8 <CDevice::~CDevice()>
   12c64:	e1a00004 	mov	r0, r4
   12c68:	e8bd8070 	pop	{r4, r5, r6, pc}
   12c6c:	00025fe8 	.word	0x00025fe8

00012c70 <CUSBFunction::~CUSBFunction()>:
   12c70:	e92d4010 	push	{r4, lr}
   12c74:	e1a04000 	mov	r4, r0
   12c78:	ebffffe6 	bl	12c18 <CUSBFunction::~CUSBFunction()>
   12c7c:	e1a00004 	mov	r0, r4
   12c80:	e3a01010 	mov	r1, #16
   12c84:	eb003d01 	bl	22090 <operator delete(void*, unsigned int)>
   12c88:	e1a00004 	mov	r0, r4
   12c8c:	e8bd8010 	pop	{r4, pc}

00012c90 <CUSBFunction::CUSBFunction(CUSBDevice*, CUSBConfigurationParser*)>:
   12c90:	e92d4070 	push	{r4, r5, r6, lr}
   12c94:	e1a04000 	mov	r4, r0
   12c98:	e1a05001 	mov	r5, r1
   12c9c:	e1a06002 	mov	r6, r2
   12ca0:	eb001bcc 	bl	19bd8 <CDevice::CDevice()>
   12ca4:	e59f20b0 	ldr	r2, [pc, #176]	; 12d5c <CUSBFunction::CUSBFunction(CUSBDevice*, CUSBConfigurationParser*)+0xcc>
   12ca8:	e3a03000 	mov	r3, #0
   12cac:	e3550000 	cmp	r5, #0
   12cb0:	e5845004 	str	r5, [r4, #4]
   12cb4:	e5842000 	str	r2, [r4]
   12cb8:	e5843008 	str	r3, [r4, #8]
   12cbc:	e584300c 	str	r3, [r4, #12]
   12cc0:	0a000016 	beq	12d20 <CUSBFunction::CUSBFunction(CUSBDevice*, CUSBConfigurationParser*)+0x90>
   12cc4:	e3560000 	cmp	r6, #0
   12cc8:	0a00001c 	beq	12d40 <CUSBFunction::CUSBFunction(CUSBDevice*, CUSBConfigurationParser*)+0xb0>
   12ccc:	e3a0001c 	mov	r0, #28
   12cd0:	eb003cea 	bl	22080 <operator new(unsigned int)>
   12cd4:	e1a01006 	mov	r1, r6
   12cd8:	e1a05000 	mov	r5, r0
   12cdc:	eb00084f 	bl	14e20 <CUSBConfigurationParser::CUSBConfigurationParser(CUSBConfigurationParser*)>
   12ce0:	e5845008 	str	r5, [r4, #8]
   12ce4:	e1a00005 	mov	r0, r5
   12ce8:	eb00089f 	bl	14f6c <CUSBConfigurationParser::GetCurrentDescriptor()>
   12cec:	e3500000 	cmp	r0, #0
   12cf0:	e584000c 	str	r0, [r4, #12]
   12cf4:	0a000001 	beq	12d00 <CUSBFunction::CUSBFunction(CUSBDevice*, CUSBConfigurationParser*)+0x70>
   12cf8:	e1a00004 	mov	r0, r4
   12cfc:	e8bd8070 	pop	{r4, r5, r6, pc}
   12d00:	e3a02029 	mov	r2, #41	; 0x29
   12d04:	e3061010 	movw	r1, #24592	; 0x6010
   12d08:	e3401002 	movt	r1, #2
   12d0c:	e3060034 	movw	r0, #24628	; 0x6034
   12d10:	e3400002 	movt	r0, #2
   12d14:	eb0019ce 	bl	19454 <assertion_failed>
   12d18:	e1a00004 	mov	r0, r4
   12d1c:	e8bd8070 	pop	{r4, r5, r6, pc}
   12d20:	e3061010 	movw	r1, #24592	; 0x6010
   12d24:	e3401002 	movt	r1, #2
   12d28:	e30408dc 	movw	r0, #18652	; 0x48dc
   12d2c:	e3400002 	movt	r0, #2
   12d30:	e3a02022 	mov	r2, #34	; 0x22
   12d34:	eb0019c6 	bl	19454 <assertion_failed>
   12d38:	e3560000 	cmp	r6, #0
   12d3c:	1affffe2 	bne	12ccc <CUSBFunction::CUSBFunction(CUSBDevice*, CUSBConfigurationParser*)+0x3c>
   12d40:	e3061010 	movw	r1, #24592	; 0x6010
   12d44:	e3401002 	movt	r1, #2
   12d48:	e3060020 	movw	r0, #24608	; 0x6020
   12d4c:	e3400002 	movt	r0, #2
   12d50:	e3a02024 	mov	r2, #36	; 0x24
   12d54:	eb0019be 	bl	19454 <assertion_failed>
   12d58:	eaffffdb 	b	12ccc <CUSBFunction::CUSBFunction(CUSBDevice*, CUSBConfigurationParser*)+0x3c>
   12d5c:	00025fe8 	.word	0x00025fe8

00012d60 <CUSBFunction::CUSBFunction(CUSBFunction*)>:
   12d60:	e92d4070 	push	{r4, r5, r6, lr}
   12d64:	e1a04000 	mov	r4, r0
   12d68:	e1a05001 	mov	r5, r1
   12d6c:	eb001b99 	bl	19bd8 <CDevice::CDevice()>
   12d70:	e59f20ec 	ldr	r2, [pc, #236]	; 12e64 <CUSBFunction::CUSBFunction(CUSBFunction*)+0x104>
   12d74:	e3a03000 	mov	r3, #0
   12d78:	e3550000 	cmp	r5, #0
   12d7c:	e1c420f0 	strd	r2, [r4]
   12d80:	e5843008 	str	r3, [r4, #8]
   12d84:	e584300c 	str	r3, [r4, #12]
   12d88:	0a00001b 	beq	12dfc <CUSBFunction::CUSBFunction(CUSBFunction*)+0x9c>
   12d8c:	e5953004 	ldr	r3, [r5, #4]
   12d90:	e5843004 	str	r3, [r4, #4]
   12d94:	e3530000 	cmp	r3, #0
   12d98:	0a000021 	beq	12e24 <CUSBFunction::CUSBFunction(CUSBFunction*)+0xc4>
   12d9c:	e5953008 	ldr	r3, [r5, #8]
   12da0:	e3530000 	cmp	r3, #0
   12da4:	0a000027 	beq	12e48 <CUSBFunction::CUSBFunction(CUSBFunction*)+0xe8>
   12da8:	e3a0001c 	mov	r0, #28
   12dac:	eb003cb3 	bl	22080 <operator new(unsigned int)>
   12db0:	e5951008 	ldr	r1, [r5, #8]
   12db4:	e1a06000 	mov	r6, r0
   12db8:	eb000818 	bl	14e20 <CUSBConfigurationParser::CUSBConfigurationParser(CUSBConfigurationParser*)>
   12dbc:	e5846008 	str	r6, [r4, #8]
   12dc0:	e1a00006 	mov	r0, r6
   12dc4:	eb000868 	bl	14f6c <CUSBConfigurationParser::GetCurrentDescriptor()>
   12dc8:	e3500000 	cmp	r0, #0
   12dcc:	e584000c 	str	r0, [r4, #12]
   12dd0:	0a000001 	beq	12ddc <CUSBFunction::CUSBFunction(CUSBFunction*)+0x7c>
   12dd4:	e1a00004 	mov	r0, r4
   12dd8:	e8bd8070 	pop	{r4, r5, r6, pc}
   12ddc:	e3a0203a 	mov	r2, #58	; 0x3a
   12de0:	e3061010 	movw	r1, #24592	; 0x6010
   12de4:	e3401002 	movt	r1, #2
   12de8:	e3060034 	movw	r0, #24628	; 0x6034
   12dec:	e3400002 	movt	r0, #2
   12df0:	eb001997 	bl	19454 <assertion_failed>
   12df4:	e1a00004 	mov	r0, r4
   12df8:	e8bd8070 	pop	{r4, r5, r6, pc}
   12dfc:	e3061010 	movw	r1, #24592	; 0x6010
   12e00:	e3401002 	movt	r1, #2
   12e04:	e306004c 	movw	r0, #24652	; 0x604c
   12e08:	e3400002 	movt	r0, #2
   12e0c:	e3a02031 	mov	r2, #49	; 0x31
   12e10:	eb00198f 	bl	19454 <assertion_failed>
   12e14:	e5953004 	ldr	r3, [r5, #4]
   12e18:	e5843004 	str	r3, [r4, #4]
   12e1c:	e3530000 	cmp	r3, #0
   12e20:	1affffdd 	bne	12d9c <CUSBFunction::CUSBFunction(CUSBFunction*)+0x3c>
   12e24:	e3061010 	movw	r1, #24592	; 0x6010
   12e28:	e3401002 	movt	r1, #2
   12e2c:	e30408dc 	movw	r0, #18652	; 0x48dc
   12e30:	e3400002 	movt	r0, #2
   12e34:	e3a02033 	mov	r2, #51	; 0x33
   12e38:	eb001985 	bl	19454 <assertion_failed>
   12e3c:	e5953008 	ldr	r3, [r5, #8]
   12e40:	e3530000 	cmp	r3, #0
   12e44:	1affffd7 	bne	12da8 <CUSBFunction::CUSBFunction(CUSBFunction*)+0x48>
   12e48:	e3061010 	movw	r1, #24592	; 0x6010
   12e4c:	e3401002 	movt	r1, #2
   12e50:	e306005c 	movw	r0, #24668	; 0x605c
   12e54:	e3400002 	movt	r0, #2
   12e58:	e3a02035 	mov	r2, #53	; 0x35
   12e5c:	eb00197c 	bl	19454 <assertion_failed>
   12e60:	eaffffd0 	b	12da8 <CUSBFunction::CUSBFunction(CUSBFunction*)+0x48>
   12e64:	00025fe8 	.word	0x00025fe8

00012e68 <CUSBFunction::GetInterfaceName() const>:
   12e68:	e92d4030 	push	{r4, r5, lr}
   12e6c:	e1a05000 	mov	r5, r0
   12e70:	e3a00010 	mov	r0, #16
   12e74:	e24dd00c 	sub	sp, sp, #12
   12e78:	eb003c80 	bl	22080 <operator new(unsigned int)>
   12e7c:	e3041a90 	movw	r1, #19088	; 0x4a90
   12e80:	e3401002 	movt	r1, #2
   12e84:	e1a04000 	mov	r4, r0
   12e88:	eb002f76 	bl	1ec68 <CString::CString(char const*)>
   12e8c:	e595100c 	ldr	r1, [r5, #12]
   12e90:	e3510000 	cmp	r1, #0
   12e94:	0a000004 	beq	12eac <CUSBFunction::GetInterfaceName() const+0x44>
   12e98:	e5d12005 	ldrb	r2, [r1, #5]
   12e9c:	e2423001 	sub	r3, r2, #1
   12ea0:	e6ef3073 	uxtb	r3, r3
   12ea4:	e35300fd 	cmp	r3, #253	; 0xfd
   12ea8:	9a000002 	bls	12eb8 <CUSBFunction::GetInterfaceName() const+0x50>
   12eac:	e1a00004 	mov	r0, r4
   12eb0:	e28dd00c 	add	sp, sp, #12
   12eb4:	e8bd8030 	pop	{r4, r5, pc}
   12eb8:	e5d10007 	ldrb	r0, [r1, #7]
   12ebc:	e5d13006 	ldrb	r3, [r1, #6]
   12ec0:	e306107c 	movw	r1, #24700	; 0x607c
   12ec4:	e3401002 	movt	r1, #2
   12ec8:	e58d0000 	str	r0, [sp]
   12ecc:	e1a00004 	mov	r0, r4
   12ed0:	eb003327 	bl	1fb74 <CString::Format(char const*, ...)>
   12ed4:	e1a00004 	mov	r0, r4
   12ed8:	e28dd00c 	add	sp, sp, #12
   12edc:	e8bd8030 	pop	{r4, r5, pc}

00012ee0 <CUSBFunction::GetNumEndpoints() const>:
   12ee0:	e590300c 	ldr	r3, [r0, #12]
   12ee4:	e3530000 	cmp	r3, #0
   12ee8:	0a000001 	beq	12ef4 <CUSBFunction::GetNumEndpoints() const+0x14>
   12eec:	e5d30004 	ldrb	r0, [r3, #4]
   12ef0:	e12fff1e 	bx	lr
   12ef4:	e92d4010 	push	{r4, lr}
   12ef8:	e1a04000 	mov	r4, r0
   12efc:	e3a02078 	mov	r2, #120	; 0x78
   12f00:	e3061010 	movw	r1, #24592	; 0x6010
   12f04:	e3401002 	movt	r1, #2
   12f08:	e3060034 	movw	r0, #24628	; 0x6034
   12f0c:	e3400002 	movt	r0, #2
   12f10:	eb00194f 	bl	19454 <assertion_failed>
   12f14:	e594300c 	ldr	r3, [r4, #12]
   12f18:	e5d30004 	ldrb	r0, [r3, #4]
   12f1c:	e8bd8010 	pop	{r4, pc}

00012f20 <CUSBFunction::GetDevice() const>:
   12f20:	e5903004 	ldr	r3, [r0, #4]
   12f24:	e3530000 	cmp	r3, #0
   12f28:	0a000001 	beq	12f34 <CUSBFunction::GetDevice() const+0x14>
   12f2c:	e1a00003 	mov	r0, r3
   12f30:	e12fff1e 	bx	lr
   12f34:	e92d4010 	push	{r4, lr}
   12f38:	e1a04000 	mov	r4, r0
   12f3c:	e3a0207e 	mov	r2, #126	; 0x7e
   12f40:	e3061010 	movw	r1, #24592	; 0x6010
   12f44:	e3401002 	movt	r1, #2
   12f48:	e30408dc 	movw	r0, #18652	; 0x48dc
   12f4c:	e3400002 	movt	r0, #2
   12f50:	eb00193f 	bl	19454 <assertion_failed>
   12f54:	e5943004 	ldr	r3, [r4, #4]
   12f58:	e1a00003 	mov	r0, r3
   12f5c:	e8bd8010 	pop	{r4, pc}

00012f60 <CUSBFunction::GetEndpoint0() const>:
   12f60:	e5903004 	ldr	r3, [r0, #4]
   12f64:	e3530000 	cmp	r3, #0
   12f68:	0a000001 	beq	12f74 <CUSBFunction::GetEndpoint0() const+0x14>
   12f6c:	e1a00003 	mov	r0, r3
   12f70:	eaffe38c 	b	bda8 <CUSBDevice::GetEndpoint0() const>
   12f74:	e92d4010 	push	{r4, lr}
   12f78:	e1a04000 	mov	r4, r0
   12f7c:	e3061010 	movw	r1, #24592	; 0x6010
   12f80:	e3401002 	movt	r1, #2
   12f84:	e30408dc 	movw	r0, #18652	; 0x48dc
   12f88:	e3400002 	movt	r0, #2
   12f8c:	e3a02084 	mov	r2, #132	; 0x84
   12f90:	eb00192f 	bl	19454 <assertion_failed>
   12f94:	e5943004 	ldr	r3, [r4, #4]
   12f98:	e8bd4010 	pop	{r4, lr}
   12f9c:	e1a00003 	mov	r0, r3
   12fa0:	eaffe380 	b	bda8 <CUSBDevice::GetEndpoint0() const>

00012fa4 <CUSBFunction::GetHost() const>:
   12fa4:	e5903004 	ldr	r3, [r0, #4]
   12fa8:	e3530000 	cmp	r3, #0
   12fac:	0a000001 	beq	12fb8 <CUSBFunction::GetHost() const+0x14>
   12fb0:	e1a00003 	mov	r0, r3
   12fb4:	eaffe38b 	b	bde8 <CUSBDevice::GetHost() const>
   12fb8:	e92d4010 	push	{r4, lr}
   12fbc:	e1a04000 	mov	r4, r0
   12fc0:	e3061010 	movw	r1, #24592	; 0x6010
   12fc4:	e3401002 	movt	r1, #2
   12fc8:	e30408dc 	movw	r0, #18652	; 0x48dc
   12fcc:	e3400002 	movt	r0, #2
   12fd0:	e3a0208a 	mov	r2, #138	; 0x8a
   12fd4:	eb00191e 	bl	19454 <assertion_failed>
   12fd8:	e5943004 	ldr	r3, [r4, #4]
   12fdc:	e8bd4010 	pop	{r4, lr}
   12fe0:	e1a00003 	mov	r0, r3
   12fe4:	eaffe37f 	b	bde8 <CUSBDevice::GetHost() const>

00012fe8 <CUSBFunction::Configure()>:
   12fe8:	e92d4070 	push	{r4, r5, r6, lr}
   12fec:	e1a04000 	mov	r4, r0
   12ff0:	e590300c 	ldr	r3, [r0, #12]
   12ff4:	e24dd010 	sub	sp, sp, #16
   12ff8:	e3530000 	cmp	r3, #0
   12ffc:	0a000021 	beq	13088 <CUSBFunction::Configure()+0xa0>
   13000:	e5d33003 	ldrb	r3, [r3, #3]
   13004:	e3530000 	cmp	r3, #0
   13008:	1a000002 	bne	13018 <CUSBFunction::Configure()+0x30>
   1300c:	e3a00001 	mov	r0, #1
   13010:	e28dd010 	add	sp, sp, #16
   13014:	e8bd8070 	pop	{r4, r5, r6, pc}
   13018:	e1a00004 	mov	r0, r4
   1301c:	e3a05000 	mov	r5, #0
   13020:	ebffffdf 	bl	12fa4 <CUSBFunction::GetHost() const>
   13024:	e1a06000 	mov	r6, r0
   13028:	e1a00004 	mov	r0, r4
   1302c:	ebffffcb 	bl	12f60 <CUSBFunction::GetEndpoint0() const>
   13030:	e594c00c 	ldr	ip, [r4, #12]
   13034:	e58d500c 	str	r5, [sp, #12]
   13038:	e1a01000 	mov	r1, r0
   1303c:	e58d5008 	str	r5, [sp, #8]
   13040:	e1a00006 	mov	r0, r6
   13044:	e3a0300b 	mov	r3, #11
   13048:	e5dc2002 	ldrb	r2, [ip, #2]
   1304c:	e58d2004 	str	r2, [sp, #4]
   13050:	e3a02001 	mov	r2, #1
   13054:	e5dcc003 	ldrb	ip, [ip, #3]
   13058:	e58dc000 	str	ip, [sp]
   1305c:	ebffe71c 	bl	ccd4 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   13060:	e1500005 	cmp	r0, r5
   13064:	aaffffe8 	bge	1300c <CUSBFunction::Configure()+0x24>
   13068:	eb002357 	bl	1bdcc <CLogger::Get()>
   1306c:	e30532c4 	movw	r3, #21188	; 0x52c4
   13070:	e3403002 	movt	r3, #2
   13074:	e3a02001 	mov	r2, #1
   13078:	e59f1028 	ldr	r1, [pc, #40]	; 130a8 <CUSBFunction::Configure()+0xc0>
   1307c:	eb002289 	bl	1baa8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   13080:	e1a00005 	mov	r0, r5
   13084:	eaffffe1 	b	13010 <CUSBFunction::Configure()+0x28>
   13088:	e3061010 	movw	r1, #24592	; 0x6010
   1308c:	e3401002 	movt	r1, #2
   13090:	e3060034 	movw	r0, #24628	; 0x6034
   13094:	e3400002 	movt	r0, #2
   13098:	e3a0204e 	mov	r2, #78	; 0x4e
   1309c:	eb0018ec 	bl	19454 <assertion_failed>
   130a0:	e594300c 	ldr	r3, [r4, #12]
   130a4:	eaffffd5 	b	13000 <CUSBFunction::Configure()+0x18>
   130a8:	00026008 	.word	0x00026008

000130ac <CUSBFunction::GetDescriptor(unsigned char)>:
   130ac:	e92d4070 	push	{r4, r5, r6, lr}
   130b0:	e1a04000 	mov	r4, r0
   130b4:	e5900008 	ldr	r0, [r0, #8]
   130b8:	e1a05001 	mov	r5, r1
   130bc:	e3500000 	cmp	r0, #0
   130c0:	0a000002 	beq	130d0 <CUSBFunction::GetDescriptor(unsigned char)+0x24>
   130c4:	e1a01005 	mov	r1, r5
   130c8:	e8bd4070 	pop	{r4, r5, r6, lr}
   130cc:	ea00076f 	b	14e90 <CUSBConfigurationParser::GetDescriptor(unsigned char)>
   130d0:	e3061010 	movw	r1, #24592	; 0x6010
   130d4:	e3401002 	movt	r1, #2
   130d8:	e3040af0 	movw	r0, #19184	; 0x4af0
   130dc:	e3400002 	movt	r0, #2
   130e0:	e3a02090 	mov	r2, #144	; 0x90
   130e4:	eb0018da 	bl	19454 <assertion_failed>
   130e8:	e5940008 	ldr	r0, [r4, #8]
   130ec:	e1a01005 	mov	r1, r5
   130f0:	e8bd4070 	pop	{r4, r5, r6, lr}
   130f4:	ea000765 	b	14e90 <CUSBConfigurationParser::GetDescriptor(unsigned char)>

000130f8 <CUSBFunction::ConfigurationError(char const*) const>:
   130f8:	e5903008 	ldr	r3, [r0, #8]
   130fc:	e92d4070 	push	{r4, r5, r6, lr}
   13100:	e1a04000 	mov	r4, r0
   13104:	e1a05001 	mov	r5, r1
   13108:	e3530000 	cmp	r3, #0
   1310c:	0a00000f 	beq	13150 <CUSBFunction::ConfigurationError(char const*) const+0x58>
   13110:	e3550000 	cmp	r5, #0
   13114:	0a000003 	beq	13128 <CUSBFunction::ConfigurationError(char const*) const+0x30>
   13118:	e1a01005 	mov	r1, r5
   1311c:	e5940008 	ldr	r0, [r4, #8]
   13120:	e8bd4070 	pop	{r4, r5, r6, lr}
   13124:	ea0007a7 	b	14fc8 <CUSBConfigurationParser::Error(char const*) const>
   13128:	e3061010 	movw	r1, #24592	; 0x6010
   1312c:	e3401002 	movt	r1, #2
   13130:	e3060088 	movw	r0, #24712	; 0x6088
   13134:	e3400002 	movt	r0, #2
   13138:	e3a02097 	mov	r2, #151	; 0x97
   1313c:	eb0018c4 	bl	19454 <assertion_failed>
   13140:	e1a01005 	mov	r1, r5
   13144:	e5940008 	ldr	r0, [r4, #8]
   13148:	e8bd4070 	pop	{r4, r5, r6, lr}
   1314c:	ea00079d 	b	14fc8 <CUSBConfigurationParser::Error(char const*) const>
   13150:	e3061010 	movw	r1, #24592	; 0x6010
   13154:	e3401002 	movt	r1, #2
   13158:	e3040af0 	movw	r0, #19184	; 0x4af0
   1315c:	e3400002 	movt	r0, #2
   13160:	e3a02096 	mov	r2, #150	; 0x96
   13164:	eb0018ba 	bl	19454 <assertion_failed>
   13168:	eaffffe8 	b	13110 <CUSBFunction::ConfigurationError(char const*) const+0x18>

0001316c <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char)>:
   1316c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   13170:	e1a07003 	mov	r7, r3
   13174:	e590300c 	ldr	r3, [r0, #12]
   13178:	e1a04000 	mov	r4, r0
   1317c:	e1a05001 	mov	r5, r1
   13180:	e1a06002 	mov	r6, r2
   13184:	e3530000 	cmp	r3, #0
   13188:	0a00001b 	beq	131fc <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char)+0x90>
   1318c:	e5943008 	ldr	r3, [r4, #8]
   13190:	e3530000 	cmp	r3, #0
   13194:	0a000021 	beq	13220 <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char)+0xb4>
   13198:	e5943004 	ldr	r3, [r4, #4]
   1319c:	e3530000 	cmp	r3, #0
   131a0:	0a000027 	beq	13244 <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char)+0xd8>
   131a4:	e594000c 	ldr	r0, [r4, #12]
   131a8:	ea000007 	b	131cc <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char)+0x60>
   131ac:	e5940004 	ldr	r0, [r4, #4]
   131b0:	ebffe33c 	bl	bea8 <CUSBDevice::GetDescriptor(unsigned char)>
   131b4:	e3a01004 	mov	r1, #4
   131b8:	e5940008 	ldr	r0, [r4, #8]
   131bc:	eb000733 	bl	14e90 <CUSBConfigurationParser::GetDescriptor(unsigned char)>
   131c0:	e3500000 	cmp	r0, #0
   131c4:	e584000c 	str	r0, [r4, #12]
   131c8:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
   131cc:	e5d03005 	ldrb	r3, [r0, #5]
   131d0:	e3a01004 	mov	r1, #4
   131d4:	e1530005 	cmp	r3, r5
   131d8:	1afffff3 	bne	131ac <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char)+0x40>
   131dc:	e5d03006 	ldrb	r3, [r0, #6]
   131e0:	e1530006 	cmp	r3, r6
   131e4:	1afffff0 	bne	131ac <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char)+0x40>
   131e8:	e5d03007 	ldrb	r3, [r0, #7]
   131ec:	e1530007 	cmp	r3, r7
   131f0:	1affffed 	bne	131ac <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char)+0x40>
   131f4:	e3a00001 	mov	r0, #1
   131f8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   131fc:	e3061010 	movw	r1, #24592	; 0x6010
   13200:	e3401002 	movt	r1, #2
   13204:	e3060034 	movw	r0, #24628	; 0x6034
   13208:	e3400002 	movt	r0, #2
   1320c:	e3a0209d 	mov	r2, #157	; 0x9d
   13210:	eb00188f 	bl	19454 <assertion_failed>
   13214:	e5943008 	ldr	r3, [r4, #8]
   13218:	e3530000 	cmp	r3, #0
   1321c:	1affffdd 	bne	13198 <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char)+0x2c>
   13220:	e3061010 	movw	r1, #24592	; 0x6010
   13224:	e3401002 	movt	r1, #2
   13228:	e3040af0 	movw	r0, #19184	; 0x4af0
   1322c:	e3400002 	movt	r0, #2
   13230:	e3a0209e 	mov	r2, #158	; 0x9e
   13234:	eb001886 	bl	19454 <assertion_failed>
   13238:	e5943004 	ldr	r3, [r4, #4]
   1323c:	e3530000 	cmp	r3, #0
   13240:	1affffd7 	bne	131a4 <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char)+0x38>
   13244:	e3061010 	movw	r1, #24592	; 0x6010
   13248:	e3401002 	movt	r1, #2
   1324c:	e30408dc 	movw	r0, #18652	; 0x48dc
   13250:	e3400002 	movt	r0, #2
   13254:	e3a0209f 	mov	r2, #159	; 0x9f
   13258:	eb00187d 	bl	19454 <assertion_failed>
   1325c:	eaffffd0 	b	131a4 <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char)+0x38>

00013260 <CUSBFunction::GetInterfaceNumber() const>:
   13260:	e590300c 	ldr	r3, [r0, #12]
   13264:	e3530000 	cmp	r3, #0
   13268:	0a000001 	beq	13274 <CUSBFunction::GetInterfaceNumber() const+0x14>
   1326c:	e5d30002 	ldrb	r0, [r3, #2]
   13270:	e12fff1e 	bx	lr
   13274:	e92d4010 	push	{r4, lr}
   13278:	e1a04000 	mov	r4, r0
   1327c:	e3a020b5 	mov	r2, #181	; 0xb5
   13280:	e3061010 	movw	r1, #24592	; 0x6010
   13284:	e3401002 	movt	r1, #2
   13288:	e3060034 	movw	r0, #24628	; 0x6034
   1328c:	e3400002 	movt	r0, #2
   13290:	eb00186f 	bl	19454 <assertion_failed>
   13294:	e594300c 	ldr	r3, [r4, #12]
   13298:	e5d30002 	ldrb	r0, [r3, #2]
   1329c:	e8bd8010 	pop	{r4, pc}

000132a0 <CUSBFunction::GetInterfaceClass() const>:
   132a0:	e590300c 	ldr	r3, [r0, #12]
   132a4:	e3530000 	cmp	r3, #0
   132a8:	0a000001 	beq	132b4 <CUSBFunction::GetInterfaceClass() const+0x14>
   132ac:	e5d30005 	ldrb	r0, [r3, #5]
   132b0:	e12fff1e 	bx	lr
   132b4:	e92d4010 	push	{r4, lr}
   132b8:	e1a04000 	mov	r4, r0
   132bc:	e3a020bb 	mov	r2, #187	; 0xbb
   132c0:	e3061010 	movw	r1, #24592	; 0x6010
   132c4:	e3401002 	movt	r1, #2
   132c8:	e3060034 	movw	r0, #24628	; 0x6034
   132cc:	e3400002 	movt	r0, #2
   132d0:	eb00185f 	bl	19454 <assertion_failed>
   132d4:	e594300c 	ldr	r3, [r4, #12]
   132d8:	e5d30005 	ldrb	r0, [r3, #5]
   132dc:	e8bd8010 	pop	{r4, pc}

000132e0 <CUSBFunction::GetInterfaceSubClass() const>:
   132e0:	e590300c 	ldr	r3, [r0, #12]
   132e4:	e3530000 	cmp	r3, #0
   132e8:	0a000001 	beq	132f4 <CUSBFunction::GetInterfaceSubClass() const+0x14>
   132ec:	e5d30006 	ldrb	r0, [r3, #6]
   132f0:	e12fff1e 	bx	lr
   132f4:	e92d4010 	push	{r4, lr}
   132f8:	e1a04000 	mov	r4, r0
   132fc:	e3a020c1 	mov	r2, #193	; 0xc1
   13300:	e3061010 	movw	r1, #24592	; 0x6010
   13304:	e3401002 	movt	r1, #2
   13308:	e3060034 	movw	r0, #24628	; 0x6034
   1330c:	e3400002 	movt	r0, #2
   13310:	eb00184f 	bl	19454 <assertion_failed>
   13314:	e594300c 	ldr	r3, [r4, #12]
   13318:	e5d30006 	ldrb	r0, [r3, #6]
   1331c:	e8bd8010 	pop	{r4, pc}

00013320 <CUSBFunction::GetInterfaceProtocol() const>:
   13320:	e590300c 	ldr	r3, [r0, #12]
   13324:	e3530000 	cmp	r3, #0
   13328:	0a000001 	beq	13334 <CUSBFunction::GetInterfaceProtocol() const+0x14>
   1332c:	e5d30007 	ldrb	r0, [r3, #7]
   13330:	e12fff1e 	bx	lr
   13334:	e92d4010 	push	{r4, lr}
   13338:	e1a04000 	mov	r4, r0
   1333c:	e3a020c7 	mov	r2, #199	; 0xc7
   13340:	e3061010 	movw	r1, #24592	; 0x6010
   13344:	e3401002 	movt	r1, #2
   13348:	e3060034 	movw	r0, #24628	; 0x6034
   1334c:	e3400002 	movt	r0, #2
   13350:	eb00183f 	bl	19454 <assertion_failed>
   13354:	e594300c 	ldr	r3, [r4, #12]
   13358:	e5d30007 	ldrb	r0, [r3, #7]
   1335c:	e8bd8010 	pop	{r4, pc}

00013360 <CDWHCIFrameSchedulerNoSplit::~CDWHCIFrameSchedulerNoSplit()>:
   13360:	e12fff1e 	bx	lr

00013364 <CDWHCIFrameSchedulerNoSplit::IsOddFrame() const>:
   13364:	e1d000b6 	ldrh	r0, [r0, #6]
   13368:	e2000001 	and	r0, r0, #1
   1336c:	e12fff1e 	bx	lr

00013370 <CDWHCIFrameSchedulerNoSplit::StartSplit()>:
   13370:	e30610bc 	movw	r1, #24764	; 0x60bc
   13374:	e3401002 	movt	r1, #2
   13378:	e3040ad8 	movw	r0, #19160	; 0x4ad8
   1337c:	e3400002 	movt	r0, #2
   13380:	e3a02026 	mov	r2, #38	; 0x26
   13384:	ea001832 	b	19454 <assertion_failed>

00013388 <CDWHCIFrameSchedulerNoSplit::CompleteSplit()>:
   13388:	e92d4010 	push	{r4, lr}
   1338c:	e3a0202b 	mov	r2, #43	; 0x2b
   13390:	e30610bc 	movw	r1, #24764	; 0x60bc
   13394:	e3401002 	movt	r1, #2
   13398:	e3040ad8 	movw	r0, #19160	; 0x4ad8
   1339c:	e3400002 	movt	r0, #2
   133a0:	eb00182b 	bl	19454 <assertion_failed>
   133a4:	e3a00000 	mov	r0, #0
   133a8:	e8bd8010 	pop	{r4, pc}

000133ac <CDWHCIFrameSchedulerNoSplit::TransactionComplete(unsigned int)>:
   133ac:	e30610bc 	movw	r1, #24764	; 0x60bc
   133b0:	e3401002 	movt	r1, #2
   133b4:	e3040ad8 	movw	r0, #19160	; 0x4ad8
   133b8:	e3400002 	movt	r0, #2
   133bc:	e3a02031 	mov	r2, #49	; 0x31
   133c0:	ea001823 	b	19454 <assertion_failed>

000133c4 <CDWHCIFrameSchedulerNoSplit::WaitForFrame()>:
   133c4:	e92d4010 	push	{r4, lr}
   133c8:	e1a04000 	mov	r4, r0
   133cc:	e3001408 	movw	r1, #1032	; 0x408
   133d0:	e3431f98 	movt	r1, #16280	; 0x3f98
   133d4:	e24dd010 	sub	sp, sp, #16
   133d8:	e28d0004 	add	r0, sp, #4
   133dc:	ebffdda1 	bl	aa68 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
   133e0:	e28d0004 	add	r0, sp, #4
   133e4:	ebffdda8 	bl	aa8c <CDWHCIRegister::Read()>
   133e8:	e5d43004 	ldrb	r3, [r4, #4]
   133ec:	e2800001 	add	r0, r0, #1
   133f0:	e3530000 	cmp	r3, #0
   133f4:	e7ed0050 	ubfx	r0, r0, #0, #14
   133f8:	e1c400b6 	strh	r0, [r4, #6]
   133fc:	1a000005 	bne	13418 <CDWHCIFrameSchedulerNoSplit::WaitForFrame()+0x54>
   13400:	e28d0004 	add	r0, sp, #4
   13404:	ebffdda0 	bl	aa8c <CDWHCIRegister::Read()>
   13408:	e1d430b6 	ldrh	r3, [r4, #6]
   1340c:	e7ed0050 	ubfx	r0, r0, #0, #14
   13410:	e1500003 	cmp	r0, r3
   13414:	1afffff9 	bne	13400 <CDWHCIFrameSchedulerNoSplit::WaitForFrame()+0x3c>
   13418:	e28d0004 	add	r0, sp, #4
   1341c:	ebffdd99 	bl	aa88 <CDWHCIRegister::~CDWHCIRegister()>
   13420:	e28dd010 	add	sp, sp, #16
   13424:	e8bd8010 	pop	{r4, pc}

00013428 <CDWHCIFrameSchedulerNoSplit::CDWHCIFrameSchedulerNoSplit(bool)>:
   13428:	e59fc010 	ldr	ip, [pc, #16]	; 13440 <CDWHCIFrameSchedulerNoSplit::CDWHCIFrameSchedulerNoSplit(bool)+0x18>
   1342c:	e3a02901 	mov	r2, #16384	; 0x4000
   13430:	e5c01004 	strb	r1, [r0, #4]
   13434:	e580c000 	str	ip, [r0]
   13438:	e1c020b6 	strh	r2, [r0, #6]
   1343c:	e12fff1e 	bx	lr
   13440:	000260a0 	.word	0x000260a0

00013444 <CDWHCIFrameSchedulerNoSplit::operator new(unsigned int)>:
   13444:	e92d4010 	push	{r4, lr}
   13448:	e3500008 	cmp	r0, #8
   1344c:	0a000005 	beq	13468 <CDWHCIFrameSchedulerNoSplit::operator new(unsigned int)+0x24>
   13450:	e30610bc 	movw	r1, #24764	; 0x60bc
   13454:	e3401002 	movt	r1, #2
   13458:	e30600d8 	movw	r0, #24792	; 0x60d8
   1345c:	e3400002 	movt	r0, #2
   13460:	e3a0205a 	mov	r2, #90	; 0x5a
   13464:	eb0017fa 	bl	19454 <assertion_failed>
   13468:	e30b449c 	movw	r4, #46236	; 0xb49c
   1346c:	e3404002 	movt	r4, #2
   13470:	e5940000 	ldr	r0, [r4]
   13474:	e3500000 	cmp	r0, #0
   13478:	0a000001 	beq	13484 <CDWHCIFrameSchedulerNoSplit::operator new(unsigned int)+0x40>
   1347c:	e8bd4010 	pop	{r4, lr}
   13480:	ea0018fc 	b	19878 <CClassAllocator::Allocate()>
   13484:	e30610bc 	movw	r1, #24764	; 0x60bc
   13488:	e3401002 	movt	r1, #2
   1348c:	e30409d0 	movw	r0, #18896	; 0x49d0
   13490:	e3400002 	movt	r0, #2
   13494:	e3a0205a 	mov	r2, #90	; 0x5a
   13498:	eb0017ed 	bl	19454 <assertion_failed>
   1349c:	e5940000 	ldr	r0, [r4]
   134a0:	e8bd4010 	pop	{r4, lr}
   134a4:	ea0018f3 	b	19878 <CClassAllocator::Allocate()>

000134a8 <CDWHCIFrameSchedulerNoSplit::operator delete(void*, unsigned int)>:
   134a8:	e92d4070 	push	{r4, r5, r6, lr}
   134ac:	e3510008 	cmp	r1, #8
   134b0:	e1a05000 	mov	r5, r0
   134b4:	0a000005 	beq	134d0 <CDWHCIFrameSchedulerNoSplit::operator delete(void*, unsigned int)+0x28>
   134b8:	e30610bc 	movw	r1, #24764	; 0x60bc
   134bc:	e3401002 	movt	r1, #2
   134c0:	e30600d8 	movw	r0, #24792	; 0x60d8
   134c4:	e3400002 	movt	r0, #2
   134c8:	e3a0205a 	mov	r2, #90	; 0x5a
   134cc:	eb0017e0 	bl	19454 <assertion_failed>
   134d0:	e30b449c 	movw	r4, #46236	; 0xb49c
   134d4:	e3404002 	movt	r4, #2
   134d8:	e5940000 	ldr	r0, [r4]
   134dc:	e3500000 	cmp	r0, #0
   134e0:	0a000002 	beq	134f0 <CDWHCIFrameSchedulerNoSplit::operator delete(void*, unsigned int)+0x48>
   134e4:	e1a01005 	mov	r1, r5
   134e8:	e8bd4070 	pop	{r4, r5, r6, lr}
   134ec:	ea001918 	b	19954 <CClassAllocator::Free(void*)>
   134f0:	e30610bc 	movw	r1, #24764	; 0x60bc
   134f4:	e3401002 	movt	r1, #2
   134f8:	e30409d0 	movw	r0, #18896	; 0x49d0
   134fc:	e3400002 	movt	r0, #2
   13500:	e3a0205a 	mov	r2, #90	; 0x5a
   13504:	eb0017d2 	bl	19454 <assertion_failed>
   13508:	e5940000 	ldr	r0, [r4]
   1350c:	e1a01005 	mov	r1, r5
   13510:	e8bd4070 	pop	{r4, r5, r6, lr}
   13514:	ea00190e 	b	19954 <CClassAllocator::Free(void*)>

00013518 <CDWHCIFrameSchedulerNoSplit::~CDWHCIFrameSchedulerNoSplit()>:
   13518:	e92d4010 	push	{r4, lr}
   1351c:	e3a01008 	mov	r1, #8
   13520:	e1a04000 	mov	r4, r0
   13524:	ebffffdf 	bl	134a8 <CDWHCIFrameSchedulerNoSplit::operator delete(void*, unsigned int)>
   13528:	e1a00004 	mov	r0, r4
   1352c:	e8bd8010 	pop	{r4, pc}

00013530 <CDWHCIFrameSchedulerNoSplit::InitAllocator(unsigned int)>:
   13530:	e92d4070 	push	{r4, r5, r6, lr}
   13534:	e30b449c 	movw	r4, #46236	; 0xb49c
   13538:	e3404002 	movt	r4, #2
   1353c:	e1a06000 	mov	r6, r0
   13540:	e5943000 	ldr	r3, [r4]
   13544:	e3530000 	cmp	r3, #0
   13548:	0a000005 	beq	13564 <CDWHCIFrameSchedulerNoSplit::InitAllocator(unsigned int)+0x34>
   1354c:	e30610bc 	movw	r1, #24764	; 0x60bc
   13550:	e3401002 	movt	r1, #2
   13554:	e30409e4 	movw	r0, #18916	; 0x49e4
   13558:	e3400002 	movt	r0, #2
   1355c:	e3a0205a 	mov	r2, #90	; 0x5a
   13560:	eb0017bb 	bl	19454 <assertion_failed>
   13564:	e3a00020 	mov	r0, #32
   13568:	eb003ac4 	bl	22080 <operator new(unsigned int)>
   1356c:	e1a02006 	mov	r2, r6
   13570:	e3063108 	movw	r3, #24840	; 0x6108
   13574:	e3403002 	movt	r3, #2
   13578:	e3a01008 	mov	r1, #8
   1357c:	e1a05000 	mov	r5, r0
   13580:	eb001896 	bl	197e0 <CClassAllocator::CClassAllocator(unsigned int, unsigned int, char const*)>
   13584:	e5845000 	str	r5, [r4]
   13588:	e8bd8070 	pop	{r4, r5, r6, pc}

0001358c <CDWHCIFrameSchedulerNoSplit::InitProtectedAllocator(unsigned int, unsigned int)>:
   1358c:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   13590:	e30b449c 	movw	r4, #46236	; 0xb49c
   13594:	e3404002 	movt	r4, #2
   13598:	e24dd00c 	sub	sp, sp, #12
   1359c:	e1a06000 	mov	r6, r0
   135a0:	e1a07001 	mov	r7, r1
   135a4:	e5943000 	ldr	r3, [r4]
   135a8:	e3530000 	cmp	r3, #0
   135ac:	0a000005 	beq	135c8 <CDWHCIFrameSchedulerNoSplit::InitProtectedAllocator(unsigned int, unsigned int)+0x3c>
   135b0:	e30610bc 	movw	r1, #24764	; 0x60bc
   135b4:	e3401002 	movt	r1, #2
   135b8:	e30409e4 	movw	r0, #18916	; 0x49e4
   135bc:	e3400002 	movt	r0, #2
   135c0:	e3a0205a 	mov	r2, #90	; 0x5a
   135c4:	eb0017a2 	bl	19454 <assertion_failed>
   135c8:	e3a00020 	mov	r0, #32
   135cc:	eb003aab 	bl	22080 <operator new(unsigned int)>
   135d0:	e1a03007 	mov	r3, r7
   135d4:	e1a02006 	mov	r2, r6
   135d8:	e3061108 	movw	r1, #24840	; 0x6108
   135dc:	e3401002 	movt	r1, #2
   135e0:	e58d1000 	str	r1, [sp]
   135e4:	e3a01008 	mov	r1, #8
   135e8:	e1a05000 	mov	r5, r0
   135ec:	eb00188d 	bl	19828 <CClassAllocator::CClassAllocator(unsigned int, unsigned int, unsigned int, char const*)>
   135f0:	e5845000 	str	r5, [r4]
   135f4:	e28dd00c 	add	sp, sp, #12
   135f8:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}

000135fc <CUSBPrinterDevice::~CUSBPrinterDevice()>:
   135fc:	e92d4070 	push	{r4, r5, r6, lr}
   13600:	e1a04000 	mov	r4, r0
   13604:	e5905018 	ldr	r5, [r0, #24]
   13608:	e59f305c 	ldr	r3, [pc, #92]	; 1366c <CUSBPrinterDevice::~CUSBPrinterDevice()+0x70>
   1360c:	e5803000 	str	r3, [r0]
   13610:	e3550000 	cmp	r5, #0
   13614:	0a000004 	beq	1362c <CUSBPrinterDevice::~CUSBPrinterDevice()+0x30>
   13618:	e1a00005 	mov	r0, r5
   1361c:	ebffe526 	bl	cabc <CUSBEndpoint::~CUSBEndpoint()>
   13620:	e1a00005 	mov	r0, r5
   13624:	e3a01014 	mov	r1, #20
   13628:	eb003a98 	bl	22090 <operator delete(void*, unsigned int)>
   1362c:	e5945014 	ldr	r5, [r4, #20]
   13630:	e3a03000 	mov	r3, #0
   13634:	e5843018 	str	r3, [r4, #24]
   13638:	e1550003 	cmp	r5, r3
   1363c:	0a000004 	beq	13654 <CUSBPrinterDevice::~CUSBPrinterDevice()+0x58>
   13640:	e1a00005 	mov	r0, r5
   13644:	ebffe51c 	bl	cabc <CUSBEndpoint::~CUSBEndpoint()>
   13648:	e1a00005 	mov	r0, r5
   1364c:	e3a01014 	mov	r1, #20
   13650:	eb003a8e 	bl	22090 <operator delete(void*, unsigned int)>
   13654:	e3a03000 	mov	r3, #0
   13658:	e1a00004 	mov	r0, r4
   1365c:	e5843014 	str	r3, [r4, #20]
   13660:	ebfffd6c 	bl	12c18 <CUSBFunction::~CUSBFunction()>
   13664:	e1a00004 	mov	r0, r4
   13668:	e8bd8070 	pop	{r4, r5, r6, pc}
   1366c:	0002612c 	.word	0x0002612c

00013670 <CUSBPrinterDevice::~CUSBPrinterDevice()>:
   13670:	e92d4010 	push	{r4, lr}
   13674:	e1a04000 	mov	r4, r0
   13678:	ebffffdf 	bl	135fc <CUSBPrinterDevice::~CUSBPrinterDevice()>
   1367c:	e1a00004 	mov	r0, r4
   13680:	e3a0101c 	mov	r1, #28
   13684:	eb003a81 	bl	22090 <operator delete(void*, unsigned int)>
   13688:	e1a00004 	mov	r0, r4
   1368c:	e8bd8010 	pop	{r4, pc}

00013690 <CUSBPrinterDevice::Write(void const*, unsigned int)>:
   13690:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   13694:	e1a05000 	mov	r5, r0
   13698:	e1a04002 	mov	r4, r2
   1369c:	e24dd00c 	sub	sp, sp, #12
   136a0:	e2517000 	subs	r7, r1, #0
   136a4:	0a000022 	beq	13734 <CUSBPrinterDevice::Write(void const*, unsigned int)+0xa4>
   136a8:	e3540000 	cmp	r4, #0
   136ac:	0a00000f 	beq	136f0 <CUSBPrinterDevice::Write(void const*, unsigned int)+0x60>
   136b0:	e1a00005 	mov	r0, r5
   136b4:	ebfffe3a 	bl	12fa4 <CUSBFunction::GetHost() const>
   136b8:	e2506000 	subs	r6, r0, #0
   136bc:	0a000015 	beq	13718 <CUSBPrinterDevice::Write(void const*, unsigned int)+0x88>
   136c0:	e5951018 	ldr	r1, [r5, #24]
   136c4:	e1a02007 	mov	r2, r7
   136c8:	e1a00006 	mov	r0, r6
   136cc:	e3a03000 	mov	r3, #0
   136d0:	e58d3000 	str	r3, [sp]
   136d4:	e1a03004 	mov	r3, r4
   136d8:	ebffe5dd 	bl	ce54 <CUSBHostController::Transfer(CUSBEndpoint*, void*, unsigned int, unsigned int)>
   136dc:	e3500000 	cmp	r0, #0
   136e0:	a1a00004 	movge	r0, r4
   136e4:	b3e00000 	mvnlt	r0, #0
   136e8:	e28dd00c 	add	sp, sp, #12
   136ec:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   136f0:	e3a0207f 	mov	r2, #127	; 0x7f
   136f4:	e3061154 	movw	r1, #24916	; 0x6154
   136f8:	e3401002 	movt	r1, #2
   136fc:	e3060164 	movw	r0, #24932	; 0x6164
   13700:	e3400002 	movt	r0, #2
   13704:	eb001752 	bl	19454 <assertion_failed>
   13708:	e1a00005 	mov	r0, r5
   1370c:	ebfffe24 	bl	12fa4 <CUSBFunction::GetHost() const>
   13710:	e2506000 	subs	r6, r0, #0
   13714:	1affffe9 	bne	136c0 <CUSBPrinterDevice::Write(void const*, unsigned int)+0x30>
   13718:	e3061154 	movw	r1, #24916	; 0x6154
   1371c:	e3401002 	movt	r1, #2
   13720:	e305013c 	movw	r0, #20796	; 0x513c
   13724:	e3400002 	movt	r0, #2
   13728:	e3a02082 	mov	r2, #130	; 0x82
   1372c:	eb001748 	bl	19454 <assertion_failed>
   13730:	eaffffe2 	b	136c0 <CUSBPrinterDevice::Write(void const*, unsigned int)+0x30>
   13734:	e3061154 	movw	r1, #24916	; 0x6154
   13738:	e3401002 	movt	r1, #2
   1373c:	e30503c4 	movw	r0, #21444	; 0x53c4
   13740:	e3400002 	movt	r0, #2
   13744:	e3a0207e 	mov	r2, #126	; 0x7e
   13748:	eb001741 	bl	19454 <assertion_failed>
   1374c:	eaffffd5 	b	136a8 <CUSBPrinterDevice::Write(void const*, unsigned int)+0x18>

00013750 <CUSBPrinterDevice::CUSBPrinterDevice(CUSBFunction*)>:
   13750:	e92d4010 	push	{r4, lr}
   13754:	e1a04000 	mov	r4, r0
   13758:	ebfffd80 	bl	12d60 <CUSBFunction::CUSBFunction(CUSBFunction*)>
   1375c:	e59f2018 	ldr	r2, [pc, #24]	; 1377c <CUSBPrinterDevice::CUSBPrinterDevice(CUSBFunction*)+0x2c>
   13760:	e3a03000 	mov	r3, #0
   13764:	e1a00004 	mov	r0, r4
   13768:	e5842000 	str	r2, [r4]
   1376c:	e5c43010 	strb	r3, [r4, #16]
   13770:	e5843014 	str	r3, [r4, #20]
   13774:	e5843018 	str	r3, [r4, #24]
   13778:	e8bd8010 	pop	{r4, pc}
   1377c:	0002612c 	.word	0x0002612c

00013780 <CUSBPrinterDevice::Configure()>:
   13780:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   13784:	e1a04000 	mov	r4, r0
   13788:	e24dd01c 	sub	sp, sp, #28
   1378c:	ebfffee3 	bl	13320 <CUSBFunction::GetInterfaceProtocol() const>
   13790:	e2403001 	sub	r3, r0, #1
   13794:	e5c40010 	strb	r0, [r4, #16]
   13798:	e3530001 	cmp	r3, #1
   1379c:	9a00000b 	bls	137d0 <CUSBPrinterDevice::Configure()+0x50>
   137a0:	e3a05000 	mov	r5, #0
   137a4:	eb002188 	bl	1bdcc <CLogger::Get()>
   137a8:	e5d43010 	ldrb	r3, [r4, #16]
   137ac:	e3a02001 	mov	r2, #1
   137b0:	e58d3000 	str	r3, [sp]
   137b4:	e3063170 	movw	r3, #24944	; 0x6170
   137b8:	e3403002 	movt	r3, #2
   137bc:	e59f11b8 	ldr	r1, [pc, #440]	; 1397c <CUSBPrinterDevice::Configure()+0x1fc>
   137c0:	eb0020b8 	bl	1baa8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   137c4:	e1a00005 	mov	r0, r5
   137c8:	e28dd01c 	add	sp, sp, #28
   137cc:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   137d0:	e1a00004 	mov	r0, r4
   137d4:	ebfffdc1 	bl	12ee0 <CUSBFunction::GetNumEndpoints() const>
   137d8:	e5d43010 	ldrb	r3, [r4, #16]
   137dc:	e3530001 	cmp	r3, #1
   137e0:	03a03001 	moveq	r3, #1
   137e4:	13a03002 	movne	r3, #2
   137e8:	e1500003 	cmp	r0, r3
   137ec:	aa000004 	bge	13804 <CUSBPrinterDevice::Configure()+0x84>
   137f0:	ea00004c 	b	13928 <CUSBPrinterDevice::Configure()+0x1a8>
   137f4:	e5d53003 	ldrb	r3, [r5, #3]
   137f8:	e203303f 	and	r3, r3, #63	; 0x3f
   137fc:	e3530002 	cmp	r3, #2
   13800:	0a00002a 	beq	138b0 <CUSBPrinterDevice::Configure()+0x130>
   13804:	e3a01005 	mov	r1, #5
   13808:	e1a00004 	mov	r0, r4
   1380c:	ebfffe26 	bl	130ac <CUSBFunction::GetDescriptor(unsigned char)>
   13810:	e2505000 	subs	r5, r0, #0
   13814:	1afffff6 	bne	137f4 <CUSBPrinterDevice::Configure()+0x74>
   13818:	e5945018 	ldr	r5, [r4, #24]
   1381c:	e3550000 	cmp	r5, #0
   13820:	0a00004e 	beq	13960 <CUSBPrinterDevice::Configure()+0x1e0>
   13824:	e5d43010 	ldrb	r3, [r4, #16]
   13828:	e1a00004 	mov	r0, r4
   1382c:	e3530001 	cmp	r3, #1
   13830:	0a000002 	beq	13840 <CUSBPrinterDevice::Configure()+0xc0>
   13834:	e5945014 	ldr	r5, [r4, #20]
   13838:	e3550000 	cmp	r5, #0
   1383c:	0a00004b 	beq	13970 <CUSBPrinterDevice::Configure()+0x1f0>
   13840:	ebfffde8 	bl	12fe8 <CUSBFunction::Configure()>
   13844:	e2505000 	subs	r5, r0, #0
   13848:	0a00003d 	beq	13944 <CUSBPrinterDevice::Configure()+0x1c4>
   1384c:	e28d0008 	add	r0, sp, #8
   13850:	eb002cfe 	bl	1ec50 <CString::CString()>
   13854:	e30b303c 	movw	r3, #45116	; 0xb03c
   13858:	e3403002 	movt	r3, #2
   1385c:	e28d0008 	add	r0, sp, #8
   13860:	e3061190 	movw	r1, #24976	; 0x6190
   13864:	e3401002 	movt	r1, #2
   13868:	e5932000 	ldr	r2, [r3]
   1386c:	e282c001 	add	ip, r2, #1
   13870:	e583c000 	str	ip, [r3]
   13874:	eb0030be 	bl	1fb74 <CString::Format(char const*, ...)>
   13878:	eb0019b4 	bl	19f50 <CDeviceNameService::Get()>
   1387c:	e1a06000 	mov	r6, r0
   13880:	e28d0008 	add	r0, sp, #8
   13884:	eb002d08 	bl	1ecac <CString::operator char const*() const>
   13888:	e1a02004 	mov	r2, r4
   1388c:	e1a01000 	mov	r1, r0
   13890:	e3a03000 	mov	r3, #0
   13894:	e1a00006 	mov	r0, r6
   13898:	eb001902 	bl	19ca8 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)>
   1389c:	e28d0008 	add	r0, sp, #8
   138a0:	eb002cb8 	bl	1eb88 <CString::~CString()>
   138a4:	e1a00005 	mov	r0, r5
   138a8:	e28dd01c 	add	sp, sp, #28
   138ac:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   138b0:	e1d530d2 	ldrsb	r3, [r5, #2]
   138b4:	e1a00004 	mov	r0, r4
   138b8:	e3530000 	cmp	r3, #0
   138bc:	ba00000c 	blt	138f4 <CUSBPrinterDevice::Configure()+0x174>
   138c0:	e5943018 	ldr	r3, [r4, #24]
   138c4:	e3530000 	cmp	r3, #0
   138c8:	1a000016 	bne	13928 <CUSBPrinterDevice::Configure()+0x1a8>
   138cc:	ebfffd93 	bl	12f20 <CUSBFunction::GetDevice() const>
   138d0:	e1a07000 	mov	r7, r0
   138d4:	e3a00014 	mov	r0, #20
   138d8:	eb0039e8 	bl	22080 <operator new(unsigned int)>
   138dc:	e1a02005 	mov	r2, r5
   138e0:	e1a01007 	mov	r1, r7
   138e4:	e1a06000 	mov	r6, r0
   138e8:	ebffe3e3 	bl	c87c <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   138ec:	e5846018 	str	r6, [r4, #24]
   138f0:	eaffffc3 	b	13804 <CUSBPrinterDevice::Configure()+0x84>
   138f4:	e5943014 	ldr	r3, [r4, #20]
   138f8:	e3530000 	cmp	r3, #0
   138fc:	1a00000a 	bne	1392c <CUSBPrinterDevice::Configure()+0x1ac>
   13900:	ebfffd86 	bl	12f20 <CUSBFunction::GetDevice() const>
   13904:	e1a07000 	mov	r7, r0
   13908:	e3a00014 	mov	r0, #20
   1390c:	eb0039db 	bl	22080 <operator new(unsigned int)>
   13910:	e1a02005 	mov	r2, r5
   13914:	e1a01007 	mov	r1, r7
   13918:	e1a06000 	mov	r6, r0
   1391c:	ebffe3d6 	bl	c87c <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   13920:	e5846014 	str	r6, [r4, #20]
   13924:	eaffffb6 	b	13804 <CUSBPrinterDevice::Configure()+0x84>
   13928:	e1a00004 	mov	r0, r4
   1392c:	e59f1048 	ldr	r1, [pc, #72]	; 1397c <CUSBPrinterDevice::Configure()+0x1fc>
   13930:	e3a05000 	mov	r5, #0
   13934:	ebfffdef 	bl	130f8 <CUSBFunction::ConfigurationError(char const*) const>
   13938:	e1a00005 	mov	r0, r5
   1393c:	e28dd01c 	add	sp, sp, #28
   13940:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   13944:	eb002120 	bl	1bdcc <CLogger::Get()>
   13948:	e30532c4 	movw	r3, #21188	; 0x52c4
   1394c:	e3403002 	movt	r3, #2
   13950:	e3a02001 	mov	r2, #1
   13954:	e59f1020 	ldr	r1, [pc, #32]	; 1397c <CUSBPrinterDevice::Configure()+0x1fc>
   13958:	eb002052 	bl	1baa8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1395c:	eaffff98 	b	137c4 <CUSBPrinterDevice::Configure()+0x44>
   13960:	e1a00004 	mov	r0, r4
   13964:	e59f1010 	ldr	r1, [pc, #16]	; 1397c <CUSBPrinterDevice::Configure()+0x1fc>
   13968:	ebfffde2 	bl	130f8 <CUSBFunction::ConfigurationError(char const*) const>
   1396c:	eaffff94 	b	137c4 <CUSBPrinterDevice::Configure()+0x44>
   13970:	e59f1004 	ldr	r1, [pc, #4]	; 1397c <CUSBPrinterDevice::Configure()+0x1fc>
   13974:	ebfffddf 	bl	130f8 <CUSBFunction::ConfigurationError(char const*) const>
   13978:	eaffff91 	b	137c4 <CUSBPrinterDevice::Configure()+0x44>
   1397c:	0002614c 	.word	0x0002614c

00013980 <CUSBBluetoothDevice::~CUSBBluetoothDevice()>:
   13980:	e92d4070 	push	{r4, r5, r6, lr}
   13984:	e1a04000 	mov	r4, r0
   13988:	e5900020 	ldr	r0, [r0, #32]
   1398c:	e3a03000 	mov	r3, #0
   13990:	e59f20a0 	ldr	r2, [pc, #160]	; 13a38 <CUSBBluetoothDevice::~CUSBBluetoothDevice()+0xb8>
   13994:	e5842000 	str	r2, [r4]
   13998:	e1500003 	cmp	r0, r3
   1399c:	e5843024 	str	r3, [r4, #36]	; 0x24
   139a0:	0a000000 	beq	139a8 <CUSBBluetoothDevice::~CUSBBluetoothDevice()+0x28>
   139a4:	eb0039b8 	bl	2208c <operator delete[](void*)>
   139a8:	e5945018 	ldr	r5, [r4, #24]
   139ac:	e3a03000 	mov	r3, #0
   139b0:	e5843020 	str	r3, [r4, #32]
   139b4:	e1550003 	cmp	r5, r3
   139b8:	0a000004 	beq	139d0 <CUSBBluetoothDevice::~CUSBBluetoothDevice()+0x50>
   139bc:	e1a00005 	mov	r0, r5
   139c0:	ebffe43d 	bl	cabc <CUSBEndpoint::~CUSBEndpoint()>
   139c4:	e1a00005 	mov	r0, r5
   139c8:	e3a01014 	mov	r1, #20
   139cc:	eb0039af 	bl	22090 <operator delete(void*, unsigned int)>
   139d0:	e5945014 	ldr	r5, [r4, #20]
   139d4:	e3a03000 	mov	r3, #0
   139d8:	e5843018 	str	r3, [r4, #24]
   139dc:	e1550003 	cmp	r5, r3
   139e0:	0a000004 	beq	139f8 <CUSBBluetoothDevice::~CUSBBluetoothDevice()+0x78>
   139e4:	e1a00005 	mov	r0, r5
   139e8:	ebffe433 	bl	cabc <CUSBEndpoint::~CUSBEndpoint()>
   139ec:	e1a00005 	mov	r0, r5
   139f0:	e3a01014 	mov	r1, #20
   139f4:	eb0039a5 	bl	22090 <operator delete(void*, unsigned int)>
   139f8:	e5945010 	ldr	r5, [r4, #16]
   139fc:	e3a03000 	mov	r3, #0
   13a00:	e5843014 	str	r3, [r4, #20]
   13a04:	e1550003 	cmp	r5, r3
   13a08:	0a000004 	beq	13a20 <CUSBBluetoothDevice::~CUSBBluetoothDevice()+0xa0>
   13a0c:	e1a00005 	mov	r0, r5
   13a10:	ebffe429 	bl	cabc <CUSBEndpoint::~CUSBEndpoint()>
   13a14:	e1a00005 	mov	r0, r5
   13a18:	e3a01014 	mov	r1, #20
   13a1c:	eb00399b 	bl	22090 <operator delete(void*, unsigned int)>
   13a20:	e3a03000 	mov	r3, #0
   13a24:	e1a00004 	mov	r0, r4
   13a28:	e5843010 	str	r3, [r4, #16]
   13a2c:	ebfffc79 	bl	12c18 <CUSBFunction::~CUSBFunction()>
   13a30:	e1a00004 	mov	r0, r4
   13a34:	e8bd8070 	pop	{r4, r5, r6, pc}
   13a38:	000261a0 	.word	0x000261a0

00013a3c <CUSBBluetoothDevice::~CUSBBluetoothDevice()>:
   13a3c:	e92d4010 	push	{r4, lr}
   13a40:	e1a04000 	mov	r4, r0
   13a44:	ebffffcd 	bl	13980 <CUSBBluetoothDevice::~CUSBBluetoothDevice()>
   13a48:	e1a00004 	mov	r0, r4
   13a4c:	e3a01028 	mov	r1, #40	; 0x28
   13a50:	eb00398e 	bl	22090 <operator delete(void*, unsigned int)>
   13a54:	e1a00004 	mov	r0, r4
   13a58:	e8bd8010 	pop	{r4, pc}

00013a5c <CUSBBluetoothDevice::CUSBBluetoothDevice(CUSBFunction*)>:
   13a5c:	e92d4010 	push	{r4, lr}
   13a60:	e1a04000 	mov	r4, r0
   13a64:	ebfffcbd 	bl	12d60 <CUSBFunction::CUSBFunction(CUSBFunction*)>
   13a68:	e59f2024 	ldr	r2, [pc, #36]	; 13a94 <CUSBBluetoothDevice::CUSBBluetoothDevice(CUSBFunction*)+0x38>
   13a6c:	e3a03000 	mov	r3, #0
   13a70:	e1a00004 	mov	r0, r4
   13a74:	e5842000 	str	r2, [r4]
   13a78:	e5843010 	str	r3, [r4, #16]
   13a7c:	e5843014 	str	r3, [r4, #20]
   13a80:	e5843018 	str	r3, [r4, #24]
   13a84:	e584301c 	str	r3, [r4, #28]
   13a88:	e5843020 	str	r3, [r4, #32]
   13a8c:	e5843024 	str	r3, [r4, #36]	; 0x24
   13a90:	e8bd8010 	pop	{r4, pc}
   13a94:	000261a0 	.word	0x000261a0

00013a98 <CUSBBluetoothDevice::SendHCICommand(void const*, unsigned int)>:
   13a98:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   13a9c:	e1a07000 	mov	r7, r0
   13aa0:	e1a06001 	mov	r6, r1
   13aa4:	e24dd014 	sub	sp, sp, #20
   13aa8:	e1a04002 	mov	r4, r2
   13aac:	ebfffd3c 	bl	12fa4 <CUSBFunction::GetHost() const>
   13ab0:	e1a05000 	mov	r5, r0
   13ab4:	e1a00007 	mov	r0, r7
   13ab8:	e6ff4074 	uxth	r4, r4
   13abc:	ebfffd27 	bl	12f60 <CUSBFunction::GetEndpoint0() const>
   13ac0:	e3a0c000 	mov	ip, #0
   13ac4:	e1a01000 	mov	r1, r0
   13ac8:	e58d6008 	str	r6, [sp, #8]
   13acc:	e1a00005 	mov	r0, r5
   13ad0:	e58d400c 	str	r4, [sp, #12]
   13ad4:	e1a0300c 	mov	r3, ip
   13ad8:	e58dc004 	str	ip, [sp, #4]
   13adc:	e3a02020 	mov	r2, #32
   13ae0:	e58dc000 	str	ip, [sp]
   13ae4:	ebffe47a 	bl	ccd4 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   13ae8:	e1e00000 	mvn	r0, r0
   13aec:	e1a00fa0 	lsr	r0, r0, #31
   13af0:	e28dd014 	add	sp, sp, #20
   13af4:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}

00013af8 <CUSBBluetoothDevice::StartRequest()>:
   13af8:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   13afc:	e1a04000 	mov	r4, r0
   13b00:	e5903010 	ldr	r3, [r0, #16]
   13b04:	e24dd00c 	sub	sp, sp, #12
   13b08:	e3530000 	cmp	r3, #0
   13b0c:	0a000027 	beq	13bb0 <CUSBBluetoothDevice::StartRequest()+0xb8>
   13b10:	e5943020 	ldr	r3, [r4, #32]
   13b14:	e3530000 	cmp	r3, #0
   13b18:	0a00002d 	beq	13bd4 <CUSBBluetoothDevice::StartRequest()+0xdc>
   13b1c:	e594301c 	ldr	r3, [r4, #28]
   13b20:	e3530000 	cmp	r3, #0
   13b24:	0a000005 	beq	13b40 <CUSBBluetoothDevice::StartRequest()+0x48>
   13b28:	e30611c8 	movw	r1, #25032	; 0x61c8
   13b2c:	e3401002 	movt	r1, #2
   13b30:	e305097c 	movw	r0, #22908	; 0x597c
   13b34:	e3400002 	movt	r0, #2
   13b38:	e3a020a6 	mov	r2, #166	; 0xa6
   13b3c:	eb001644 	bl	19454 <assertion_failed>
   13b40:	e5940010 	ldr	r0, [r4, #16]
   13b44:	e3a05000 	mov	r5, #0
   13b48:	ebffe3f4 	bl	cb20 <CUSBEndpoint::GetMaxPacketSize() const>
   13b4c:	e1a07000 	mov	r7, r0
   13b50:	e3a00028 	mov	r0, #40	; 0x28
   13b54:	ebffe570 	bl	d11c <CUSBRequest::operator new(unsigned int)>
   13b58:	e5942020 	ldr	r2, [r4, #32]
   13b5c:	e1a06000 	mov	r6, r0
   13b60:	e5941010 	ldr	r1, [r4, #16]
   13b64:	e1a03007 	mov	r3, r7
   13b68:	e58d5000 	str	r5, [sp]
   13b6c:	ebffe4d1 	bl	ceb8 <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)>
   13b70:	e1a02005 	mov	r2, r5
   13b74:	e1a03004 	mov	r3, r4
   13b78:	e1a00006 	mov	r0, r6
   13b7c:	e584601c 	str	r6, [r4, #28]
   13b80:	e3031d74 	movw	r1, #15732	; 0x3d74
   13b84:	e3401001 	movt	r1, #1
   13b88:	ebffe542 	bl	d098 <CUSBRequest::SetCompletionRoutine(void (*)(CUSBRequest*, void*, void*), void*, void*)>
   13b8c:	e1a00004 	mov	r0, r4
   13b90:	ebfffd03 	bl	12fa4 <CUSBFunction::GetHost() const>
   13b94:	e5903000 	ldr	r3, [r0]
   13b98:	e1a02005 	mov	r2, r5
   13b9c:	e594101c 	ldr	r1, [r4, #28]
   13ba0:	e593300c 	ldr	r3, [r3, #12]
   13ba4:	e28dd00c 	add	sp, sp, #12
   13ba8:	e8bd40f0 	pop	{r4, r5, r6, r7, lr}
   13bac:	e12fff13 	bx	r3
   13bb0:	e30611c8 	movw	r1, #25032	; 0x61c8
   13bb4:	e3401002 	movt	r1, #2
   13bb8:	e30601dc 	movw	r0, #25052	; 0x61dc
   13bbc:	e3400002 	movt	r0, #2
   13bc0:	e3a020a3 	mov	r2, #163	; 0xa3
   13bc4:	eb001622 	bl	19454 <assertion_failed>
   13bc8:	e5943020 	ldr	r3, [r4, #32]
   13bcc:	e3530000 	cmp	r3, #0
   13bd0:	1affffd1 	bne	13b1c <CUSBBluetoothDevice::StartRequest()+0x24>
   13bd4:	e30611c8 	movw	r1, #25032	; 0x61c8
   13bd8:	e3401002 	movt	r1, #2
   13bdc:	e30601f8 	movw	r0, #25080	; 0x61f8
   13be0:	e3400002 	movt	r0, #2
   13be4:	e3a020a4 	mov	r2, #164	; 0xa4
   13be8:	eb001619 	bl	19454 <assertion_failed>
   13bec:	eaffffca 	b	13b1c <CUSBBluetoothDevice::StartRequest()+0x24>

00013bf0 <CUSBBluetoothDevice::RegisterHCIEventHandler(void (*)(void const*, unsigned int))>:
   13bf0:	e92d4010 	push	{r4, lr}
   13bf4:	e3510000 	cmp	r1, #0
   13bf8:	e1a04000 	mov	r4, r0
   13bfc:	e5801024 	str	r1, [r0, #36]	; 0x24
   13c00:	0a000002 	beq	13c10 <CUSBBluetoothDevice::RegisterHCIEventHandler(void (*)(void const*, unsigned int))+0x20>
   13c04:	e1a00004 	mov	r0, r4
   13c08:	e8bd4010 	pop	{r4, lr}
   13c0c:	eaffffb9 	b	13af8 <CUSBBluetoothDevice::StartRequest()>
   13c10:	e30611c8 	movw	r1, #25032	; 0x61c8
   13c14:	e3401002 	movt	r1, #2
   13c18:	e306020c 	movw	r0, #25100	; 0x620c
   13c1c:	e3400002 	movt	r0, #2
   13c20:	e3a0209c 	mov	r2, #156	; 0x9c
   13c24:	eb00160a 	bl	19454 <assertion_failed>
   13c28:	e1a00004 	mov	r0, r4
   13c2c:	e8bd4010 	pop	{r4, lr}
   13c30:	eaffffb0 	b	13af8 <CUSBBluetoothDevice::StartRequest()>

00013c34 <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)>:
   13c34:	e92d4070 	push	{r4, r5, r6, lr}
   13c38:	e1a04000 	mov	r4, r0
   13c3c:	e2515000 	subs	r5, r1, #0
   13c40:	0a00003b 	beq	13d34 <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0x100>
   13c44:	e594301c 	ldr	r3, [r4, #28]
   13c48:	e1530005 	cmp	r3, r5
   13c4c:	0a000005 	beq	13c68 <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0x34>
   13c50:	e30611c8 	movw	r1, #25032	; 0x61c8
   13c54:	e3401002 	movt	r1, #2
   13c58:	e30509a0 	movw	r0, #22944	; 0x59a0
   13c5c:	e3400002 	movt	r0, #2
   13c60:	e3a020b3 	mov	r2, #179	; 0xb3
   13c64:	eb0015fa 	bl	19454 <assertion_failed>
   13c68:	e5943020 	ldr	r3, [r4, #32]
   13c6c:	e3530000 	cmp	r3, #0
   13c70:	0a000028 	beq	13d18 <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0xe4>
   13c74:	e1a00005 	mov	r0, r5
   13c78:	ebffe4ca 	bl	cfa8 <CUSBRequest::GetStatus() const>
   13c7c:	e3500000 	cmp	r0, #0
   13c80:	0a00001d 	beq	13cfc <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0xc8>
   13c84:	e5946024 	ldr	r6, [r4, #36]	; 0x24
   13c88:	e3560000 	cmp	r6, #0
   13c8c:	0a00002f 	beq	13d50 <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0x11c>
   13c90:	e1a00005 	mov	r0, r5
   13c94:	e5945020 	ldr	r5, [r4, #32]
   13c98:	ebffe4c4 	bl	cfb0 <CUSBRequest::GetResultLength() const>
   13c9c:	e1a01000 	mov	r1, r0
   13ca0:	e1a00005 	mov	r0, r5
   13ca4:	e12fff36 	blx	r6
   13ca8:	e594501c 	ldr	r5, [r4, #28]
   13cac:	e3550000 	cmp	r5, #0
   13cb0:	0a000004 	beq	13cc8 <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0x94>
   13cb4:	e1a00005 	mov	r0, r5
   13cb8:	ebffe4a5 	bl	cf54 <CUSBRequest::~CUSBRequest()>
   13cbc:	e1a00005 	mov	r0, r5
   13cc0:	e3a01028 	mov	r1, #40	; 0x28
   13cc4:	ebffe52d 	bl	d180 <CUSBRequest::operator delete(void*, unsigned int)>
   13cc8:	e3a03000 	mov	r3, #0
   13ccc:	e1a00004 	mov	r0, r4
   13cd0:	e584301c 	str	r3, [r4, #28]
   13cd4:	ebffff87 	bl	13af8 <CUSBBluetoothDevice::StartRequest()>
   13cd8:	e3500000 	cmp	r0, #0
   13cdc:	18bd8070 	popne	{r4, r5, r6, pc}
   13ce0:	eb002039 	bl	1bdcc <CLogger::Get()>
   13ce4:	e30539b0 	movw	r3, #22960	; 0x59b0
   13ce8:	e3403002 	movt	r3, #2
   13cec:	e3a02001 	mov	r2, #1
   13cf0:	e59f1078 	ldr	r1, [pc, #120]	; 13d70 <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0x13c>
   13cf4:	e8bd4070 	pop	{r4, r5, r6, lr}
   13cf8:	ea001f6a 	b	1baa8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   13cfc:	eb002032 	bl	1bdcc <CLogger::Get()>
   13d00:	e3063224 	movw	r3, #25124	; 0x6224
   13d04:	e3403002 	movt	r3, #2
   13d08:	e3a02002 	mov	r2, #2
   13d0c:	e59f105c 	ldr	r1, [pc, #92]	; 13d70 <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0x13c>
   13d10:	eb001f64 	bl	1baa8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   13d14:	eaffffe3 	b	13ca8 <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0x74>
   13d18:	e30611c8 	movw	r1, #25032	; 0x61c8
   13d1c:	e3401002 	movt	r1, #2
   13d20:	e30601f8 	movw	r0, #25080	; 0x61f8
   13d24:	e3400002 	movt	r0, #2
   13d28:	e3a020b4 	mov	r2, #180	; 0xb4
   13d2c:	eb0015c8 	bl	19454 <assertion_failed>
   13d30:	eaffffcf 	b	13c74 <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0x40>
   13d34:	e30611c8 	movw	r1, #25032	; 0x61c8
   13d38:	e3401002 	movt	r1, #2
   13d3c:	e304030c 	movw	r0, #17164	; 0x430c
   13d40:	e3400002 	movt	r0, #2
   13d44:	e3a020b2 	mov	r2, #178	; 0xb2
   13d48:	eb0015c1 	bl	19454 <assertion_failed>
   13d4c:	eaffffbc 	b	13c44 <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0x10>
   13d50:	e30611c8 	movw	r1, #25032	; 0x61c8
   13d54:	e3401002 	movt	r1, #2
   13d58:	e306020c 	movw	r0, #25100	; 0x620c
   13d5c:	e3400002 	movt	r0, #2
   13d60:	e3a020b8 	mov	r2, #184	; 0xb8
   13d64:	eb0015ba 	bl	19454 <assertion_failed>
   13d68:	e5946024 	ldr	r6, [r4, #36]	; 0x24
   13d6c:	eaffffc7 	b	13c90 <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0x5c>
   13d70:	000261c0 	.word	0x000261c0

00013d74 <CUSBBluetoothDevice::CompletionStub(CUSBRequest*, void*, void*)>:
   13d74:	e92d4070 	push	{r4, r5, r6, lr}
   13d78:	e1a05000 	mov	r5, r0
   13d7c:	e2524000 	subs	r4, r2, #0
   13d80:	0a000003 	beq	13d94 <CUSBBluetoothDevice::CompletionStub(CUSBRequest*, void*, void*)+0x20>
   13d84:	e1a01005 	mov	r1, r5
   13d88:	e1a00004 	mov	r0, r4
   13d8c:	e8bd4070 	pop	{r4, r5, r6, lr}
   13d90:	eaffffa7 	b	13c34 <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)>
   13d94:	e30611c8 	movw	r1, #25032	; 0x61c8
   13d98:	e3401002 	movt	r1, #2
   13d9c:	e3040220 	movw	r0, #16928	; 0x4220
   13da0:	e3400002 	movt	r0, #2
   13da4:	e3a020cc 	mov	r2, #204	; 0xcc
   13da8:	eb0015a9 	bl	19454 <assertion_failed>
   13dac:	e1a01005 	mov	r1, r5
   13db0:	e1a00004 	mov	r0, r4
   13db4:	e8bd4070 	pop	{r4, r5, r6, lr}
   13db8:	eaffff9d 	b	13c34 <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)>

00013dbc <CUSBBluetoothDevice::Configure()>:
   13dbc:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   13dc0:	e1a04000 	mov	r4, r0
   13dc4:	e24dd014 	sub	sp, sp, #20
   13dc8:	ebfffd24 	bl	13260 <CUSBFunction::GetInterfaceNumber() const>
   13dcc:	e2506000 	subs	r6, r0, #0
   13dd0:	1a000040 	bne	13ed8 <CUSBBluetoothDevice::Configure()+0x11c>
   13dd4:	e1a00004 	mov	r0, r4
   13dd8:	ebfffc40 	bl	12ee0 <CUSBFunction::GetNumEndpoints() const>
   13ddc:	e3500003 	cmp	r0, #3
   13de0:	1a000036 	bne	13ec0 <CUSBBluetoothDevice::Configure()+0x104>
   13de4:	e3a01005 	mov	r1, #5
   13de8:	e1a00004 	mov	r0, r4
   13dec:	ebfffcae 	bl	130ac <CUSBFunction::GetDescriptor(unsigned char)>
   13df0:	e2505000 	subs	r5, r0, #0
   13df4:	0a000048 	beq	13f1c <CUSBBluetoothDevice::Configure()+0x160>
   13df8:	e5d52003 	ldrb	r2, [r5, #3]
   13dfc:	e202203f 	and	r2, r2, #63	; 0x3f
   13e00:	e3520002 	cmp	r2, #2
   13e04:	0a00000f 	beq	13e48 <CUSBBluetoothDevice::Configure()+0x8c>
   13e08:	e3520003 	cmp	r2, #3
   13e0c:	1afffff4 	bne	13de4 <CUSBBluetoothDevice::Configure()+0x28>
   13e10:	e5943010 	ldr	r3, [r4, #16]
   13e14:	e1a00004 	mov	r0, r4
   13e18:	e3530000 	cmp	r3, #0
   13e1c:	1a000038 	bne	13f04 <CUSBBluetoothDevice::Configure()+0x148>
   13e20:	ebfffc3e 	bl	12f20 <CUSBFunction::GetDevice() const>
   13e24:	e1a07000 	mov	r7, r0
   13e28:	e3a00014 	mov	r0, #20
   13e2c:	eb003893 	bl	22080 <operator new(unsigned int)>
   13e30:	e1a02005 	mov	r2, r5
   13e34:	e1a01007 	mov	r1, r7
   13e38:	e1a06000 	mov	r6, r0
   13e3c:	ebffe28e 	bl	c87c <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   13e40:	e5846010 	str	r6, [r4, #16]
   13e44:	eaffffe6 	b	13de4 <CUSBBluetoothDevice::Configure()+0x28>
   13e48:	e1d530d2 	ldrsb	r3, [r5, #2]
   13e4c:	e1a00004 	mov	r0, r4
   13e50:	e3530000 	cmp	r3, #0
   13e54:	ba00000c 	blt	13e8c <CUSBBluetoothDevice::Configure()+0xd0>
   13e58:	e5943018 	ldr	r3, [r4, #24]
   13e5c:	e3530000 	cmp	r3, #0
   13e60:	1a000026 	bne	13f00 <CUSBBluetoothDevice::Configure()+0x144>
   13e64:	ebfffc2d 	bl	12f20 <CUSBFunction::GetDevice() const>
   13e68:	e1a07000 	mov	r7, r0
   13e6c:	e3a00014 	mov	r0, #20
   13e70:	eb003882 	bl	22080 <operator new(unsigned int)>
   13e74:	e1a02005 	mov	r2, r5
   13e78:	e1a01007 	mov	r1, r7
   13e7c:	e1a06000 	mov	r6, r0
   13e80:	ebffe27d 	bl	c87c <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   13e84:	e5846018 	str	r6, [r4, #24]
   13e88:	eaffffd5 	b	13de4 <CUSBBluetoothDevice::Configure()+0x28>
   13e8c:	e5943014 	ldr	r3, [r4, #20]
   13e90:	e3530000 	cmp	r3, #0
   13e94:	1a00001a 	bne	13f04 <CUSBBluetoothDevice::Configure()+0x148>
   13e98:	ebfffc20 	bl	12f20 <CUSBFunction::GetDevice() const>
   13e9c:	e1a07000 	mov	r7, r0
   13ea0:	e3a00014 	mov	r0, #20
   13ea4:	eb003875 	bl	22080 <operator new(unsigned int)>
   13ea8:	e1a02005 	mov	r2, r5
   13eac:	e1a01007 	mov	r1, r7
   13eb0:	e1a06000 	mov	r6, r0
   13eb4:	ebffe270 	bl	c87c <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   13eb8:	e5846014 	str	r6, [r4, #20]
   13ebc:	eaffffc8 	b	13de4 <CUSBBluetoothDevice::Configure()+0x28>
   13ec0:	e1a00004 	mov	r0, r4
   13ec4:	e59f110c 	ldr	r1, [pc, #268]	; 13fd8 <CUSBBluetoothDevice::Configure()+0x21c>
   13ec8:	ebfffc8a 	bl	130f8 <CUSBFunction::ConfigurationError(char const*) const>
   13ecc:	e1a00006 	mov	r0, r6
   13ed0:	e28dd014 	add	sp, sp, #20
   13ed4:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   13ed8:	eb001fbb 	bl	1bdcc <CLogger::Get()>
   13edc:	e3a06000 	mov	r6, #0
   13ee0:	e3a02002 	mov	r2, #2
   13ee4:	e59f10ec 	ldr	r1, [pc, #236]	; 13fd8 <CUSBBluetoothDevice::Configure()+0x21c>
   13ee8:	e3063234 	movw	r3, #25140	; 0x6234
   13eec:	e3403002 	movt	r3, #2
   13ef0:	eb001eec 	bl	1baa8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   13ef4:	e1a00006 	mov	r0, r6
   13ef8:	e28dd014 	add	sp, sp, #20
   13efc:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   13f00:	e1a00004 	mov	r0, r4
   13f04:	e59f10cc 	ldr	r1, [pc, #204]	; 13fd8 <CUSBBluetoothDevice::Configure()+0x21c>
   13f08:	e3a06000 	mov	r6, #0
   13f0c:	ebfffc79 	bl	130f8 <CUSBFunction::ConfigurationError(char const*) const>
   13f10:	e1a00006 	mov	r0, r6
   13f14:	e28dd014 	add	sp, sp, #20
   13f18:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   13f1c:	e5943014 	ldr	r3, [r4, #20]
   13f20:	e3530000 	cmp	r3, #0
   13f24:	0afffff5 	beq	13f00 <CUSBBluetoothDevice::Configure()+0x144>
   13f28:	e5943018 	ldr	r3, [r4, #24]
   13f2c:	e3530000 	cmp	r3, #0
   13f30:	0afffff2 	beq	13f00 <CUSBBluetoothDevice::Configure()+0x144>
   13f34:	e5943010 	ldr	r3, [r4, #16]
   13f38:	e3530000 	cmp	r3, #0
   13f3c:	0affffef 	beq	13f00 <CUSBBluetoothDevice::Configure()+0x144>
   13f40:	e1a00004 	mov	r0, r4
   13f44:	ebfffc27 	bl	12fe8 <CUSBFunction::Configure()>
   13f48:	e2506000 	subs	r6, r0, #0
   13f4c:	0a00001a 	beq	13fbc <CUSBBluetoothDevice::Configure()+0x200>
   13f50:	e5940010 	ldr	r0, [r4, #16]
   13f54:	ebffe2f1 	bl	cb20 <CUSBEndpoint::GetMaxPacketSize() const>
   13f58:	eb003849 	bl	22084 <operator new[](unsigned int)>
   13f5c:	e5840020 	str	r0, [r4, #32]
   13f60:	e1a0000d 	mov	r0, sp
   13f64:	eb002b39 	bl	1ec50 <CString::CString()>
   13f68:	e30b3040 	movw	r3, #45120	; 0xb040
   13f6c:	e3403002 	movt	r3, #2
   13f70:	e1a0000d 	mov	r0, sp
   13f74:	e3061258 	movw	r1, #25176	; 0x6258
   13f78:	e3401002 	movt	r1, #2
   13f7c:	e5932000 	ldr	r2, [r3]
   13f80:	e282c001 	add	ip, r2, #1
   13f84:	e583c000 	str	ip, [r3]
   13f88:	eb002ef9 	bl	1fb74 <CString::Format(char const*, ...)>
   13f8c:	eb0017ef 	bl	19f50 <CDeviceNameService::Get()>
   13f90:	e1a07000 	mov	r7, r0
   13f94:	e1a0000d 	mov	r0, sp
   13f98:	eb002b43 	bl	1ecac <CString::operator char const*() const>
   13f9c:	e1a03005 	mov	r3, r5
   13fa0:	e1a01000 	mov	r1, r0
   13fa4:	e1a02004 	mov	r2, r4
   13fa8:	e1a00007 	mov	r0, r7
   13fac:	eb00173d 	bl	19ca8 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)>
   13fb0:	e1a0000d 	mov	r0, sp
   13fb4:	eb002af3 	bl	1eb88 <CString::~CString()>
   13fb8:	eaffffc3 	b	13ecc <CUSBBluetoothDevice::Configure()+0x110>
   13fbc:	eb001f82 	bl	1bdcc <CLogger::Get()>
   13fc0:	e30532c4 	movw	r3, #21188	; 0x52c4
   13fc4:	e3403002 	movt	r3, #2
   13fc8:	e3a02001 	mov	r2, #1
   13fcc:	e59f1004 	ldr	r1, [pc, #4]	; 13fd8 <CUSBBluetoothDevice::Configure()+0x21c>
   13fd0:	eb001eb4 	bl	1baa8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   13fd4:	eaffffbc 	b	13ecc <CUSBBluetoothDevice::Configure()+0x110>
   13fd8:	000261c0 	.word	0x000261c0

00013fdc <CUSBMIDIDevice::~CUSBMIDIDevice()>:
   13fdc:	e92d4070 	push	{r4, r5, r6, lr}
   13fe0:	e1a04000 	mov	r4, r0
   13fe4:	e5900020 	ldr	r0, [r0, #32]
   13fe8:	e59f304c 	ldr	r3, [pc, #76]	; 1403c <CUSBMIDIDevice::~CUSBMIDIDevice()+0x60>
   13fec:	e5843000 	str	r3, [r4]
   13ff0:	e3500000 	cmp	r0, #0
   13ff4:	0a000002 	beq	14004 <CUSBMIDIDevice::~CUSBMIDIDevice()+0x28>
   13ff8:	eb003823 	bl	2208c <operator delete[](void*)>
   13ffc:	e3a03000 	mov	r3, #0
   14000:	e5843020 	str	r3, [r4, #32]
   14004:	e5945010 	ldr	r5, [r4, #16]
   14008:	e3550000 	cmp	r5, #0
   1400c:	0a000006 	beq	1402c <CUSBMIDIDevice::~CUSBMIDIDevice()+0x50>
   14010:	e1a00005 	mov	r0, r5
   14014:	ebffe2a8 	bl	cabc <CUSBEndpoint::~CUSBEndpoint()>
   14018:	e1a00005 	mov	r0, r5
   1401c:	e3a01014 	mov	r1, #20
   14020:	eb00381a 	bl	22090 <operator delete(void*, unsigned int)>
   14024:	e3a03000 	mov	r3, #0
   14028:	e5843010 	str	r3, [r4, #16]
   1402c:	e1a00004 	mov	r0, r4
   14030:	ebfffaf8 	bl	12c18 <CUSBFunction::~CUSBFunction()>
   14034:	e1a00004 	mov	r0, r4
   14038:	e8bd8070 	pop	{r4, r5, r6, pc}
   1403c:	00026268 	.word	0x00026268

00014040 <CUSBMIDIDevice::~CUSBMIDIDevice()>:
   14040:	e92d4010 	push	{r4, lr}
   14044:	e1a04000 	mov	r4, r0
   14048:	ebffffe3 	bl	13fdc <CUSBMIDIDevice::~CUSBMIDIDevice()>
   1404c:	e1a00004 	mov	r0, r4
   14050:	e3a01028 	mov	r1, #40	; 0x28
   14054:	eb00380d 	bl	22090 <operator delete(void*, unsigned int)>
   14058:	e1a00004 	mov	r0, r4
   1405c:	e8bd8010 	pop	{r4, pc}

00014060 <CUSBMIDIDevice::CUSBMIDIDevice(CUSBFunction*)>:
   14060:	e92d4010 	push	{r4, lr}
   14064:	e1a04000 	mov	r4, r0
   14068:	ebfffb3c 	bl	12d60 <CUSBFunction::CUSBFunction(CUSBFunction*)>
   1406c:	e59f2020 	ldr	r2, [pc, #32]	; 14094 <CUSBMIDIDevice::CUSBMIDIDevice(CUSBFunction*)+0x34>
   14070:	e3a03000 	mov	r3, #0
   14074:	e1a00004 	mov	r0, r4
   14078:	e5842000 	str	r2, [r4]
   1407c:	e5843010 	str	r3, [r4, #16]
   14080:	e5843014 	str	r3, [r4, #20]
   14084:	e5843018 	str	r3, [r4, #24]
   14088:	e5843020 	str	r3, [r4, #32]
   1408c:	e5843024 	str	r3, [r4, #36]	; 0x24
   14090:	e8bd8010 	pop	{r4, pc}
   14094:	00026268 	.word	0x00026268

00014098 <CUSBMIDIDevice::RegisterPacketHandler(void (*)(unsigned int, unsigned char*, unsigned int))>:
   14098:	e5903014 	ldr	r3, [r0, #20]
   1409c:	e92d4070 	push	{r4, r5, r6, lr}
   140a0:	e1a05000 	mov	r5, r0
   140a4:	e1a04001 	mov	r4, r1
   140a8:	e3530000 	cmp	r3, #0
   140ac:	0a000005 	beq	140c8 <CUSBMIDIDevice::RegisterPacketHandler(void (*)(unsigned int, unsigned char*, unsigned int))+0x30>
   140b0:	e30612d0 	movw	r1, #25296	; 0x62d0
   140b4:	e3401002 	movt	r1, #2
   140b8:	e30602dc 	movw	r0, #25308	; 0x62dc
   140bc:	e3400002 	movt	r0, #2
   140c0:	e3a02099 	mov	r2, #153	; 0x99
   140c4:	eb0014e2 	bl	19454 <assertion_failed>
   140c8:	e3540000 	cmp	r4, #0
   140cc:	e5854014 	str	r4, [r5, #20]
   140d0:	18bd8070 	popne	{r4, r5, r6, pc}
   140d4:	e30612d0 	movw	r1, #25296	; 0x62d0
   140d8:	e3401002 	movt	r1, #2
   140dc:	e30602f4 	movw	r0, #25332	; 0x62f4
   140e0:	e3400002 	movt	r0, #2
   140e4:	e3a0209b 	mov	r2, #155	; 0x9b
   140e8:	e8bd4070 	pop	{r4, r5, r6, lr}
   140ec:	ea0014d8 	b	19454 <assertion_failed>

000140f0 <CUSBMIDIDevice::StartRequest()>:
   140f0:	e92d4070 	push	{r4, r5, r6, lr}
   140f4:	e1a04000 	mov	r4, r0
   140f8:	e5903010 	ldr	r3, [r0, #16]
   140fc:	e24dd008 	sub	sp, sp, #8
   14100:	e3530000 	cmp	r3, #0
   14104:	0a000036 	beq	141e4 <CUSBMIDIDevice::StartRequest()+0xf4>
   14108:	e5943020 	ldr	r3, [r4, #32]
   1410c:	e3530000 	cmp	r3, #0
   14110:	0a00002c 	beq	141c8 <CUSBMIDIDevice::StartRequest()+0xd8>
   14114:	e5943018 	ldr	r3, [r4, #24]
   14118:	e3530000 	cmp	r3, #0
   1411c:	0a000005 	beq	14138 <CUSBMIDIDevice::StartRequest()+0x48>
   14120:	e30612d0 	movw	r1, #25296	; 0x62d0
   14124:	e3401002 	movt	r1, #2
   14128:	e305097c 	movw	r0, #22908	; 0x597c
   1412c:	e3400002 	movt	r0, #2
   14130:	e3a020a3 	mov	r2, #163	; 0xa3
   14134:	eb0014c6 	bl	19454 <assertion_failed>
   14138:	e1d431bc 	ldrh	r3, [r4, #28]
   1413c:	e3530000 	cmp	r3, #0
   14140:	1a000005 	bne	1415c <CUSBMIDIDevice::StartRequest()+0x6c>
   14144:	e30612d0 	movw	r1, #25296	; 0x62d0
   14148:	e3401002 	movt	r1, #2
   1414c:	e3060338 	movw	r0, #25400	; 0x6338
   14150:	e3400002 	movt	r0, #2
   14154:	e3a020a4 	mov	r2, #164	; 0xa4
   14158:	eb0014bd 	bl	19454 <assertion_failed>
   1415c:	e3a00028 	mov	r0, #40	; 0x28
   14160:	e3a05000 	mov	r5, #0
   14164:	ebffe3ec 	bl	d11c <CUSBRequest::operator new(unsigned int)>
   14168:	e1d431bc 	ldrh	r3, [r4, #28]
   1416c:	e1a06000 	mov	r6, r0
   14170:	e5942020 	ldr	r2, [r4, #32]
   14174:	e5941010 	ldr	r1, [r4, #16]
   14178:	e58d5000 	str	r5, [sp]
   1417c:	ebffe34d 	bl	ceb8 <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)>
   14180:	e1a02005 	mov	r2, r5
   14184:	e1a03004 	mov	r3, r4
   14188:	e1a00006 	mov	r0, r6
   1418c:	e5846018 	str	r6, [r4, #24]
   14190:	e3041404 	movw	r1, #17412	; 0x4404
   14194:	e3401001 	movt	r1, #1
   14198:	ebffe3be 	bl	d098 <CUSBRequest::SetCompletionRoutine(void (*)(CUSBRequest*, void*, void*), void*, void*)>
   1419c:	e5940018 	ldr	r0, [r4, #24]
   141a0:	ebffe3d8 	bl	d108 <CUSBRequest::SetCompleteOnNAK()>
   141a4:	e1a00004 	mov	r0, r4
   141a8:	ebfffb7d 	bl	12fa4 <CUSBFunction::GetHost() const>
   141ac:	e5903000 	ldr	r3, [r0]
   141b0:	e1a02005 	mov	r2, r5
   141b4:	e5941018 	ldr	r1, [r4, #24]
   141b8:	e593300c 	ldr	r3, [r3, #12]
   141bc:	e28dd008 	add	sp, sp, #8
   141c0:	e8bd4070 	pop	{r4, r5, r6, lr}
   141c4:	e12fff13 	bx	r3
   141c8:	e30612d0 	movw	r1, #25296	; 0x62d0
   141cc:	e3401002 	movt	r1, #2
   141d0:	e3060320 	movw	r0, #25376	; 0x6320
   141d4:	e3400002 	movt	r0, #2
   141d8:	e3a020a1 	mov	r2, #161	; 0xa1
   141dc:	eb00149c 	bl	19454 <assertion_failed>
   141e0:	eaffffcb 	b	14114 <CUSBMIDIDevice::StartRequest()+0x24>
   141e4:	e30612d0 	movw	r1, #25296	; 0x62d0
   141e8:	e3401002 	movt	r1, #2
   141ec:	e306030c 	movw	r0, #25356	; 0x630c
   141f0:	e3400002 	movt	r0, #2
   141f4:	e3a020a0 	mov	r2, #160	; 0xa0
   141f8:	eb001495 	bl	19454 <assertion_failed>
   141fc:	eaffffc1 	b	14108 <CUSBMIDIDevice::StartRequest()+0x18>

00014200 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)>:
   14200:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   14204:	e1a04000 	mov	r4, r0
   14208:	e2515000 	subs	r5, r1, #0
   1420c:	e24dd00c 	sub	sp, sp, #12
   14210:	0a00006a 	beq	143c0 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x1c0>
   14214:	e5943018 	ldr	r3, [r4, #24]
   14218:	e1530005 	cmp	r3, r5
   1421c:	0a000005 	beq	14238 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x38>
   14220:	e30612d0 	movw	r1, #25296	; 0x62d0
   14224:	e3401002 	movt	r1, #2
   14228:	e30509a0 	movw	r0, #22944	; 0x59a0
   1422c:	e3400002 	movt	r0, #2
   14230:	e3a020b1 	mov	r2, #177	; 0xb1
   14234:	eb001486 	bl	19454 <assertion_failed>
   14238:	e1a00005 	mov	r0, r5
   1423c:	ebffe359 	bl	cfa8 <CUSBRequest::GetStatus() const>
   14240:	e3500000 	cmp	r0, #0
   14244:	1a000027 	bne	142e8 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0xe8>
   14248:	e5945018 	ldr	r5, [r4, #24]
   1424c:	e3550000 	cmp	r5, #0
   14250:	0a000006 	beq	14270 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x70>
   14254:	e1a00005 	mov	r0, r5
   14258:	ebffe33d 	bl	cf54 <CUSBRequest::~CUSBRequest()>
   1425c:	e1a00005 	mov	r0, r5
   14260:	e3a01028 	mov	r1, #40	; 0x28
   14264:	ebffe3c5 	bl	d180 <CUSBRequest::operator delete(void*, unsigned int)>
   14268:	e3a03000 	mov	r3, #0
   1426c:	e5843018 	str	r3, [r4, #24]
   14270:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   14274:	e3530000 	cmp	r3, #0
   14278:	1a000013 	bne	142cc <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0xcc>
   1427c:	eb0031e5 	bl	20a18 <CTimer::Get()>
   14280:	e58d4000 	str	r4, [sp]
   14284:	e304248c 	movw	r2, #17548	; 0x448c
   14288:	e3402001 	movt	r2, #1
   1428c:	e3a03000 	mov	r3, #0
   14290:	e3a01001 	mov	r1, #1
   14294:	eb003028 	bl	2033c <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)>
   14298:	e3500000 	cmp	r0, #0
   1429c:	e5840024 	str	r0, [r4, #36]	; 0x24
   142a0:	0a000001 	beq	142ac <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0xac>
   142a4:	e28dd00c 	add	sp, sp, #12
   142a8:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   142ac:	e30612d0 	movw	r1, #25296	; 0x62d0
   142b0:	e3401002 	movt	r1, #2
   142b4:	e306035c 	movw	r0, #25436	; 0x635c
   142b8:	e3400002 	movt	r0, #2
   142bc:	e3a020d9 	mov	r2, #217	; 0xd9
   142c0:	e28dd00c 	add	sp, sp, #12
   142c4:	e8bd43f0 	pop	{r4, r5, r6, r7, r8, r9, lr}
   142c8:	ea001461 	b	19454 <assertion_failed>
   142cc:	e30612d0 	movw	r1, #25296	; 0x62d0
   142d0:	e3401002 	movt	r1, #2
   142d4:	e306034c 	movw	r0, #25420	; 0x634c
   142d8:	e3400002 	movt	r0, #2
   142dc:	e3a020d7 	mov	r2, #215	; 0xd7
   142e0:	eb00145b 	bl	19454 <assertion_failed>
   142e4:	eaffffe4 	b	1427c <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x7c>
   142e8:	e1a00005 	mov	r0, r5
   142ec:	ebffe32f 	bl	cfb0 <CUSBRequest::GetResultLength() const>
   142f0:	e3100003 	tst	r0, #3
   142f4:	1affffd3 	bne	14248 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x48>
   142f8:	e5946020 	ldr	r6, [r4, #32]
   142fc:	e3560000 	cmp	r6, #0
   14300:	0a000037 	beq	143e4 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x1e4>
   14304:	e1a00005 	mov	r0, r5
   14308:	ebffe328 	bl	cfb0 <CUSBRequest::GetResultLength() const>
   1430c:	e5945020 	ldr	r5, [r4, #32]
   14310:	e0860000 	add	r0, r6, r0
   14314:	e1500005 	cmp	r0, r5
   14318:	9affffca 	bls	14248 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x48>
   1431c:	e1e06005 	mvn	r6, r5
   14320:	e2853005 	add	r3, r5, #5
   14324:	e0806006 	add	r6, r0, r6
   14328:	e3067260 	movw	r7, #25184	; 0x6260
   1432c:	e3407002 	movt	r7, #2
   14330:	e3c66003 	bic	r6, r6, #3
   14334:	e2855001 	add	r5, r5, #1
   14338:	e0866003 	add	r6, r6, r3
   1433c:	e3a08000 	mov	r8, #0
   14340:	e5550001 	ldrb	r0, [r5, #-1]
   14344:	e1a01005 	mov	r1, r5
   14348:	e200300f 	and	r3, r0, #15
   1434c:	e3500000 	cmp	r0, #0
   14350:	e0873103 	add	r3, r7, r3, lsl #2
   14354:	e1a00220 	lsr	r0, r0, #4
   14358:	0a000005 	beq	14374 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x174>
   1435c:	e5949014 	ldr	r9, [r4, #20]
   14360:	e3a08001 	mov	r8, #1
   14364:	e3590000 	cmp	r9, #0
   14368:	0a00001b 	beq	143dc <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x1dc>
   1436c:	e5932028 	ldr	r2, [r3, #40]	; 0x28
   14370:	e12fff39 	blx	r9
   14374:	e2855004 	add	r5, r5, #4
   14378:	e1550006 	cmp	r5, r6
   1437c:	1affffef 	bne	14340 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x140>
   14380:	e5945018 	ldr	r5, [r4, #24]
   14384:	e3550000 	cmp	r5, #0
   14388:	0a000004 	beq	143a0 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x1a0>
   1438c:	e1a00005 	mov	r0, r5
   14390:	ebffe2ef 	bl	cf54 <CUSBRequest::~CUSBRequest()>
   14394:	e1a00005 	mov	r0, r5
   14398:	e3a01028 	mov	r1, #40	; 0x28
   1439c:	ebffe377 	bl	d180 <CUSBRequest::operator delete(void*, unsigned int)>
   143a0:	e3a03000 	mov	r3, #0
   143a4:	e3580000 	cmp	r8, #0
   143a8:	e5843018 	str	r3, [r4, #24]
   143ac:	0affffaf 	beq	14270 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x70>
   143b0:	e1a00004 	mov	r0, r4
   143b4:	e28dd00c 	add	sp, sp, #12
   143b8:	e8bd43f0 	pop	{r4, r5, r6, r7, r8, r9, lr}
   143bc:	eaffff4b 	b	140f0 <CUSBMIDIDevice::StartRequest()>
   143c0:	e30612d0 	movw	r1, #25296	; 0x62d0
   143c4:	e3401002 	movt	r1, #2
   143c8:	e304030c 	movw	r0, #17164	; 0x430c
   143cc:	e3400002 	movt	r0, #2
   143d0:	e3a020b0 	mov	r2, #176	; 0xb0
   143d4:	eb00141e 	bl	19454 <assertion_failed>
   143d8:	eaffff8d 	b	14214 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x14>
   143dc:	e3a08001 	mov	r8, #1
   143e0:	eaffffe3 	b	14374 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x174>
   143e4:	e30612d0 	movw	r1, #25296	; 0x62d0
   143e8:	e3401002 	movt	r1, #2
   143ec:	e3060320 	movw	r0, #25376	; 0x6320
   143f0:	e3400002 	movt	r0, #2
   143f4:	e3a020b8 	mov	r2, #184	; 0xb8
   143f8:	eb001415 	bl	19454 <assertion_failed>
   143fc:	e5946020 	ldr	r6, [r4, #32]
   14400:	eaffffbf 	b	14304 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x104>

00014404 <CUSBMIDIDevice::CompletionStub(CUSBRequest*, void*, void*)>:
   14404:	e92d4070 	push	{r4, r5, r6, lr}
   14408:	e1a05000 	mov	r5, r0
   1440c:	e2524000 	subs	r4, r2, #0
   14410:	0a000003 	beq	14424 <CUSBMIDIDevice::CompletionStub(CUSBRequest*, void*, void*)+0x20>
   14414:	e1a01005 	mov	r1, r5
   14418:	e1a00004 	mov	r0, r4
   1441c:	e8bd4070 	pop	{r4, r5, r6, lr}
   14420:	eaffff76 	b	14200 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)>
   14424:	e30612d0 	movw	r1, #25296	; 0x62d0
   14428:	e3401002 	movt	r1, #2
   1442c:	e3040220 	movw	r0, #16928	; 0x4220
   14430:	e3400002 	movt	r0, #2
   14434:	e3a020e0 	mov	r2, #224	; 0xe0
   14438:	eb001405 	bl	19454 <assertion_failed>
   1443c:	e1a01005 	mov	r1, r5
   14440:	e1a00004 	mov	r0, r4
   14444:	e8bd4070 	pop	{r4, r5, r6, lr}
   14448:	eaffff6c 	b	14200 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)>

0001444c <CUSBMIDIDevice::TimerHandler(unsigned int)>:
   1444c:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   14450:	e92d4010 	push	{r4, lr}
   14454:	e1a04000 	mov	r4, r0
   14458:	e1530001 	cmp	r3, r1
   1445c:	0a000005 	beq	14478 <CUSBMIDIDevice::TimerHandler(unsigned int)+0x2c>
   14460:	e30612d0 	movw	r1, #25296	; 0x62d0
   14464:	e3401002 	movt	r1, #2
   14468:	e306036c 	movw	r0, #25452	; 0x636c
   1446c:	e3400002 	movt	r0, #2
   14470:	e3a020e7 	mov	r2, #231	; 0xe7
   14474:	eb0013f6 	bl	19454 <assertion_failed>
   14478:	e3a03000 	mov	r3, #0
   1447c:	e1a00004 	mov	r0, r4
   14480:	e5843024 	str	r3, [r4, #36]	; 0x24
   14484:	e8bd4010 	pop	{r4, lr}
   14488:	eaffff18 	b	140f0 <CUSBMIDIDevice::StartRequest()>

0001448c <CUSBMIDIDevice::TimerStub(unsigned int, void*, void*)>:
   1448c:	e92d4070 	push	{r4, r5, r6, lr}
   14490:	e1a05000 	mov	r5, r0
   14494:	e2524000 	subs	r4, r2, #0
   14498:	0a000003 	beq	144ac <CUSBMIDIDevice::TimerStub(unsigned int, void*, void*)+0x20>
   1449c:	e1a01005 	mov	r1, r5
   144a0:	e1a00004 	mov	r0, r4
   144a4:	e8bd4070 	pop	{r4, r5, r6, lr}
   144a8:	eaffffe7 	b	1444c <CUSBMIDIDevice::TimerHandler(unsigned int)>
   144ac:	e30612d0 	movw	r1, #25296	; 0x62d0
   144b0:	e3401002 	movt	r1, #2
   144b4:	e3040220 	movw	r0, #16928	; 0x4220
   144b8:	e3400002 	movt	r0, #2
   144bc:	e3a020f0 	mov	r2, #240	; 0xf0
   144c0:	eb0013e3 	bl	19454 <assertion_failed>
   144c4:	e1a01005 	mov	r1, r5
   144c8:	e1a00004 	mov	r0, r4
   144cc:	e8bd4070 	pop	{r4, r5, r6, lr}
   144d0:	eaffffdd 	b	1444c <CUSBMIDIDevice::TimerHandler(unsigned int)>

000144d4 <CUSBMIDIDevice::Configure()>:
   144d4:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   144d8:	e1a05000 	mov	r5, r0
   144dc:	e24dd010 	sub	sp, sp, #16
   144e0:	ebfffa7e 	bl	12ee0 <CUSBFunction::GetNumEndpoints() const>
   144e4:	e2506000 	subs	r6, r0, #0
   144e8:	e1a00005 	mov	r0, r5
   144ec:	0a00003a 	beq	145dc <CUSBMIDIDevice::Configure()+0x108>
   144f0:	ebfffa8a 	bl	12f20 <CUSBFunction::GetDevice() const>
   144f4:	ebffde4b 	bl	be28 <CUSBDevice::GetDeviceDescriptor() const>
   144f8:	e2504000 	subs	r4, r0, #0
   144fc:	0a000071 	beq	146c8 <CUSBMIDIDevice::Configure()+0x1f4>
   14500:	e1d420b8 	ldrh	r2, [r4, #8]
   14504:	e3003582 	movw	r3, #1410	; 0x582
   14508:	e30682d0 	movw	r8, #25296	; 0x62d0
   1450c:	e3408002 	movt	r8, #2
   14510:	e1520003 	cmp	r2, r3
   14514:	e3067394 	movw	r7, #25492	; 0x6394
   14518:	e3407002 	movt	r7, #2
   1451c:	0300312a 	movweq	r3, #298	; 0x12a
   14520:	13a06000 	movne	r6, #0
   14524:	01d460ba 	ldrheq	r6, [r4, #10]
   14528:	00466003 	subeq	r6, r6, r3
   1452c:	016f6f16 	clzeq	r6, r6
   14530:	01a062a6 	lsreq	r6, r6, #5
   14534:	e3a01005 	mov	r1, #5
   14538:	e1a00005 	mov	r0, r5
   1453c:	ebfffada 	bl	130ac <CUSBFunction::GetDescriptor(unsigned char)>
   14540:	e2504000 	subs	r4, r0, #0
   14544:	0a000033 	beq	14618 <CUSBMIDIDevice::Configure()+0x144>
   14548:	e1d430d2 	ldrsb	r3, [r4, #2]
   1454c:	e3530000 	cmp	r3, #0
   14550:	aafffff7 	bge	14534 <CUSBMIDIDevice::Configure()+0x60>
   14554:	e5d43003 	ldrb	r3, [r4, #3]
   14558:	e203303f 	and	r3, r3, #63	; 0x3f
   1455c:	e3530002 	cmp	r3, #2
   14560:	1afffff3 	bne	14534 <CUSBMIDIDevice::Configure()+0x60>
   14564:	e3560000 	cmp	r6, #0
   14568:	0a000020 	beq	145f0 <CUSBMIDIDevice::Configure()+0x11c>
   1456c:	e5953010 	ldr	r3, [r5, #16]
   14570:	e3530000 	cmp	r3, #0
   14574:	1a00005a 	bne	146e4 <CUSBMIDIDevice::Configure()+0x210>
   14578:	e1a00005 	mov	r0, r5
   1457c:	ebfffa67 	bl	12f20 <CUSBFunction::GetDevice() const>
   14580:	e1a0a000 	mov	sl, r0
   14584:	e3a00014 	mov	r0, #20
   14588:	eb0036bc 	bl	22080 <operator new(unsigned int)>
   1458c:	e1a02004 	mov	r2, r4
   14590:	e1a0100a 	mov	r1, sl
   14594:	e1a09000 	mov	r9, r0
   14598:	ebffe0b7 	bl	c87c <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   1459c:	e5859010 	str	r9, [r5, #16]
   145a0:	e5952020 	ldr	r2, [r5, #32]
   145a4:	e30f0ffc 	movw	r0, #65532	; 0xfffc
   145a8:	e1d430b4 	ldrh	r3, [r4, #4]
   145ac:	e3520000 	cmp	r2, #0
   145b0:	e0000003 	and	r0, r0, r3
   145b4:	e1c501bc 	strh	r0, [r5, #28]
   145b8:	0a000004 	beq	145d0 <CUSBMIDIDevice::Configure()+0xfc>
   145bc:	e1a00007 	mov	r0, r7
   145c0:	e3a0207d 	mov	r2, #125	; 0x7d
   145c4:	e1a01008 	mov	r1, r8
   145c8:	eb0013a1 	bl	19454 <assertion_failed>
   145cc:	e1d501bc 	ldrh	r0, [r5, #28]
   145d0:	eb0036ab 	bl	22084 <operator new[](unsigned int)>
   145d4:	e5850020 	str	r0, [r5, #32]
   145d8:	eaffffd5 	b	14534 <CUSBMIDIDevice::Configure()+0x60>
   145dc:	e59f1114 	ldr	r1, [pc, #276]	; 146f8 <CUSBMIDIDevice::Configure()+0x224>
   145e0:	ebfffac4 	bl	130f8 <CUSBFunction::ConfigurationError(char const*) const>
   145e4:	e1a00006 	mov	r0, r6
   145e8:	e28dd010 	add	sp, sp, #16
   145ec:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   145f0:	e3a01025 	mov	r1, #37	; 0x25
   145f4:	e1a00005 	mov	r0, r5
   145f8:	ebfffaab 	bl	130ac <CUSBFunction::GetDescriptor(unsigned char)>
   145fc:	e3500000 	cmp	r0, #0
   14600:	0affffcb 	beq	14534 <CUSBMIDIDevice::Configure()+0x60>
   14604:	e5d43000 	ldrb	r3, [r4]
   14608:	e0843003 	add	r3, r4, r3
   1460c:	e1500003 	cmp	r0, r3
   14610:	1affffc7 	bne	14534 <CUSBMIDIDevice::Configure()+0x60>
   14614:	eaffffd4 	b	1456c <CUSBMIDIDevice::Configure()+0x98>
   14618:	e5956010 	ldr	r6, [r5, #16]
   1461c:	e1a00005 	mov	r0, r5
   14620:	e3560000 	cmp	r6, #0
   14624:	0affffec 	beq	145dc <CUSBMIDIDevice::Configure()+0x108>
   14628:	ebfffa6e 	bl	12fe8 <CUSBFunction::Configure()>
   1462c:	e2506000 	subs	r6, r0, #0
   14630:	0a00001b 	beq	146a4 <CUSBMIDIDevice::Configure()+0x1d0>
   14634:	e1a0000d 	mov	r0, sp
   14638:	eb002984 	bl	1ec50 <CString::CString()>
   1463c:	e30b3044 	movw	r3, #45124	; 0xb044
   14640:	e3403002 	movt	r3, #2
   14644:	e1a0000d 	mov	r0, sp
   14648:	e30613ac 	movw	r1, #25516	; 0x63ac
   1464c:	e3401002 	movt	r1, #2
   14650:	e5932000 	ldr	r2, [r3]
   14654:	e282c001 	add	ip, r2, #1
   14658:	e583c000 	str	ip, [r3]
   1465c:	eb002d44 	bl	1fb74 <CString::Format(char const*, ...)>
   14660:	eb00163a 	bl	19f50 <CDeviceNameService::Get()>
   14664:	e1a06000 	mov	r6, r0
   14668:	e1a0000d 	mov	r0, sp
   1466c:	eb00298e 	bl	1ecac <CString::operator char const*() const>
   14670:	e1a03004 	mov	r3, r4
   14674:	e1a01000 	mov	r1, r0
   14678:	e1a02005 	mov	r2, r5
   1467c:	e1a00006 	mov	r0, r6
   14680:	eb001588 	bl	19ca8 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)>
   14684:	e1a00005 	mov	r0, r5
   14688:	ebfffe98 	bl	140f0 <CUSBMIDIDevice::StartRequest()>
   1468c:	e1a06000 	mov	r6, r0
   14690:	e1a0000d 	mov	r0, sp
   14694:	eb00293b 	bl	1eb88 <CString::~CString()>
   14698:	e1a00006 	mov	r0, r6
   1469c:	e28dd010 	add	sp, sp, #16
   146a0:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   146a4:	eb001dc8 	bl	1bdcc <CLogger::Get()>
   146a8:	e3a02001 	mov	r2, #1
   146ac:	e59f1044 	ldr	r1, [pc, #68]	; 146f8 <CUSBMIDIDevice::Configure()+0x224>
   146b0:	e30532c4 	movw	r3, #21188	; 0x52c4
   146b4:	e3403002 	movt	r3, #2
   146b8:	eb001cfa 	bl	1baa8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   146bc:	e1a00006 	mov	r0, r6
   146c0:	e28dd010 	add	sp, sp, #16
   146c4:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   146c8:	e30612d0 	movw	r1, #25296	; 0x62d0
   146cc:	e3401002 	movt	r1, #2
   146d0:	e3060380 	movw	r0, #25472	; 0x6380
   146d4:	e3400002 	movt	r0, #2
   146d8:	e3a02051 	mov	r2, #81	; 0x51
   146dc:	eb00135c 	bl	19454 <assertion_failed>
   146e0:	eaffff86 	b	14500 <CUSBMIDIDevice::Configure()+0x2c>
   146e4:	e1a00005 	mov	r0, r5
   146e8:	e59f1008 	ldr	r1, [pc, #8]	; 146f8 <CUSBMIDIDevice::Configure()+0x224>
   146ec:	ebfffa81 	bl	130f8 <CUSBFunction::ConfigurationError(char const*) const>
   146f0:	e3a06000 	mov	r6, #0
   146f4:	eaffffba 	b	145e4 <CUSBMIDIDevice::Configure()+0x110>
   146f8:	000262c8 	.word	0x000262c8

000146fc <CUSBCDCEthernetDevice::GetMACAddress() const>:
   146fc:	e2800018 	add	r0, r0, #24
   14700:	e12fff1e 	bx	lr

00014704 <CUSBCDCEthernetDevice::~CUSBCDCEthernetDevice()>:
   14704:	e92d4070 	push	{r4, r5, r6, lr}
   14708:	e1a04000 	mov	r4, r0
   1470c:	e59f3068 	ldr	r3, [pc, #104]	; 1477c <CUSBCDCEthernetDevice::~CUSBCDCEthernetDevice()+0x78>
   14710:	e5905014 	ldr	r5, [r0, #20]
   14714:	e5803000 	str	r3, [r0]
   14718:	e3550000 	cmp	r5, #0
   1471c:	0a000004 	beq	14734 <CUSBCDCEthernetDevice::~CUSBCDCEthernetDevice()+0x30>
   14720:	e1a00005 	mov	r0, r5
   14724:	ebffe0e4 	bl	cabc <CUSBEndpoint::~CUSBEndpoint()>
   14728:	e1a00005 	mov	r0, r5
   1472c:	e3a01014 	mov	r1, #20
   14730:	eb003656 	bl	22090 <operator delete(void*, unsigned int)>
   14734:	e5945010 	ldr	r5, [r4, #16]
   14738:	e3a03000 	mov	r3, #0
   1473c:	e5843014 	str	r3, [r4, #20]
   14740:	e1550003 	cmp	r5, r3
   14744:	0a000004 	beq	1475c <CUSBCDCEthernetDevice::~CUSBCDCEthernetDevice()+0x58>
   14748:	e1a00005 	mov	r0, r5
   1474c:	ebffe0da 	bl	cabc <CUSBEndpoint::~CUSBEndpoint()>
   14750:	e1a00005 	mov	r0, r5
   14754:	e3a01014 	mov	r1, #20
   14758:	eb00364c 	bl	22090 <operator delete(void*, unsigned int)>
   1475c:	e3a03000 	mov	r3, #0
   14760:	e2840018 	add	r0, r4, #24
   14764:	e5843010 	str	r3, [r4, #16]
   14768:	eb0009ee 	bl	16f28 <CMACAddress::~CMACAddress()>
   1476c:	e1a00004 	mov	r0, r4
   14770:	eb000a9f 	bl	171f4 <CNetDevice::~CNetDevice()>
   14774:	e1a00004 	mov	r0, r4
   14778:	e8bd8070 	pop	{r4, r5, r6, pc}
   1477c:	000263bc 	.word	0x000263bc

00014780 <CUSBCDCEthernetDevice::~CUSBCDCEthernetDevice()>:
   14780:	e92d4010 	push	{r4, lr}
   14784:	e1a04000 	mov	r4, r0
   14788:	ebffffdd 	bl	14704 <CUSBCDCEthernetDevice::~CUSBCDCEthernetDevice()>
   1478c:	e1a00004 	mov	r0, r4
   14790:	e3a01020 	mov	r1, #32
   14794:	eb00363d 	bl	22090 <operator delete(void*, unsigned int)>
   14798:	e1a00004 	mov	r0, r4
   1479c:	e8bd8010 	pop	{r4, pc}

000147a0 <CUSBCDCEthernetDevice::SendFrame(void const*, unsigned int)>:
   147a0:	e92d4070 	push	{r4, r5, r6, lr}
   147a4:	e1a04000 	mov	r4, r0
   147a8:	e1a05001 	mov	r5, r1
   147ac:	e5903014 	ldr	r3, [r0, #20]
   147b0:	e24dd008 	sub	sp, sp, #8
   147b4:	e1a06002 	mov	r6, r2
   147b8:	e3530000 	cmp	r3, #0
   147bc:	0a00001c 	beq	14834 <CUSBCDCEthernetDevice::SendFrame(void const*, unsigned int)+0x94>
   147c0:	e3550000 	cmp	r5, #0
   147c4:	0a000013 	beq	14818 <CUSBCDCEthernetDevice::SendFrame(void const*, unsigned int)+0x78>
   147c8:	e3560d19 	cmp	r6, #1600	; 0x640
   147cc:	9a000005 	bls	147e8 <CUSBCDCEthernetDevice::SendFrame(void const*, unsigned int)+0x48>
   147d0:	e30613f8 	movw	r1, #25592	; 0x63f8
   147d4:	e3401002 	movt	r1, #2
   147d8:	e3060424 	movw	r0, #25636	; 0x6424
   147dc:	e3400002 	movt	r0, #2
   147e0:	e3a020ac 	mov	r2, #172	; 0xac
   147e4:	eb00131a 	bl	19454 <assertion_failed>
   147e8:	e1a00004 	mov	r0, r4
   147ec:	ebfff9ec 	bl	12fa4 <CUSBFunction::GetHost() const>
   147f0:	e5941014 	ldr	r1, [r4, #20]
   147f4:	e3a0c000 	mov	ip, #0
   147f8:	e1a03006 	mov	r3, r6
   147fc:	e1a02005 	mov	r2, r5
   14800:	e58dc000 	str	ip, [sp]
   14804:	ebffe192 	bl	ce54 <CUSBHostController::Transfer(CUSBEndpoint*, void*, unsigned int, unsigned int)>
   14808:	e1e00000 	mvn	r0, r0
   1480c:	e1a00fa0 	lsr	r0, r0, #31
   14810:	e28dd008 	add	sp, sp, #8
   14814:	e8bd8070 	pop	{r4, r5, r6, pc}
   14818:	e30613f8 	movw	r1, #25592	; 0x63f8
   1481c:	e3401002 	movt	r1, #2
   14820:	e30503c4 	movw	r0, #21444	; 0x53c4
   14824:	e3400002 	movt	r0, #2
   14828:	e3a020ab 	mov	r2, #171	; 0xab
   1482c:	eb001308 	bl	19454 <assertion_failed>
   14830:	eaffffe4 	b	147c8 <CUSBCDCEthernetDevice::SendFrame(void const*, unsigned int)+0x28>
   14834:	e30613f8 	movw	r1, #25592	; 0x63f8
   14838:	e3401002 	movt	r1, #2
   1483c:	e306040c 	movw	r0, #25612	; 0x640c
   14840:	e3400002 	movt	r0, #2
   14844:	e3a020aa 	mov	r2, #170	; 0xaa
   14848:	eb001301 	bl	19454 <assertion_failed>
   1484c:	eaffffdb 	b	147c0 <CUSBCDCEthernetDevice::SendFrame(void const*, unsigned int)+0x20>

00014850 <CUSBCDCEthernetDevice::ReceiveFrame(void*, unsigned int*)>:
   14850:	e92d4070 	push	{r4, r5, r6, lr}
   14854:	e1a04000 	mov	r4, r0
   14858:	e1a05001 	mov	r5, r1
   1485c:	e5903010 	ldr	r3, [r0, #16]
   14860:	e24dd030 	sub	sp, sp, #48	; 0x30
   14864:	e1a06002 	mov	r6, r2
   14868:	e3530000 	cmp	r3, #0
   1486c:	0a000021 	beq	148f8 <CUSBCDCEthernetDevice::ReceiveFrame(void*, unsigned int*)+0xa8>
   14870:	e3550000 	cmp	r5, #0
   14874:	0a000027 	beq	14918 <CUSBCDCEthernetDevice::ReceiveFrame(void*, unsigned int*)+0xc8>
   14878:	e5941010 	ldr	r1, [r4, #16]
   1487c:	e1a02005 	mov	r2, r5
   14880:	e3a03d19 	mov	r3, #1600	; 0x640
   14884:	e3a05000 	mov	r5, #0
   14888:	e28d0008 	add	r0, sp, #8
   1488c:	e58d5000 	str	r5, [sp]
   14890:	ebffe188 	bl	ceb8 <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)>
   14894:	e28d0008 	add	r0, sp, #8
   14898:	ebffe21a 	bl	d108 <CUSBRequest::SetCompleteOnNAK()>
   1489c:	e1a00004 	mov	r0, r4
   148a0:	ebfff9bf 	bl	12fa4 <CUSBFunction::GetHost() const>
   148a4:	e5903000 	ldr	r3, [r0]
   148a8:	e1a02005 	mov	r2, r5
   148ac:	e28d1008 	add	r1, sp, #8
   148b0:	e5933008 	ldr	r3, [r3, #8]
   148b4:	e12fff33 	blx	r3
   148b8:	e2504000 	subs	r4, r0, #0
   148bc:	1a000005 	bne	148d8 <CUSBCDCEthernetDevice::ReceiveFrame(void*, unsigned int*)+0x88>
   148c0:	e3a04000 	mov	r4, #0
   148c4:	e28d0008 	add	r0, sp, #8
   148c8:	ebffe1a1 	bl	cf54 <CUSBRequest::~CUSBRequest()>
   148cc:	e1a00004 	mov	r0, r4
   148d0:	e28dd030 	add	sp, sp, #48	; 0x30
   148d4:	e8bd8070 	pop	{r4, r5, r6, pc}
   148d8:	e28d0008 	add	r0, sp, #8
   148dc:	ebffe1b3 	bl	cfb0 <CUSBRequest::GetResultLength() const>
   148e0:	e2505000 	subs	r5, r0, #0
   148e4:	0afffff5 	beq	148c0 <CUSBCDCEthernetDevice::ReceiveFrame(void*, unsigned int*)+0x70>
   148e8:	e3560000 	cmp	r6, #0
   148ec:	0a000010 	beq	14934 <CUSBCDCEthernetDevice::ReceiveFrame(void*, unsigned int*)+0xe4>
   148f0:	e5865000 	str	r5, [r6]
   148f4:	eafffff2 	b	148c4 <CUSBCDCEthernetDevice::ReceiveFrame(void*, unsigned int*)+0x74>
   148f8:	e30613f8 	movw	r1, #25592	; 0x63f8
   148fc:	e3401002 	movt	r1, #2
   14900:	e3060444 	movw	r0, #25668	; 0x6444
   14904:	e3400002 	movt	r0, #2
   14908:	e3a020b2 	mov	r2, #178	; 0xb2
   1490c:	eb0012d0 	bl	19454 <assertion_failed>
   14910:	e3550000 	cmp	r5, #0
   14914:	1affffd7 	bne	14878 <CUSBCDCEthernetDevice::ReceiveFrame(void*, unsigned int*)+0x28>
   14918:	e30613f8 	movw	r1, #25592	; 0x63f8
   1491c:	e3401002 	movt	r1, #2
   14920:	e30503c4 	movw	r0, #21444	; 0x53c4
   14924:	e3400002 	movt	r0, #2
   14928:	e3a020b3 	mov	r2, #179	; 0xb3
   1492c:	eb0012c8 	bl	19454 <assertion_failed>
   14930:	eaffffd0 	b	14878 <CUSBCDCEthernetDevice::ReceiveFrame(void*, unsigned int*)+0x28>
   14934:	e30613f8 	movw	r1, #25592	; 0x63f8
   14938:	e3401002 	movt	r1, #2
   1493c:	e306045c 	movw	r0, #25692	; 0x645c
   14940:	e3400002 	movt	r0, #2
   14944:	e3a020c3 	mov	r2, #195	; 0xc3
   14948:	eb0012c1 	bl	19454 <assertion_failed>
   1494c:	eaffffe7 	b	148f0 <CUSBCDCEthernetDevice::ReceiveFrame(void*, unsigned int*)+0xa0>

00014950 <CUSBCDCEthernetDevice::CUSBCDCEthernetDevice(CUSBFunction*)>:
   14950:	e92d4010 	push	{r4, lr}
   14954:	e1a04000 	mov	r4, r0
   14958:	eb000a1d 	bl	171d4 <CNetDevice::CNetDevice(CUSBFunction*)>
   1495c:	e59f201c 	ldr	r2, [pc, #28]	; 14980 <CUSBCDCEthernetDevice::CUSBCDCEthernetDevice(CUSBFunction*)+0x30>
   14960:	e3a03000 	mov	r3, #0
   14964:	e2840018 	add	r0, r4, #24
   14968:	e5842000 	str	r2, [r4]
   1496c:	e5843010 	str	r3, [r4, #16]
   14970:	e5843014 	str	r3, [r4, #20]
   14974:	eb000968 	bl	16f1c <CMACAddress::CMACAddress()>
   14978:	e1a00004 	mov	r0, r4
   1497c:	e8bd8010 	pop	{r4, pc}
   14980:	000263bc 	.word	0x000263bc

00014984 <CUSBCDCEthernetDevice::InitMACAddress(unsigned char)>:
   14984:	e92d4070 	push	{r4, r5, r6, lr}
   14988:	e1a04001 	mov	r4, r1
   1498c:	e1a05000 	mov	r5, r0
   14990:	e24dd018 	sub	sp, sp, #24
   14994:	ebfff961 	bl	12f20 <CUSBFunction::GetDevice() const>
   14998:	e1a01000 	mov	r1, r0
   1499c:	e28d000c 	add	r0, sp, #12
   149a0:	eb0001a3 	bl	15034 <CUSBString::CUSBString(CUSBDevice*)>
   149a4:	e3540000 	cmp	r4, #0
   149a8:	1a000005 	bne	149c4 <CUSBCDCEthernetDevice::InitMACAddress(unsigned char)+0x40>
   149ac:	e3a04000 	mov	r4, #0
   149b0:	e28d000c 	add	r0, sp, #12
   149b4:	eb0001f3 	bl	15188 <CUSBString::~CUSBString()>
   149b8:	e1a00004 	mov	r0, r4
   149bc:	e28dd018 	add	sp, sp, #24
   149c0:	e8bd8070 	pop	{r4, r5, r6, pc}
   149c4:	e28d000c 	add	r0, sp, #12
   149c8:	eb0002a6 	bl	15468 <CUSBString::GetLanguageID()>
   149cc:	e1a01004 	mov	r1, r4
   149d0:	e1a02000 	mov	r2, r0
   149d4:	e28d000c 	add	r0, sp, #12
   149d8:	eb0001fa 	bl	151c8 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)>
   149dc:	e2504000 	subs	r4, r0, #0
   149e0:	0afffff1 	beq	149ac <CUSBCDCEthernetDevice::InitMACAddress(unsigned char)+0x28>
   149e4:	e28d000c 	add	r0, sp, #12
   149e8:	eb00029c 	bl	15460 <CUSBString::Get() const>
   149ec:	e2506000 	subs	r6, r0, #0
   149f0:	0a00001d 	beq	14a6c <CUSBCDCEthernetDevice::InitMACAddress(unsigned char)+0xe8>
   149f4:	e2862002 	add	r2, r6, #2
   149f8:	e28d1004 	add	r1, sp, #4
   149fc:	e286600e 	add	r6, r6, #14
   14a00:	e15230d2 	ldrsb	r3, [r2, #-2]
   14a04:	e3530039 	cmp	r3, #57	; 0x39
   14a08:	e6ef3073 	uxtb	r3, r3
   14a0c:	c2433007 	subgt	r3, r3, #7
   14a10:	c6ef3073 	uxtbgt	r3, r3
   14a14:	e2433030 	sub	r3, r3, #48	; 0x30
   14a18:	e6ef0073 	uxtb	r0, r3
   14a1c:	e350000f 	cmp	r0, #15
   14a20:	8affffe1 	bhi	149ac <CUSBCDCEthernetDevice::InitMACAddress(unsigned char)+0x28>
   14a24:	e15230d1 	ldrsb	r3, [r2, #-1]
   14a28:	e2822002 	add	r2, r2, #2
   14a2c:	e3530039 	cmp	r3, #57	; 0x39
   14a30:	e6ef3073 	uxtb	r3, r3
   14a34:	c2433007 	subgt	r3, r3, #7
   14a38:	c6ef3073 	uxtbgt	r3, r3
   14a3c:	e2433030 	sub	r3, r3, #48	; 0x30
   14a40:	e6ef3073 	uxtb	r3, r3
   14a44:	e353000f 	cmp	r3, #15
   14a48:	8affffd7 	bhi	149ac <CUSBCDCEthernetDevice::InitMACAddress(unsigned char)+0x28>
   14a4c:	e1833200 	orr	r3, r3, r0, lsl #4
   14a50:	e1560002 	cmp	r6, r2
   14a54:	e4c13001 	strb	r3, [r1], #1
   14a58:	1affffe8 	bne	14a00 <CUSBCDCEthernetDevice::InitMACAddress(unsigned char)+0x7c>
   14a5c:	e28d1004 	add	r1, sp, #4
   14a60:	e2850018 	add	r0, r5, #24
   14a64:	eb000953 	bl	16fb8 <CMACAddress::Set(unsigned char const*)>
   14a68:	eaffffd0 	b	149b0 <CUSBCDCEthernetDevice::InitMACAddress(unsigned char)+0x2c>
   14a6c:	e30613f8 	movw	r1, #25592	; 0x63f8
   14a70:	e3401002 	movt	r1, #2
   14a74:	e3060470 	movw	r0, #25712	; 0x6470
   14a78:	e3400002 	movt	r0, #2
   14a7c:	e3a020d3 	mov	r2, #211	; 0xd3
   14a80:	eb001273 	bl	19454 <assertion_failed>
   14a84:	eaffffda 	b	149f4 <CUSBCDCEthernetDevice::InitMACAddress(unsigned char)+0x70>

00014a88 <CUSBCDCEthernetDevice::Configure()>:
   14a88:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   14a8c:	e1a05000 	mov	r5, r0
   14a90:	e24dd01c 	sub	sp, sp, #28
   14a94:	ea000002 	b	14aa4 <CUSBCDCEthernetDevice::Configure()+0x1c>
   14a98:	e5d43002 	ldrb	r3, [r4, #2]
   14a9c:	e353000f 	cmp	r3, #15
   14aa0:	0a000013 	beq	14af4 <CUSBCDCEthernetDevice::Configure()+0x6c>
   14aa4:	e3a01024 	mov	r1, #36	; 0x24
   14aa8:	e1a00005 	mov	r0, r5
   14aac:	ebfff97e 	bl	130ac <CUSBFunction::GetDescriptor(unsigned char)>
   14ab0:	e2504000 	subs	r4, r0, #0
   14ab4:	1afffff7 	bne	14a98 <CUSBCDCEthernetDevice::Configure()+0x10>
   14ab8:	e1a00005 	mov	r0, r5
   14abc:	e59f11f0 	ldr	r1, [pc, #496]	; 14cb4 <CUSBCDCEthernetDevice::Configure()+0x22c>
   14ac0:	ebfff98c 	bl	130f8 <CUSBFunction::ConfigurationError(char const*) const>
   14ac4:	e1a00004 	mov	r0, r4
   14ac8:	e28dd01c 	add	sp, sp, #28
   14acc:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   14ad0:	e5d32006 	ldrb	r2, [r3, #6]
   14ad4:	e3520000 	cmp	r2, #0
   14ad8:	1a000005 	bne	14af4 <CUSBCDCEthernetDevice::Configure()+0x6c>
   14adc:	e5d32007 	ldrb	r2, [r3, #7]
   14ae0:	e3520000 	cmp	r2, #0
   14ae4:	1a000002 	bne	14af4 <CUSBCDCEthernetDevice::Configure()+0x6c>
   14ae8:	e5d33004 	ldrb	r3, [r3, #4]
   14aec:	e3530001 	cmp	r3, #1
   14af0:	8a000008 	bhi	14b18 <CUSBCDCEthernetDevice::Configure()+0x90>
   14af4:	e3a01004 	mov	r1, #4
   14af8:	e1a00005 	mov	r0, r5
   14afc:	ebfff96a 	bl	130ac <CUSBFunction::GetDescriptor(unsigned char)>
   14b00:	e2503000 	subs	r3, r0, #0
   14b04:	0a000037 	beq	14be8 <CUSBCDCEthernetDevice::Configure()+0x160>
   14b08:	e5d32005 	ldrb	r2, [r3, #5]
   14b0c:	e352000a 	cmp	r2, #10
   14b10:	1afffff7 	bne	14af4 <CUSBCDCEthernetDevice::Configure()+0x6c>
   14b14:	eaffffed 	b	14ad0 <CUSBCDCEthernetDevice::Configure()+0x48>
   14b18:	e5d41003 	ldrb	r1, [r4, #3]
   14b1c:	e1a00005 	mov	r0, r5
   14b20:	ebffff97 	bl	14984 <CUSBCDCEthernetDevice::InitMACAddress(unsigned char)>
   14b24:	e2504000 	subs	r4, r0, #0
   14b28:	0a000035 	beq	14c04 <CUSBCDCEthernetDevice::Configure()+0x17c>
   14b2c:	e28d0008 	add	r0, sp, #8
   14b30:	eb002846 	bl	1ec50 <CString::CString()>
   14b34:	e28d1008 	add	r1, sp, #8
   14b38:	e2850018 	add	r0, r5, #24
   14b3c:	eb00097d 	bl	17138 <CMACAddress::Format(CString*) const>
   14b40:	eb001ca1 	bl	1bdcc <CLogger::Get()>
   14b44:	e1a04000 	mov	r4, r0
   14b48:	e28d0008 	add	r0, sp, #8
   14b4c:	eb002856 	bl	1ecac <CString::operator char const*() const>
   14b50:	e3063498 	movw	r3, #25752	; 0x6498
   14b54:	e3403002 	movt	r3, #2
   14b58:	e58d0000 	str	r0, [sp]
   14b5c:	e3a02004 	mov	r2, #4
   14b60:	e1a00004 	mov	r0, r4
   14b64:	e59f1148 	ldr	r1, [pc, #328]	; 14cb4 <CUSBCDCEthernetDevice::Configure()+0x22c>
   14b68:	eb001bce 	bl	1baa8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   14b6c:	ea000003 	b	14b80 <CUSBCDCEthernetDevice::Configure()+0xf8>
   14b70:	e5d43003 	ldrb	r3, [r4, #3]
   14b74:	e203303f 	and	r3, r3, #63	; 0x3f
   14b78:	e3530002 	cmp	r3, #2
   14b7c:	0a000027 	beq	14c20 <CUSBCDCEthernetDevice::Configure()+0x198>
   14b80:	e3a01005 	mov	r1, #5
   14b84:	e1a00005 	mov	r0, r5
   14b88:	ebfff947 	bl	130ac <CUSBFunction::GetDescriptor(unsigned char)>
   14b8c:	e2504000 	subs	r4, r0, #0
   14b90:	1afffff6 	bne	14b70 <CUSBCDCEthernetDevice::Configure()+0xe8>
   14b94:	e5953010 	ldr	r3, [r5, #16]
   14b98:	e1a00005 	mov	r0, r5
   14b9c:	e3530000 	cmp	r3, #0
   14ba0:	0a00002f 	beq	14c64 <CUSBCDCEthernetDevice::Configure()+0x1dc>
   14ba4:	e5953014 	ldr	r3, [r5, #20]
   14ba8:	e3530000 	cmp	r3, #0
   14bac:	0a00002c 	beq	14c64 <CUSBCDCEthernetDevice::Configure()+0x1dc>
   14bb0:	ebfff90c 	bl	12fe8 <CUSBFunction::Configure()>
   14bb4:	e2504000 	subs	r4, r0, #0
   14bb8:	1a00003a 	bne	14ca8 <CUSBCDCEthernetDevice::Configure()+0x220>
   14bbc:	eb001c82 	bl	1bdcc <CLogger::Get()>
   14bc0:	e30532c4 	movw	r3, #21188	; 0x52c4
   14bc4:	e3403002 	movt	r3, #2
   14bc8:	e3a02001 	mov	r2, #1
   14bcc:	e59f10e0 	ldr	r1, [pc, #224]	; 14cb4 <CUSBCDCEthernetDevice::Configure()+0x22c>
   14bd0:	eb001bb4 	bl	1baa8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   14bd4:	e28d0008 	add	r0, sp, #8
   14bd8:	eb0027ea 	bl	1eb88 <CString::~CString()>
   14bdc:	e1a00004 	mov	r0, r4
   14be0:	e28dd01c 	add	sp, sp, #28
   14be4:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   14be8:	e1a00005 	mov	r0, r5
   14bec:	e1a04003 	mov	r4, r3
   14bf0:	e59f10bc 	ldr	r1, [pc, #188]	; 14cb4 <CUSBCDCEthernetDevice::Configure()+0x22c>
   14bf4:	ebfff93f 	bl	130f8 <CUSBFunction::ConfigurationError(char const*) const>
   14bf8:	e1a00004 	mov	r0, r4
   14bfc:	e28dd01c 	add	sp, sp, #28
   14c00:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   14c04:	eb001c70 	bl	1bdcc <CLogger::Get()>
   14c08:	e3063480 	movw	r3, #25728	; 0x6480
   14c0c:	e3403002 	movt	r3, #2
   14c10:	e3a02001 	mov	r2, #1
   14c14:	e59f1098 	ldr	r1, [pc, #152]	; 14cb4 <CUSBCDCEthernetDevice::Configure()+0x22c>
   14c18:	eb001ba2 	bl	1baa8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   14c1c:	eaffffa8 	b	14ac4 <CUSBCDCEthernetDevice::Configure()+0x3c>
   14c20:	e1d430d2 	ldrsb	r3, [r4, #2]
   14c24:	e1a00005 	mov	r0, r5
   14c28:	e3530000 	cmp	r3, #0
   14c2c:	ba000010 	blt	14c74 <CUSBCDCEthernetDevice::Configure()+0x1ec>
   14c30:	e5953014 	ldr	r3, [r5, #20]
   14c34:	e3530000 	cmp	r3, #0
   14c38:	1a000009 	bne	14c64 <CUSBCDCEthernetDevice::Configure()+0x1dc>
   14c3c:	ebfff8b7 	bl	12f20 <CUSBFunction::GetDevice() const>
   14c40:	e1a07000 	mov	r7, r0
   14c44:	e3a00014 	mov	r0, #20
   14c48:	eb00350c 	bl	22080 <operator new(unsigned int)>
   14c4c:	e1a02004 	mov	r2, r4
   14c50:	e1a01007 	mov	r1, r7
   14c54:	e1a06000 	mov	r6, r0
   14c58:	ebffdf07 	bl	c87c <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   14c5c:	e5856014 	str	r6, [r5, #20]
   14c60:	eaffffc6 	b	14b80 <CUSBCDCEthernetDevice::Configure()+0xf8>
   14c64:	e59f1048 	ldr	r1, [pc, #72]	; 14cb4 <CUSBCDCEthernetDevice::Configure()+0x22c>
   14c68:	e3a04000 	mov	r4, #0
   14c6c:	ebfff921 	bl	130f8 <CUSBFunction::ConfigurationError(char const*) const>
   14c70:	eaffffd7 	b	14bd4 <CUSBCDCEthernetDevice::Configure()+0x14c>
   14c74:	e5953010 	ldr	r3, [r5, #16]
   14c78:	e3530000 	cmp	r3, #0
   14c7c:	1afffff8 	bne	14c64 <CUSBCDCEthernetDevice::Configure()+0x1dc>
   14c80:	ebfff8a6 	bl	12f20 <CUSBFunction::GetDevice() const>
   14c84:	e1a07000 	mov	r7, r0
   14c88:	e3a00014 	mov	r0, #20
   14c8c:	eb0034fb 	bl	22080 <operator new(unsigned int)>
   14c90:	e1a02004 	mov	r2, r4
   14c94:	e1a01007 	mov	r1, r7
   14c98:	e1a06000 	mov	r6, r0
   14c9c:	ebffdef6 	bl	c87c <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   14ca0:	e5856010 	str	r6, [r5, #16]
   14ca4:	eaffffb5 	b	14b80 <CUSBCDCEthernetDevice::Configure()+0xf8>
   14ca8:	e1a00005 	mov	r0, r5
   14cac:	eb00096a 	bl	1725c <CNetDevice::AddNetDevice()>
   14cb0:	eaffffc7 	b	14bd4 <CUSBCDCEthernetDevice::Configure()+0x14c>
   14cb4:	000263f0 	.word	0x000263f0

00014cb8 <CNetDevice::IsLinkUp()>:
   14cb8:	e3a00001 	mov	r0, #1
   14cbc:	e12fff1e 	bx	lr

00014cc0 <CNetDevice::GetLinkSpeed()>:
   14cc0:	e3a00006 	mov	r0, #6
   14cc4:	e12fff1e 	bx	lr

00014cc8 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)>:
   14cc8:	e92d4070 	push	{r4, r5, r6, lr}
   14ccc:	e3510000 	cmp	r1, #0
   14cd0:	e1a05002 	mov	r5, r2
   14cd4:	e3a03000 	mov	r3, #0
   14cd8:	e0812002 	add	r2, r1, r2
   14cdc:	e5c03008 	strb	r3, [r0, #8]
   14ce0:	e1a04000 	mov	r4, r0
   14ce4:	e5803014 	str	r3, [r0, #20]
   14ce8:	11a03005 	movne	r3, r5
   14cec:	e8800022 	stm	r0, {r1, r5}
   14cf0:	e5801010 	str	r1, [r0, #16]
   14cf4:	e5801018 	str	r1, [r0, #24]
   14cf8:	e580200c 	str	r2, [r0, #12]
   14cfc:	0a00002f 	beq	14dc0 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0xf8>
   14d00:	e2433004 	sub	r3, r3, #4
   14d04:	e3530f7f 	cmp	r3, #508	; 0x1fc
   14d08:	8a000003 	bhi	14d1c <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0x54>
   14d0c:	e5943000 	ldr	r3, [r4]
   14d10:	e5d32000 	ldrb	r2, [r3]
   14d14:	e3520009 	cmp	r2, #9
   14d18:	0a000001 	beq	14d24 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0x5c>
   14d1c:	e1a00004 	mov	r0, r4
   14d20:	e8bd8070 	pop	{r4, r5, r6, pc}
   14d24:	e5d32001 	ldrb	r2, [r3, #1]
   14d28:	e3520002 	cmp	r2, #2
   14d2c:	1afffffa 	bne	14d1c <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0x54>
   14d30:	e1d3c0b2 	ldrh	ip, [r3, #2]
   14d34:	e155000c 	cmp	r5, ip
   14d38:	3afffff7 	bcc	14d1c <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0x54>
   14d3c:	e3a05000 	mov	r5, #0
   14d40:	8083c00c 	addhi	ip, r3, ip
   14d44:	9594c00c 	ldrls	ip, [r4, #12]
   14d48:	e1a0e005 	mov	lr, r5
   14d4c:	8584c00c 	strhi	ip, [r4, #12]
   14d50:	ea000005 	b	14d6c <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0xa4>
   14d54:	e3520005 	cmp	r2, #5
   14d58:	0a000024 	beq	14df0 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0x128>
   14d5c:	e3520002 	cmp	r2, #2
   14d60:	0a00001e 	beq	14de0 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0x118>
   14d64:	e1a03001 	mov	r3, r1
   14d68:	e1a0e002 	mov	lr, r2
   14d6c:	e2832002 	add	r2, r3, #2
   14d70:	e15c0002 	cmp	ip, r2
   14d74:	9a000024 	bls	14e0c <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0x144>
   14d78:	e5d30000 	ldrb	r0, [r3]
   14d7c:	e5d32001 	ldrb	r2, [r3, #1]
   14d80:	e0831000 	add	r1, r3, r0
   14d84:	e151000c 	cmp	r1, ip
   14d88:	8a00000a 	bhi	14db8 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0xf0>
   14d8c:	e3520004 	cmp	r2, #4
   14d90:	1affffef 	bne	14d54 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0x8c>
   14d94:	e35e0000 	cmp	lr, #0
   14d98:	0a000006 	beq	14db8 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0xf0>
   14d9c:	e5d35005 	ldrb	r5, [r3, #5]
   14da0:	e3a0e009 	mov	lr, #9
   14da4:	e2455001 	sub	r5, r5, #1
   14da8:	e16f5f15 	clz	r5, r5
   14dac:	e1a052a5 	lsr	r5, r5, #5
   14db0:	e150000e 	cmp	r0, lr
   14db4:	0affffea 	beq	14d64 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0x9c>
   14db8:	e5843018 	str	r3, [r4, #24]
   14dbc:	eaffffd6 	b	14d1c <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0x54>
   14dc0:	e30614ac 	movw	r1, #25772	; 0x64ac
   14dc4:	e3401002 	movt	r1, #2
   14dc8:	e30604c0 	movw	r0, #25792	; 0x64c0
   14dcc:	e3400002 	movt	r0, #2
   14dd0:	e3a02024 	mov	r2, #36	; 0x24
   14dd4:	eb00119e 	bl	19454 <assertion_failed>
   14dd8:	e5943004 	ldr	r3, [r4, #4]
   14ddc:	eaffffc7 	b	14d00 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0x38>
   14de0:	e35e0000 	cmp	lr, #0
   14de4:	1afffff3 	bne	14db8 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0xf0>
   14de8:	e3a0e009 	mov	lr, #9
   14dec:	eaffffef 	b	14db0 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0xe8>
   14df0:	e31e00fd 	tst	lr, #253	; 0xfd
   14df4:	0affffef 	beq	14db8 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0xf0>
   14df8:	e3550000 	cmp	r5, #0
   14dfc:	13a0e009 	movne	lr, #9
   14e00:	13a05001 	movne	r5, #1
   14e04:	03a0e007 	moveq	lr, #7
   14e08:	eaffffe8 	b	14db0 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0xe8>
   14e0c:	e153000c 	cmp	r3, ip
   14e10:	1affffe8 	bne	14db8 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0xf0>
   14e14:	e3a03001 	mov	r3, #1
   14e18:	e5c43008 	strb	r3, [r4, #8]
   14e1c:	eaffffbe 	b	14d1c <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0x54>

00014e20 <CUSBConfigurationParser::CUSBConfigurationParser(CUSBConfigurationParser*)>:
   14e20:	e92d4070 	push	{r4, r5, r6, lr}
   14e24:	e1a04000 	mov	r4, r0
   14e28:	e2515000 	subs	r5, r1, #0
   14e2c:	0a00000d 	beq	14e68 <CUSBConfigurationParser::CUSBConfigurationParser(CUSBConfigurationParser*)+0x48>
   14e30:	e5951000 	ldr	r1, [r5]
   14e34:	e1a00004 	mov	r0, r4
   14e38:	e5952004 	ldr	r2, [r5, #4]
   14e3c:	e5d53008 	ldrb	r3, [r5, #8]
   14e40:	e5841000 	str	r1, [r4]
   14e44:	e595c00c 	ldr	ip, [r5, #12]
   14e48:	e5951010 	ldr	r1, [r5, #16]
   14e4c:	e5842004 	str	r2, [r4, #4]
   14e50:	e5c43008 	strb	r3, [r4, #8]
   14e54:	e1c521d4 	ldrd	r2, [r5, #20]
   14e58:	e1c421f4 	strd	r2, [r4, #20]
   14e5c:	e584c00c 	str	ip, [r4, #12]
   14e60:	e5841010 	str	r1, [r4, #16]
   14e64:	e8bd8070 	pop	{r4, r5, r6, pc}
   14e68:	e30614ac 	movw	r1, #25772	; 0x64ac
   14e6c:	e3401002 	movt	r1, #2
   14e70:	e30604d0 	movw	r0, #25808	; 0x64d0
   14e74:	e3400002 	movt	r0, #2
   14e78:	e3a02082 	mov	r2, #130	; 0x82
   14e7c:	eb001174 	bl	19454 <assertion_failed>
   14e80:	eaffffea 	b	14e30 <CUSBConfigurationParser::CUSBConfigurationParser(CUSBConfigurationParser*)+0x10>

00014e84 <CUSBConfigurationParser::~CUSBConfigurationParser()>:
   14e84:	e12fff1e 	bx	lr

00014e88 <CUSBConfigurationParser::IsValid() const>:
   14e88:	e5d00008 	ldrb	r0, [r0, #8]
   14e8c:	e12fff1e 	bx	lr

00014e90 <CUSBConfigurationParser::GetDescriptor(unsigned char)>:
   14e90:	e5d03008 	ldrb	r3, [r0, #8]
   14e94:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   14e98:	e1a06000 	mov	r6, r0
   14e9c:	e1a07001 	mov	r7, r1
   14ea0:	e3530000 	cmp	r3, #0
   14ea4:	0a000023 	beq	14f38 <CUSBConfigurationParser::GetDescriptor(unsigned char)+0xa8>
   14ea8:	e5964010 	ldr	r4, [r6, #16]
   14eac:	e596300c 	ldr	r3, [r6, #12]
   14eb0:	e1540003 	cmp	r4, r3
   14eb4:	2a00001c 	bcs	14f2c <CUSBConfigurationParser::GetDescriptor(unsigned char)+0x9c>
   14eb8:	e2478005 	sub	r8, r7, #5
   14ebc:	e306a4ac 	movw	sl, #25772	; 0x64ac
   14ec0:	e340a002 	movt	sl, #2
   14ec4:	e16f8f18 	clz	r8, r8
   14ec8:	e30694e0 	movw	r9, #25824	; 0x64e0
   14ecc:	e3409002 	movt	r9, #2
   14ed0:	e1a082a8 	lsr	r8, r8, #5
   14ed4:	ea00000a 	b	14f04 <CUSBConfigurationParser::GetDescriptor(unsigned char)+0x74>
   14ed8:	e3550004 	cmp	r5, #4
   14edc:	13a03000 	movne	r3, #0
   14ee0:	02083001 	andeq	r3, r8, #1
   14ee4:	e3530000 	cmp	r3, #0
   14ee8:	1a00000f 	bne	14f2c <CUSBConfigurationParser::GetDescriptor(unsigned char)+0x9c>
   14eec:	e1550007 	cmp	r5, r7
   14ef0:	0a000017 	beq	14f54 <CUSBConfigurationParser::GetDescriptor(unsigned char)+0xc4>
   14ef4:	e596300c 	ldr	r3, [r6, #12]
   14ef8:	e5864010 	str	r4, [r6, #16]
   14efc:	e1530004 	cmp	r3, r4
   14f00:	9a000009 	bls	14f2c <CUSBConfigurationParser::GetDescriptor(unsigned char)+0x9c>
   14f04:	e5d42000 	ldrb	r2, [r4]
   14f08:	e5d45001 	ldrb	r5, [r4, #1]
   14f0c:	e0844002 	add	r4, r4, r2
   14f10:	e1530004 	cmp	r3, r4
   14f14:	2affffef 	bcs	14ed8 <CUSBConfigurationParser::GetDescriptor(unsigned char)+0x48>
   14f18:	e3a020a9 	mov	r2, #169	; 0xa9
   14f1c:	e1a0100a 	mov	r1, sl
   14f20:	e1a00009 	mov	r0, r9
   14f24:	eb00114a 	bl	19454 <assertion_failed>
   14f28:	eaffffea 	b	14ed8 <CUSBConfigurationParser::GetDescriptor(unsigned char)+0x48>
   14f2c:	e3a00000 	mov	r0, #0
   14f30:	e5860014 	str	r0, [r6, #20]
   14f34:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   14f38:	e30614ac 	movw	r1, #25772	; 0x64ac
   14f3c:	e3401002 	movt	r1, #2
   14f40:	e30407a0 	movw	r0, #18336	; 0x47a0
   14f44:	e3400002 	movt	r0, #2
   14f48:	e3a0209f 	mov	r2, #159	; 0x9f
   14f4c:	eb001140 	bl	19454 <assertion_failed>
   14f50:	eaffffd4 	b	14ea8 <CUSBConfigurationParser::GetDescriptor(unsigned char)+0x18>
   14f54:	e5960010 	ldr	r0, [r6, #16]
   14f58:	e5860014 	str	r0, [r6, #20]
   14f5c:	e3500000 	cmp	r0, #0
   14f60:	e5864010 	str	r4, [r6, #16]
   14f64:	15860018 	strne	r0, [r6, #24]
   14f68:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}

00014f6c <CUSBConfigurationParser::GetCurrentDescriptor()>:
   14f6c:	e5d03008 	ldrb	r3, [r0, #8]
   14f70:	e92d4010 	push	{r4, lr}
   14f74:	e1a04000 	mov	r4, r0
   14f78:	e3530000 	cmp	r3, #0
   14f7c:	0a00000a 	beq	14fac <CUSBConfigurationParser::GetCurrentDescriptor()+0x40>
   14f80:	e5940014 	ldr	r0, [r4, #20]
   14f84:	e3500000 	cmp	r0, #0
   14f88:	18bd8010 	popne	{r4, pc}
   14f8c:	e3a020c8 	mov	r2, #200	; 0xc8
   14f90:	e30614ac 	movw	r1, #25772	; 0x64ac
   14f94:	e3401002 	movt	r1, #2
   14f98:	e30604fc 	movw	r0, #25852	; 0x64fc
   14f9c:	e3400002 	movt	r0, #2
   14fa0:	eb00112b 	bl	19454 <assertion_failed>
   14fa4:	e5940014 	ldr	r0, [r4, #20]
   14fa8:	e8bd8010 	pop	{r4, pc}
   14fac:	e30614ac 	movw	r1, #25772	; 0x64ac
   14fb0:	e3401002 	movt	r1, #2
   14fb4:	e30407a0 	movw	r0, #18336	; 0x47a0
   14fb8:	e3400002 	movt	r0, #2
   14fbc:	e3a020c7 	mov	r2, #199	; 0xc7
   14fc0:	eb001123 	bl	19454 <assertion_failed>
   14fc4:	eaffffed 	b	14f80 <CUSBConfigurationParser::GetCurrentDescriptor()+0x14>

00014fc8 <CUSBConfigurationParser::Error(char const*) const>:
   14fc8:	e92d4030 	push	{r4, r5, lr}
   14fcc:	e1a04000 	mov	r4, r0
   14fd0:	e2515000 	subs	r5, r1, #0
   14fd4:	e24dd00c 	sub	sp, sp, #12
   14fd8:	0a00000e 	beq	15018 <CUSBConfigurationParser::Error(char const*) const+0x50>
   14fdc:	eb001b7a 	bl	1bdcc <CLogger::Get()>
   14fe0:	e5942000 	ldr	r2, [r4]
   14fe4:	e5941018 	ldr	r1, [r4, #24]
   14fe8:	e3063518 	movw	r3, #25880	; 0x6518
   14fec:	e3403002 	movt	r3, #2
   14ff0:	e0411002 	sub	r1, r1, r2
   14ff4:	e3a02001 	mov	r2, #1
   14ff8:	e58d1000 	str	r1, [sp]
   14ffc:	e1a01005 	mov	r1, r5
   15000:	eb001aa8 	bl	1baa8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   15004:	e1a02005 	mov	r2, r5
   15008:	e1c400d0 	ldrd	r0, [r4]
   1500c:	e28dd00c 	add	sp, sp, #12
   15010:	e8bd4030 	pop	{r4, r5, lr}
   15014:	ea00127d 	b	19a10 <debug_hexdump(void const*, unsigned int, char const*)>
   15018:	e30614ac 	movw	r1, #25772	; 0x64ac
   1501c:	e3401002 	movt	r1, #2
   15020:	e3060088 	movw	r0, #24712	; 0x6088
   15024:	e3400002 	movt	r0, #2
   15028:	e3a020cf 	mov	r2, #207	; 0xcf
   1502c:	eb001108 	bl	19454 <assertion_failed>
   15030:	eaffffe9 	b	14fdc <CUSBConfigurationParser::Error(char const*) const+0x14>

00015034 <CUSBString::CUSBString(CUSBDevice*)>:
   15034:	e92d4070 	push	{r4, r5, r6, lr}
   15038:	e1a04000 	mov	r4, r0
   1503c:	e3a03000 	mov	r3, #0
   15040:	e3a00010 	mov	r0, #16
   15044:	e884000a 	stm	r4, {r1, r3}
   15048:	eb00340c 	bl	22080 <operator new(unsigned int)>
   1504c:	e1a05000 	mov	r5, r0
   15050:	eb0026fe 	bl	1ec50 <CString::CString()>
   15054:	e5943000 	ldr	r3, [r4]
   15058:	e5845008 	str	r5, [r4, #8]
   1505c:	e3530000 	cmp	r3, #0
   15060:	0a000001 	beq	1506c <CUSBString::CUSBString(CUSBDevice*)+0x38>
   15064:	e1a00004 	mov	r0, r4
   15068:	e8bd8070 	pop	{r4, r5, r6, pc}
   1506c:	e3061548 	movw	r1, #25928	; 0x6548
   15070:	e3401002 	movt	r1, #2
   15074:	e30408dc 	movw	r0, #18652	; 0x48dc
   15078:	e3400002 	movt	r0, #2
   1507c:	e3a02023 	mov	r2, #35	; 0x23
   15080:	eb0010f3 	bl	19454 <assertion_failed>
   15084:	e5943008 	ldr	r3, [r4, #8]
   15088:	e3530000 	cmp	r3, #0
   1508c:	1afffff4 	bne	15064 <CUSBString::CUSBString(CUSBDevice*)+0x30>
   15090:	e3a02024 	mov	r2, #36	; 0x24
   15094:	e3061548 	movw	r1, #25928	; 0x6548
   15098:	e3401002 	movt	r1, #2
   1509c:	e3060558 	movw	r0, #25944	; 0x6558
   150a0:	e3400002 	movt	r0, #2
   150a4:	eb0010ea 	bl	19454 <assertion_failed>
   150a8:	e1a00004 	mov	r0, r4
   150ac:	e8bd8070 	pop	{r4, r5, r6, pc}

000150b0 <CUSBString::CUSBString(CUSBString*)>:
   150b0:	e92d4070 	push	{r4, r5, r6, lr}
   150b4:	e1a04000 	mov	r4, r0
   150b8:	e3a03000 	mov	r3, #0
   150bc:	e3a00010 	mov	r0, #16
   150c0:	e1a05001 	mov	r5, r1
   150c4:	e5843004 	str	r3, [r4, #4]
   150c8:	eb0033ec 	bl	22080 <operator new(unsigned int)>
   150cc:	e1a06000 	mov	r6, r0
   150d0:	eb0026de 	bl	1ec50 <CString::CString()>
   150d4:	e5846008 	str	r6, [r4, #8]
   150d8:	e3550000 	cmp	r5, #0
   150dc:	0a00001b 	beq	15150 <CUSBString::CUSBString(CUSBString*)+0xa0>
   150e0:	e1c520d0 	ldrd	r2, [r5]
   150e4:	e5842000 	str	r2, [r4]
   150e8:	e3530000 	cmp	r3, #0
   150ec:	0a000006 	beq	1510c <CUSBString::CUSBString(CUSBString*)+0x5c>
   150f0:	e5d30000 	ldrb	r0, [r3]
   150f4:	eb0033e2 	bl	22084 <operator new[](unsigned int)>
   150f8:	e5840004 	str	r0, [r4, #4]
   150fc:	e5953004 	ldr	r3, [r5, #4]
   15100:	e1a01003 	mov	r1, r3
   15104:	e5d32000 	ldrb	r2, [r3]
   15108:	eb002ff8 	bl	210f0 <memcpy>
   1510c:	e5943008 	ldr	r3, [r4, #8]
   15110:	e3530000 	cmp	r3, #0
   15114:	0a000014 	beq	1516c <CUSBString::CUSBString(CUSBString*)+0xbc>
   15118:	e5953008 	ldr	r3, [r5, #8]
   1511c:	e3530000 	cmp	r3, #0
   15120:	0a000002 	beq	15130 <CUSBString::CUSBString(CUSBString*)+0x80>
   15124:	e5843008 	str	r3, [r4, #8]
   15128:	e1a00004 	mov	r0, r4
   1512c:	e8bd8070 	pop	{r4, r5, r6, pc}
   15130:	e3061548 	movw	r1, #25928	; 0x6548
   15134:	e3401002 	movt	r1, #2
   15138:	e3060568 	movw	r0, #25960	; 0x6568
   1513c:	e3400002 	movt	r0, #2
   15140:	e3a02036 	mov	r2, #54	; 0x36
   15144:	eb0010c2 	bl	19454 <assertion_failed>
   15148:	e5953008 	ldr	r3, [r5, #8]
   1514c:	eafffff4 	b	15124 <CUSBString::CUSBString(CUSBString*)+0x74>
   15150:	e3061548 	movw	r1, #25928	; 0x6548
   15154:	e3401002 	movt	r1, #2
   15158:	e3040fa0 	movw	r0, #20384	; 0x4fa0
   1515c:	e3400002 	movt	r0, #2
   15160:	e3a0202b 	mov	r2, #43	; 0x2b
   15164:	eb0010ba 	bl	19454 <assertion_failed>
   15168:	eaffffdc 	b	150e0 <CUSBString::CUSBString(CUSBString*)+0x30>
   1516c:	e3061548 	movw	r1, #25928	; 0x6548
   15170:	e3401002 	movt	r1, #2
   15174:	e3060558 	movw	r0, #25944	; 0x6558
   15178:	e3400002 	movt	r0, #2
   1517c:	e3a02035 	mov	r2, #53	; 0x35
   15180:	eb0010b3 	bl	19454 <assertion_failed>
   15184:	eaffffe3 	b	15118 <CUSBString::CUSBString(CUSBString*)+0x68>

00015188 <CUSBString::~CUSBString()>:
   15188:	e92d4010 	push	{r4, lr}
   1518c:	e1a04000 	mov	r4, r0
   15190:	e5900008 	ldr	r0, [r0, #8]
   15194:	e3500000 	cmp	r0, #0
   15198:	0a000002 	beq	151a8 <CUSBString::~CUSBString()+0x20>
   1519c:	e5903000 	ldr	r3, [r0]
   151a0:	e5933004 	ldr	r3, [r3, #4]
   151a4:	e12fff33 	blx	r3
   151a8:	e5940004 	ldr	r0, [r4, #4]
   151ac:	e3a03000 	mov	r3, #0
   151b0:	e5843008 	str	r3, [r4, #8]
   151b4:	e1500003 	cmp	r0, r3
   151b8:	0a000000 	beq	151c0 <CUSBString::~CUSBString()+0x38>
   151bc:	eb0033b2 	bl	2208c <operator delete[](void*)>
   151c0:	e1a00004 	mov	r0, r4
   151c4:	e8bd8010 	pop	{r4, pc}

000151c8 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)>:
   151c8:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   151cc:	e1a04000 	mov	r4, r0
   151d0:	e1a07002 	mov	r7, r2
   151d4:	e28db020 	add	fp, sp, #32
   151d8:	e2516000 	subs	r6, r1, #0
   151dc:	e24dd014 	sub	sp, sp, #20
   151e0:	0a000028 	beq	15288 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0xc0>
   151e4:	e5940004 	ldr	r0, [r4, #4]
   151e8:	e3500000 	cmp	r0, #0
   151ec:	0a000000 	beq	151f4 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x2c>
   151f0:	eb0033a5 	bl	2208c <operator delete[](void*)>
   151f4:	e3a00004 	mov	r0, #4
   151f8:	eb0033a1 	bl	22084 <operator new[](unsigned int)>
   151fc:	e5943000 	ldr	r3, [r4]
   15200:	e5840004 	str	r0, [r4, #4]
   15204:	e3530000 	cmp	r3, #0
   15208:	0a000050 	beq	15350 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x188>
   1520c:	e1a00003 	mov	r0, r3
   15210:	e3a08080 	mov	r8, #128	; 0x80
   15214:	ebffdaf3 	bl	bde8 <CUSBDevice::GetHost() const>
   15218:	e1a05000 	mov	r5, r0
   1521c:	e5940000 	ldr	r0, [r4]
   15220:	ebffdae0 	bl	bda8 <CUSBDevice::GetEndpoint0() const>
   15224:	e5943004 	ldr	r3, [r4, #4]
   15228:	e1a01000 	mov	r1, r0
   1522c:	e58d3000 	str	r3, [sp]
   15230:	e3a02004 	mov	r2, #4
   15234:	e58d700c 	str	r7, [sp, #12]
   15238:	e58d2004 	str	r2, [sp, #4]
   1523c:	e1a00005 	mov	r0, r5
   15240:	e58d8008 	str	r8, [sp, #8]
   15244:	e1a03006 	mov	r3, r6
   15248:	e3a02003 	mov	r2, #3
   1524c:	ebffdecc 	bl	cd84 <CUSBHostController::GetDescriptor(CUSBEndpoint*, unsigned char, unsigned char, void*, unsigned int, unsigned char, unsigned short)>
   15250:	e3500000 	cmp	r0, #0
   15254:	ba000008 	blt	1527c <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0xb4>
   15258:	e5940004 	ldr	r0, [r4, #4]
   1525c:	e5d05000 	ldrb	r5, [r0]
   15260:	e3550001 	cmp	r5, #1
   15264:	9a000004 	bls	1527c <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0xb4>
   15268:	e3150001 	tst	r5, #1
   1526c:	1a000002 	bne	1527c <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0xb4>
   15270:	e5d09001 	ldrb	r9, [r0, #1]
   15274:	e3590003 	cmp	r9, #3
   15278:	0a000009 	beq	152a4 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0xdc>
   1527c:	e3a00000 	mov	r0, #0
   15280:	e24bd020 	sub	sp, fp, #32
   15284:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15288:	e3061548 	movw	r1, #25928	; 0x6548
   1528c:	e3401002 	movt	r1, #2
   15290:	e3060580 	movw	r0, #25984	; 0x6580
   15294:	e3400002 	movt	r0, #2
   15298:	e3a02047 	mov	r2, #71	; 0x47
   1529c:	eb00106c 	bl	19454 <assertion_failed>
   152a0:	eaffffcf 	b	151e4 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x1c>
   152a4:	e3550004 	cmp	r5, #4
   152a8:	e1a03005 	mov	r3, r5
   152ac:	8a00004e 	bhi	153ec <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x224>
   152b0:	e3550002 	cmp	r5, #2
   152b4:	0a000039 	beq	153a0 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x1d8>
   152b8:	e2435002 	sub	r5, r3, #2
   152bc:	e0855fa5 	add	r5, r5, r5, lsr #31
   152c0:	e1a060c5 	asr	r6, r5, #1
   152c4:	e356007e 	cmp	r6, #126	; 0x7e
   152c8:	8a000028 	bhi	15370 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x1a8>
   152cc:	e2863008 	add	r3, r6, #8
   152d0:	e3560000 	cmp	r6, #0
   152d4:	e3c33007 	bic	r3, r3, #7
   152d8:	e04dd003 	sub	sp, sp, r3
   152dc:	e28d7010 	add	r7, sp, #16
   152e0:	0a00000a 	beq	15310 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x148>
   152e4:	e247c001 	sub	ip, r7, #1
   152e8:	e3a02000 	mov	r2, #0
   152ec:	e0803082 	add	r3, r0, r2, lsl #1
   152f0:	e2822001 	add	r2, r2, #1
   152f4:	e1d330b2 	ldrh	r3, [r3, #2]
   152f8:	e243e020 	sub	lr, r3, #32
   152fc:	e35e005e 	cmp	lr, #94	; 0x5e
   15300:	83a0305f 	movhi	r3, #95	; 0x5f
   15304:	e1560002 	cmp	r6, r2
   15308:	e5ec3001 	strb	r3, [ip, #1]!
   1530c:	1afffff6 	bne	152ec <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x124>
   15310:	e5940008 	ldr	r0, [r4, #8]
   15314:	e3a03000 	mov	r3, #0
   15318:	e7c730c5 	strb	r3, [r7, r5, asr #1]
   1531c:	e1500003 	cmp	r0, r3
   15320:	0a000002 	beq	15330 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x168>
   15324:	e5903000 	ldr	r3, [r0]
   15328:	e5933004 	ldr	r3, [r3, #4]
   1532c:	e12fff33 	blx	r3
   15330:	e3a00010 	mov	r0, #16
   15334:	eb003351 	bl	22080 <operator new(unsigned int)>
   15338:	e1a01007 	mov	r1, r7
   1533c:	e1a05000 	mov	r5, r0
   15340:	eb002648 	bl	1ec68 <CString::CString(char const*)>
   15344:	e5845008 	str	r5, [r4, #8]
   15348:	e3a00001 	mov	r0, #1
   1534c:	eaffffcb 	b	15280 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0xb8>
   15350:	e3061548 	movw	r1, #25928	; 0x6548
   15354:	e3401002 	movt	r1, #2
   15358:	e30408dc 	movw	r0, #18652	; 0x48dc
   1535c:	e3400002 	movt	r0, #2
   15360:	e3a0204d 	mov	r2, #77	; 0x4d
   15364:	eb00103a 	bl	19454 <assertion_failed>
   15368:	e5943000 	ldr	r3, [r4]
   1536c:	eaffffa6 	b	1520c <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x44>
   15370:	e3061548 	movw	r1, #25928	; 0x6548
   15374:	e3401002 	movt	r1, #2
   15378:	e30605cc 	movw	r0, #26060	; 0x65cc
   1537c:	e3400002 	movt	r0, #2
   15380:	e3a02079 	mov	r2, #121	; 0x79
   15384:	eb001032 	bl	19454 <assertion_failed>
   15388:	e2863008 	add	r3, r6, #8
   1538c:	e3c33007 	bic	r3, r3, #7
   15390:	e5940004 	ldr	r0, [r4, #4]
   15394:	e04dd003 	sub	sp, sp, r3
   15398:	e28d7010 	add	r7, sp, #16
   1539c:	eaffffd0 	b	152e4 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x11c>
   153a0:	e3061548 	movw	r1, #25928	; 0x6548
   153a4:	e3401002 	movt	r1, #2
   153a8:	e306058c 	movw	r0, #25996	; 0x658c
   153ac:	e3400002 	movt	r0, #2
   153b0:	e3a02075 	mov	r2, #117	; 0x75
   153b4:	eb001026 	bl	19454 <assertion_failed>
   153b8:	e5940004 	ldr	r0, [r4, #4]
   153bc:	e5d03000 	ldrb	r3, [r0]
   153c0:	e3130001 	tst	r3, #1
   153c4:	0affffbb 	beq	152b8 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0xf0>
   153c8:	e3061548 	movw	r1, #25928	; 0x6548
   153cc:	e3401002 	movt	r1, #2
   153d0:	e30605a8 	movw	r0, #26024	; 0x65a8
   153d4:	e3400002 	movt	r0, #2
   153d8:	e3a02076 	mov	r2, #118	; 0x76
   153dc:	eb00101c 	bl	19454 <assertion_failed>
   153e0:	e5940004 	ldr	r0, [r4, #4]
   153e4:	e5d03000 	ldrb	r3, [r0]
   153e8:	eaffffb2 	b	152b8 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0xf0>
   153ec:	e3a01002 	mov	r1, #2
   153f0:	eb003326 	bl	22090 <operator delete(void*, unsigned int)>
   153f4:	e1a00005 	mov	r0, r5
   153f8:	eb003321 	bl	22084 <operator new[](unsigned int)>
   153fc:	e5840004 	str	r0, [r4, #4]
   15400:	e5940000 	ldr	r0, [r4]
   15404:	ebffda77 	bl	bde8 <CUSBDevice::GetHost() const>
   15408:	e1a0a000 	mov	sl, r0
   1540c:	e5940000 	ldr	r0, [r4]
   15410:	ebffda64 	bl	bda8 <CUSBDevice::GetEndpoint0() const>
   15414:	e594c004 	ldr	ip, [r4, #4]
   15418:	e1a01000 	mov	r1, r0
   1541c:	e58d700c 	str	r7, [sp, #12]
   15420:	e1a0000a 	mov	r0, sl
   15424:	e98d0120 	stmib	sp, {r5, r8}
   15428:	e1a03006 	mov	r3, r6
   1542c:	e1a02009 	mov	r2, r9
   15430:	e58dc000 	str	ip, [sp]
   15434:	ebffde52 	bl	cd84 <CUSBHostController::GetDescriptor(CUSBEndpoint*, unsigned char, unsigned char, void*, unsigned int, unsigned char, unsigned short)>
   15438:	e1550000 	cmp	r5, r0
   1543c:	1affff8e 	bne	1527c <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0xb4>
   15440:	e5940004 	ldr	r0, [r4, #4]
   15444:	e5d03000 	ldrb	r3, [r0]
   15448:	e1530005 	cmp	r3, r5
   1544c:	1affff8a 	bne	1527c <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0xb4>
   15450:	e5d03001 	ldrb	r3, [r0, #1]
   15454:	e3530003 	cmp	r3, #3
   15458:	1affff87 	bne	1527c <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0xb4>
   1545c:	eaffffd6 	b	153bc <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x1f4>

00015460 <CUSBString::Get() const>:
   15460:	e5900008 	ldr	r0, [r0, #8]
   15464:	ea002610 	b	1ecac <CString::operator char const*() const>

00015468 <CUSBString::GetLanguageID()>:
   15468:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1546c:	e1a06000 	mov	r6, r0
   15470:	e3a00004 	mov	r0, #4
   15474:	e24dd010 	sub	sp, sp, #16
   15478:	eb003301 	bl	22084 <operator new[](unsigned int)>
   1547c:	e1a04000 	mov	r4, r0
   15480:	e5960000 	ldr	r0, [r6]
   15484:	e3500000 	cmp	r0, #0
   15488:	0a00004a 	beq	155b8 <CUSBString::GetLanguageID()+0x150>
   1548c:	ebffda55 	bl	bde8 <CUSBDevice::GetHost() const>
   15490:	e1a05000 	mov	r5, r0
   15494:	e5960000 	ldr	r0, [r6]
   15498:	e3a07080 	mov	r7, #128	; 0x80
   1549c:	ebffda41 	bl	bda8 <CUSBDevice::GetEndpoint0() const>
   154a0:	e3a03000 	mov	r3, #0
   154a4:	e1a01000 	mov	r1, r0
   154a8:	e3a02004 	mov	r2, #4
   154ac:	e58d4000 	str	r4, [sp]
   154b0:	e1a00005 	mov	r0, r5
   154b4:	e58d2004 	str	r2, [sp, #4]
   154b8:	e3a02003 	mov	r2, #3
   154bc:	e58d300c 	str	r3, [sp, #12]
   154c0:	e58d7008 	str	r7, [sp, #8]
   154c4:	ebffde2e 	bl	cd84 <CUSBHostController::GetDescriptor(CUSBEndpoint*, unsigned char, unsigned char, void*, unsigned int, unsigned char, unsigned short)>
   154c8:	e3500000 	cmp	r0, #0
   154cc:	ba000033 	blt	155a0 <CUSBString::GetLanguageID()+0x138>
   154d0:	e5d45000 	ldrb	r5, [r4]
   154d4:	e3550003 	cmp	r5, #3
   154d8:	9a000030 	bls	155a0 <CUSBString::GetLanguageID()+0x138>
   154dc:	e2159001 	ands	r9, r5, #1
   154e0:	1a00002e 	bne	155a0 <CUSBString::GetLanguageID()+0x138>
   154e4:	e5d48001 	ldrb	r8, [r4, #1]
   154e8:	e3580003 	cmp	r8, #3
   154ec:	1a00002b 	bne	155a0 <CUSBString::GetLanguageID()+0x138>
   154f0:	e3550004 	cmp	r5, #4
   154f4:	1a000012 	bne	15544 <CUSBString::GetLanguageID()+0xdc>
   154f8:	e1d450b2 	ldrh	r5, [r4, #2]
   154fc:	e3a00001 	mov	r0, #1
   15500:	e3001409 	movw	r1, #1033	; 0x409
   15504:	e1550001 	cmp	r5, r1
   15508:	0a000024 	beq	155a0 <CUSBString::GetLanguageID()+0x138>
   1550c:	e3a03000 	mov	r3, #0
   15510:	ea000002 	b	15520 <CUSBString::GetLanguageID()+0xb8>
   15514:	e1d220b2 	ldrh	r2, [r2, #2]
   15518:	e1520001 	cmp	r2, r1
   1551c:	0a00001f 	beq	155a0 <CUSBString::GetLanguageID()+0x138>
   15520:	e2833001 	add	r3, r3, #1
   15524:	e0842083 	add	r2, r4, r3, lsl #1
   15528:	e1530000 	cmp	r3, r0
   1552c:	1afffff8 	bne	15514 <CUSBString::GetLanguageID()+0xac>
   15530:	e1a00004 	mov	r0, r4
   15534:	eb0032d4 	bl	2208c <operator delete[](void*)>
   15538:	e1a00005 	mov	r0, r5
   1553c:	e28dd010 	add	sp, sp, #16
   15540:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15544:	e1a00004 	mov	r0, r4
   15548:	eb0032cf 	bl	2208c <operator delete[](void*)>
   1554c:	e1a00005 	mov	r0, r5
   15550:	eb0032cb 	bl	22084 <operator new[](unsigned int)>
   15554:	e1a04000 	mov	r4, r0
   15558:	e5960000 	ldr	r0, [r6]
   1555c:	ebffda21 	bl	bde8 <CUSBDevice::GetHost() const>
   15560:	e1a0a000 	mov	sl, r0
   15564:	e5960000 	ldr	r0, [r6]
   15568:	ebffda0e 	bl	bda8 <CUSBDevice::GetEndpoint0() const>
   1556c:	e58d4000 	str	r4, [sp]
   15570:	e1a01000 	mov	r1, r0
   15574:	e58d900c 	str	r9, [sp, #12]
   15578:	e1a0000a 	mov	r0, sl
   1557c:	e98d00a0 	stmib	sp, {r5, r7}
   15580:	e1a03009 	mov	r3, r9
   15584:	e1a02008 	mov	r2, r8
   15588:	ebffddfd 	bl	cd84 <CUSBHostController::GetDescriptor(CUSBEndpoint*, unsigned char, unsigned char, void*, unsigned int, unsigned char, unsigned short)>
   1558c:	e1550000 	cmp	r5, r0
   15590:	1a000002 	bne	155a0 <CUSBString::GetLanguageID()+0x138>
   15594:	e5d43000 	ldrb	r3, [r4]
   15598:	e1530005 	cmp	r3, r5
   1559c:	0a00000d 	beq	155d8 <CUSBString::GetLanguageID()+0x170>
   155a0:	e1a00004 	mov	r0, r4
   155a4:	e3005409 	movw	r5, #1033	; 0x409
   155a8:	eb0032b7 	bl	2208c <operator delete[](void*)>
   155ac:	e1a00005 	mov	r0, r5
   155b0:	e28dd010 	add	sp, sp, #16
   155b4:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   155b8:	e3061548 	movw	r1, #25928	; 0x6548
   155bc:	e3401002 	movt	r1, #2
   155c0:	e30408dc 	movw	r0, #18652	; 0x48dc
   155c4:	e3400002 	movt	r0, #2
   155c8:	e3a0209a 	mov	r2, #154	; 0x9a
   155cc:	eb000fa0 	bl	19454 <assertion_failed>
   155d0:	e5960000 	ldr	r0, [r6]
   155d4:	eaffffac 	b	1548c <CUSBString::GetLanguageID()+0x24>
   155d8:	e5d42001 	ldrb	r2, [r4, #1]
   155dc:	e3520003 	cmp	r2, #3
   155e0:	1affffee 	bne	155a0 <CUSBString::GetLanguageID()+0x138>
   155e4:	e2430002 	sub	r0, r3, #2
   155e8:	e1d450b2 	ldrh	r5, [r4, #2]
   155ec:	e0800fa0 	add	r0, r0, r0, lsr #31
   155f0:	e1b000c0 	asrs	r0, r0, #1
   155f4:	0affffcd 	beq	15530 <CUSBString::GetLanguageID()+0xc8>
   155f8:	eaffffc0 	b	15500 <CUSBString::GetLanguageID()+0x98>

000155fc <CSMSC951xDevice::GetMACAddress() const>:
   155fc:	e2800018 	add	r0, r0, #24
   15600:	e12fff1e 	bx	lr

00015604 <CSMSC951xDevice::~CSMSC951xDevice()>:
   15604:	e92d4070 	push	{r4, r5, r6, lr}
   15608:	e1a04000 	mov	r4, r0
   1560c:	e59f3068 	ldr	r3, [pc, #104]	; 1567c <CSMSC951xDevice::~CSMSC951xDevice()+0x78>
   15610:	e5905014 	ldr	r5, [r0, #20]
   15614:	e5803000 	str	r3, [r0]
   15618:	e3550000 	cmp	r5, #0
   1561c:	0a000004 	beq	15634 <CSMSC951xDevice::~CSMSC951xDevice()+0x30>
   15620:	e1a00005 	mov	r0, r5
   15624:	ebffdd24 	bl	cabc <CUSBEndpoint::~CUSBEndpoint()>
   15628:	e1a00005 	mov	r0, r5
   1562c:	e3a01014 	mov	r1, #20
   15630:	eb003296 	bl	22090 <operator delete(void*, unsigned int)>
   15634:	e5945010 	ldr	r5, [r4, #16]
   15638:	e3a03000 	mov	r3, #0
   1563c:	e5843014 	str	r3, [r4, #20]
   15640:	e1550003 	cmp	r5, r3
   15644:	0a000004 	beq	1565c <CSMSC951xDevice::~CSMSC951xDevice()+0x58>
   15648:	e1a00005 	mov	r0, r5
   1564c:	ebffdd1a 	bl	cabc <CUSBEndpoint::~CUSBEndpoint()>
   15650:	e1a00005 	mov	r0, r5
   15654:	e3a01014 	mov	r1, #20
   15658:	eb00328c 	bl	22090 <operator delete(void*, unsigned int)>
   1565c:	e3a03000 	mov	r3, #0
   15660:	e2840018 	add	r0, r4, #24
   15664:	e5843010 	str	r3, [r4, #16]
   15668:	eb00062e 	bl	16f28 <CMACAddress::~CMACAddress()>
   1566c:	e1a00004 	mov	r0, r4
   15670:	eb0006df 	bl	171f4 <CNetDevice::~CNetDevice()>
   15674:	e1a00004 	mov	r0, r4
   15678:	e8bd8070 	pop	{r4, r5, r6, pc}
   1567c:	000265ec 	.word	0x000265ec

00015680 <CSMSC951xDevice::~CSMSC951xDevice()>:
   15680:	e92d4010 	push	{r4, lr}
   15684:	e1a04000 	mov	r4, r0
   15688:	ebffffdd 	bl	15604 <CSMSC951xDevice::~CSMSC951xDevice()>
   1568c:	e1a00004 	mov	r0, r4
   15690:	e3a01020 	mov	r1, #32
   15694:	eb00327d 	bl	22090 <operator delete(void*, unsigned int)>
   15698:	e1a00004 	mov	r0, r4
   1569c:	e8bd8010 	pop	{r4, pc}

000156a0 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)>:
   156a0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   156a4:	e1a04000 	mov	r4, r0
   156a8:	e1a05001 	mov	r5, r1
   156ac:	e5903010 	ldr	r3, [r0, #16]
   156b0:	e24dd030 	sub	sp, sp, #48	; 0x30
   156b4:	e1a07002 	mov	r7, r2
   156b8:	e3530000 	cmp	r3, #0
   156bc:	0a000036 	beq	1579c <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0xfc>
   156c0:	e3550000 	cmp	r5, #0
   156c4:	0a00003c 	beq	157bc <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x11c>
   156c8:	e5941010 	ldr	r1, [r4, #16]
   156cc:	e3a03d19 	mov	r3, #1600	; 0x640
   156d0:	e1a02005 	mov	r2, r5
   156d4:	e3a06000 	mov	r6, #0
   156d8:	e28d0008 	add	r0, sp, #8
   156dc:	e58d6000 	str	r6, [sp]
   156e0:	ebffddf4 	bl	ceb8 <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)>
   156e4:	e1a00004 	mov	r0, r4
   156e8:	ebfff62d 	bl	12fa4 <CUSBFunction::GetHost() const>
   156ec:	e5903000 	ldr	r3, [r0]
   156f0:	e1a02006 	mov	r2, r6
   156f4:	e28d1008 	add	r1, sp, #8
   156f8:	e5933008 	ldr	r3, [r3, #8]
   156fc:	e12fff33 	blx	r3
   15700:	e2504000 	subs	r4, r0, #0
   15704:	1a000005 	bne	15720 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x80>
   15708:	e3a04000 	mov	r4, #0
   1570c:	e28d0008 	add	r0, sp, #8
   15710:	ebffde0f 	bl	cf54 <CUSBRequest::~CUSBRequest()>
   15714:	e1a00004 	mov	r0, r4
   15718:	e28dd030 	add	sp, sp, #48	; 0x30
   1571c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   15720:	e28d0008 	add	r0, sp, #8
   15724:	ebffde21 	bl	cfb0 <CUSBRequest::GetResultLength() const>
   15728:	e3500003 	cmp	r0, #3
   1572c:	9afffff5 	bls	15708 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x68>
   15730:	e5958000 	ldr	r8, [r5]
   15734:	e30930de 	movw	r3, #37086	; 0x90de
   15738:	e3443000 	movt	r3, #16384	; 0x4000
   1573c:	e0033008 	and	r3, r3, r8
   15740:	e3530000 	cmp	r3, #0
   15744:	1a000023 	bne	157d8 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x138>
   15748:	e7ed8858 	ubfx	r8, r8, #16, #14
   1574c:	e2400004 	sub	r0, r0, #4
   15750:	e1500008 	cmp	r0, r8
   15754:	0a000005 	beq	15770 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0xd0>
   15758:	e3061634 	movw	r1, #26164	; 0x6634
   1575c:	e3401002 	movt	r1, #2
   15760:	e306065c 	movw	r0, #26204	; 0x665c
   15764:	e3400002 	movt	r0, #2
   15768:	e300212b 	movw	r2, #299	; 0x12b
   1576c:	eb000f38 	bl	19454 <assertion_failed>
   15770:	e3580004 	cmp	r8, #4
   15774:	9a000020 	bls	157fc <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x15c>
   15778:	e2488004 	sub	r8, r8, #4
   1577c:	e2851004 	add	r1, r5, #4
   15780:	e1a02008 	mov	r2, r8
   15784:	e1a00005 	mov	r0, r5
   15788:	eb002e58 	bl	210f0 <memcpy>
   1578c:	e3570000 	cmp	r7, #0
   15790:	0a000021 	beq	1581c <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x17c>
   15794:	e5878000 	str	r8, [r7]
   15798:	eaffffdb 	b	1570c <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x6c>
   1579c:	e3061634 	movw	r1, #26164	; 0x6634
   157a0:	e3401002 	movt	r1, #2
   157a4:	e3060444 	movw	r0, #25668	; 0x6444
   157a8:	e3400002 	movt	r0, #2
   157ac:	e3002113 	movw	r2, #275	; 0x113
   157b0:	eb000f27 	bl	19454 <assertion_failed>
   157b4:	e3550000 	cmp	r5, #0
   157b8:	1affffc2 	bne	156c8 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x28>
   157bc:	e3061634 	movw	r1, #26164	; 0x6634
   157c0:	e3401002 	movt	r1, #2
   157c4:	e30503c4 	movw	r0, #21444	; 0x53c4
   157c8:	e3400002 	movt	r0, #2
   157cc:	e3a02f45 	mov	r2, #276	; 0x114
   157d0:	eb000f1f 	bl	19454 <assertion_failed>
   157d4:	eaffffbb 	b	156c8 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x28>
   157d8:	eb00197b 	bl	1bdcc <CLogger::Get()>
   157dc:	e58d8000 	str	r8, [sp]
   157e0:	e3063644 	movw	r3, #26180	; 0x6644
   157e4:	e3403002 	movt	r3, #2
   157e8:	e3a02002 	mov	r2, #2
   157ec:	e59f1044 	ldr	r1, [pc, #68]	; 15838 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x198>
   157f0:	e1a04006 	mov	r4, r6
   157f4:	eb0018ab 	bl	1baa8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   157f8:	eaffffc3 	b	1570c <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x6c>
   157fc:	e3061634 	movw	r1, #26164	; 0x6634
   15800:	e3401002 	movt	r1, #2
   15804:	e306067c 	movw	r0, #26236	; 0x667c
   15808:	e3400002 	movt	r0, #2
   1580c:	e3a02f4b 	mov	r2, #300	; 0x12c
   15810:	e3a04000 	mov	r4, #0
   15814:	eb000f0e 	bl	19454 <assertion_failed>
   15818:	eaffffbb 	b	1570c <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x6c>
   1581c:	e3061634 	movw	r1, #26164	; 0x6634
   15820:	e3401002 	movt	r1, #2
   15824:	e306045c 	movw	r0, #25692	; 0x645c
   15828:	e3400002 	movt	r0, #2
   1582c:	e3002137 	movw	r2, #311	; 0x137
   15830:	eb000f07 	bl	19454 <assertion_failed>
   15834:	eaffffd6 	b	15794 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0xf4>
   15838:	00026620 	.word	0x00026620

0001583c <CSMSC951xDevice::SendFrame(void const*, unsigned int) [clone .part.0]>:
   1583c:	e92d4070 	push	{r4, r5, r6, lr}
   15840:	e1a05000 	mov	r5, r0
   15844:	e1a04002 	mov	r4, r2
   15848:	e24dde65 	sub	sp, sp, #1616	; 0x650
   1584c:	e2516000 	subs	r6, r1, #0
   15850:	0a000015 	beq	158ac <CSMSC951xDevice::SendFrame(void const*, unsigned int) [clone .part.0]+0x70>
   15854:	e1a02004 	mov	r2, r4
   15858:	e1a01006 	mov	r1, r6
   1585c:	e28d0010 	add	r0, sp, #16
   15860:	eb002e22 	bl	210f0 <memcpy>
   15864:	e5952014 	ldr	r2, [r5, #20]
   15868:	e3843a03 	orr	r3, r4, #12288	; 0x3000
   1586c:	e58d400c 	str	r4, [sp, #12]
   15870:	e3520000 	cmp	r2, #0
   15874:	e58d3008 	str	r3, [sp, #8]
   15878:	0a000012 	beq	158c8 <CSMSC951xDevice::SendFrame(void const*, unsigned int) [clone .part.0]+0x8c>
   1587c:	e1a00005 	mov	r0, r5
   15880:	ebfff5c7 	bl	12fa4 <CUSBFunction::GetHost() const>
   15884:	e5951014 	ldr	r1, [r5, #20]
   15888:	e3a0c000 	mov	ip, #0
   1588c:	e2843008 	add	r3, r4, #8
   15890:	e28d2008 	add	r2, sp, #8
   15894:	e58dc000 	str	ip, [sp]
   15898:	ebffdd6d 	bl	ce54 <CUSBHostController::Transfer(CUSBEndpoint*, void*, unsigned int, unsigned int)>
   1589c:	e1e00000 	mvn	r0, r0
   158a0:	e1a00fa0 	lsr	r0, r0, #31
   158a4:	e28dde65 	add	sp, sp, #1616	; 0x650
   158a8:	e8bd8070 	pop	{r4, r5, r6, pc}
   158ac:	e3061634 	movw	r1, #26164	; 0x6634
   158b0:	e3401002 	movt	r1, #2
   158b4:	e30503c4 	movw	r0, #21444	; 0x53c4
   158b8:	e3400002 	movt	r0, #2
   158bc:	e3002106 	movw	r2, #262	; 0x106
   158c0:	eb000ee3 	bl	19454 <assertion_failed>
   158c4:	eaffffe2 	b	15854 <CSMSC951xDevice::SendFrame(void const*, unsigned int) [clone .part.0]+0x18>
   158c8:	e3061634 	movw	r1, #26164	; 0x6634
   158cc:	e3401002 	movt	r1, #2
   158d0:	e306040c 	movw	r0, #25612	; 0x640c
   158d4:	e3400002 	movt	r0, #2
   158d8:	e300210d 	movw	r2, #269	; 0x10d
   158dc:	eb000edc 	bl	19454 <assertion_failed>
   158e0:	eaffffe5 	b	1587c <CSMSC951xDevice::SendFrame(void const*, unsigned int) [clone .part.0]+0x40>

000158e4 <CSMSC951xDevice::SendFrame(void const*, unsigned int)>:
   158e4:	e3520d19 	cmp	r2, #1600	; 0x640
   158e8:	8a000000 	bhi	158f0 <CSMSC951xDevice::SendFrame(void const*, unsigned int)+0xc>
   158ec:	eaffffd2 	b	1583c <CSMSC951xDevice::SendFrame(void const*, unsigned int) [clone .part.0]>
   158f0:	e3a00000 	mov	r0, #0
   158f4:	e12fff1e 	bx	lr

000158f8 <CSMSC951xDevice::CSMSC951xDevice(CUSBFunction*)>:
   158f8:	e92d4010 	push	{r4, lr}
   158fc:	e1a04000 	mov	r4, r0
   15900:	eb000633 	bl	171d4 <CNetDevice::CNetDevice(CUSBFunction*)>
   15904:	e59f201c 	ldr	r2, [pc, #28]	; 15928 <CSMSC951xDevice::CSMSC951xDevice(CUSBFunction*)+0x30>
   15908:	e3a03000 	mov	r3, #0
   1590c:	e2840018 	add	r0, r4, #24
   15910:	e5842000 	str	r2, [r4]
   15914:	e5843010 	str	r3, [r4, #16]
   15918:	e5843014 	str	r3, [r4, #20]
   1591c:	eb00057e 	bl	16f1c <CMACAddress::CMACAddress()>
   15920:	e1a00004 	mov	r0, r4
   15924:	e8bd8010 	pop	{r4, pc}
   15928:	000265ec 	.word	0x000265ec

0001592c <CSMSC951xDevice::WriteReg(unsigned int, unsigned int)>:
   1592c:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   15930:	e1a07000 	mov	r7, r0
   15934:	e1a04001 	mov	r4, r1
   15938:	e24dd01c 	sub	sp, sp, #28
   1593c:	e6ff4074 	uxth	r4, r4
   15940:	e28d5018 	add	r5, sp, #24
   15944:	e5252004 	str	r2, [r5, #-4]!
   15948:	ebfff595 	bl	12fa4 <CUSBFunction::GetHost() const>
   1594c:	e1a06000 	mov	r6, r0
   15950:	e1a00007 	mov	r0, r7
   15954:	ebfff581 	bl	12f60 <CUSBFunction::GetEndpoint0() const>
   15958:	e58d5008 	str	r5, [sp, #8]
   1595c:	e1a01000 	mov	r1, r0
   15960:	e58d4004 	str	r4, [sp, #4]
   15964:	e1a00006 	mov	r0, r6
   15968:	e3a03004 	mov	r3, #4
   1596c:	e3a02000 	mov	r2, #0
   15970:	e58d300c 	str	r3, [sp, #12]
   15974:	e58d2000 	str	r2, [sp]
   15978:	e3a030a0 	mov	r3, #160	; 0xa0
   1597c:	e3a02040 	mov	r2, #64	; 0x40
   15980:	ebffdcd3 	bl	ccd4 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   15984:	e1e00000 	mvn	r0, r0
   15988:	e1a00fa0 	lsr	r0, r0, #31
   1598c:	e28dd01c 	add	sp, sp, #28
   15990:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}

00015994 <CSMSC951xDevice::ReadReg(unsigned int, unsigned int*)>:
   15994:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   15998:	e1a07000 	mov	r7, r0
   1599c:	e1a06002 	mov	r6, r2
   159a0:	e24dd014 	sub	sp, sp, #20
   159a4:	e1a04001 	mov	r4, r1
   159a8:	ebfff57d 	bl	12fa4 <CUSBFunction::GetHost() const>
   159ac:	e1a05000 	mov	r5, r0
   159b0:	e1a00007 	mov	r0, r7
   159b4:	e6ff4074 	uxth	r4, r4
   159b8:	ebfff568 	bl	12f60 <CUSBFunction::GetEndpoint0() const>
   159bc:	e58d6008 	str	r6, [sp, #8]
   159c0:	e1a01000 	mov	r1, r0
   159c4:	e58d4004 	str	r4, [sp, #4]
   159c8:	e1a00005 	mov	r0, r5
   159cc:	e3a03004 	mov	r3, #4
   159d0:	e3a02000 	mov	r2, #0
   159d4:	e58d300c 	str	r3, [sp, #12]
   159d8:	e58d2000 	str	r2, [sp]
   159dc:	e3a030a1 	mov	r3, #161	; 0xa1
   159e0:	e3a020c0 	mov	r2, #192	; 0xc0
   159e4:	ebffdcba 	bl	ccd4 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   159e8:	e2400004 	sub	r0, r0, #4
   159ec:	e16f0f10 	clz	r0, r0
   159f0:	e1a002a0 	lsr	r0, r0, #5
   159f4:	e28dd014 	add	sp, sp, #20
   159f8:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}

000159fc <CSMSC951xDevice::PHYWaitNotBusy()>:
   159fc:	e92d4070 	push	{r4, r5, r6, lr}
   15a00:	e1a06000 	mov	r6, r0
   15a04:	e24dd008 	sub	sp, sp, #8
   15a08:	eb002c02 	bl	20a18 <CTimer::Get()>
   15a0c:	e2504000 	subs	r4, r0, #0
   15a10:	0a000014 	beq	15a68 <CSMSC951xDevice::PHYWaitNotBusy()+0x6c>
   15a14:	e1a00004 	mov	r0, r4
   15a18:	eb00295e 	bl	1ff98 <CTimer::GetTicks() const>
   15a1c:	e1a05000 	mov	r5, r0
   15a20:	ea000005 	b	15a3c <CSMSC951xDevice::PHYWaitNotBusy()+0x40>
   15a24:	ebffffda 	bl	15994 <CSMSC951xDevice::ReadReg(unsigned int, unsigned int*)>
   15a28:	e3500000 	cmp	r0, #0
   15a2c:	0a00000a 	beq	15a5c <CSMSC951xDevice::PHYWaitNotBusy()+0x60>
   15a30:	e59d3004 	ldr	r3, [sp, #4]
   15a34:	e3130001 	tst	r3, #1
   15a38:	0a000008 	beq	15a60 <CSMSC951xDevice::PHYWaitNotBusy()+0x64>
   15a3c:	e1a00004 	mov	r0, r4
   15a40:	eb002954 	bl	1ff98 <CTimer::GetTicks() const>
   15a44:	e0403005 	sub	r3, r0, r5
   15a48:	e28d2004 	add	r2, sp, #4
   15a4c:	e3a01f45 	mov	r1, #276	; 0x114
   15a50:	e1a00006 	mov	r0, r6
   15a54:	e3530063 	cmp	r3, #99	; 0x63
   15a58:	9afffff1 	bls	15a24 <CSMSC951xDevice::PHYWaitNotBusy()+0x28>
   15a5c:	e3a00000 	mov	r0, #0
   15a60:	e28dd008 	add	sp, sp, #8
   15a64:	e8bd8070 	pop	{r4, r5, r6, pc}
   15a68:	e3061634 	movw	r1, #26164	; 0x6634
   15a6c:	e3401002 	movt	r1, #2
   15a70:	e3060690 	movw	r0, #26256	; 0x6690
   15a74:	e3400002 	movt	r0, #2
   15a78:	e300218e 	movw	r2, #398	; 0x18e
   15a7c:	eb000e74 	bl	19454 <assertion_failed>
   15a80:	eaffffe3 	b	15a14 <CSMSC951xDevice::PHYWaitNotBusy()+0x18>

00015a84 <CSMSC951xDevice::PHYWrite(unsigned char, unsigned short)>:
   15a84:	e92d4070 	push	{r4, r5, r6, lr}
   15a88:	e351001f 	cmp	r1, #31
   15a8c:	e1a05001 	mov	r5, r1
   15a90:	e1a04000 	mov	r4, r0
   15a94:	e1a06002 	mov	r6, r2
   15a98:	8a000015 	bhi	15af4 <CSMSC951xDevice::PHYWrite(unsigned char, unsigned short)+0x70>
   15a9c:	e1a00004 	mov	r0, r4
   15aa0:	ebffffd5 	bl	159fc <CSMSC951xDevice::PHYWaitNotBusy()>
   15aa4:	e3500000 	cmp	r0, #0
   15aa8:	1a000001 	bne	15ab4 <CSMSC951xDevice::PHYWrite(unsigned char, unsigned short)+0x30>
   15aac:	e3a00000 	mov	r0, #0
   15ab0:	e8bd8070 	pop	{r4, r5, r6, pc}
   15ab4:	e1a02006 	mov	r2, r6
   15ab8:	e3a01f46 	mov	r1, #280	; 0x118
   15abc:	e1a00004 	mov	r0, r4
   15ac0:	ebffff99 	bl	1592c <CSMSC951xDevice::WriteReg(unsigned int, unsigned int)>
   15ac4:	e3500000 	cmp	r0, #0
   15ac8:	0afffff7 	beq	15aac <CSMSC951xDevice::PHYWrite(unsigned char, unsigned short)+0x28>
   15acc:	e3002803 	movw	r2, #2051	; 0x803
   15ad0:	e3a01f45 	mov	r1, #276	; 0x114
   15ad4:	e1822305 	orr	r2, r2, r5, lsl #6
   15ad8:	e1a00004 	mov	r0, r4
   15adc:	ebffff92 	bl	1592c <CSMSC951xDevice::WriteReg(unsigned int, unsigned int)>
   15ae0:	e3500000 	cmp	r0, #0
   15ae4:	0afffff0 	beq	15aac <CSMSC951xDevice::PHYWrite(unsigned char, unsigned short)+0x28>
   15ae8:	e1a00004 	mov	r0, r4
   15aec:	e8bd4070 	pop	{r4, r5, r6, lr}
   15af0:	eaffffc1 	b	159fc <CSMSC951xDevice::PHYWaitNotBusy()>
   15af4:	e3061634 	movw	r1, #26164	; 0x6634
   15af8:	e3401002 	movt	r1, #2
   15afc:	e306069c 	movw	r0, #26268	; 0x669c
   15b00:	e3400002 	movt	r0, #2
   15b04:	e3002162 	movw	r2, #354	; 0x162
   15b08:	eb000e51 	bl	19454 <assertion_failed>
   15b0c:	eaffffe2 	b	15a9c <CSMSC951xDevice::PHYWrite(unsigned char, unsigned short)+0x18>

00015b10 <CSMSC951xDevice::PHYRead(unsigned char, unsigned short*)>:
   15b10:	e92d4070 	push	{r4, r5, r6, lr}
   15b14:	e351001f 	cmp	r1, #31
   15b18:	e1a05001 	mov	r5, r1
   15b1c:	e24dd008 	sub	sp, sp, #8
   15b20:	e1a04000 	mov	r4, r0
   15b24:	e1a06002 	mov	r6, r2
   15b28:	8a00001d 	bhi	15ba4 <CSMSC951xDevice::PHYRead(unsigned char, unsigned short*)+0x94>
   15b2c:	e1a00004 	mov	r0, r4
   15b30:	ebffffb1 	bl	159fc <CSMSC951xDevice::PHYWaitNotBusy()>
   15b34:	e3500000 	cmp	r0, #0
   15b38:	1a000003 	bne	15b4c <CSMSC951xDevice::PHYRead(unsigned char, unsigned short*)+0x3c>
   15b3c:	e3a04000 	mov	r4, #0
   15b40:	e1a00004 	mov	r0, r4
   15b44:	e28dd008 	add	sp, sp, #8
   15b48:	e8bd8070 	pop	{r4, r5, r6, pc}
   15b4c:	e3002801 	movw	r2, #2049	; 0x801
   15b50:	e3a01f45 	mov	r1, #276	; 0x114
   15b54:	e1822305 	orr	r2, r2, r5, lsl #6
   15b58:	e1a00004 	mov	r0, r4
   15b5c:	ebffff72 	bl	1592c <CSMSC951xDevice::WriteReg(unsigned int, unsigned int)>
   15b60:	e3500000 	cmp	r0, #0
   15b64:	0afffff4 	beq	15b3c <CSMSC951xDevice::PHYRead(unsigned char, unsigned short*)+0x2c>
   15b68:	e1a00004 	mov	r0, r4
   15b6c:	ebffffa2 	bl	159fc <CSMSC951xDevice::PHYWaitNotBusy()>
   15b70:	e3500000 	cmp	r0, #0
   15b74:	0afffff0 	beq	15b3c <CSMSC951xDevice::PHYRead(unsigned char, unsigned short*)+0x2c>
   15b78:	e1a00004 	mov	r0, r4
   15b7c:	e28d2004 	add	r2, sp, #4
   15b80:	e3a01f46 	mov	r1, #280	; 0x118
   15b84:	ebffff82 	bl	15994 <CSMSC951xDevice::ReadReg(unsigned int, unsigned int*)>
   15b88:	e2504000 	subs	r4, r0, #0
   15b8c:	0affffeb 	beq	15b40 <CSMSC951xDevice::PHYRead(unsigned char, unsigned short*)+0x30>
   15b90:	e3560000 	cmp	r6, #0
   15b94:	0a000009 	beq	15bc0 <CSMSC951xDevice::PHYRead(unsigned char, unsigned short*)+0xb0>
   15b98:	e59d3004 	ldr	r3, [sp, #4]
   15b9c:	e1c630b0 	strh	r3, [r6]
   15ba0:	eaffffe6 	b	15b40 <CSMSC951xDevice::PHYRead(unsigned char, unsigned short*)+0x30>
   15ba4:	e3061634 	movw	r1, #26164	; 0x6634
   15ba8:	e3401002 	movt	r1, #2
   15bac:	e306069c 	movw	r0, #26268	; 0x669c
   15bb0:	e3400002 	movt	r0, #2
   15bb4:	e3002175 	movw	r2, #373	; 0x175
   15bb8:	eb000e25 	bl	19454 <assertion_failed>
   15bbc:	eaffffda 	b	15b2c <CSMSC951xDevice::PHYRead(unsigned char, unsigned short*)+0x1c>
   15bc0:	e3061634 	movw	r1, #26164	; 0x6634
   15bc4:	e3401002 	movt	r1, #2
   15bc8:	e30606ac 	movw	r0, #26284	; 0x66ac
   15bcc:	e3400002 	movt	r0, #2
   15bd0:	e3002185 	movw	r2, #389	; 0x185
   15bd4:	eb000e1e 	bl	19454 <assertion_failed>
   15bd8:	eaffffee 	b	15b98 <CSMSC951xDevice::PHYRead(unsigned char, unsigned short*)+0x88>

00015bdc <CSMSC951xDevice::IsLinkUp()>:
   15bdc:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   15be0:	e3a01001 	mov	r1, #1
   15be4:	e24dd00c 	sub	sp, sp, #12
   15be8:	e28d2006 	add	r2, sp, #6
   15bec:	ebffffc7 	bl	15b10 <CSMSC951xDevice::PHYRead(unsigned char, unsigned short*)>
   15bf0:	e3500000 	cmp	r0, #0
   15bf4:	11dd00b6 	ldrhne	r0, [sp, #6]
   15bf8:	17e00150 	ubfxne	r0, r0, #2, #1
   15bfc:	e28dd00c 	add	sp, sp, #12
   15c00:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

00015c04 <CSMSC951xDevice::GetLinkSpeed()>:
   15c04:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   15c08:	e3a0101f 	mov	r1, #31
   15c0c:	e24dd00c 	sub	sp, sp, #12
   15c10:	e28d2006 	add	r2, sp, #6
   15c14:	ebffffbd 	bl	15b10 <CSMSC951xDevice::PHYRead(unsigned char, unsigned short*)>
   15c18:	e3500000 	cmp	r0, #0
   15c1c:	0a00000c 	beq	15c54 <CSMSC951xDevice::GetLinkSpeed()+0x50>
   15c20:	e1dd30b6 	ldrh	r3, [sp, #6]
   15c24:	e3130a01 	tst	r3, #4096	; 0x1000
   15c28:	0a000009 	beq	15c54 <CSMSC951xDevice::GetLinkSpeed()+0x50>
   15c2c:	e7e23153 	ubfx	r3, r3, #2, #3
   15c30:	e2433001 	sub	r3, r3, #1
   15c34:	e3530005 	cmp	r3, #5
   15c38:	8a000005 	bhi	15c54 <CSMSC951xDevice::GetLinkSpeed()+0x50>
   15c3c:	e30625e4 	movw	r2, #26084	; 0x65e4
   15c40:	e3402002 	movt	r2, #2
   15c44:	e0823003 	add	r3, r2, r3
   15c48:	e5d30048 	ldrb	r0, [r3, #72]	; 0x48
   15c4c:	e28dd00c 	add	sp, sp, #12
   15c50:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   15c54:	e3a00006 	mov	r0, #6
   15c58:	e28dd00c 	add	sp, sp, #12
   15c5c:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

00015c60 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>:
   15c60:	e92d4030 	push	{r4, r5, lr}
   15c64:	e1a04002 	mov	r4, r2
   15c68:	e1a05001 	mov	r5, r1
   15c6c:	e24dd014 	sub	sp, sp, #20
   15c70:	e1a01004 	mov	r1, r4
   15c74:	e28d200c 	add	r2, sp, #12
   15c78:	ebffff45 	bl	15994 <CSMSC951xDevice::ReadReg(unsigned int, unsigned int*)>
   15c7c:	e3500000 	cmp	r0, #0
   15c80:	0a00000a 	beq	15cb0 <CSMSC951xDevice::DumpReg(char const*, unsigned int)+0x50>
   15c84:	eb001850 	bl	1bdcc <CLogger::Get()>
   15c88:	e59d200c 	ldr	r2, [sp, #12]
   15c8c:	e58d2000 	str	r2, [sp]
   15c90:	e30636d4 	movw	r3, #26324	; 0x66d4
   15c94:	e3403002 	movt	r3, #2
   15c98:	e58d5004 	str	r5, [sp, #4]
   15c9c:	e3a02004 	mov	r2, #4
   15ca0:	e59f102c 	ldr	r1, [pc, #44]	; 15cd4 <CSMSC951xDevice::DumpReg(char const*, unsigned int)+0x74>
   15ca4:	eb00177f 	bl	1baa8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   15ca8:	e28dd014 	add	sp, sp, #20
   15cac:	e8bd8030 	pop	{r4, r5, pc}
   15cb0:	eb001845 	bl	1bdcc <CLogger::Get()>
   15cb4:	e58d4000 	str	r4, [sp]
   15cb8:	e3a02001 	mov	r2, #1
   15cbc:	e59f1010 	ldr	r1, [pc, #16]	; 15cd4 <CSMSC951xDevice::DumpReg(char const*, unsigned int)+0x74>
   15cc0:	e30636b8 	movw	r3, #26296	; 0x66b8
   15cc4:	e3403002 	movt	r3, #2
   15cc8:	eb001776 	bl	1baa8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   15ccc:	e28dd014 	add	sp, sp, #20
   15cd0:	e8bd8030 	pop	{r4, r5, pc}
   15cd4:	00026620 	.word	0x00026620

00015cd8 <CSMSC951xDevice::DumpRegs()>:
   15cd8:	e92d4010 	push	{r4, lr}
   15cdc:	e3a02000 	mov	r2, #0
   15ce0:	e1a04000 	mov	r4, r0
   15ce4:	e30616dc 	movw	r1, #26332	; 0x66dc
   15ce8:	e3401002 	movt	r1, #2
   15cec:	ebffffdb 	bl	15c60 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   15cf0:	e1a00004 	mov	r0, r4
   15cf4:	e3a02008 	mov	r2, #8
   15cf8:	e30616e4 	movw	r1, #26340	; 0x66e4
   15cfc:	e3401002 	movt	r1, #2
   15d00:	ebffffd6 	bl	15c60 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   15d04:	e1a00004 	mov	r0, r4
   15d08:	e3a0200c 	mov	r2, #12
   15d0c:	e30616ec 	movw	r1, #26348	; 0x66ec
   15d10:	e3401002 	movt	r1, #2
   15d14:	ebffffd1 	bl	15c60 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   15d18:	e1a00004 	mov	r0, r4
   15d1c:	e3a02010 	mov	r2, #16
   15d20:	e30616f4 	movw	r1, #26356	; 0x66f4
   15d24:	e3401002 	movt	r1, #2
   15d28:	ebffffcc 	bl	15c60 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   15d2c:	e1a00004 	mov	r0, r4
   15d30:	e3a02014 	mov	r2, #20
   15d34:	e30616fc 	movw	r1, #26364	; 0x66fc
   15d38:	e3401002 	movt	r1, #2
   15d3c:	ebffffc7 	bl	15c60 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   15d40:	e1a00004 	mov	r0, r4
   15d44:	e3a02018 	mov	r2, #24
   15d48:	e3061704 	movw	r1, #26372	; 0x6704
   15d4c:	e3401002 	movt	r1, #2
   15d50:	ebffffc2 	bl	15c60 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   15d54:	e1a00004 	mov	r0, r4
   15d58:	e3a02020 	mov	r2, #32
   15d5c:	e3061710 	movw	r1, #26384	; 0x6710
   15d60:	e3401002 	movt	r1, #2
   15d64:	ebffffbd 	bl	15c60 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   15d68:	e1a00004 	mov	r0, r4
   15d6c:	e3a02024 	mov	r2, #36	; 0x24
   15d70:	e3061718 	movw	r1, #26392	; 0x6718
   15d74:	e3401002 	movt	r1, #2
   15d78:	ebffffb8 	bl	15c60 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   15d7c:	e1a00004 	mov	r0, r4
   15d80:	e3a02028 	mov	r2, #40	; 0x28
   15d84:	e306171c 	movw	r1, #26396	; 0x671c
   15d88:	e3401002 	movt	r1, #2
   15d8c:	ebffffb3 	bl	15c60 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   15d90:	e1a00004 	mov	r0, r4
   15d94:	e3a0202c 	mov	r2, #44	; 0x2c
   15d98:	e3061728 	movw	r1, #26408	; 0x6728
   15d9c:	e3401002 	movt	r1, #2
   15da0:	ebffffae 	bl	15c60 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   15da4:	e1a00004 	mov	r0, r4
   15da8:	e3a02038 	mov	r2, #56	; 0x38
   15dac:	e3061730 	movw	r1, #26416	; 0x6730
   15db0:	e3401002 	movt	r1, #2
   15db4:	ebffffa9 	bl	15c60 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   15db8:	e1a00004 	mov	r0, r4
   15dbc:	e3a02068 	mov	r2, #104	; 0x68
   15dc0:	e306173c 	movw	r1, #26428	; 0x673c
   15dc4:	e3401002 	movt	r1, #2
   15dc8:	ebffffa4 	bl	15c60 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   15dcc:	e1a00004 	mov	r0, r4
   15dd0:	e3a0206c 	mov	r2, #108	; 0x6c
   15dd4:	e3061748 	movw	r1, #26440	; 0x6748
   15dd8:	e3401002 	movt	r1, #2
   15ddc:	ebffff9f 	bl	15c60 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   15de0:	e1a00004 	mov	r0, r4
   15de4:	e3a02c01 	mov	r2, #256	; 0x100
   15de8:	e3061754 	movw	r1, #26452	; 0x6754
   15dec:	e3401002 	movt	r1, #2
   15df0:	ebffff9a 	bl	15c60 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   15df4:	e1a00004 	mov	r0, r4
   15df8:	e3a02f41 	mov	r2, #260	; 0x104
   15dfc:	e306175c 	movw	r1, #26460	; 0x675c
   15e00:	e3401002 	movt	r1, #2
   15e04:	ebffff95 	bl	15c60 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   15e08:	e1a00004 	mov	r0, r4
   15e0c:	e3a02f42 	mov	r2, #264	; 0x108
   15e10:	e3061764 	movw	r1, #26468	; 0x6764
   15e14:	e3401002 	movt	r1, #2
   15e18:	ebffff90 	bl	15c60 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   15e1c:	e1a00004 	mov	r0, r4
   15e20:	e3a02f43 	mov	r2, #268	; 0x10c
   15e24:	e306176c 	movw	r1, #26476	; 0x676c
   15e28:	e3401002 	movt	r1, #2
   15e2c:	ebffff8b 	bl	15c60 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   15e30:	e1a00004 	mov	r0, r4
   15e34:	e3a02e11 	mov	r2, #272	; 0x110
   15e38:	e3061774 	movw	r1, #26484	; 0x6774
   15e3c:	e3401002 	movt	r1, #2
   15e40:	ebffff86 	bl	15c60 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   15e44:	e1a00004 	mov	r0, r4
   15e48:	e3a02f47 	mov	r2, #284	; 0x11c
   15e4c:	e306177c 	movw	r1, #26492	; 0x677c
   15e50:	e3401002 	movt	r1, #2
   15e54:	ebffff81 	bl	15c60 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   15e58:	e1a00004 	mov	r0, r4
   15e5c:	e3061784 	movw	r1, #26500	; 0x6784
   15e60:	e3401002 	movt	r1, #2
   15e64:	e3a02f4b 	mov	r2, #300	; 0x12c
   15e68:	e8bd4010 	pop	{r4, lr}
   15e6c:	eaffff7b 	b	15c60 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>

00015e70 <CSMSC951xDevice::Configure()>:
   15e70:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   15e74:	e3a01000 	mov	r1, #0
   15e78:	e1a04000 	mov	r4, r0
   15e7c:	e24dd040 	sub	sp, sp, #64	; 0x40
   15e80:	e3a06000 	mov	r6, #0
   15e84:	e28d0014 	add	r0, sp, #20
   15e88:	eb000d95 	bl	194e4 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   15e8c:	e28d0014 	add	r0, sp, #20
   15e90:	e58d6000 	str	r6, [sp]
   15e94:	e3a01003 	mov	r1, #3
   15e98:	e3401001 	movt	r1, #1
   15e9c:	e3a03014 	mov	r3, #20
   15ea0:	e28d202c 	add	r2, sp, #44	; 0x2c
   15ea4:	eb000ddb 	bl	19618 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   15ea8:	e2505000 	subs	r5, r0, #0
   15eac:	0a00003c 	beq	15fa4 <CSMSC951xDevice::Configure()+0x134>
   15eb0:	e2847018 	add	r7, r4, #24
   15eb4:	e28d1038 	add	r1, sp, #56	; 0x38
   15eb8:	e1a00007 	mov	r0, r7
   15ebc:	eb00043d 	bl	16fb8 <CMACAddress::Set(unsigned char const*)>
   15ec0:	e28d001c 	add	r0, sp, #28
   15ec4:	eb002361 	bl	1ec50 <CString::CString()>
   15ec8:	e28d101c 	add	r1, sp, #28
   15ecc:	e1a00007 	mov	r0, r7
   15ed0:	eb000498 	bl	17138 <CMACAddress::Format(CString*) const>
   15ed4:	eb0017bc 	bl	1bdcc <CLogger::Get()>
   15ed8:	e1a05000 	mov	r5, r0
   15edc:	e28d001c 	add	r0, sp, #28
   15ee0:	eb002371 	bl	1ecac <CString::operator char const*() const>
   15ee4:	e3a02004 	mov	r2, #4
   15ee8:	e58d0000 	str	r0, [sp]
   15eec:	e3063498 	movw	r3, #25752	; 0x6498
   15ef0:	e3403002 	movt	r3, #2
   15ef4:	e1a00005 	mov	r0, r5
   15ef8:	e59f122c 	ldr	r1, [pc, #556]	; 1612c <CSMSC951xDevice::Configure()+0x2bc>
   15efc:	eb0016e9 	bl	1baa8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   15f00:	e1a00004 	mov	r0, r4
   15f04:	ebfff3f5 	bl	12ee0 <CUSBFunction::GetNumEndpoints() const>
   15f08:	e3500003 	cmp	r0, #3
   15f0c:	0a00000e 	beq	15f4c <CSMSC951xDevice::Configure()+0xdc>
   15f10:	e1a00004 	mov	r0, r4
   15f14:	e59f1210 	ldr	r1, [pc, #528]	; 1612c <CSMSC951xDevice::Configure()+0x2bc>
   15f18:	e1a05006 	mov	r5, r6
   15f1c:	ebfff475 	bl	130f8 <CUSBFunction::ConfigurationError(char const*) const>
   15f20:	e28d001c 	add	r0, sp, #28
   15f24:	eb002317 	bl	1eb88 <CString::~CString()>
   15f28:	e28d0014 	add	r0, sp, #20
   15f2c:	eb000d73 	bl	19500 <CBcmPropertyTags::~CBcmPropertyTags()>
   15f30:	e1a00005 	mov	r0, r5
   15f34:	e28dd040 	add	sp, sp, #64	; 0x40
   15f38:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   15f3c:	e5d53003 	ldrb	r3, [r5, #3]
   15f40:	e203303f 	and	r3, r3, #63	; 0x3f
   15f44:	e3530002 	cmp	r3, #2
   15f48:	0a00001c 	beq	15fc0 <CSMSC951xDevice::Configure()+0x150>
   15f4c:	e3a01005 	mov	r1, #5
   15f50:	e1a00004 	mov	r0, r4
   15f54:	ebfff454 	bl	130ac <CUSBFunction::GetDescriptor(unsigned char)>
   15f58:	e2505000 	subs	r5, r0, #0
   15f5c:	1afffff6 	bne	15f3c <CSMSC951xDevice::Configure()+0xcc>
   15f60:	e5943010 	ldr	r3, [r4, #16]
   15f64:	e1a00004 	mov	r0, r4
   15f68:	e3530000 	cmp	r3, #0
   15f6c:	0a000024 	beq	16004 <CSMSC951xDevice::Configure()+0x194>
   15f70:	e5943014 	ldr	r3, [r4, #20]
   15f74:	e3530000 	cmp	r3, #0
   15f78:	0a000021 	beq	16004 <CSMSC951xDevice::Configure()+0x194>
   15f7c:	ebfff419 	bl	12fe8 <CUSBFunction::Configure()>
   15f80:	e2505000 	subs	r5, r0, #0
   15f84:	1a00002f 	bne	16048 <CSMSC951xDevice::Configure()+0x1d8>
   15f88:	eb00178f 	bl	1bdcc <CLogger::Get()>
   15f8c:	e30532c4 	movw	r3, #21188	; 0x52c4
   15f90:	e3403002 	movt	r3, #2
   15f94:	e3a02001 	mov	r2, #1
   15f98:	e59f118c 	ldr	r1, [pc, #396]	; 1612c <CSMSC951xDevice::Configure()+0x2bc>
   15f9c:	eb0016c1 	bl	1baa8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   15fa0:	eaffffde 	b	15f20 <CSMSC951xDevice::Configure()+0xb0>
   15fa4:	eb001788 	bl	1bdcc <CLogger::Get()>
   15fa8:	e3063480 	movw	r3, #25728	; 0x6480
   15fac:	e3403002 	movt	r3, #2
   15fb0:	e3a02001 	mov	r2, #1
   15fb4:	e59f1170 	ldr	r1, [pc, #368]	; 1612c <CSMSC951xDevice::Configure()+0x2bc>
   15fb8:	eb0016ba 	bl	1baa8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   15fbc:	eaffffd9 	b	15f28 <CSMSC951xDevice::Configure()+0xb8>
   15fc0:	e1d530d2 	ldrsb	r3, [r5, #2]
   15fc4:	e1a00004 	mov	r0, r4
   15fc8:	e3530000 	cmp	r3, #0
   15fcc:	ba000010 	blt	16014 <CSMSC951xDevice::Configure()+0x1a4>
   15fd0:	e5943014 	ldr	r3, [r4, #20]
   15fd4:	e3530000 	cmp	r3, #0
   15fd8:	1a000009 	bne	16004 <CSMSC951xDevice::Configure()+0x194>
   15fdc:	ebfff3cf 	bl	12f20 <CUSBFunction::GetDevice() const>
   15fe0:	e1a08000 	mov	r8, r0
   15fe4:	e3a00014 	mov	r0, #20
   15fe8:	eb003024 	bl	22080 <operator new(unsigned int)>
   15fec:	e1a02005 	mov	r2, r5
   15ff0:	e1a01008 	mov	r1, r8
   15ff4:	e1a06000 	mov	r6, r0
   15ff8:	ebffda1f 	bl	c87c <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   15ffc:	e5846014 	str	r6, [r4, #20]
   16000:	eaffffd1 	b	15f4c <CSMSC951xDevice::Configure()+0xdc>
   16004:	e59f1120 	ldr	r1, [pc, #288]	; 1612c <CSMSC951xDevice::Configure()+0x2bc>
   16008:	e3a05000 	mov	r5, #0
   1600c:	ebfff439 	bl	130f8 <CUSBFunction::ConfigurationError(char const*) const>
   16010:	eaffffc2 	b	15f20 <CSMSC951xDevice::Configure()+0xb0>
   16014:	e5943010 	ldr	r3, [r4, #16]
   16018:	e3530000 	cmp	r3, #0
   1601c:	1afffff8 	bne	16004 <CSMSC951xDevice::Configure()+0x194>
   16020:	ebfff3be 	bl	12f20 <CUSBFunction::GetDevice() const>
   16024:	e1a08000 	mov	r8, r0
   16028:	e3a00014 	mov	r0, #20
   1602c:	eb003013 	bl	22080 <operator new(unsigned int)>
   16030:	e1a02005 	mov	r2, r5
   16034:	e1a01008 	mov	r1, r8
   16038:	e1a06000 	mov	r6, r0
   1603c:	ebffda0e 	bl	c87c <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   16040:	e5846010 	str	r6, [r4, #16]
   16044:	eaffffc0 	b	15f4c <CSMSC951xDevice::Configure()+0xdc>
   16048:	e1a00007 	mov	r0, r7
   1604c:	e28d100c 	add	r1, sp, #12
   16050:	eb000402 	bl	17060 <CMACAddress::CopyTo(unsigned char*) const>
   16054:	e5dd2011 	ldrb	r2, [sp, #17]
   16058:	e5dd3010 	ldrb	r3, [sp, #16]
   1605c:	e3a01f41 	mov	r1, #260	; 0x104
   16060:	e1a00004 	mov	r0, r4
   16064:	e59d500c 	ldr	r5, [sp, #12]
   16068:	e1832402 	orr	r2, r3, r2, lsl #8
   1606c:	ebfffe2e 	bl	1592c <CSMSC951xDevice::WriteReg(unsigned int, unsigned int)>
   16070:	e3500000 	cmp	r0, #0
   16074:	0a00001b 	beq	160e8 <CSMSC951xDevice::Configure()+0x278>
   16078:	e1a02005 	mov	r2, r5
   1607c:	e3a01f42 	mov	r1, #264	; 0x108
   16080:	e1a00004 	mov	r0, r4
   16084:	ebfffe28 	bl	1592c <CSMSC951xDevice::WriteReg(unsigned int, unsigned int)>
   16088:	e3500000 	cmp	r0, #0
   1608c:	0a000015 	beq	160e8 <CSMSC951xDevice::Configure()+0x278>
   16090:	e3a02000 	mov	r2, #0
   16094:	e3402111 	movt	r2, #273	; 0x111
   16098:	e3a01024 	mov	r1, #36	; 0x24
   1609c:	e1a00004 	mov	r0, r4
   160a0:	ebfffe21 	bl	1592c <CSMSC951xDevice::WriteReg(unsigned int, unsigned int)>
   160a4:	e3500000 	cmp	r0, #0
   160a8:	0a000006 	beq	160c8 <CSMSC951xDevice::Configure()+0x258>
   160ac:	e3a0200c 	mov	r2, #12
   160b0:	e3402080 	movt	r2, #128	; 0x80
   160b4:	e3a01c01 	mov	r1, #256	; 0x100
   160b8:	e1a00004 	mov	r0, r4
   160bc:	ebfffe1a 	bl	1592c <CSMSC951xDevice::WriteReg(unsigned int, unsigned int)>
   160c0:	e3500000 	cmp	r0, #0
   160c4:	1a00000f 	bne	16108 <CSMSC951xDevice::Configure()+0x298>
   160c8:	eb00173f 	bl	1bdcc <CLogger::Get()>
   160cc:	e30637a4 	movw	r3, #26532	; 0x67a4
   160d0:	e3403002 	movt	r3, #2
   160d4:	e3a02001 	mov	r2, #1
   160d8:	e59f104c 	ldr	r1, [pc, #76]	; 1612c <CSMSC951xDevice::Configure()+0x2bc>
   160dc:	e3a05000 	mov	r5, #0
   160e0:	eb001670 	bl	1baa8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   160e4:	eaffff8d 	b	15f20 <CSMSC951xDevice::Configure()+0xb0>
   160e8:	eb001737 	bl	1bdcc <CLogger::Get()>
   160ec:	e306378c 	movw	r3, #26508	; 0x678c
   160f0:	e3403002 	movt	r3, #2
   160f4:	e3a02001 	mov	r2, #1
   160f8:	e59f102c 	ldr	r1, [pc, #44]	; 1612c <CSMSC951xDevice::Configure()+0x2bc>
   160fc:	eb001669 	bl	1baa8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   16100:	e3a05000 	mov	r5, #0
   16104:	eaffff85 	b	15f20 <CSMSC951xDevice::Configure()+0xb0>
   16108:	e3a02004 	mov	r2, #4
   1610c:	e3a01010 	mov	r1, #16
   16110:	e1a00004 	mov	r0, r4
   16114:	ebfffe04 	bl	1592c <CSMSC951xDevice::WriteReg(unsigned int, unsigned int)>
   16118:	e2505000 	subs	r5, r0, #0
   1611c:	0affffe9 	beq	160c8 <CSMSC951xDevice::Configure()+0x258>
   16120:	e1a00004 	mov	r0, r4
   16124:	eb00044c 	bl	1725c <CNetDevice::AddNetDevice()>
   16128:	eaffff7c 	b	15f20 <CSMSC951xDevice::Configure()+0xb0>
   1612c:	00026620 	.word	0x00026620

00016130 <CLAN7800Device::GetMACAddress() const>:
   16130:	e2800018 	add	r0, r0, #24
   16134:	e12fff1e 	bx	lr

00016138 <CLAN7800Device::~CLAN7800Device()>:
   16138:	e92d4070 	push	{r4, r5, r6, lr}
   1613c:	e1a04000 	mov	r4, r0
   16140:	e59f3068 	ldr	r3, [pc, #104]	; 161b0 <CLAN7800Device::~CLAN7800Device()+0x78>
   16144:	e5905014 	ldr	r5, [r0, #20]
   16148:	e5803000 	str	r3, [r0]
   1614c:	e3550000 	cmp	r5, #0
   16150:	0a000004 	beq	16168 <CLAN7800Device::~CLAN7800Device()+0x30>
   16154:	e1a00005 	mov	r0, r5
   16158:	ebffda57 	bl	cabc <CUSBEndpoint::~CUSBEndpoint()>
   1615c:	e1a00005 	mov	r0, r5
   16160:	e3a01014 	mov	r1, #20
   16164:	eb002fc9 	bl	22090 <operator delete(void*, unsigned int)>
   16168:	e5945010 	ldr	r5, [r4, #16]
   1616c:	e3a03000 	mov	r3, #0
   16170:	e5843014 	str	r3, [r4, #20]
   16174:	e1550003 	cmp	r5, r3
   16178:	0a000004 	beq	16190 <CLAN7800Device::~CLAN7800Device()+0x58>
   1617c:	e1a00005 	mov	r0, r5
   16180:	ebffda4d 	bl	cabc <CUSBEndpoint::~CUSBEndpoint()>
   16184:	e1a00005 	mov	r0, r5
   16188:	e3a01014 	mov	r1, #20
   1618c:	eb002fbf 	bl	22090 <operator delete(void*, unsigned int)>
   16190:	e3a03000 	mov	r3, #0
   16194:	e2840018 	add	r0, r4, #24
   16198:	e5843010 	str	r3, [r4, #16]
   1619c:	eb000361 	bl	16f28 <CMACAddress::~CMACAddress()>
   161a0:	e1a00004 	mov	r0, r4
   161a4:	eb000412 	bl	171f4 <CNetDevice::~CNetDevice()>
   161a8:	e1a00004 	mov	r0, r4
   161ac:	e8bd8070 	pop	{r4, r5, r6, pc}
   161b0:	000267c0 	.word	0x000267c0

000161b4 <CLAN7800Device::~CLAN7800Device()>:
   161b4:	e92d4010 	push	{r4, lr}
   161b8:	e1a04000 	mov	r4, r0
   161bc:	ebffffdd 	bl	16138 <CLAN7800Device::~CLAN7800Device()>
   161c0:	e1a00004 	mov	r0, r4
   161c4:	e3a01020 	mov	r1, #32
   161c8:	eb002fb0 	bl	22090 <operator delete(void*, unsigned int)>
   161cc:	e1a00004 	mov	r0, r4
   161d0:	e8bd8010 	pop	{r4, pc}

000161d4 <CLAN7800Device::ReceiveFrame(void*, unsigned int*)>:
   161d4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   161d8:	e1a04000 	mov	r4, r0
   161dc:	e1a05001 	mov	r5, r1
   161e0:	e5903010 	ldr	r3, [r0, #16]
   161e4:	e24dd030 	sub	sp, sp, #48	; 0x30
   161e8:	e1a07002 	mov	r7, r2
   161ec:	e3530000 	cmp	r3, #0
   161f0:	0a000033 	beq	162c4 <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0xf0>
   161f4:	e3550000 	cmp	r5, #0
   161f8:	0a000039 	beq	162e4 <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x110>
   161fc:	e5941010 	ldr	r1, [r4, #16]
   16200:	e3a03d19 	mov	r3, #1600	; 0x640
   16204:	e1a02005 	mov	r2, r5
   16208:	e3a06000 	mov	r6, #0
   1620c:	e28d0008 	add	r0, sp, #8
   16210:	e58d6000 	str	r6, [sp]
   16214:	ebffdb27 	bl	ceb8 <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)>
   16218:	e1a00004 	mov	r0, r4
   1621c:	ebfff360 	bl	12fa4 <CUSBFunction::GetHost() const>
   16220:	e5903000 	ldr	r3, [r0]
   16224:	e1a02006 	mov	r2, r6
   16228:	e28d1008 	add	r1, sp, #8
   1622c:	e5933008 	ldr	r3, [r3, #8]
   16230:	e12fff33 	blx	r3
   16234:	e2504000 	subs	r4, r0, #0
   16238:	1a000005 	bne	16254 <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x80>
   1623c:	e3a04000 	mov	r4, #0
   16240:	e28d0008 	add	r0, sp, #8
   16244:	ebffdb42 	bl	cf54 <CUSBRequest::~CUSBRequest()>
   16248:	e1a00004 	mov	r0, r4
   1624c:	e28dd030 	add	sp, sp, #48	; 0x30
   16250:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   16254:	e28d0008 	add	r0, sp, #8
   16258:	ebffdb54 	bl	cfb0 <CUSBRequest::GetResultLength() const>
   1625c:	e3500009 	cmp	r0, #9
   16260:	9afffff5 	bls	1623c <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x68>
   16264:	e5958000 	ldr	r8, [r5]
   16268:	e3180501 	tst	r8, #4194304	; 0x400000
   1626c:	1a000023 	bne	16300 <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x12c>
   16270:	e7ed8058 	ubfx	r8, r8, #0, #14
   16274:	e240000a 	sub	r0, r0, #10
   16278:	e1500008 	cmp	r0, r8
   1627c:	0a000005 	beq	16298 <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0xc4>
   16280:	e30617fc 	movw	r1, #26620	; 0x67fc
   16284:	e3401002 	movt	r1, #2
   16288:	e3060808 	movw	r0, #26632	; 0x6808
   1628c:	e3400002 	movt	r0, #2
   16290:	e30021d7 	movw	r2, #471	; 0x1d7
   16294:	eb000c6e 	bl	19454 <assertion_failed>
   16298:	e3580004 	cmp	r8, #4
   1629c:	9a000020 	bls	16324 <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x150>
   162a0:	e2488004 	sub	r8, r8, #4
   162a4:	e285100a 	add	r1, r5, #10
   162a8:	e1a02008 	mov	r2, r8
   162ac:	e1a00005 	mov	r0, r5
   162b0:	eb002b8e 	bl	210f0 <memcpy>
   162b4:	e3570000 	cmp	r7, #0
   162b8:	0a000021 	beq	16344 <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x170>
   162bc:	e5878000 	str	r8, [r7]
   162c0:	eaffffde 	b	16240 <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x6c>
   162c4:	e30617fc 	movw	r1, #26620	; 0x67fc
   162c8:	e3401002 	movt	r1, #2
   162cc:	e3060444 	movw	r0, #25668	; 0x6444
   162d0:	e3400002 	movt	r0, #2
   162d4:	e30021bf 	movw	r2, #447	; 0x1bf
   162d8:	eb000c5d 	bl	19454 <assertion_failed>
   162dc:	e3550000 	cmp	r5, #0
   162e0:	1affffc5 	bne	161fc <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x28>
   162e4:	e30617fc 	movw	r1, #26620	; 0x67fc
   162e8:	e3401002 	movt	r1, #2
   162ec:	e30503c4 	movw	r0, #21444	; 0x53c4
   162f0:	e3400002 	movt	r0, #2
   162f4:	e3a02d07 	mov	r2, #448	; 0x1c0
   162f8:	eb000c55 	bl	19454 <assertion_failed>
   162fc:	eaffffbe 	b	161fc <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x28>
   16300:	eb0016b1 	bl	1bdcc <CLogger::Get()>
   16304:	e58d8000 	str	r8, [sp]
   16308:	e3063644 	movw	r3, #26180	; 0x6644
   1630c:	e3403002 	movt	r3, #2
   16310:	e3a02002 	mov	r2, #2
   16314:	e59f1044 	ldr	r1, [pc, #68]	; 16360 <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x18c>
   16318:	e1a04006 	mov	r4, r6
   1631c:	eb0015e1 	bl	1baa8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   16320:	eaffffc6 	b	16240 <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x6c>
   16324:	e30617fc 	movw	r1, #26620	; 0x67fc
   16328:	e3401002 	movt	r1, #2
   1632c:	e306067c 	movw	r0, #26236	; 0x667c
   16330:	e3400002 	movt	r0, #2
   16334:	e3a02f76 	mov	r2, #472	; 0x1d8
   16338:	e3a04000 	mov	r4, #0
   1633c:	eb000c44 	bl	19454 <assertion_failed>
   16340:	eaffffbe 	b	16240 <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x6c>
   16344:	e30617fc 	movw	r1, #26620	; 0x67fc
   16348:	e3401002 	movt	r1, #2
   1634c:	e306045c 	movw	r0, #25692	; 0x645c
   16350:	e3400002 	movt	r0, #2
   16354:	e30021e3 	movw	r2, #483	; 0x1e3
   16358:	eb000c3d 	bl	19454 <assertion_failed>
   1635c:	eaffffd6 	b	162bc <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0xe8>
   16360:	000267f4 	.word	0x000267f4

00016364 <CLAN7800Device::SendFrame(void const*, unsigned int) [clone .part.0]>:
   16364:	e92d4070 	push	{r4, r5, r6, lr}
   16368:	e1a05000 	mov	r5, r0
   1636c:	e1a04002 	mov	r4, r2
   16370:	e24dde65 	sub	sp, sp, #1616	; 0x650
   16374:	e2516000 	subs	r6, r1, #0
   16378:	0a000017 	beq	163dc <CLAN7800Device::SendFrame(void const*, unsigned int) [clone .part.0]+0x78>
   1637c:	e1a01006 	mov	r1, r6
   16380:	e1a02004 	mov	r2, r4
   16384:	e28d0010 	add	r0, sp, #16
   16388:	eb002b58 	bl	210f0 <memcpy>
   1638c:	e5951014 	ldr	r1, [r5, #20]
   16390:	e3a02000 	mov	r2, #0
   16394:	e7f33054 	ubfx	r3, r4, #0, #20
   16398:	e3833501 	orr	r3, r3, #4194304	; 0x400000
   1639c:	e1510002 	cmp	r1, r2
   163a0:	e58d3008 	str	r3, [sp, #8]
   163a4:	e58d200c 	str	r2, [sp, #12]
   163a8:	0a000012 	beq	163f8 <CLAN7800Device::SendFrame(void const*, unsigned int) [clone .part.0]+0x94>
   163ac:	e1a00005 	mov	r0, r5
   163b0:	ebfff2fb 	bl	12fa4 <CUSBFunction::GetHost() const>
   163b4:	e5951014 	ldr	r1, [r5, #20]
   163b8:	e3a0c000 	mov	ip, #0
   163bc:	e2843008 	add	r3, r4, #8
   163c0:	e28d2008 	add	r2, sp, #8
   163c4:	e58dc000 	str	ip, [sp]
   163c8:	ebffdaa1 	bl	ce54 <CUSBHostController::Transfer(CUSBEndpoint*, void*, unsigned int, unsigned int)>
   163cc:	e1e00000 	mvn	r0, r0
   163d0:	e1a00fa0 	lsr	r0, r0, #31
   163d4:	e28dde65 	add	sp, sp, #1616	; 0x650
   163d8:	e8bd8070 	pop	{r4, r5, r6, pc}
   163dc:	e30617fc 	movw	r1, #26620	; 0x67fc
   163e0:	e3401002 	movt	r1, #2
   163e4:	e30503c4 	movw	r0, #21444	; 0x53c4
   163e8:	e3400002 	movt	r0, #2
   163ec:	e30021b2 	movw	r2, #434	; 0x1b2
   163f0:	eb000c17 	bl	19454 <assertion_failed>
   163f4:	eaffffe0 	b	1637c <CLAN7800Device::SendFrame(void const*, unsigned int) [clone .part.0]+0x18>
   163f8:	e30617fc 	movw	r1, #26620	; 0x67fc
   163fc:	e3401002 	movt	r1, #2
   16400:	e306040c 	movw	r0, #25612	; 0x640c
   16404:	e3400002 	movt	r0, #2
   16408:	e30021b9 	movw	r2, #441	; 0x1b9
   1640c:	eb000c10 	bl	19454 <assertion_failed>
   16410:	eaffffe5 	b	163ac <CLAN7800Device::SendFrame(void const*, unsigned int) [clone .part.0]+0x48>

00016414 <CLAN7800Device::SendFrame(void const*, unsigned int)>:
   16414:	e3520d19 	cmp	r2, #1600	; 0x640
   16418:	8a000000 	bhi	16420 <CLAN7800Device::SendFrame(void const*, unsigned int)+0xc>
   1641c:	eaffffd0 	b	16364 <CLAN7800Device::SendFrame(void const*, unsigned int) [clone .part.0]>
   16420:	e3a00000 	mov	r0, #0
   16424:	e12fff1e 	bx	lr

00016428 <CLAN7800Device::CLAN7800Device(CUSBFunction*)>:
   16428:	e92d4010 	push	{r4, lr}
   1642c:	e1a04000 	mov	r4, r0
   16430:	eb000367 	bl	171d4 <CNetDevice::CNetDevice(CUSBFunction*)>
   16434:	e59f201c 	ldr	r2, [pc, #28]	; 16458 <CLAN7800Device::CLAN7800Device(CUSBFunction*)+0x30>
   16438:	e3a03000 	mov	r3, #0
   1643c:	e2840018 	add	r0, r4, #24
   16440:	e5842000 	str	r2, [r4]
   16444:	e5843010 	str	r3, [r4, #16]
   16448:	e5843014 	str	r3, [r4, #20]
   1644c:	eb0002b2 	bl	16f1c <CMACAddress::CMACAddress()>
   16450:	e1a00004 	mov	r0, r4
   16454:	e8bd8010 	pop	{r4, pc}
   16458:	000267c0 	.word	0x000267c0

0001645c <CLAN7800Device::WriteReg(unsigned int, unsigned int)>:
   1645c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   16460:	e1a08000 	mov	r8, r0
   16464:	e1a06001 	mov	r6, r1
   16468:	e24dd018 	sub	sp, sp, #24
   1646c:	e3a04000 	mov	r4, #0
   16470:	e28d5018 	add	r5, sp, #24
   16474:	e5252004 	str	r2, [r5, #-4]!
   16478:	ebfff2c9 	bl	12fa4 <CUSBFunction::GetHost() const>
   1647c:	e1a07000 	mov	r7, r0
   16480:	e1a00008 	mov	r0, r8
   16484:	ebfff2b5 	bl	12f60 <CUSBFunction::GetEndpoint0() const>
   16488:	e6ff3076 	uxth	r3, r6
   1648c:	e1a01000 	mov	r1, r0
   16490:	e58d3004 	str	r3, [sp, #4]
   16494:	e58d5008 	str	r5, [sp, #8]
   16498:	e3a03004 	mov	r3, #4
   1649c:	e1a00007 	mov	r0, r7
   164a0:	e58d300c 	str	r3, [sp, #12]
   164a4:	e58d4000 	str	r4, [sp]
   164a8:	e3a030a0 	mov	r3, #160	; 0xa0
   164ac:	e3a02040 	mov	r2, #64	; 0x40
   164b0:	ebffda07 	bl	ccd4 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   164b4:	e1500004 	cmp	r0, r4
   164b8:	a3a00001 	movge	r0, #1
   164bc:	ba000001 	blt	164c8 <CLAN7800Device::WriteReg(unsigned int, unsigned int)+0x6c>
   164c0:	e28dd018 	add	sp, sp, #24
   164c4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   164c8:	eb00163f 	bl	1bdcc <CLogger::Get()>
   164cc:	e58d6000 	str	r6, [sp]
   164d0:	e3a02002 	mov	r2, #2
   164d4:	e59f1014 	ldr	r1, [pc, #20]	; 164f0 <CLAN7800Device::WriteReg(unsigned int, unsigned int)+0x94>
   164d8:	e3063838 	movw	r3, #26680	; 0x6838
   164dc:	e3403002 	movt	r3, #2
   164e0:	eb001570 	bl	1baa8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   164e4:	e1a00004 	mov	r0, r4
   164e8:	e28dd018 	add	sp, sp, #24
   164ec:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   164f0:	000267f4 	.word	0x000267f4

000164f4 <CLAN7800Device::ReadReg(unsigned int, unsigned int*)>:
   164f4:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   164f8:	e1a04000 	mov	r4, r0
   164fc:	e1a05001 	mov	r5, r1
   16500:	e24dd014 	sub	sp, sp, #20
   16504:	e1a07002 	mov	r7, r2
   16508:	ebfff2a5 	bl	12fa4 <CUSBFunction::GetHost() const>
   1650c:	e1a06000 	mov	r6, r0
   16510:	e1a00004 	mov	r0, r4
   16514:	e3a04000 	mov	r4, #0
   16518:	ebfff290 	bl	12f60 <CUSBFunction::GetEndpoint0() const>
   1651c:	e6ff3075 	uxth	r3, r5
   16520:	e1a01000 	mov	r1, r0
   16524:	e58d3004 	str	r3, [sp, #4]
   16528:	e3a02004 	mov	r2, #4
   1652c:	e58d7008 	str	r7, [sp, #8]
   16530:	e58d200c 	str	r2, [sp, #12]
   16534:	e1a00006 	mov	r0, r6
   16538:	e58d4000 	str	r4, [sp]
   1653c:	e3a030a1 	mov	r3, #161	; 0xa1
   16540:	e3a020c0 	mov	r2, #192	; 0xc0
   16544:	ebffd9e2 	bl	ccd4 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   16548:	e3500004 	cmp	r0, #4
   1654c:	03a00001 	moveq	r0, #1
   16550:	0a000007 	beq	16574 <CLAN7800Device::ReadReg(unsigned int, unsigned int*)+0x80>
   16554:	eb00161c 	bl	1bdcc <CLogger::Get()>
   16558:	e58d5000 	str	r5, [sp]
   1655c:	e30636b8 	movw	r3, #26296	; 0x66b8
   16560:	e3403002 	movt	r3, #2
   16564:	e3a02002 	mov	r2, #2
   16568:	e59f100c 	ldr	r1, [pc, #12]	; 1657c <CLAN7800Device::ReadReg(unsigned int, unsigned int*)+0x88>
   1656c:	eb00154d 	bl	1baa8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   16570:	e1a00004 	mov	r0, r4
   16574:	e28dd014 	add	sp, sp, #20
   16578:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   1657c:	000267f4 	.word	0x000267f4

00016580 <CLAN7800Device::WaitReg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>:
   16580:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16584:	e1a07000 	mov	r7, r0
   16588:	e1a08001 	mov	r8, r1
   1658c:	e24dd00c 	sub	sp, sp, #12
   16590:	e1a0a002 	mov	sl, r2
   16594:	e1a0b003 	mov	fp, r3
   16598:	e59d4030 	ldr	r4, [sp, #48]	; 0x30
   1659c:	e59d9034 	ldr	r9, [sp, #52]	; 0x34
   165a0:	eb00291c 	bl	20a18 <CTimer::Get()>
   165a4:	e2505000 	subs	r5, r0, #0
   165a8:	0a00001a 	beq	16618 <CLAN7800Device::WaitReg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x98>
   165ac:	e1a00005 	mov	r0, r5
   165b0:	eb002678 	bl	1ff98 <CTimer::GetTicks() const>
   165b4:	e1a06000 	mov	r6, r0
   165b8:	ea00000e 	b	165f8 <CLAN7800Device::WaitReg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x78>
   165bc:	e1a00005 	mov	r0, r5
   165c0:	eb002674 	bl	1ff98 <CTimer::GetTicks() const>
   165c4:	e0403006 	sub	r3, r0, r6
   165c8:	e28d2004 	add	r2, sp, #4
   165cc:	e1a01008 	mov	r1, r8
   165d0:	e1a00007 	mov	r0, r7
   165d4:	e1530009 	cmp	r3, r9
   165d8:	2a00000b 	bcs	1660c <CLAN7800Device::WaitReg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x8c>
   165dc:	ebffffc4 	bl	164f4 <CLAN7800Device::ReadReg(unsigned int, unsigned int*)>
   165e0:	e3500000 	cmp	r0, #0
   165e4:	0a000008 	beq	1660c <CLAN7800Device::WaitReg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x8c>
   165e8:	e59d3004 	ldr	r3, [sp, #4]
   165ec:	e003300a 	and	r3, r3, sl
   165f0:	e153000b 	cmp	r3, fp
   165f4:	0a000005 	beq	16610 <CLAN7800Device::WaitReg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x90>
   165f8:	e3540000 	cmp	r4, #0
   165fc:	0affffee 	beq	165bc <CLAN7800Device::WaitReg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x3c>
   16600:	e1a00004 	mov	r0, r4
   16604:	eb0028cd 	bl	20940 <CTimer::SimpleusDelay(unsigned int)>
   16608:	eaffffeb 	b	165bc <CLAN7800Device::WaitReg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x3c>
   1660c:	e3a00000 	mov	r0, #0
   16610:	e28dd00c 	add	sp, sp, #12
   16614:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16618:	e30617fc 	movw	r1, #26620	; 0x67fc
   1661c:	e3401002 	movt	r1, #2
   16620:	e3060690 	movw	r0, #26256	; 0x6690
   16624:	e3400002 	movt	r0, #2
   16628:	e300228e 	movw	r2, #654	; 0x28e
   1662c:	eb000b88 	bl	19454 <assertion_failed>
   16630:	eaffffdd 	b	165ac <CLAN7800Device::WaitReg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x2c>

00016634 <CLAN7800Device::PHYWrite(unsigned char, unsigned short)>:
   16634:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   16638:	e351001f 	cmp	r1, #31
   1663c:	e1a05001 	mov	r5, r1
   16640:	e24dd008 	sub	sp, sp, #8
   16644:	e1a06000 	mov	r6, r0
   16648:	e1a08002 	mov	r8, r2
   1664c:	8a000024 	bhi	166e4 <CLAN7800Device::PHYWrite(unsigned char, unsigned short)+0xb0>
   16650:	e3a04000 	mov	r4, #0
   16654:	e3a07064 	mov	r7, #100	; 0x64
   16658:	e58d4000 	str	r4, [sp]
   1665c:	e1a03004 	mov	r3, r4
   16660:	e58d7004 	str	r7, [sp, #4]
   16664:	e3a02001 	mov	r2, #1
   16668:	e3a01e12 	mov	r1, #288	; 0x120
   1666c:	e1a00006 	mov	r0, r6
   16670:	ebffffc2 	bl	16580 <CLAN7800Device::WaitReg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
   16674:	e1500004 	cmp	r0, r4
   16678:	1a000002 	bne	16688 <CLAN7800Device::PHYWrite(unsigned char, unsigned short)+0x54>
   1667c:	e3a00000 	mov	r0, #0
   16680:	e28dd008 	add	sp, sp, #8
   16684:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   16688:	e1a02008 	mov	r2, r8
   1668c:	e3a01f49 	mov	r1, #292	; 0x124
   16690:	e1a00006 	mov	r0, r6
   16694:	ebffff70 	bl	1645c <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   16698:	e3500000 	cmp	r0, #0
   1669c:	0afffff6 	beq	1667c <CLAN7800Device::PHYWrite(unsigned char, unsigned short)+0x48>
   166a0:	e1a02305 	lsl	r2, r5, #6
   166a4:	e3a01e12 	mov	r1, #288	; 0x120
   166a8:	e2022d1f 	and	r2, r2, #1984	; 0x7c0
   166ac:	e1a00006 	mov	r0, r6
   166b0:	e3822b02 	orr	r2, r2, #2048	; 0x800
   166b4:	e3822003 	orr	r2, r2, #3
   166b8:	ebffff67 	bl	1645c <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   166bc:	e3500000 	cmp	r0, #0
   166c0:	0affffed 	beq	1667c <CLAN7800Device::PHYWrite(unsigned char, unsigned short)+0x48>
   166c4:	e58d7004 	str	r7, [sp, #4]
   166c8:	e1a03004 	mov	r3, r4
   166cc:	e58d4000 	str	r4, [sp]
   166d0:	e1a00006 	mov	r0, r6
   166d4:	e3a02001 	mov	r2, #1
   166d8:	e3a01e12 	mov	r1, #288	; 0x120
   166dc:	ebffffa7 	bl	16580 <CLAN7800Device::WaitReg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
   166e0:	eaffffe6 	b	16680 <CLAN7800Device::PHYWrite(unsigned char, unsigned short)+0x4c>
   166e4:	e30617fc 	movw	r1, #26620	; 0x67fc
   166e8:	e3401002 	movt	r1, #2
   166ec:	e306069c 	movw	r0, #26268	; 0x669c
   166f0:	e3400002 	movt	r0, #2
   166f4:	e3002259 	movw	r2, #601	; 0x259
   166f8:	eb000b55 	bl	19454 <assertion_failed>
   166fc:	eaffffd3 	b	16650 <CLAN7800Device::PHYWrite(unsigned char, unsigned short)+0x1c>

00016700 <CLAN7800Device::PHYRead(unsigned char, unsigned short*)>:
   16700:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   16704:	e351001f 	cmp	r1, #31
   16708:	e1a04001 	mov	r4, r1
   1670c:	e24dd010 	sub	sp, sp, #16
   16710:	e1a06000 	mov	r6, r0
   16714:	e1a08002 	mov	r8, r2
   16718:	8a00002b 	bhi	167cc <CLAN7800Device::PHYRead(unsigned char, unsigned short*)+0xcc>
   1671c:	e3a05000 	mov	r5, #0
   16720:	e3a07064 	mov	r7, #100	; 0x64
   16724:	e58d5000 	str	r5, [sp]
   16728:	e1a03005 	mov	r3, r5
   1672c:	e58d7004 	str	r7, [sp, #4]
   16730:	e3a02001 	mov	r2, #1
   16734:	e3a01e12 	mov	r1, #288	; 0x120
   16738:	e1a00006 	mov	r0, r6
   1673c:	ebffff8f 	bl	16580 <CLAN7800Device::WaitReg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
   16740:	e1500005 	cmp	r0, r5
   16744:	1a000003 	bne	16758 <CLAN7800Device::PHYRead(unsigned char, unsigned short*)+0x58>
   16748:	e3a04000 	mov	r4, #0
   1674c:	e1a00004 	mov	r0, r4
   16750:	e28dd010 	add	sp, sp, #16
   16754:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   16758:	e1a02304 	lsl	r2, r4, #6
   1675c:	e3a01e12 	mov	r1, #288	; 0x120
   16760:	e2022d1f 	and	r2, r2, #1984	; 0x7c0
   16764:	e1a00006 	mov	r0, r6
   16768:	e3822b02 	orr	r2, r2, #2048	; 0x800
   1676c:	e3822001 	orr	r2, r2, #1
   16770:	ebffff39 	bl	1645c <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   16774:	e3500000 	cmp	r0, #0
   16778:	0afffff2 	beq	16748 <CLAN7800Device::PHYRead(unsigned char, unsigned short*)+0x48>
   1677c:	e58d7004 	str	r7, [sp, #4]
   16780:	e1a03005 	mov	r3, r5
   16784:	e58d5000 	str	r5, [sp]
   16788:	e3a02001 	mov	r2, #1
   1678c:	e3a01e12 	mov	r1, #288	; 0x120
   16790:	e1a00006 	mov	r0, r6
   16794:	ebffff79 	bl	16580 <CLAN7800Device::WaitReg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
   16798:	e3500000 	cmp	r0, #0
   1679c:	0affffe9 	beq	16748 <CLAN7800Device::PHYRead(unsigned char, unsigned short*)+0x48>
   167a0:	e1a00006 	mov	r0, r6
   167a4:	e28d200c 	add	r2, sp, #12
   167a8:	e3a01f49 	mov	r1, #292	; 0x124
   167ac:	ebffff50 	bl	164f4 <CLAN7800Device::ReadReg(unsigned int, unsigned int*)>
   167b0:	e2504000 	subs	r4, r0, #0
   167b4:	0affffe3 	beq	16748 <CLAN7800Device::PHYRead(unsigned char, unsigned short*)+0x48>
   167b8:	e3580000 	cmp	r8, #0
   167bc:	0a000009 	beq	167e8 <CLAN7800Device::PHYRead(unsigned char, unsigned short*)+0xe8>
   167c0:	e59d300c 	ldr	r3, [sp, #12]
   167c4:	e1c830b0 	strh	r3, [r8]
   167c8:	eaffffdf 	b	1674c <CLAN7800Device::PHYRead(unsigned char, unsigned short*)+0x4c>
   167cc:	e30617fc 	movw	r1, #26620	; 0x67fc
   167d0:	e3401002 	movt	r1, #2
   167d4:	e306069c 	movw	r0, #26268	; 0x669c
   167d8:	e3400002 	movt	r0, #2
   167dc:	e3a02e27 	mov	r2, #624	; 0x270
   167e0:	eb000b1b 	bl	19454 <assertion_failed>
   167e4:	eaffffcc 	b	1671c <CLAN7800Device::PHYRead(unsigned char, unsigned short*)+0x1c>
   167e8:	e30617fc 	movw	r1, #26620	; 0x67fc
   167ec:	e3401002 	movt	r1, #2
   167f0:	e30606ac 	movw	r0, #26284	; 0x66ac
   167f4:	e3400002 	movt	r0, #2
   167f8:	e3a02fa1 	mov	r2, #644	; 0x284
   167fc:	eb000b14 	bl	19454 <assertion_failed>
   16800:	eaffffee 	b	167c0 <CLAN7800Device::PHYRead(unsigned char, unsigned short*)+0xc0>

00016804 <CLAN7800Device::IsLinkUp()>:
   16804:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   16808:	e3a01001 	mov	r1, #1
   1680c:	e24dd00c 	sub	sp, sp, #12
   16810:	e28d2006 	add	r2, sp, #6
   16814:	ebffffb9 	bl	16700 <CLAN7800Device::PHYRead(unsigned char, unsigned short*)>
   16818:	e3500000 	cmp	r0, #0
   1681c:	11dd00b6 	ldrhne	r0, [sp, #6]
   16820:	17e00150 	ubfxne	r0, r0, #2, #1
   16824:	e28dd00c 	add	sp, sp, #12
   16828:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

0001682c <CLAN7800Device::GetLinkSpeed()>:
   1682c:	e92d4010 	push	{r4, lr}
   16830:	e3a02000 	mov	r2, #0
   16834:	e3a0101f 	mov	r1, #31
   16838:	e24dd008 	sub	sp, sp, #8
   1683c:	e1a04000 	mov	r4, r0
   16840:	ebffff7b 	bl	16634 <CLAN7800Device::PHYWrite(unsigned char, unsigned short)>
   16844:	e3500000 	cmp	r0, #0
   16848:	0a000015 	beq	168a4 <CLAN7800Device::GetLinkSpeed()+0x78>
   1684c:	e1a00004 	mov	r0, r4
   16850:	e28d2006 	add	r2, sp, #6
   16854:	e3a0101c 	mov	r1, #28
   16858:	ebffffa8 	bl	16700 <CLAN7800Device::PHYRead(unsigned char, unsigned short*)>
   1685c:	e3500000 	cmp	r0, #0
   16860:	0a00000f 	beq	168a4 <CLAN7800Device::GetLinkSpeed()+0x78>
   16864:	e1dd30b6 	ldrh	r3, [sp, #6]
   16868:	e3130901 	tst	r3, #16384	; 0x4000
   1686c:	1a00000f 	bne	168b0 <CLAN7800Device::GetLinkSpeed()+0x84>
   16870:	e3130902 	tst	r3, #32768	; 0x8000
   16874:	0a00000a 	beq	168a4 <CLAN7800Device::GetLinkSpeed()+0x78>
   16878:	e7e231d3 	ubfx	r3, r3, #3, #3
   1687c:	e3530006 	cmp	r3, #6
   16880:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   16884:	ea000006 	b	168a4 <CLAN7800Device::GetLinkSpeed()+0x78>
   16888:	000168f8 	.word	0x000168f8
   1688c:	000168d0 	.word	0x000168d0
   16890:	000168d8 	.word	0x000168d8
   16894:	000168a4 	.word	0x000168a4
   16898:	000168e0 	.word	0x000168e0
   1689c:	000168e8 	.word	0x000168e8
   168a0:	000168f0 	.word	0x000168f0
   168a4:	e3a00006 	mov	r0, #6
   168a8:	e28dd008 	add	sp, sp, #8
   168ac:	e8bd8010 	pop	{r4, pc}
   168b0:	e30617fc 	movw	r1, #26620	; 0x67fc
   168b4:	e3401002 	movt	r1, #2
   168b8:	e3060854 	movw	r0, #26708	; 0x6854
   168bc:	e3400002 	movt	r0, #2
   168c0:	e3002203 	movw	r2, #515	; 0x203
   168c4:	eb000ae2 	bl	19454 <assertion_failed>
   168c8:	e1dd30b6 	ldrh	r3, [sp, #6]
   168cc:	eaffffe7 	b	16870 <CLAN7800Device::GetLinkSpeed()+0x44>
   168d0:	e3a00002 	mov	r0, #2
   168d4:	eafffff3 	b	168a8 <CLAN7800Device::GetLinkSpeed()+0x7c>
   168d8:	e3a00004 	mov	r0, #4
   168dc:	eafffff1 	b	168a8 <CLAN7800Device::GetLinkSpeed()+0x7c>
   168e0:	e3a00001 	mov	r0, #1
   168e4:	eaffffef 	b	168a8 <CLAN7800Device::GetLinkSpeed()+0x7c>
   168e8:	e3a00003 	mov	r0, #3
   168ec:	eaffffed 	b	168a8 <CLAN7800Device::GetLinkSpeed()+0x7c>
   168f0:	e3a00005 	mov	r0, #5
   168f4:	eaffffeb 	b	168a8 <CLAN7800Device::GetLinkSpeed()+0x7c>
   168f8:	e3a00000 	mov	r0, #0
   168fc:	eaffffe9 	b	168a8 <CLAN7800Device::GetLinkSpeed()+0x7c>

00016900 <CLAN7800Device::InitPHY()>:
   16900:	e92d4010 	push	{r4, lr}
   16904:	e3a02000 	mov	r2, #0
   16908:	e3a0101f 	mov	r1, #31
   1690c:	e24dd008 	sub	sp, sp, #8
   16910:	e1a04000 	mov	r4, r0
   16914:	ebffff46 	bl	16634 <CLAN7800Device::PHYWrite(unsigned char, unsigned short)>
   16918:	e3500000 	cmp	r0, #0
   1691c:	1a000001 	bne	16928 <CLAN7800Device::InitPHY()+0x28>
   16920:	e28dd008 	add	sp, sp, #8
   16924:	e8bd8010 	pop	{r4, pc}
   16928:	e28d2006 	add	r2, sp, #6
   1692c:	e3a0101d 	mov	r1, #29
   16930:	e1a00004 	mov	r0, r4
   16934:	ebffff71 	bl	16700 <CLAN7800Device::PHYRead(unsigned char, unsigned short*)>
   16938:	e3500000 	cmp	r0, #0
   1693c:	0afffff7 	beq	16920 <CLAN7800Device::InitPHY()+0x20>
   16940:	e1dd20b6 	ldrh	r2, [sp, #6]
   16944:	e1a00004 	mov	r0, r4
   16948:	e3a0101d 	mov	r1, #29
   1694c:	e3c220ff 	bic	r2, r2, #255	; 0xff
   16950:	e3822061 	orr	r2, r2, #97	; 0x61
   16954:	e1cd20b6 	strh	r2, [sp, #6]
   16958:	ebffff35 	bl	16634 <CLAN7800Device::PHYWrite(unsigned char, unsigned short)>
   1695c:	e28dd008 	add	sp, sp, #8
   16960:	e8bd8010 	pop	{r4, pc}

00016964 <CLAN7800Device::ReadWriteReg(unsigned int, unsigned int, unsigned int)>:
   16964:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   16968:	e1a05002 	mov	r5, r2
   1696c:	e1a04003 	mov	r4, r3
   16970:	e24dd00c 	sub	sp, sp, #12
   16974:	e1a06000 	mov	r6, r0
   16978:	e28d2004 	add	r2, sp, #4
   1697c:	e1a07001 	mov	r7, r1
   16980:	ebfffedb 	bl	164f4 <CLAN7800Device::ReadReg(unsigned int, unsigned int*)>
   16984:	e3500000 	cmp	r0, #0
   16988:	0a000006 	beq	169a8 <CLAN7800Device::ReadWriteReg(unsigned int, unsigned int, unsigned int)+0x44>
   1698c:	e59d2004 	ldr	r2, [sp, #4]
   16990:	e1a01007 	mov	r1, r7
   16994:	e1a00006 	mov	r0, r6
   16998:	e0022004 	and	r2, r2, r4
   1699c:	e1822005 	orr	r2, r2, r5
   169a0:	e58d2004 	str	r2, [sp, #4]
   169a4:	ebfffeac 	bl	1645c <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   169a8:	e28dd00c 	add	sp, sp, #12
   169ac:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}

000169b0 <CLAN7800Device::InitMACAddress()>:
   169b0:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   169b4:	e3a01000 	mov	r1, #0
   169b8:	e1a04000 	mov	r4, r0
   169bc:	e24dd03c 	sub	sp, sp, #60	; 0x3c
   169c0:	e28d000c 	add	r0, sp, #12
   169c4:	eb000ac6 	bl	194e4 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   169c8:	e3a03000 	mov	r3, #0
   169cc:	e28d000c 	add	r0, sp, #12
   169d0:	e58d3000 	str	r3, [sp]
   169d4:	e3a01003 	mov	r1, #3
   169d8:	e3401001 	movt	r1, #1
   169dc:	e3a03014 	mov	r3, #20
   169e0:	e28d2024 	add	r2, sp, #36	; 0x24
   169e4:	eb000b0b 	bl	19618 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   169e8:	e3500000 	cmp	r0, #0
   169ec:	1a000005 	bne	16a08 <CLAN7800Device::InitMACAddress()+0x58>
   169f0:	e3a04000 	mov	r4, #0
   169f4:	e28d000c 	add	r0, sp, #12
   169f8:	eb000ac0 	bl	19500 <CBcmPropertyTags::~CBcmPropertyTags()>
   169fc:	e1a00004 	mov	r0, r4
   16a00:	e28dd03c 	add	sp, sp, #60	; 0x3c
   16a04:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   16a08:	e2846018 	add	r6, r4, #24
   16a0c:	e28d1030 	add	r1, sp, #48	; 0x30
   16a10:	e1a00006 	mov	r0, r6
   16a14:	eb000167 	bl	16fb8 <CMACAddress::Set(unsigned char const*)>
   16a18:	e59d5030 	ldr	r5, [sp, #48]	; 0x30
   16a1c:	e3a01f47 	mov	r1, #284	; 0x11c
   16a20:	e1a00004 	mov	r0, r4
   16a24:	e1a02005 	mov	r2, r5
   16a28:	e1dd73b4 	ldrh	r7, [sp, #52]	; 0x34
   16a2c:	ebfffe8a 	bl	1645c <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   16a30:	e3500000 	cmp	r0, #0
   16a34:	0affffed 	beq	169f0 <CLAN7800Device::InitMACAddress()+0x40>
   16a38:	e1a02007 	mov	r2, r7
   16a3c:	e3a01f46 	mov	r1, #280	; 0x118
   16a40:	e1a00004 	mov	r0, r4
   16a44:	ebfffe84 	bl	1645c <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   16a48:	e3500000 	cmp	r0, #0
   16a4c:	0affffe7 	beq	169f0 <CLAN7800Device::InitMACAddress()+0x40>
   16a50:	e1a02005 	mov	r2, r5
   16a54:	e3001404 	movw	r1, #1028	; 0x404
   16a58:	e1a00004 	mov	r0, r4
   16a5c:	ebfffe7e 	bl	1645c <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   16a60:	e3500000 	cmp	r0, #0
   16a64:	0affffe1 	beq	169f0 <CLAN7800Device::InitMACAddress()+0x40>
   16a68:	e1a00004 	mov	r0, r4
   16a6c:	e3872102 	orr	r2, r7, #-2147483648	; 0x80000000
   16a70:	e3a01b01 	mov	r1, #1024	; 0x400
   16a74:	ebfffe78 	bl	1645c <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   16a78:	e2504000 	subs	r4, r0, #0
   16a7c:	0affffdb 	beq	169f0 <CLAN7800Device::InitMACAddress()+0x40>
   16a80:	e28d0014 	add	r0, sp, #20
   16a84:	eb002071 	bl	1ec50 <CString::CString()>
   16a88:	e28d1014 	add	r1, sp, #20
   16a8c:	e1a00006 	mov	r0, r6
   16a90:	eb0001a8 	bl	17138 <CMACAddress::Format(CString*) const>
   16a94:	eb0014cc 	bl	1bdcc <CLogger::Get()>
   16a98:	e1a05000 	mov	r5, r0
   16a9c:	e28d0014 	add	r0, sp, #20
   16aa0:	eb002081 	bl	1ecac <CString::operator char const*() const>
   16aa4:	e3a02004 	mov	r2, #4
   16aa8:	e58d0000 	str	r0, [sp]
   16aac:	e3063498 	movw	r3, #25752	; 0x6498
   16ab0:	e3403002 	movt	r3, #2
   16ab4:	e1a00005 	mov	r0, r5
   16ab8:	e59f100c 	ldr	r1, [pc, #12]	; 16acc <CLAN7800Device::InitMACAddress()+0x11c>
   16abc:	eb0013f9 	bl	1baa8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   16ac0:	e28d0014 	add	r0, sp, #20
   16ac4:	eb00202f 	bl	1eb88 <CString::~CString()>
   16ac8:	eaffffc9 	b	169f4 <CLAN7800Device::InitMACAddress()+0x44>
   16acc:	000267f4 	.word	0x000267f4

00016ad0 <CLAN7800Device::Configure()>:
   16ad0:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   16ad4:	e1a05000 	mov	r5, r0
   16ad8:	e24dd014 	sub	sp, sp, #20
   16adc:	ebfff0ff 	bl	12ee0 <CUSBFunction::GetNumEndpoints() const>
   16ae0:	e3500003 	cmp	r0, #3
   16ae4:	0a000004 	beq	16afc <CLAN7800Device::Configure()+0x2c>
   16ae8:	ea000027 	b	16b8c <CLAN7800Device::Configure()+0xbc>
   16aec:	e5d43003 	ldrb	r3, [r4, #3]
   16af0:	e203303f 	and	r3, r3, #63	; 0x3f
   16af4:	e3530002 	cmp	r3, #2
   16af8:	0a00002a 	beq	16ba8 <CLAN7800Device::Configure()+0xd8>
   16afc:	e3a01005 	mov	r1, #5
   16b00:	e1a00005 	mov	r0, r5
   16b04:	ebfff168 	bl	130ac <CUSBFunction::GetDescriptor(unsigned char)>
   16b08:	e2504000 	subs	r4, r0, #0
   16b0c:	1afffff6 	bne	16aec <CLAN7800Device::Configure()+0x1c>
   16b10:	e5953010 	ldr	r3, [r5, #16]
   16b14:	e1a00005 	mov	r0, r5
   16b18:	e3530000 	cmp	r3, #0
   16b1c:	0a00001b 	beq	16b90 <CLAN7800Device::Configure()+0xc0>
   16b20:	e5953014 	ldr	r3, [r5, #20]
   16b24:	e3530000 	cmp	r3, #0
   16b28:	0a000018 	beq	16b90 <CLAN7800Device::Configure()+0xc0>
   16b2c:	ebfff12d 	bl	12fe8 <CUSBFunction::Configure()>
   16b30:	e2506000 	subs	r6, r0, #0
   16b34:	0a00002c 	beq	16bec <CLAN7800Device::Configure()+0x11c>
   16b38:	e28d200c 	add	r2, sp, #12
   16b3c:	e1a01004 	mov	r1, r4
   16b40:	e1a00005 	mov	r0, r5
   16b44:	ebfffe6a 	bl	164f4 <CLAN7800Device::ReadReg(unsigned int, unsigned int*)>
   16b48:	e3500000 	cmp	r0, #0
   16b4c:	0a000002 	beq	16b5c <CLAN7800Device::Configure()+0x8c>
   16b50:	e1dd30be 	ldrh	r3, [sp, #14]
   16b54:	e3530b1e 	cmp	r3, #30720	; 0x7800
   16b58:	0a000039 	beq	16c44 <CLAN7800Device::Configure()+0x174>
   16b5c:	eb00149a 	bl	1bdcc <CLogger::Get()>
   16b60:	e1dd30be 	ldrh	r3, [sp, #14]
   16b64:	e58d3000 	str	r3, [sp]
   16b68:	e3a02001 	mov	r2, #1
   16b6c:	e59f13a4 	ldr	r1, [pc, #932]	; 16f18 <CLAN7800Device::Configure()+0x448>
   16b70:	e3a06000 	mov	r6, #0
   16b74:	e306387c 	movw	r3, #26748	; 0x687c
   16b78:	e3403002 	movt	r3, #2
   16b7c:	eb0013c9 	bl	1baa8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   16b80:	e1a00006 	mov	r0, r6
   16b84:	e28dd014 	add	sp, sp, #20
   16b88:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   16b8c:	e1a00005 	mov	r0, r5
   16b90:	e59f1380 	ldr	r1, [pc, #896]	; 16f18 <CLAN7800Device::Configure()+0x448>
   16b94:	ebfff157 	bl	130f8 <CUSBFunction::ConfigurationError(char const*) const>
   16b98:	e3a06000 	mov	r6, #0
   16b9c:	e1a00006 	mov	r0, r6
   16ba0:	e28dd014 	add	sp, sp, #20
   16ba4:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   16ba8:	e1d430d2 	ldrsb	r3, [r4, #2]
   16bac:	e1a00005 	mov	r0, r5
   16bb0:	e3530000 	cmp	r3, #0
   16bb4:	ba000015 	blt	16c10 <CLAN7800Device::Configure()+0x140>
   16bb8:	e5953014 	ldr	r3, [r5, #20]
   16bbc:	e3530000 	cmp	r3, #0
   16bc0:	1afffff1 	bne	16b8c <CLAN7800Device::Configure()+0xbc>
   16bc4:	ebfff0d5 	bl	12f20 <CUSBFunction::GetDevice() const>
   16bc8:	e1a07000 	mov	r7, r0
   16bcc:	e3a00014 	mov	r0, #20
   16bd0:	eb002d2a 	bl	22080 <operator new(unsigned int)>
   16bd4:	e1a02004 	mov	r2, r4
   16bd8:	e1a01007 	mov	r1, r7
   16bdc:	e1a06000 	mov	r6, r0
   16be0:	ebffd725 	bl	c87c <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   16be4:	e5856014 	str	r6, [r5, #20]
   16be8:	eaffffc3 	b	16afc <CLAN7800Device::Configure()+0x2c>
   16bec:	eb001476 	bl	1bdcc <CLogger::Get()>
   16bf0:	e3a02001 	mov	r2, #1
   16bf4:	e59f131c 	ldr	r1, [pc, #796]	; 16f18 <CLAN7800Device::Configure()+0x448>
   16bf8:	e30532c4 	movw	r3, #21188	; 0x52c4
   16bfc:	e3403002 	movt	r3, #2
   16c00:	eb0013a8 	bl	1baa8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   16c04:	e1a00006 	mov	r0, r6
   16c08:	e28dd014 	add	sp, sp, #20
   16c0c:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   16c10:	e5953010 	ldr	r3, [r5, #16]
   16c14:	e3530000 	cmp	r3, #0
   16c18:	1affffdc 	bne	16b90 <CLAN7800Device::Configure()+0xc0>
   16c1c:	ebfff0bf 	bl	12f20 <CUSBFunction::GetDevice() const>
   16c20:	e1a07000 	mov	r7, r0
   16c24:	e3a00014 	mov	r0, #20
   16c28:	eb002d14 	bl	22080 <operator new(unsigned int)>
   16c2c:	e1a02004 	mov	r2, r4
   16c30:	e1a01007 	mov	r1, r7
   16c34:	e1a06000 	mov	r6, r0
   16c38:	ebffd70f 	bl	c87c <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   16c3c:	e5856010 	str	r6, [r5, #16]
   16c40:	eaffffad 	b	16afc <CLAN7800Device::Configure()+0x2c>
   16c44:	e3e03000 	mvn	r3, #0
   16c48:	e3a02002 	mov	r2, #2
   16c4c:	e3a01010 	mov	r1, #16
   16c50:	e1a00005 	mov	r0, r5
   16c54:	ebffff42 	bl	16964 <CLAN7800Device::ReadWriteReg(unsigned int, unsigned int, unsigned int)>
   16c58:	e3500000 	cmp	r0, #0
   16c5c:	0a000009 	beq	16c88 <CLAN7800Device::Configure()+0x1b8>
   16c60:	e1a03004 	mov	r3, r4
   16c64:	e3a06ffa 	mov	r6, #1000	; 0x3e8
   16c68:	e3a07064 	mov	r7, #100	; 0x64
   16c6c:	e3a02002 	mov	r2, #2
   16c70:	e1cd60f0 	strd	r6, [sp]
   16c74:	e3a01010 	mov	r1, #16
   16c78:	e1a00005 	mov	r0, r5
   16c7c:	ebfffe3f 	bl	16580 <CLAN7800Device::WaitReg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
   16c80:	e3500000 	cmp	r0, #0
   16c84:	1a000007 	bne	16ca8 <CLAN7800Device::Configure()+0x1d8>
   16c88:	eb00144f 	bl	1bdcc <CLogger::Get()>
   16c8c:	e3063894 	movw	r3, #26772	; 0x6894
   16c90:	e3403002 	movt	r3, #2
   16c94:	e3a02001 	mov	r2, #1
   16c98:	e59f1278 	ldr	r1, [pc, #632]	; 16f18 <CLAN7800Device::Configure()+0x448>
   16c9c:	eb001381 	bl	1baa8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   16ca0:	e3a06000 	mov	r6, #0
   16ca4:	eaffffbc 	b	16b9c <CLAN7800Device::Configure()+0xcc>
   16ca8:	e1a00005 	mov	r0, r5
   16cac:	ebffff3f 	bl	169b0 <CLAN7800Device::InitMACAddress()>
   16cb0:	e2506000 	subs	r6, r0, #0
   16cb4:	0a00005d 	beq	16e30 <CLAN7800Device::Configure()+0x360>
   16cb8:	e3a02018 	mov	r2, #24
   16cbc:	e3a01090 	mov	r1, #144	; 0x90
   16cc0:	e1a00005 	mov	r0, r5
   16cc4:	ebfffde4 	bl	1645c <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   16cc8:	e3500000 	cmp	r0, #0
   16ccc:	0affffb1 	beq	16b98 <CLAN7800Device::Configure()+0xc8>
   16cd0:	e3a02b02 	mov	r2, #2048	; 0x800
   16cd4:	e3a01094 	mov	r1, #148	; 0x94
   16cd8:	e1a00005 	mov	r0, r5
   16cdc:	ebfffdde 	bl	1645c <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   16ce0:	e3500000 	cmp	r0, #0
   16ce4:	0affffab 	beq	16b98 <CLAN7800Device::Configure()+0xc8>
   16ce8:	e3e03010 	mvn	r3, #16
   16cec:	e3a02603 	mov	r2, #3145728	; 0x300000
   16cf0:	e3a01010 	mov	r1, #16
   16cf4:	e1a00005 	mov	r0, r5
   16cf8:	ebffff19 	bl	16964 <CLAN7800Device::ReadWriteReg(unsigned int, unsigned int, unsigned int)>
   16cfc:	e3500000 	cmp	r0, #0
   16d00:	0affffa4 	beq	16b98 <CLAN7800Device::Configure()+0xc8>
   16d04:	e3e03040 	mvn	r3, #64	; 0x40
   16d08:	e3a02020 	mov	r2, #32
   16d0c:	e3a01080 	mov	r1, #128	; 0x80
   16d10:	e1a00005 	mov	r0, r5
   16d14:	ebffff12 	bl	16964 <CLAN7800Device::ReadWriteReg(unsigned int, unsigned int, unsigned int)>
   16d18:	e3500000 	cmp	r0, #0
   16d1c:	0affff9d 	beq	16b98 <CLAN7800Device::Configure()+0xc8>
   16d20:	e3a02017 	mov	r2, #23
   16d24:	e3a010c8 	mov	r1, #200	; 0xc8
   16d28:	e1a00005 	mov	r0, r5
   16d2c:	ebfffdca 	bl	1645c <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   16d30:	e3500000 	cmp	r0, #0
   16d34:	0affff97 	beq	16b98 <CLAN7800Device::Configure()+0xc8>
   16d38:	e3a02017 	mov	r2, #23
   16d3c:	e3a010cc 	mov	r1, #204	; 0xcc
   16d40:	e1a00005 	mov	r0, r5
   16d44:	ebfffdc4 	bl	1645c <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   16d48:	e3500000 	cmp	r0, #0
   16d4c:	0affff91 	beq	16b98 <CLAN7800Device::Configure()+0xc8>
   16d50:	e3a02000 	mov	r2, #0
   16d54:	e3a01098 	mov	r1, #152	; 0x98
   16d58:	e1a00005 	mov	r0, r5
   16d5c:	ebfffdbe 	bl	1645c <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   16d60:	e3500000 	cmp	r0, #0
   16d64:	0affff8b 	beq	16b98 <CLAN7800Device::Configure()+0xc8>
   16d68:	e3e02000 	mvn	r2, #0
   16d6c:	e3a0100c 	mov	r1, #12
   16d70:	e1a00005 	mov	r0, r5
   16d74:	ebfffdb8 	bl	1645c <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   16d78:	e3500000 	cmp	r0, #0
   16d7c:	0affff85 	beq	16b98 <CLAN7800Device::Configure()+0xc8>
   16d80:	e3a02000 	mov	r2, #0
   16d84:	e3a01f43 	mov	r1, #268	; 0x10c
   16d88:	e1a00005 	mov	r0, r5
   16d8c:	ebfffdb2 	bl	1645c <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   16d90:	e3500000 	cmp	r0, #0
   16d94:	0affff7f 	beq	16b98 <CLAN7800Device::Configure()+0xc8>
   16d98:	e3a02000 	mov	r2, #0
   16d9c:	e3a010d0 	mov	r1, #208	; 0xd0
   16da0:	e1a00005 	mov	r0, r5
   16da4:	ebfffdac 	bl	1645c <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   16da8:	e3500000 	cmp	r0, #0
   16dac:	0affff79 	beq	16b98 <CLAN7800Device::Configure()+0xc8>
   16db0:	e3e03000 	mvn	r3, #0
   16db4:	e3002402 	movw	r2, #1026	; 0x402
   16db8:	e3a010b0 	mov	r1, #176	; 0xb0
   16dbc:	e1a00005 	mov	r0, r5
   16dc0:	ebfffee7 	bl	16964 <CLAN7800Device::ReadWriteReg(unsigned int, unsigned int, unsigned int)>
   16dc4:	e3500000 	cmp	r0, #0
   16dc8:	0affff72 	beq	16b98 <CLAN7800Device::Configure()+0xc8>
   16dcc:	e3e03000 	mvn	r3, #0
   16dd0:	e3a02010 	mov	r2, #16
   16dd4:	e3a01014 	mov	r1, #20
   16dd8:	e1a00005 	mov	r0, r5
   16ddc:	ebfffee0 	bl	16964 <CLAN7800Device::ReadWriteReg(unsigned int, unsigned int, unsigned int)>
   16de0:	e3500000 	cmp	r0, #0
   16de4:	0a00000a 	beq	16e14 <CLAN7800Device::Configure()+0x344>
   16de8:	e3a03064 	mov	r3, #100	; 0x64
   16dec:	e3a02ffa 	mov	r2, #1000	; 0x3e8
   16df0:	e58d3004 	str	r3, [sp, #4]
   16df4:	e3a01014 	mov	r1, #20
   16df8:	e58d2000 	str	r2, [sp]
   16dfc:	e3a03080 	mov	r3, #128	; 0x80
   16e00:	e3a02090 	mov	r2, #144	; 0x90
   16e04:	e1a00005 	mov	r0, r5
   16e08:	ebfffddc 	bl	16580 <CLAN7800Device::WaitReg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
   16e0c:	e3500000 	cmp	r0, #0
   16e10:	1a00000d 	bne	16e4c <CLAN7800Device::Configure()+0x37c>
   16e14:	eb0013ec 	bl	1bdcc <CLogger::Get()>
   16e18:	e30638bc 	movw	r3, #26812	; 0x68bc
   16e1c:	e3403002 	movt	r3, #2
   16e20:	e3a02001 	mov	r2, #1
   16e24:	e59f10ec 	ldr	r1, [pc, #236]	; 16f18 <CLAN7800Device::Configure()+0x448>
   16e28:	eb00131e 	bl	1baa8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   16e2c:	eaffff59 	b	16b98 <CLAN7800Device::Configure()+0xc8>
   16e30:	eb0013e5 	bl	1bdcc <CLogger::Get()>
   16e34:	e30638a4 	movw	r3, #26788	; 0x68a4
   16e38:	e3403002 	movt	r3, #2
   16e3c:	e3a02001 	mov	r2, #1
   16e40:	e59f10d0 	ldr	r1, [pc, #208]	; 16f18 <CLAN7800Device::Configure()+0x448>
   16e44:	eb001317 	bl	1baa8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   16e48:	eaffff53 	b	16b9c <CLAN7800Device::Configure()+0xcc>
   16e4c:	e3e03000 	mvn	r3, #0
   16e50:	e3a02b06 	mov	r2, #6144	; 0x1800
   16e54:	e3a01c01 	mov	r1, #256	; 0x100
   16e58:	e1a00005 	mov	r0, r5
   16e5c:	ebfffec0 	bl	16964 <CLAN7800Device::ReadWriteReg(unsigned int, unsigned int, unsigned int)>
   16e60:	e3500000 	cmp	r0, #0
   16e64:	0affff4b 	beq	16b98 <CLAN7800Device::Configure()+0xc8>
   16e68:	e3e03000 	mvn	r3, #0
   16e6c:	e3a02001 	mov	r2, #1
   16e70:	e3a01f42 	mov	r1, #264	; 0x108
   16e74:	e1a00005 	mov	r0, r5
   16e78:	ebfffeb9 	bl	16964 <CLAN7800Device::ReadWriteReg(unsigned int, unsigned int, unsigned int)>
   16e7c:	e3500000 	cmp	r0, #0
   16e80:	0affff44 	beq	16b98 <CLAN7800Device::Configure()+0xc8>
   16e84:	e3e03000 	mvn	r3, #0
   16e88:	e3a02102 	mov	r2, #-2147483648	; 0x80000000
   16e8c:	e3a010c4 	mov	r1, #196	; 0xc4
   16e90:	e1a00005 	mov	r0, r5
   16e94:	ebfffeb2 	bl	16964 <CLAN7800Device::ReadWriteReg(unsigned int, unsigned int, unsigned int)>
   16e98:	e3500000 	cmp	r0, #0
   16e9c:	0affff3d 	beq	16b98 <CLAN7800Device::Configure()+0xc8>
   16ea0:	e30f3fff 	movw	r3, #65535	; 0xffff
   16ea4:	e34c3000 	movt	r3, #49152	; 0xc000
   16ea8:	e3a02001 	mov	r2, #1
   16eac:	e34025ee 	movt	r2, #1518	; 0x5ee
   16eb0:	e3a01f41 	mov	r1, #260	; 0x104
   16eb4:	e1a00005 	mov	r0, r5
   16eb8:	ebfffea9 	bl	16964 <CLAN7800Device::ReadWriteReg(unsigned int, unsigned int, unsigned int)>
   16ebc:	e3500000 	cmp	r0, #0
   16ec0:	0affff34 	beq	16b98 <CLAN7800Device::Configure()+0xc8>
   16ec4:	e3e03000 	mvn	r3, #0
   16ec8:	e3a02102 	mov	r2, #-2147483648	; 0x80000000
   16ecc:	e3a010c0 	mov	r1, #192	; 0xc0
   16ed0:	e1a00005 	mov	r0, r5
   16ed4:	ebfffea2 	bl	16964 <CLAN7800Device::ReadWriteReg(unsigned int, unsigned int, unsigned int)>
   16ed8:	e3500000 	cmp	r0, #0
   16edc:	0affff2d 	beq	16b98 <CLAN7800Device::Configure()+0xc8>
   16ee0:	e1a00005 	mov	r0, r5
   16ee4:	ebfffe85 	bl	16900 <CLAN7800Device::InitPHY()>
   16ee8:	e2506000 	subs	r6, r0, #0
   16eec:	0a000002 	beq	16efc <CLAN7800Device::Configure()+0x42c>
   16ef0:	e1a00005 	mov	r0, r5
   16ef4:	eb0000d8 	bl	1725c <CNetDevice::AddNetDevice()>
   16ef8:	eaffff27 	b	16b9c <CLAN7800Device::Configure()+0xcc>
   16efc:	eb0013b2 	bl	1bdcc <CLogger::Get()>
   16f00:	e30638d0 	movw	r3, #26832	; 0x68d0
   16f04:	e3403002 	movt	r3, #2
   16f08:	e3a02001 	mov	r2, #1
   16f0c:	e59f1004 	ldr	r1, [pc, #4]	; 16f18 <CLAN7800Device::Configure()+0x448>
   16f10:	eb0012e4 	bl	1baa8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   16f14:	eaffff20 	b	16b9c <CLAN7800Device::Configure()+0xcc>
   16f18:	000267f4 	.word	0x000267f4

00016f1c <CMACAddress::CMACAddress()>:
   16f1c:	e3a02000 	mov	r2, #0
   16f20:	e5c02000 	strb	r2, [r0]
   16f24:	e12fff1e 	bx	lr

00016f28 <CMACAddress::~CMACAddress()>:
   16f28:	e12fff1e 	bx	lr

00016f2c <CMACAddress::operator==(CMACAddress const&) const>:
   16f2c:	e92d4070 	push	{r4, r5, r6, lr}
   16f30:	e1a04000 	mov	r4, r0
   16f34:	e1a05001 	mov	r5, r1
   16f38:	e5d03000 	ldrb	r3, [r0]
   16f3c:	e3530000 	cmp	r3, #0
   16f40:	0a000010 	beq	16f88 <CMACAddress::operator==(CMACAddress const&) const+0x5c>
   16f44:	e5d53000 	ldrb	r3, [r5]
   16f48:	e2844001 	add	r4, r4, #1
   16f4c:	e3530000 	cmp	r3, #0
   16f50:	1a000005 	bne	16f6c <CMACAddress::operator==(CMACAddress const&) const+0x40>
   16f54:	e30618e0 	movw	r1, #26848	; 0x68e0
   16f58:	e3401002 	movt	r1, #2
   16f5c:	e30407a0 	movw	r0, #18336	; 0x47a0
   16f60:	e3400002 	movt	r0, #2
   16f64:	e3a02041 	mov	r2, #65	; 0x41
   16f68:	eb000939 	bl	19454 <assertion_failed>
   16f6c:	e2851001 	add	r1, r5, #1
   16f70:	e1a00004 	mov	r0, r4
   16f74:	e3a02006 	mov	r2, #6
   16f78:	eb0026ed 	bl	20b34 <memcmp>
   16f7c:	e16f0f10 	clz	r0, r0
   16f80:	e1a002a0 	lsr	r0, r0, #5
   16f84:	e8bd8070 	pop	{r4, r5, r6, pc}
   16f88:	e30618e0 	movw	r1, #26848	; 0x68e0
   16f8c:	e3401002 	movt	r1, #2
   16f90:	e30407a0 	movw	r0, #18336	; 0x47a0
   16f94:	e3400002 	movt	r0, #2
   16f98:	e3a02029 	mov	r2, #41	; 0x29
   16f9c:	eb00092c 	bl	19454 <assertion_failed>
   16fa0:	eaffffe7 	b	16f44 <CMACAddress::operator==(CMACAddress const&) const+0x18>

00016fa4 <CMACAddress::operator!=(CMACAddress const&) const>:
   16fa4:	e92d4010 	push	{r4, lr}
   16fa8:	ebffffdf 	bl	16f2c <CMACAddress::operator==(CMACAddress const&) const>
   16fac:	e2200001 	eor	r0, r0, #1
   16fb0:	e6ef0070 	uxtb	r0, r0
   16fb4:	e8bd8010 	pop	{r4, pc}

00016fb8 <CMACAddress::Set(unsigned char const*)>:
   16fb8:	e92d4070 	push	{r4, r5, r6, lr}
   16fbc:	e1a04000 	mov	r4, r0
   16fc0:	e2515000 	subs	r5, r1, #0
   16fc4:	0a000006 	beq	16fe4 <CMACAddress::Set(unsigned char const*)+0x2c>
   16fc8:	e5952000 	ldr	r2, [r5]
   16fcc:	e3a03001 	mov	r3, #1
   16fd0:	e5842001 	str	r2, [r4, #1]
   16fd4:	e1d520b4 	ldrh	r2, [r5, #4]
   16fd8:	e1c420b5 	strh	r2, [r4, #5]
   16fdc:	e5c43000 	strb	r3, [r4]
   16fe0:	e8bd8070 	pop	{r4, r5, r6, pc}
   16fe4:	e30618e0 	movw	r1, #26848	; 0x68e0
   16fe8:	e3401002 	movt	r1, #2
   16fec:	e30608f0 	movw	r0, #26864	; 0x68f0
   16ff0:	e3400002 	movt	r0, #2
   16ff4:	e3a02034 	mov	r2, #52	; 0x34
   16ff8:	eb000915 	bl	19454 <assertion_failed>
   16ffc:	eafffff1 	b	16fc8 <CMACAddress::Set(unsigned char const*)+0x10>

00017000 <CMACAddress::CMACAddress(unsigned char const*)>:
   17000:	e92d4010 	push	{r4, lr}
   17004:	e1a04000 	mov	r4, r0
   17008:	ebffffea 	bl	16fb8 <CMACAddress::Set(unsigned char const*)>
   1700c:	e1a00004 	mov	r0, r4
   17010:	e8bd8010 	pop	{r4, pc}

00017014 <CMACAddress::SetBroadcast()>:
   17014:	e3e03000 	mvn	r3, #0
   17018:	e3a02001 	mov	r2, #1
   1701c:	e5803001 	str	r3, [r0, #1]
   17020:	e5c02000 	strb	r2, [r0]
   17024:	e1c030b5 	strh	r3, [r0, #5]
   17028:	e12fff1e 	bx	lr

0001702c <CMACAddress::Get() const>:
   1702c:	e92d4010 	push	{r4, lr}
   17030:	e1a04000 	mov	r4, r0
   17034:	e5d03000 	ldrb	r3, [r0]
   17038:	e3530000 	cmp	r3, #0
   1703c:	1a000005 	bne	17058 <CMACAddress::Get() const+0x2c>
   17040:	e30618e0 	movw	r1, #26848	; 0x68e0
   17044:	e3401002 	movt	r1, #2
   17048:	e30407a0 	movw	r0, #18336	; 0x47a0
   1704c:	e3400002 	movt	r0, #2
   17050:	e3a02041 	mov	r2, #65	; 0x41
   17054:	eb0008fe 	bl	19454 <assertion_failed>
   17058:	e2840001 	add	r0, r4, #1
   1705c:	e8bd8010 	pop	{r4, pc}

00017060 <CMACAddress::CopyTo(unsigned char*) const>:
   17060:	e92d4070 	push	{r4, r5, r6, lr}
   17064:	e1a04000 	mov	r4, r0
   17068:	e1a05001 	mov	r5, r1
   1706c:	e5d03000 	ldrb	r3, [r0]
   17070:	e3530000 	cmp	r3, #0
   17074:	0a000007 	beq	17098 <CMACAddress::CopyTo(unsigned char*) const+0x38>
   17078:	e3550000 	cmp	r5, #0
   1707c:	0a00000d 	beq	170b8 <CMACAddress::CopyTo(unsigned char*) const+0x58>
   17080:	e1a00004 	mov	r0, r4
   17084:	e5b03001 	ldr	r3, [r0, #1]!
   17088:	e5853000 	str	r3, [r5]
   1708c:	e1d030b4 	ldrh	r3, [r0, #4]
   17090:	e1c530b4 	strh	r3, [r5, #4]
   17094:	e8bd8070 	pop	{r4, r5, r6, pc}
   17098:	e30618e0 	movw	r1, #26848	; 0x68e0
   1709c:	e3401002 	movt	r1, #2
   170a0:	e30407a0 	movw	r0, #18336	; 0x47a0
   170a4:	e3400002 	movt	r0, #2
   170a8:	e3a02047 	mov	r2, #71	; 0x47
   170ac:	eb0008e8 	bl	19454 <assertion_failed>
   170b0:	e3550000 	cmp	r5, #0
   170b4:	1afffff1 	bne	17080 <CMACAddress::CopyTo(unsigned char*) const+0x20>
   170b8:	e30618e0 	movw	r1, #26848	; 0x68e0
   170bc:	e3401002 	movt	r1, #2
   170c0:	e30503c4 	movw	r0, #21444	; 0x53c4
   170c4:	e3400002 	movt	r0, #2
   170c8:	e3a02048 	mov	r2, #72	; 0x48
   170cc:	eb0008e0 	bl	19454 <assertion_failed>
   170d0:	eaffffea 	b	17080 <CMACAddress::CopyTo(unsigned char*) const+0x20>

000170d4 <CMACAddress::IsBroadcast() const>:
   170d4:	e92d4010 	push	{r4, lr}
   170d8:	e1a04000 	mov	r4, r0
   170dc:	e5d03000 	ldrb	r3, [r0]
   170e0:	e3530000 	cmp	r3, #0
   170e4:	0a000008 	beq	1710c <CMACAddress::IsBroadcast() const+0x38>
   170e8:	e2843001 	add	r3, r4, #1
   170ec:	e2840007 	add	r0, r4, #7
   170f0:	e4d32001 	ldrb	r2, [r3], #1
   170f4:	e35200ff 	cmp	r2, #255	; 0xff
   170f8:	1a00000a 	bne	17128 <CMACAddress::IsBroadcast() const+0x54>
   170fc:	e1530000 	cmp	r3, r0
   17100:	1afffffa 	bne	170f0 <CMACAddress::IsBroadcast() const+0x1c>
   17104:	e3a00001 	mov	r0, #1
   17108:	e8bd8010 	pop	{r4, pc}
   1710c:	e30618e0 	movw	r1, #26848	; 0x68e0
   17110:	e3401002 	movt	r1, #2
   17114:	e30407a0 	movw	r0, #18336	; 0x47a0
   17118:	e3400002 	movt	r0, #2
   1711c:	e3a0204e 	mov	r2, #78	; 0x4e
   17120:	eb0008cb 	bl	19454 <assertion_failed>
   17124:	eaffffef 	b	170e8 <CMACAddress::IsBroadcast() const+0x14>
   17128:	e3a00000 	mov	r0, #0
   1712c:	e8bd8010 	pop	{r4, pc}

00017130 <CMACAddress::GetSize() const>:
   17130:	e3a00006 	mov	r0, #6
   17134:	e12fff1e 	bx	lr

00017138 <CMACAddress::Format(CString*) const>:
   17138:	e92d4030 	push	{r4, r5, lr}
   1713c:	e1a04000 	mov	r4, r0
   17140:	e1a05001 	mov	r5, r1
   17144:	e5d03000 	ldrb	r3, [r0]
   17148:	e24dd014 	sub	sp, sp, #20
   1714c:	e3530000 	cmp	r3, #0
   17150:	0a000010 	beq	17198 <CMACAddress::Format(CString*) const+0x60>
   17154:	e3550000 	cmp	r5, #0
   17158:	0a000016 	beq	171b8 <CMACAddress::Format(CString*) const+0x80>
   1715c:	e5d4c006 	ldrb	ip, [r4, #6]
   17160:	e1a00005 	mov	r0, r5
   17164:	e5d43002 	ldrb	r3, [r4, #2]
   17168:	e3061910 	movw	r1, #26896	; 0x6910
   1716c:	e3401002 	movt	r1, #2
   17170:	e5d42001 	ldrb	r2, [r4, #1]
   17174:	e58dc00c 	str	ip, [sp, #12]
   17178:	e5d4c005 	ldrb	ip, [r4, #5]
   1717c:	e58dc008 	str	ip, [sp, #8]
   17180:	e5d4e004 	ldrb	lr, [r4, #4]
   17184:	e5d4c003 	ldrb	ip, [r4, #3]
   17188:	e88d5000 	stm	sp, {ip, lr}
   1718c:	eb002278 	bl	1fb74 <CString::Format(char const*, ...)>
   17190:	e28dd014 	add	sp, sp, #20
   17194:	e8bd8030 	pop	{r4, r5, pc}
   17198:	e30618e0 	movw	r1, #26848	; 0x68e0
   1719c:	e3401002 	movt	r1, #2
   171a0:	e30407a0 	movw	r0, #18336	; 0x47a0
   171a4:	e3400002 	movt	r0, #2
   171a8:	e3a02062 	mov	r2, #98	; 0x62
   171ac:	eb0008a8 	bl	19454 <assertion_failed>
   171b0:	e3550000 	cmp	r5, #0
   171b4:	1affffe8 	bne	1715c <CMACAddress::Format(CString*) const+0x24>
   171b8:	e30618e0 	movw	r1, #26848	; 0x68e0
   171bc:	e3401002 	movt	r1, #2
   171c0:	e3060900 	movw	r0, #26880	; 0x6900
   171c4:	e3400002 	movt	r0, #2
   171c8:	e3a02063 	mov	r2, #99	; 0x63
   171cc:	eb0008a0 	bl	19454 <assertion_failed>
   171d0:	eaffffe1 	b	1715c <CMACAddress::Format(CString*) const+0x24>

000171d4 <CNetDevice::CNetDevice(CUSBFunction*)>:
   171d4:	e92d4010 	push	{r4, lr}
   171d8:	e1a04000 	mov	r4, r0
   171dc:	ebffeedf 	bl	12d60 <CUSBFunction::CUSBFunction(CUSBFunction*)>
   171e0:	e59f3008 	ldr	r3, [pc, #8]	; 171f0 <CNetDevice::CNetDevice(CUSBFunction*)+0x1c>
   171e4:	e1a00004 	mov	r0, r4
   171e8:	e5843000 	str	r3, [r4]
   171ec:	e8bd8010 	pop	{r4, pc}
   171f0:	00026938 	.word	0x00026938

000171f4 <CNetDevice::~CNetDevice()>:
   171f4:	e59f3014 	ldr	r3, [pc, #20]	; 17210 <CNetDevice::~CNetDevice()+0x1c>
   171f8:	e92d4010 	push	{r4, lr}
   171fc:	e1a04000 	mov	r4, r0
   17200:	e5803000 	str	r3, [r0]
   17204:	ebffee83 	bl	12c18 <CUSBFunction::~CUSBFunction()>
   17208:	e1a00004 	mov	r0, r4
   1720c:	e8bd8010 	pop	{r4, pc}
   17210:	00026938 	.word	0x00026938

00017214 <CNetDevice::~CNetDevice()>:
   17214:	e59f3020 	ldr	r3, [pc, #32]	; 1723c <CNetDevice::~CNetDevice()+0x28>
   17218:	e92d4010 	push	{r4, lr}
   1721c:	e1a04000 	mov	r4, r0
   17220:	e5803000 	str	r3, [r0]
   17224:	ebffee7b 	bl	12c18 <CUSBFunction::~CUSBFunction()>
   17228:	e1a00004 	mov	r0, r4
   1722c:	e3a01010 	mov	r1, #16
   17230:	eb002b96 	bl	22090 <operator delete(void*, unsigned int)>
   17234:	e1a00004 	mov	r0, r4
   17238:	e8bd8010 	pop	{r4, pc}
   1723c:	00026938 	.word	0x00026938

00017240 <CNetDevice::GetSpeedString(TNetDeviceSpeed)>:
   17240:	e3500005 	cmp	r0, #5
   17244:	930b3048 	movwls	r3, #45128	; 0xb048
   17248:	93403002 	movtls	r3, #2
   1724c:	97930100 	ldrls	r0, [r3, r0, lsl #2]
   17250:	8306096c 	movwhi	r0, #26988	; 0x696c
   17254:	83400002 	movthi	r0, #2
   17258:	e12fff1e 	bx	lr

0001725c <CNetDevice::AddNetDevice()>:
   1725c:	e92d4030 	push	{r4, r5, lr}
   17260:	e1a05000 	mov	r5, r0
   17264:	e24dd014 	sub	sp, sp, #20
   17268:	e1a0000d 	mov	r0, sp
   1726c:	eb001e77 	bl	1ec50 <CString::CString()>
   17270:	e30b34a0 	movw	r3, #46240	; 0xb4a0
   17274:	e3403002 	movt	r3, #2
   17278:	e1a0000d 	mov	r0, sp
   1727c:	e3061974 	movw	r1, #26996	; 0x6974
   17280:	e3401002 	movt	r1, #2
   17284:	e5932000 	ldr	r2, [r3]
   17288:	e282c001 	add	ip, r2, #1
   1728c:	e583c000 	str	ip, [r3]
   17290:	eb002237 	bl	1fb74 <CString::Format(char const*, ...)>
   17294:	eb000b2d 	bl	19f50 <CDeviceNameService::Get()>
   17298:	e1a04000 	mov	r4, r0
   1729c:	e1a0000d 	mov	r0, sp
   172a0:	eb001e81 	bl	1ecac <CString::operator char const*() const>
   172a4:	e1a02005 	mov	r2, r5
   172a8:	e1a01000 	mov	r1, r0
   172ac:	e3a03000 	mov	r3, #0
   172b0:	e1a00004 	mov	r0, r4
   172b4:	eb000a7b 	bl	19ca8 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)>
   172b8:	e1a0000d 	mov	r0, sp
   172bc:	eb001e31 	bl	1eb88 <CString::~CString()>
   172c0:	e28dd014 	add	sp, sp, #20
   172c4:	e8bd8030 	pop	{r4, r5, pc}

000172c8 <CUSBGamePadDevice::GetInitialState()>:
   172c8:	e2800024 	add	r0, r0, #36	; 0x24
   172cc:	e12fff1e 	bx	lr

000172d0 <CUSBGamePadDevice::ReportHandler(unsigned char const*, unsigned int)>:
   172d0:	e3510000 	cmp	r1, #0
   172d4:	012fff1e 	bxeq	lr
   172d8:	e280cf4a 	add	ip, r0, #296	; 0x128
   172dc:	e92d4070 	push	{r4, r5, r6, lr}
   172e0:	e1a04000 	mov	r4, r0
   172e4:	e1dcc0b0 	ldrh	ip, [ip]
   172e8:	e15c0002 	cmp	ip, r2
   172ec:	18bd8070 	popne	{r4, r5, r6, pc}
   172f0:	e5902124 	ldr	r2, [r0, #292]	; 0x124
   172f4:	e3520000 	cmp	r2, #0
   172f8:	08bd8070 	popeq	{r4, r5, r6, pc}
   172fc:	e1a05000 	mov	r5, r0
   17300:	e4953024 	ldr	r3, [r5], #36	; 0x24
   17304:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
   17308:	e12fff33 	blx	r3
   1730c:	e594012c 	ldr	r0, [r4, #300]	; 0x12c
   17310:	e1a01005 	mov	r1, r5
   17314:	e5943124 	ldr	r3, [r4, #292]	; 0x124
   17318:	e2400001 	sub	r0, r0, #1
   1731c:	e8bd4070 	pop	{r4, r5, r6, lr}
   17320:	e12fff13 	bx	r3

00017324 <CUSBGamePadDevice::RegisterStatusHandler(void (*)(unsigned int, TGamePadState const*))>:
   17324:	e5903124 	ldr	r3, [r0, #292]	; 0x124
   17328:	e92d4070 	push	{r4, r5, r6, lr}
   1732c:	e1a05000 	mov	r5, r0
   17330:	e1a04001 	mov	r4, r1
   17334:	e3530000 	cmp	r3, #0
   17338:	0a000005 	beq	17354 <CUSBGamePadDevice::RegisterStatusHandler(void (*)(unsigned int, TGamePadState const*))+0x30>
   1733c:	e3061a64 	movw	r1, #27236	; 0x6a64
   17340:	e3401002 	movt	r1, #2
   17344:	e3060a74 	movw	r0, #27252	; 0x6a74
   17348:	e3400002 	movt	r0, #2
   1734c:	e3a0204b 	mov	r2, #75	; 0x4b
   17350:	eb00083f 	bl	19454 <assertion_failed>
   17354:	e3540000 	cmp	r4, #0
   17358:	e5854124 	str	r4, [r5, #292]	; 0x124
   1735c:	18bd8070 	popne	{r4, r5, r6, pc}
   17360:	e3061a64 	movw	r1, #27236	; 0x6a64
   17364:	e3401002 	movt	r1, #2
   17368:	e3060a8c 	movw	r0, #27276	; 0x6a8c
   1736c:	e3400002 	movt	r0, #2
   17370:	e3a0204d 	mov	r2, #77	; 0x4d
   17374:	e8bd4070 	pop	{r4, r5, r6, lr}
   17378:	ea000835 	b	19454 <assertion_failed>

0001737c <CUSBGamePadDevice::Configure()>:
   1737c:	e92d4030 	push	{r4, r5, lr}
   17380:	e2805f4a 	add	r5, r0, #296	; 0x128
   17384:	e1a04000 	mov	r4, r0
   17388:	e24dd00c 	sub	sp, sp, #12
   1738c:	e1d510b0 	ldrh	r1, [r5]
   17390:	e3510000 	cmp	r1, #0
   17394:	0a00001d 	beq	17410 <CUSBGamePadDevice::Configure()+0x94>
   17398:	e1a00004 	mov	r0, r4
   1739c:	ebffe2cb 	bl	fed0 <CUSBHIDDevice::Configure(unsigned int)>
   173a0:	e2505000 	subs	r5, r0, #0
   173a4:	0a00000f 	beq	173e8 <CUSBGamePadDevice::Configure()+0x6c>
   173a8:	e30b3060 	movw	r3, #45152	; 0xb060
   173ac:	e3403002 	movt	r3, #2
   173b0:	e5932000 	ldr	r2, [r3]
   173b4:	e584212c 	str	r2, [r4, #300]	; 0x12c
   173b8:	e2822001 	add	r2, r2, #1
   173bc:	e5832000 	str	r2, [r3]
   173c0:	eb000ae2 	bl	19f50 <CDeviceNameService::Get()>
   173c4:	e594212c 	ldr	r2, [r4, #300]	; 0x12c
   173c8:	e1a03004 	mov	r3, r4
   173cc:	e3a01000 	mov	r1, #0
   173d0:	e58d1000 	str	r1, [sp]
   173d4:	e59f1054 	ldr	r1, [pc, #84]	; 17430 <CUSBGamePadDevice::Configure()+0xb4>
   173d8:	eb000aea 	bl	19f88 <CDeviceNameService::AddDevice(char const*, unsigned int, CDevice*, bool)>
   173dc:	e1a00005 	mov	r0, r5
   173e0:	e28dd00c 	add	sp, sp, #12
   173e4:	e8bd8030 	pop	{r4, r5, pc}
   173e8:	eb001277 	bl	1bdcc <CLogger::Get()>
   173ec:	e3a02001 	mov	r2, #1
   173f0:	e30537a0 	movw	r3, #22432	; 0x57a0
   173f4:	e3403002 	movt	r3, #2
   173f8:	e3061a0c 	movw	r1, #27148	; 0x6a0c
   173fc:	e3401002 	movt	r1, #2
   17400:	eb0011a8 	bl	1baa8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   17404:	e1a00005 	mov	r0, r5
   17408:	e28dd00c 	add	sp, sp, #12
   1740c:	e8bd8030 	pop	{r4, r5, pc}
   17410:	e3061a64 	movw	r1, #27236	; 0x6a64
   17414:	e3401002 	movt	r1, #2
   17418:	e3050aa8 	movw	r0, #23208	; 0x5aa8
   1741c:	e3400002 	movt	r0, #2
   17420:	e3a02035 	mov	r2, #53	; 0x35
   17424:	eb00080a 	bl	19454 <assertion_failed>
   17428:	e1d510b0 	ldrh	r1, [r5]
   1742c:	eaffffd9 	b	17398 <CUSBGamePadDevice::Configure()+0x1c>
   17430:	00026a14 	.word	0x00026a14

00017434 <CUSBGamePadDevice::CUSBGamePadDevice(CUSBFunction*)>:
   17434:	e92d4010 	push	{r4, lr}
   17438:	e3a02000 	mov	r2, #0
   1743c:	e1a04000 	mov	r4, r0
   17440:	ebffe263 	bl	fdd4 <CUSBHIDDevice::CUSBHIDDevice(CUSBFunction*, unsigned int)>
   17444:	e2842f4a 	add	r2, r4, #296	; 0x128
   17448:	e3a03000 	mov	r3, #0
   1744c:	e59f1024 	ldr	r1, [pc, #36]	; 17478 <CUSBGamePadDevice::CUSBGamePadDevice(CUSBFunction*)+0x44>
   17450:	e5841000 	str	r1, [r4]
   17454:	e2840024 	add	r0, r4, #36	; 0x24
   17458:	e5843124 	str	r3, [r4, #292]	; 0x124
   1745c:	e1a01003 	mov	r1, r3
   17460:	e1c230b0 	strh	r3, [r2]
   17464:	e3a02c01 	mov	r2, #256	; 0x100
   17468:	e584312c 	str	r3, [r4, #300]	; 0x12c
   1746c:	eb002577 	bl	20a50 <memset>
   17470:	e1a00004 	mov	r0, r4
   17474:	e8bd8010 	pop	{r4, pc}
   17478:	00026a24 	.word	0x00026a24

0001747c <CUSBGamePadDevice::~CUSBGamePadDevice()>:
   1747c:	e92d4070 	push	{r4, r5, r6, lr}
   17480:	e1a04000 	mov	r4, r0
   17484:	e3065a0c 	movw	r5, #27148	; 0x6a0c
   17488:	e3405002 	movt	r5, #2
   1748c:	e2853018 	add	r3, r5, #24
   17490:	e3a06000 	mov	r6, #0
   17494:	e5803000 	str	r3, [r0]
   17498:	e5806124 	str	r6, [r0, #292]	; 0x124
   1749c:	eb000aab 	bl	19f50 <CDeviceNameService::Get()>
   174a0:	e1a03006 	mov	r3, r6
   174a4:	e2851008 	add	r1, r5, #8
   174a8:	e594212c 	ldr	r2, [r4, #300]	; 0x12c
   174ac:	eb000acf 	bl	19ff0 <CDeviceNameService::RemoveDevice(char const*, unsigned int, bool)>
   174b0:	e1a00004 	mov	r0, r4
   174b4:	ebffe25a 	bl	fe24 <CUSBHIDDevice::~CUSBHIDDevice()>
   174b8:	e1a00004 	mov	r0, r4
   174bc:	e8bd8070 	pop	{r4, r5, r6, pc}

000174c0 <CUSBGamePadDevice::~CUSBGamePadDevice()>:
   174c0:	e92d4010 	push	{r4, lr}
   174c4:	e1a04000 	mov	r4, r0
   174c8:	ebffffeb 	bl	1747c <CUSBGamePadDevice::~CUSBGamePadDevice()>
   174cc:	e1a00004 	mov	r0, r4
   174d0:	e3a01e13 	mov	r1, #304	; 0x130
   174d4:	eb002aed 	bl	22090 <operator delete(void*, unsigned int)>
   174d8:	e1a00004 	mov	r0, r4
   174dc:	e8bd8010 	pop	{r4, pc}

000174e0 <CKeyboardBehaviour::CKeyboardBehaviour()>:
   174e0:	e92d4010 	push	{r4, lr}
   174e4:	e1a04000 	mov	r4, r0
   174e8:	e3a03000 	mov	r3, #0
   174ec:	e2800014 	add	r0, r0, #20
   174f0:	e5843000 	str	r3, [r4]
   174f4:	e5843004 	str	r3, [r4, #4]
   174f8:	e5843008 	str	r3, [r4, #8]
   174fc:	e1c430bc 	strh	r3, [r4, #12]
   17500:	e5843010 	str	r3, [r4, #16]
   17504:	eb000195 	bl	17b60 <CKeyMap::CKeyMap()>
   17508:	e1a00004 	mov	r0, r4
   1750c:	e8bd8010 	pop	{r4, pc}

00017510 <CKeyboardBehaviour::~CKeyboardBehaviour()>:
   17510:	e92d4010 	push	{r4, lr}
   17514:	e1a04000 	mov	r4, r0
   17518:	e3a03000 	mov	r3, #0
   1751c:	e2800014 	add	r0, r0, #20
   17520:	e5843000 	str	r3, [r4]
   17524:	e5843004 	str	r3, [r4, #4]
   17528:	e5843008 	str	r3, [r4, #8]
   1752c:	eb0000c7 	bl	17850 <CKeyMap::~CKeyMap()>
   17530:	e1a00004 	mov	r0, r4
   17534:	e8bd8010 	pop	{r4, pc}

00017538 <CKeyboardBehaviour::RegisterKeyPressedHandler(void (*)(char const*))>:
   17538:	e92d4070 	push	{r4, r5, r6, lr}
   1753c:	e1a04000 	mov	r4, r0
   17540:	e2515000 	subs	r5, r1, #0
   17544:	0a000001 	beq	17550 <CKeyboardBehaviour::RegisterKeyPressedHandler(void (*)(char const*))+0x18>
   17548:	e5845000 	str	r5, [r4]
   1754c:	e8bd8070 	pop	{r4, r5, r6, pc}
   17550:	e3061aa4 	movw	r1, #27300	; 0x6aa4
   17554:	e3401002 	movt	r1, #2
   17558:	e3060abc 	movw	r0, #27324	; 0x6abc
   1755c:	e3400002 	movt	r0, #2
   17560:	e3a0202f 	mov	r2, #47	; 0x2f
   17564:	eb0007ba 	bl	19454 <assertion_failed>
   17568:	e5845000 	str	r5, [r4]
   1756c:	e8bd8070 	pop	{r4, r5, r6, pc}

00017570 <CKeyboardBehaviour::RegisterSelectConsoleHandler(void (*)(unsigned int))>:
   17570:	e92d4070 	push	{r4, r5, r6, lr}
   17574:	e1a04000 	mov	r4, r0
   17578:	e2515000 	subs	r5, r1, #0
   1757c:	0a000001 	beq	17588 <CKeyboardBehaviour::RegisterSelectConsoleHandler(void (*)(unsigned int))+0x18>
   17580:	e5845004 	str	r5, [r4, #4]
   17584:	e8bd8070 	pop	{r4, r5, r6, pc}
   17588:	e3061aa4 	movw	r1, #27300	; 0x6aa4
   1758c:	e3401002 	movt	r1, #2
   17590:	e3060ad4 	movw	r0, #27348	; 0x6ad4
   17594:	e3400002 	movt	r0, #2
   17598:	e3a02035 	mov	r2, #53	; 0x35
   1759c:	eb0007ac 	bl	19454 <assertion_failed>
   175a0:	e5845004 	str	r5, [r4, #4]
   175a4:	e8bd8070 	pop	{r4, r5, r6, pc}

000175a8 <CKeyboardBehaviour::RegisterShutdownHandler(void (*)())>:
   175a8:	e92d4070 	push	{r4, r5, r6, lr}
   175ac:	e1a04000 	mov	r4, r0
   175b0:	e2515000 	subs	r5, r1, #0
   175b4:	0a000001 	beq	175c0 <CKeyboardBehaviour::RegisterShutdownHandler(void (*)())+0x18>
   175b8:	e5845008 	str	r5, [r4, #8]
   175bc:	e8bd8070 	pop	{r4, r5, r6, pc}
   175c0:	e3061aa4 	movw	r1, #27300	; 0x6aa4
   175c4:	e3401002 	movt	r1, #2
   175c8:	e3060af0 	movw	r0, #27376	; 0x6af0
   175cc:	e3400002 	movt	r0, #2
   175d0:	e3a0203b 	mov	r2, #59	; 0x3b
   175d4:	eb00079e 	bl	19454 <assertion_failed>
   175d8:	e5845008 	str	r5, [r4, #8]
   175dc:	e8bd8070 	pop	{r4, r5, r6, pc}

000175e0 <CKeyboardBehaviour::GetLEDStatus() const>:
   175e0:	e2800014 	add	r0, r0, #20
   175e4:	ea00012d 	b	17aa0 <CKeyMap::GetLEDStatus() const>

000175e8 <CKeyboardBehaviour::GenerateKeyEvent(unsigned char)>:
   175e8:	e92d4070 	push	{r4, r5, r6, lr}
   175ec:	e1a04000 	mov	r4, r0
   175f0:	e2805014 	add	r5, r0, #20
   175f4:	e24dd008 	sub	sp, sp, #8
   175f8:	e1a00005 	mov	r0, r5
   175fc:	e5d4600c 	ldrb	r6, [r4, #12]
   17600:	e1a02006 	mov	r2, r6
   17604:	eb0000b4 	bl	178dc <CKeyMap::Translate(unsigned char, unsigned char)>
   17608:	e2403e13 	sub	r3, r0, #304	; 0x130
   1760c:	e2433003 	sub	r3, r3, #3
   17610:	e353000f 	cmp	r3, #15
   17614:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   17618:	ea00000f 	b	1765c <CKeyboardBehaviour::GenerateKeyEvent(unsigned char)+0x74>
   1761c:	00017688 	.word	0x00017688
   17620:	00017688 	.word	0x00017688
   17624:	00017688 	.word	0x00017688
   17628:	000176a8 	.word	0x000176a8
   1762c:	000176a8 	.word	0x000176a8
   17630:	000176a8 	.word	0x000176a8
   17634:	000176a8 	.word	0x000176a8
   17638:	000176a8 	.word	0x000176a8
   1763c:	000176a8 	.word	0x000176a8
   17640:	000176a8 	.word	0x000176a8
   17644:	000176a8 	.word	0x000176a8
   17648:	000176a8 	.word	0x000176a8
   1764c:	000176a8 	.word	0x000176a8
   17650:	000176a8 	.word	0x000176a8
   17654:	000176a8 	.word	0x000176a8
   17658:	00017690 	.word	0x00017690
   1765c:	e1a01000 	mov	r1, r0
   17660:	e1a02006 	mov	r2, r6
   17664:	e1a00005 	mov	r0, r5
   17668:	e28d3004 	add	r3, sp, #4
   1766c:	eb0000db 	bl	179e0 <CKeyMap::GetString(unsigned short, unsigned char, char*) const>
   17670:	e3500000 	cmp	r0, #0
   17674:	0a000003 	beq	17688 <CKeyboardBehaviour::GenerateKeyEvent(unsigned char)+0xa0>
   17678:	e5943000 	ldr	r3, [r4]
   1767c:	e3530000 	cmp	r3, #0
   17680:	0a000000 	beq	17688 <CKeyboardBehaviour::GenerateKeyEvent(unsigned char)+0xa0>
   17684:	e12fff33 	blx	r3
   17688:	e28dd008 	add	sp, sp, #8
   1768c:	e8bd8070 	pop	{r4, r5, r6, pc}
   17690:	e5943008 	ldr	r3, [r4, #8]
   17694:	e3530000 	cmp	r3, #0
   17698:	0afffffa 	beq	17688 <CKeyboardBehaviour::GenerateKeyEvent(unsigned char)+0xa0>
   1769c:	e12fff33 	blx	r3
   176a0:	e28dd008 	add	sp, sp, #8
   176a4:	e8bd8070 	pop	{r4, r5, r6, pc}
   176a8:	e5943004 	ldr	r3, [r4, #4]
   176ac:	e3530000 	cmp	r3, #0
   176b0:	0afffff4 	beq	17688 <CKeyboardBehaviour::GenerateKeyEvent(unsigned char)+0xa0>
   176b4:	e2400f4d 	sub	r0, r0, #308	; 0x134
   176b8:	e2400002 	sub	r0, r0, #2
   176bc:	e12fff33 	blx	r3
   176c0:	e28dd008 	add	sp, sp, #8
   176c4:	e8bd8070 	pop	{r4, r5, r6, pc}

000176c8 <CKeyboardBehaviour::KeyPressed(unsigned char)>:
   176c8:	e241c080 	sub	ip, r1, #128	; 0x80
   176cc:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   176d0:	e6efe07c 	uxtb	lr, ip
   176d4:	e1a03000 	mov	r3, r0
   176d8:	e35e0007 	cmp	lr, #7
   176dc:	8a000004 	bhi	176f4 <CKeyboardBehaviour::KeyPressed(unsigned char)+0x2c>
   176e0:	e5d0200c 	ldrb	r2, [r0, #12]
   176e4:	e3a01001 	mov	r1, #1
   176e8:	e182cc11 	orr	ip, r2, r1, lsl ip
   176ec:	e5c0c00c 	strb	ip, [r0, #12]
   176f0:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   176f4:	e5d0c00d 	ldrb	ip, [r0, #13]
   176f8:	e15c0001 	cmp	ip, r1
   176fc:	049df004 	popeq	{pc}		; (ldreq pc, [sp], #4)
   17700:	e5c3100d 	strb	r1, [r3, #13]
   17704:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
   17708:	eaffffb6 	b	175e8 <CKeyboardBehaviour::GenerateKeyEvent(unsigned char)>

0001770c <CKeyboardBehaviour::KeyReleased(unsigned char)>:
   1770c:	e2413080 	sub	r3, r1, #128	; 0x80
   17710:	e6ef2073 	uxtb	r2, r3
   17714:	e3520007 	cmp	r2, #7
   17718:	8a000004 	bhi	17730 <CKeyboardBehaviour::KeyReleased(unsigned char)+0x24>
   1771c:	e5d0200c 	ldrb	r2, [r0, #12]
   17720:	e3a01001 	mov	r1, #1
   17724:	e1c23311 	bic	r3, r2, r1, lsl r3
   17728:	e5c0300c 	strb	r3, [r0, #12]
   1772c:	e12fff1e 	bx	lr
   17730:	e5d0300d 	ldrb	r3, [r0, #13]
   17734:	e1530001 	cmp	r3, r1
   17738:	112fff1e 	bxne	lr
   1773c:	e5903010 	ldr	r3, [r0, #16]
   17740:	e92d4010 	push	{r4, lr}
   17744:	e1a04000 	mov	r4, r0
   17748:	e3530000 	cmp	r3, #0
   1774c:	1a000002 	bne	1775c <CKeyboardBehaviour::KeyReleased(unsigned char)+0x50>
   17750:	e3a03000 	mov	r3, #0
   17754:	e5c4300d 	strb	r3, [r4, #13]
   17758:	e8bd8010 	pop	{r4, pc}
   1775c:	eb0024ad 	bl	20a18 <CTimer::Get()>
   17760:	e5941010 	ldr	r1, [r4, #16]
   17764:	eb002344 	bl	2047c <CTimer::CancelKernelTimer(unsigned int)>
   17768:	e3a03000 	mov	r3, #0
   1776c:	e5843010 	str	r3, [r4, #16]
   17770:	eafffff6 	b	17750 <CKeyboardBehaviour::KeyReleased(unsigned char)+0x44>

00017774 <CKeyboardBehaviour::TimerHandler(unsigned int)>:
   17774:	e92d4010 	push	{r4, lr}
   17778:	e1a04000 	mov	r4, r0
   1777c:	e5903010 	ldr	r3, [r0, #16]
   17780:	e24dd008 	sub	sp, sp, #8
   17784:	e1530001 	cmp	r3, r1
   17788:	0a000005 	beq	177a4 <CKeyboardBehaviour::TimerHandler(unsigned int)+0x30>
   1778c:	e3061aa4 	movw	r1, #27300	; 0x6aa4
   17790:	e3401002 	movt	r1, #2
   17794:	e3060b08 	movw	r0, #27400	; 0x6b08
   17798:	e3400002 	movt	r0, #2
   1779c:	e3a020b0 	mov	r2, #176	; 0xb0
   177a0:	eb00072b 	bl	19454 <assertion_failed>
   177a4:	e5d4100d 	ldrb	r1, [r4, #13]
   177a8:	e3510000 	cmp	r1, #0
   177ac:	1a000001 	bne	177b8 <CKeyboardBehaviour::TimerHandler(unsigned int)+0x44>
   177b0:	e28dd008 	add	sp, sp, #8
   177b4:	e8bd8010 	pop	{r4, pc}
   177b8:	e1a00004 	mov	r0, r4
   177bc:	ebffff89 	bl	175e8 <CKeyboardBehaviour::GenerateKeyEvent(unsigned char)>
   177c0:	eb002494 	bl	20a18 <CTimer::Get()>
   177c4:	e58d4000 	str	r4, [sp]
   177c8:	e3072808 	movw	r2, #30728	; 0x7808
   177cc:	e3402001 	movt	r2, #1
   177d0:	e3a03000 	mov	r3, #0
   177d4:	e3a01008 	mov	r1, #8
   177d8:	eb0022d7 	bl	2033c <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)>
   177dc:	e3500000 	cmp	r0, #0
   177e0:	e5840010 	str	r0, [r4, #16]
   177e4:	1afffff1 	bne	177b0 <CKeyboardBehaviour::TimerHandler(unsigned int)+0x3c>
   177e8:	e3061aa4 	movw	r1, #27300	; 0x6aa4
   177ec:	e3401002 	movt	r1, #2
   177f0:	e306035c 	movw	r0, #25436	; 0x635c
   177f4:	e3400002 	movt	r0, #2
   177f8:	e3a020b7 	mov	r2, #183	; 0xb7
   177fc:	e28dd008 	add	sp, sp, #8
   17800:	e8bd4010 	pop	{r4, lr}
   17804:	ea000712 	b	19454 <assertion_failed>

00017808 <CKeyboardBehaviour::TimerStub(unsigned int, void*, void*)>:
   17808:	e92d4070 	push	{r4, r5, r6, lr}
   1780c:	e1a05000 	mov	r5, r0
   17810:	e2524000 	subs	r4, r2, #0
   17814:	0a000003 	beq	17828 <CKeyboardBehaviour::TimerStub(unsigned int, void*, void*)+0x20>
   17818:	e1a01005 	mov	r1, r5
   1781c:	e1a00004 	mov	r0, r4
   17820:	e8bd4070 	pop	{r4, r5, r6, lr}
   17824:	eaffffd2 	b	17774 <CKeyboardBehaviour::TimerHandler(unsigned int)>
   17828:	e3061aa4 	movw	r1, #27300	; 0x6aa4
   1782c:	e3401002 	movt	r1, #2
   17830:	e3040220 	movw	r0, #16928	; 0x4220
   17834:	e3400002 	movt	r0, #2
   17838:	e3a020be 	mov	r2, #190	; 0xbe
   1783c:	eb000704 	bl	19454 <assertion_failed>
   17840:	e1a01005 	mov	r1, r5
   17844:	e1a00004 	mov	r0, r4
   17848:	e8bd4070 	pop	{r4, r5, r6, lr}
   1784c:	eaffffc8 	b	17774 <CKeyboardBehaviour::TimerHandler(unsigned int)>

00017850 <CKeyMap::~CKeyMap()>:
   17850:	e12fff1e 	bx	lr

00017854 <CKeyMap::ClearTable(unsigned char)>:
   17854:	e3510003 	cmp	r1, #3
   17858:	8a000009 	bhi	17884 <CKeyMap::ClearTable(unsigned char)+0x30>
   1785c:	e1a01081 	lsl	r1, r1, #1
   17860:	e2802b01 	add	r2, r0, #1024	; 0x400
   17864:	e0803001 	add	r3, r0, r1
   17868:	e0822001 	add	r2, r2, r1
   1786c:	e3a01000 	mov	r1, #0
   17870:	e0c310b8 	strh	r1, [r3], #8
   17874:	e1530002 	cmp	r3, r2
   17878:	1afffffc 	bne	17870 <CKeyMap::ClearTable(unsigned char)+0x1c>
   1787c:	e3a00001 	mov	r0, #1
   17880:	e12fff1e 	bx	lr
   17884:	e3a00000 	mov	r0, #0
   17888:	e12fff1e 	bx	lr

0001788c <CKeyMap::SetEntry(unsigned char, unsigned char, unsigned short)>:
   1788c:	e6afc072 	sxtb	ip, r2
   17890:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   17894:	e35c0000 	cmp	ip, #0
   17898:	c3a0c000 	movgt	ip, #0
   1789c:	d3a0c001 	movle	ip, #1
   178a0:	e1a0e000 	mov	lr, r0
   178a4:	e3510003 	cmp	r1, #3
   178a8:	91a0000c 	movls	r0, ip
   178ac:	838c0001 	orrhi	r0, ip, #1
   178b0:	e3500000 	cmp	r0, #0
   178b4:	1a000006 	bne	178d4 <CKeyMap::SetEntry(unsigned char, unsigned char, unsigned short)+0x48>
   178b8:	e300c132 	movw	ip, #306	; 0x132
   178bc:	e153000c 	cmp	r3, ip
   178c0:	90811102 	addls	r1, r1, r2, lsl #2
   178c4:	93a00001 	movls	r0, #1
   178c8:	91a01011 	lslls	r1, r1, r0
   178cc:	918e30b1 	strhls	r3, [lr, r1]
   178d0:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   178d4:	e3a00000 	mov	r0, #0
   178d8:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

000178dc <CKeyMap::Translate(unsigned char, unsigned char)>:
   178dc:	e6af3071 	sxtb	r3, r1
   178e0:	e3530000 	cmp	r3, #0
   178e4:	da000023 	ble	17978 <CKeyMap::Translate(unsigned char, unsigned char)+0x9c>
   178e8:	e1a03181 	lsl	r3, r1, #3
   178ec:	e19030b3 	ldrh	r3, [r0, r3]
   178f0:	e3530f42 	cmp	r3, #264	; 0x108
   178f4:	0a000022 	beq	17984 <CKeyMap::Translate(unsigned char, unsigned char)+0xa8>
   178f8:	e243cf43 	sub	ip, r3, #268	; 0x10c
   178fc:	e24cc003 	sub	ip, ip, #3
   17900:	e35c000b 	cmp	ip, #11
   17904:	8a000001 	bhi	17910 <CKeyMap::Translate(unsigned char, unsigned char)+0x34>
   17908:	e3120004 	tst	r2, #4
   1790c:	1a000022 	bne	1799c <CKeyMap::Translate(unsigned char, unsigned char)+0xc0>
   17910:	e312008c 	tst	r2, #140	; 0x8c
   17914:	1a000017 	bne	17978 <CKeyMap::Translate(unsigned char, unsigned char)+0x9c>
   17918:	e2413053 	sub	r3, r1, #83	; 0x53
   1791c:	e3530010 	cmp	r3, #16
   17920:	95d02401 	ldrbls	r2, [r0, #1025]	; 0x401
   17924:	9a000005 	bls	17940 <CKeyMap::Translate(unsigned char, unsigned char)+0x64>
   17928:	e3120040 	tst	r2, #64	; 0x40
   1792c:	e2022022 	and	r2, r2, #34	; 0x22
   17930:	0a000022 	beq	179c0 <CKeyMap::Translate(unsigned char, unsigned char)+0xe4>
   17934:	e3520000 	cmp	r2, #0
   17938:	03a02002 	moveq	r2, #2
   1793c:	13a02003 	movne	r2, #3
   17940:	e0821101 	add	r1, r2, r1, lsl #2
   17944:	e300211e 	movw	r2, #286	; 0x11e
   17948:	e1a01081 	lsl	r1, r1, #1
   1794c:	e19030b1 	ldrh	r3, [r0, r1]
   17950:	e1530002 	cmp	r3, r2
   17954:	0a000014 	beq	179ac <CKeyMap::Translate(unsigned char, unsigned char)+0xd0>
   17958:	e3530e12 	cmp	r3, #288	; 0x120
   1795c:	0a00001a 	beq	179cc <CKeyMap::Translate(unsigned char, unsigned char)+0xf0>
   17960:	e3530f47 	cmp	r3, #284	; 0x11c
   17964:	05d02400 	ldrbeq	r2, [r0, #1024]	; 0x400
   17968:	03003133 	movweq	r3, #307	; 0x133
   1796c:	02222001 	eoreq	r2, r2, #1
   17970:	05c02400 	strbeq	r2, [r0, #1024]	; 0x400
   17974:	ea000000 	b	1797c <CKeyMap::Translate(unsigned char, unsigned char)+0xa0>
   17978:	e3a03000 	mov	r3, #0
   1797c:	e1a00003 	mov	r0, r3
   17980:	e12fff1e 	bx	lr
   17984:	e3120011 	tst	r2, #17
   17988:	0affffe0 	beq	17910 <CKeyMap::Translate(unsigned char, unsigned char)+0x34>
   1798c:	e3120004 	tst	r2, #4
   17990:	0affffde 	beq	17910 <CKeyMap::Translate(unsigned char, unsigned char)+0x34>
   17994:	e3003142 	movw	r3, #322	; 0x142
   17998:	eafffff7 	b	1797c <CKeyMap::Translate(unsigned char, unsigned char)+0xa0>
   1799c:	e2833027 	add	r3, r3, #39	; 0x27
   179a0:	e6ff3073 	uxth	r3, r3
   179a4:	e1a00003 	mov	r0, r3
   179a8:	e12fff1e 	bx	lr
   179ac:	e5d02402 	ldrb	r2, [r0, #1026]	; 0x402
   179b0:	e3003135 	movw	r3, #309	; 0x135
   179b4:	e2222001 	eor	r2, r2, #1
   179b8:	e5c02402 	strb	r2, [r0, #1026]	; 0x402
   179bc:	eaffffee 	b	1797c <CKeyMap::Translate(unsigned char, unsigned char)+0xa0>
   179c0:	e2922000 	adds	r2, r2, #0
   179c4:	13a02001 	movne	r2, #1
   179c8:	eaffffdc 	b	17940 <CKeyMap::Translate(unsigned char, unsigned char)+0x64>
   179cc:	e5d02401 	ldrb	r2, [r0, #1025]	; 0x401
   179d0:	e3a03f4d 	mov	r3, #308	; 0x134
   179d4:	e2222001 	eor	r2, r2, #1
   179d8:	e5c02401 	strb	r2, [r0, #1025]	; 0x401
   179dc:	eaffffe6 	b	1797c <CKeyMap::Translate(unsigned char, unsigned char)+0xa0>

000179e0 <CKeyMap::GetString(unsigned short, unsigned char, char*) const>:
   179e0:	e241c021 	sub	ip, r1, #33	; 0x21
   179e4:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   179e8:	e6ffc07c 	uxth	ip, ip
   179ec:	e300e111 	movw	lr, #273	; 0x111
   179f0:	e15c000e 	cmp	ip, lr
   179f4:	8a000022 	bhi	17a84 <CKeyMap::GetString(unsigned short, unsigned char, char*) const+0xa4>
   179f8:	e241cc01 	sub	ip, r1, #256	; 0x100
   179fc:	e6ffe07c 	uxth	lr, ip
   17a00:	e35e0032 	cmp	lr, #50	; 0x32
   17a04:	9a00000c 	bls	17a3c <CKeyMap::GetString(unsigned short, unsigned char, char*) const+0x5c>
   17a08:	e3120011 	tst	r2, #17
   17a0c:	e6af2071 	sxtb	r2, r1
   17a10:	0a00000d 	beq	17a4c <CKeyMap::GetString(unsigned short, unsigned char, char*) const+0x6c>
   17a14:	e6ef1071 	uxtb	r1, r1
   17a18:	e2412061 	sub	r2, r1, #97	; 0x61
   17a1c:	e3520019 	cmp	r2, #25
   17a20:	8a000017 	bhi	17a84 <CKeyMap::GetString(unsigned short, unsigned char, char*) const+0xa4>
   17a24:	e2411060 	sub	r1, r1, #96	; 0x60
   17a28:	e3a02000 	mov	r2, #0
   17a2c:	e5c31000 	strb	r1, [r3]
   17a30:	e1a00003 	mov	r0, r3
   17a34:	e5c32001 	strb	r2, [r3, #1]
   17a38:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   17a3c:	e30b3064 	movw	r3, #45156	; 0xb064
   17a40:	e3403002 	movt	r3, #2
   17a44:	e793010c 	ldr	r0, [r3, ip, lsl #2]
   17a48:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   17a4c:	e5d00400 	ldrb	r0, [r0, #1024]	; 0x400
   17a50:	e3500000 	cmp	r0, #0
   17a54:	0a000005 	beq	17a70 <CKeyMap::GetString(unsigned short, unsigned char, char*) const+0x90>
   17a58:	e6ef1071 	uxtb	r1, r1
   17a5c:	e2410041 	sub	r0, r1, #65	; 0x41
   17a60:	e3500019 	cmp	r0, #25
   17a64:	8a000008 	bhi	17a8c <CKeyMap::GetString(unsigned short, unsigned char, char*) const+0xac>
   17a68:	e2811020 	add	r1, r1, #32
   17a6c:	e6af2071 	sxtb	r2, r1
   17a70:	e5c32000 	strb	r2, [r3]
   17a74:	e1a00003 	mov	r0, r3
   17a78:	e3a02000 	mov	r2, #0
   17a7c:	e5c32001 	strb	r2, [r3, #1]
   17a80:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   17a84:	e3a00000 	mov	r0, #0
   17a88:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   17a8c:	e2410061 	sub	r0, r1, #97	; 0x61
   17a90:	e3500019 	cmp	r0, #25
   17a94:	92411020 	subls	r1, r1, #32
   17a98:	96af2071 	sxtbls	r2, r1
   17a9c:	eafffff3 	b	17a70 <CKeyMap::GetString(unsigned short, unsigned char, char*) const+0x90>

00017aa0 <CKeyMap::GetLEDStatus() const>:
   17aa0:	e5d03400 	ldrb	r3, [r0, #1024]	; 0x400
   17aa4:	e5d02401 	ldrb	r2, [r0, #1025]	; 0x401
   17aa8:	e3530000 	cmp	r3, #0
   17aac:	13a03002 	movne	r3, #2
   17ab0:	03a03000 	moveq	r3, #0
   17ab4:	e3520000 	cmp	r2, #0
   17ab8:	e5d02402 	ldrb	r2, [r0, #1026]	; 0x402
   17abc:	13833001 	orrne	r3, r3, #1
   17ac0:	e3520000 	cmp	r2, #0
   17ac4:	13833004 	orrne	r3, r3, #4
   17ac8:	e1a00003 	mov	r0, r3
   17acc:	e12fff1e 	bx	lr

00017ad0 <CKeyMap::LookupDefaultMap(char const*)>:
   17ad0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   17ad4:	e30b4064 	movw	r4, #45156	; 0xb064
   17ad8:	e3404002 	movt	r4, #2
   17adc:	e59430cc 	ldr	r3, [r4, #204]	; 0xcc
   17ae0:	e3530000 	cmp	r3, #0
   17ae4:	0a000017 	beq	17b48 <CKeyMap::LookupDefaultMap(char const*)+0x78>
   17ae8:	e308831c 	movw	r8, #33564	; 0x831c
   17aec:	e3408002 	movt	r8, #2
   17af0:	e3087328 	movw	r7, #33576	; 0x8328
   17af4:	e3407002 	movt	r7, #2
   17af8:	e1a05000 	mov	r5, r0
   17afc:	e28440cc 	add	r4, r4, #204	; 0xcc
   17b00:	e3a06000 	mov	r6, #0
   17b04:	ea000008 	b	17b2c <CKeyMap::LookupDefaultMap(char const*)+0x5c>
   17b08:	e1a01005 	mov	r1, r5
   17b0c:	e4940004 	ldr	r0, [r4], #4
   17b10:	eb002428 	bl	20bb8 <strcmp>
   17b14:	e3500000 	cmp	r0, #0
   17b18:	0a00000c 	beq	17b50 <CKeyMap::LookupDefaultMap(char const*)+0x80>
   17b1c:	e5943000 	ldr	r3, [r4]
   17b20:	e2866001 	add	r6, r6, #1
   17b24:	e3530000 	cmp	r3, #0
   17b28:	0a000006 	beq	17b48 <CKeyMap::LookupDefaultMap(char const*)+0x78>
   17b2c:	e3550000 	cmp	r5, #0
   17b30:	1afffff4 	bne	17b08 <CKeyMap::LookupDefaultMap(char const*)+0x38>
   17b34:	e300213f 	movw	r2, #319	; 0x13f
   17b38:	e1a01008 	mov	r1, r8
   17b3c:	e1a00007 	mov	r0, r7
   17b40:	eb000643 	bl	19454 <assertion_failed>
   17b44:	eaffffef 	b	17b08 <CKeyMap::LookupDefaultMap(char const*)+0x38>
   17b48:	e3a00000 	mov	r0, #0
   17b4c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   17b50:	e3060b1c 	movw	r0, #27420	; 0x6b1c
   17b54:	e3400002 	movt	r0, #2
   17b58:	e0800506 	add	r0, r0, r6, lsl #10
   17b5c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

00017b60 <CKeyMap::CKeyMap()>:
   17b60:	e92d4070 	push	{r4, r5, r6, lr}
   17b64:	e3a03000 	mov	r3, #0
   17b68:	e3a02001 	mov	r2, #1
   17b6c:	e5c03400 	strb	r3, [r0, #1024]	; 0x400
   17b70:	e1a04000 	mov	r4, r0
   17b74:	e5c02401 	strb	r2, [r0, #1025]	; 0x401
   17b78:	e5c03402 	strb	r3, [r0, #1026]	; 0x402
   17b7c:	eb000e4d 	bl	1b4b8 <CKernelOptions::Get()>
   17b80:	eb000e3f 	bl	1b484 <CKernelOptions::GetKeyMap() const>
   17b84:	e2505000 	subs	r5, r0, #0
   17b88:	0a000016 	beq	17be8 <CKeyMap::CKeyMap()+0x88>
   17b8c:	e1a00005 	mov	r0, r5
   17b90:	ebffffce 	bl	17ad0 <CKeyMap::LookupDefaultMap(char const*)>
   17b94:	e2501000 	subs	r1, r0, #0
   17b98:	0a000004 	beq	17bb0 <CKeyMap::CKeyMap()+0x50>
   17b9c:	e3a02b01 	mov	r2, #1024	; 0x400
   17ba0:	e1a00004 	mov	r0, r4
   17ba4:	eb002551 	bl	210f0 <memcpy>
   17ba8:	e1a00004 	mov	r0, r4
   17bac:	e8bd8070 	pop	{r4, r5, r6, pc}
   17bb0:	e3080338 	movw	r0, #33592	; 0x8338
   17bb4:	e3400002 	movt	r0, #2
   17bb8:	ebffffc4 	bl	17ad0 <CKeyMap::LookupDefaultMap(char const*)>
   17bbc:	e2501000 	subs	r1, r0, #0
   17bc0:	1afffff5 	bne	17b9c <CKeyMap::CKeyMap()+0x3c>
   17bc4:	e308131c 	movw	r1, #33564	; 0x831c
   17bc8:	e3401002 	movt	r1, #2
   17bcc:	e308033c 	movw	r0, #33596	; 0x833c
   17bd0:	e3400002 	movt	r0, #2
   17bd4:	e3a02080 	mov	r2, #128	; 0x80
   17bd8:	eb00061d 	bl	19454 <assertion_failed>
   17bdc:	e3061b1c 	movw	r1, #27420	; 0x6b1c
   17be0:	e3401002 	movt	r1, #2
   17be4:	eaffffec 	b	17b9c <CKeyMap::CKeyMap()+0x3c>
   17be8:	e308131c 	movw	r1, #33564	; 0x831c
   17bec:	e3401002 	movt	r1, #2
   17bf0:	e3080328 	movw	r0, #33576	; 0x8328
   17bf4:	e3400002 	movt	r0, #2
   17bf8:	e3a0207a 	mov	r2, #122	; 0x7a
   17bfc:	eb000614 	bl	19454 <assertion_failed>
   17c00:	eaffffe1 	b	17b8c <CKeyMap::CKeyMap()+0x2c>

00017c04 <CMouseDevice::~CMouseDevice()>:
   17c04:	e92d4070 	push	{r4, r5, r6, lr}
   17c08:	e1a04000 	mov	r4, r0
   17c0c:	e3085438 	movw	r5, #33848	; 0x8438
   17c10:	e3405002 	movt	r5, #2
   17c14:	e2853008 	add	r3, r5, #8
   17c18:	e3a06000 	mov	r6, #0
   17c1c:	e5803000 	str	r3, [r0]
   17c20:	e5806020 	str	r6, [r0, #32]
   17c24:	eb0008c9 	bl	19f50 <CDeviceNameService::Get()>
   17c28:	e1a03006 	mov	r3, r6
   17c2c:	e285101c 	add	r1, r5, #28
   17c30:	e5942024 	ldr	r2, [r4, #36]	; 0x24
   17c34:	eb0008ed 	bl	19ff0 <CDeviceNameService::RemoveDevice(char const*, unsigned int, bool)>
   17c38:	e2840004 	add	r0, r4, #4
   17c3c:	eb000062 	bl	17dcc <CMouseBehaviour::~CMouseBehaviour()>
   17c40:	e1a00004 	mov	r0, r4
   17c44:	eb0007d7 	bl	19ba8 <CDevice::~CDevice()>
   17c48:	e1a00004 	mov	r0, r4
   17c4c:	e8bd8070 	pop	{r4, r5, r6, pc}

00017c50 <CMouseDevice::~CMouseDevice()>:
   17c50:	e92d4010 	push	{r4, lr}
   17c54:	e1a04000 	mov	r4, r0
   17c58:	ebffffe9 	bl	17c04 <CMouseDevice::~CMouseDevice()>
   17c5c:	e1a00004 	mov	r0, r4
   17c60:	e3a01028 	mov	r1, #40	; 0x28
   17c64:	eb002909 	bl	22090 <operator delete(void*, unsigned int)>
   17c68:	e1a00004 	mov	r0, r4
   17c6c:	e8bd8010 	pop	{r4, pc}

00017c70 <CMouseDevice::CMouseDevice()>:
   17c70:	e92d4070 	push	{r4, r5, r6, lr}
   17c74:	e1a04000 	mov	r4, r0
   17c78:	e3085438 	movw	r5, #33848	; 0x8438
   17c7c:	e3405002 	movt	r5, #2
   17c80:	e24dd008 	sub	sp, sp, #8
   17c84:	e3a06000 	mov	r6, #0
   17c88:	eb0007d2 	bl	19bd8 <CDevice::CDevice()>
   17c8c:	e1a00004 	mov	r0, r4
   17c90:	e2853008 	add	r3, r5, #8
   17c94:	e4803004 	str	r3, [r0], #4
   17c98:	eb000041 	bl	17da4 <CMouseBehaviour::CMouseBehaviour()>
   17c9c:	e30b314c 	movw	r3, #45388	; 0xb14c
   17ca0:	e3403002 	movt	r3, #2
   17ca4:	e5846020 	str	r6, [r4, #32]
   17ca8:	e5932000 	ldr	r2, [r3]
   17cac:	e5842024 	str	r2, [r4, #36]	; 0x24
   17cb0:	e2822001 	add	r2, r2, #1
   17cb4:	e5832000 	str	r2, [r3]
   17cb8:	eb0008a4 	bl	19f50 <CDeviceNameService::Get()>
   17cbc:	e5942024 	ldr	r2, [r4, #36]	; 0x24
   17cc0:	e285101c 	add	r1, r5, #28
   17cc4:	e58d6000 	str	r6, [sp]
   17cc8:	e1a03004 	mov	r3, r4
   17ccc:	eb0008ad 	bl	19f88 <CDeviceNameService::AddDevice(char const*, unsigned int, CDevice*, bool)>
   17cd0:	e1a00004 	mov	r0, r4
   17cd4:	e28dd008 	add	sp, sp, #8
   17cd8:	e8bd8070 	pop	{r4, r5, r6, pc}

00017cdc <CMouseDevice::Setup(unsigned int, unsigned int)>:
   17cdc:	e2800004 	add	r0, r0, #4
   17ce0:	ea00003a 	b	17dd0 <CMouseBehaviour::Setup(unsigned int, unsigned int)>

00017ce4 <CMouseDevice::RegisterEventHandler(void (*)(TMouseEvent, unsigned int, unsigned int, unsigned int))>:
   17ce4:	e2800004 	add	r0, r0, #4
   17ce8:	ea000091 	b	17f34 <CMouseBehaviour::RegisterEventHandler(void (*)(TMouseEvent, unsigned int, unsigned int, unsigned int))>

00017cec <CMouseDevice::SetCursor(unsigned int, unsigned int)>:
   17cec:	e2800004 	add	r0, r0, #4
   17cf0:	ea000115 	b	1814c <CMouseBehaviour::SetCursor(unsigned int, unsigned int)>

00017cf4 <CMouseDevice::ShowCursor(bool)>:
   17cf4:	e2800004 	add	r0, r0, #4
   17cf8:	ea00013f 	b	181fc <CMouseBehaviour::ShowCursor(bool)>

00017cfc <CMouseDevice::UpdateCursor()>:
   17cfc:	e5903020 	ldr	r3, [r0, #32]
   17d00:	e3530000 	cmp	r3, #0
   17d04:	112fff1e 	bxne	lr
   17d08:	e2800004 	add	r0, r0, #4
   17d0c:	ea000159 	b	18278 <CMouseBehaviour::UpdateCursor()>

00017d10 <CMouseDevice::RegisterStatusHandler(void (*)(unsigned int, int, int))>:
   17d10:	e5903020 	ldr	r3, [r0, #32]
   17d14:	e92d4070 	push	{r4, r5, r6, lr}
   17d18:	e1a05000 	mov	r5, r0
   17d1c:	e1a04001 	mov	r4, r1
   17d20:	e3530000 	cmp	r3, #0
   17d24:	0a000005 	beq	17d40 <CMouseDevice::RegisterStatusHandler(void (*)(unsigned int, int, int))+0x30>
   17d28:	e308145c 	movw	r1, #33884	; 0x845c
   17d2c:	e3401002 	movt	r1, #2
   17d30:	e3060a74 	movw	r0, #27252	; 0x6a74
   17d34:	e3400002 	movt	r0, #2
   17d38:	e3a02048 	mov	r2, #72	; 0x48
   17d3c:	eb0005c4 	bl	19454 <assertion_failed>
   17d40:	e3540000 	cmp	r4, #0
   17d44:	e5854020 	str	r4, [r5, #32]
   17d48:	18bd8070 	popne	{r4, r5, r6, pc}
   17d4c:	e308145c 	movw	r1, #33884	; 0x845c
   17d50:	e3401002 	movt	r1, #2
   17d54:	e3060a8c 	movw	r0, #27276	; 0x6a8c
   17d58:	e3400002 	movt	r0, #2
   17d5c:	e3a0204a 	mov	r2, #74	; 0x4a
   17d60:	e8bd4070 	pop	{r4, r5, r6, lr}
   17d64:	ea0005ba 	b	19454 <assertion_failed>

00017d68 <CMouseDevice::ReportHandler(unsigned int, int, int)>:
   17d68:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   17d6c:	e1a04000 	mov	r4, r0
   17d70:	e2800004 	add	r0, r0, #4
   17d74:	e1a07003 	mov	r7, r3
   17d78:	e1a05001 	mov	r5, r1
   17d7c:	e1a06002 	mov	r6, r2
   17d80:	eb000081 	bl	17f8c <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)>
   17d84:	e5943020 	ldr	r3, [r4, #32]
   17d88:	e3530000 	cmp	r3, #0
   17d8c:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
   17d90:	e1a02007 	mov	r2, r7
   17d94:	e1a01006 	mov	r1, r6
   17d98:	e1a00005 	mov	r0, r5
   17d9c:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   17da0:	e12fff13 	bx	r3

00017da4 <CMouseBehaviour::CMouseBehaviour()>:
   17da4:	e3a02000 	mov	r2, #0
   17da8:	e5802000 	str	r2, [r0]
   17dac:	e5802004 	str	r2, [r0, #4]
   17db0:	e5802008 	str	r2, [r0, #8]
   17db4:	e580200c 	str	r2, [r0, #12]
   17db8:	e5c02010 	strb	r2, [r0, #16]
   17dbc:	e5c02011 	strb	r2, [r0, #17]
   17dc0:	e5802014 	str	r2, [r0, #20]
   17dc4:	e5802018 	str	r2, [r0, #24]
   17dc8:	e12fff1e 	bx	lr

00017dcc <CMouseBehaviour::~CMouseBehaviour()>:
   17dcc:	e12fff1e 	bx	lr

00017dd0 <CMouseBehaviour::Setup(unsigned int, unsigned int)>:
   17dd0:	e92d4070 	push	{r4, r5, r6, lr}
   17dd4:	e1a04000 	mov	r4, r0
   17dd8:	e5903000 	ldr	r3, [r0]
   17ddc:	e24dd038 	sub	sp, sp, #56	; 0x38
   17de0:	e1a06001 	mov	r6, r1
   17de4:	e1a05002 	mov	r5, r2
   17de8:	e3530000 	cmp	r3, #0
   17dec:	1a00002d 	bne	17ea8 <CMouseBehaviour::Setup(unsigned int, unsigned int)+0xd8>
   17df0:	e5846000 	str	r6, [r4]
   17df4:	e3560000 	cmp	r6, #0
   17df8:	0a000033 	beq	17ecc <CMouseBehaviour::Setup(unsigned int, unsigned int)+0xfc>
   17dfc:	e5943004 	ldr	r3, [r4, #4]
   17e00:	e3530000 	cmp	r3, #0
   17e04:	1a000039 	bne	17ef0 <CMouseBehaviour::Setup(unsigned int, unsigned int)+0x120>
   17e08:	e5845004 	str	r5, [r4, #4]
   17e0c:	e3550000 	cmp	r5, #0
   17e10:	0a00003f 	beq	17f14 <CMouseBehaviour::Setup(unsigned int, unsigned int)+0x144>
   17e14:	e5943000 	ldr	r3, [r4]
   17e18:	e2855001 	add	r5, r5, #1
   17e1c:	e1a050a5 	lsr	r5, r5, #1
   17e20:	e28d000c 	add	r0, sp, #12
   17e24:	e2833001 	add	r3, r3, #1
   17e28:	e584500c 	str	r5, [r4, #12]
   17e2c:	e1a030a3 	lsr	r3, r3, #1
   17e30:	e3a01000 	mov	r1, #0
   17e34:	e5843008 	str	r3, [r4, #8]
   17e38:	eb0005a9 	bl	194e4 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   17e3c:	e3a03024 	mov	r3, #36	; 0x24
   17e40:	e3081010 	movw	r1, #32784	; 0x8010
   17e44:	e28d000c 	add	r0, sp, #12
   17e48:	e3a02018 	mov	r2, #24
   17e4c:	e308c468 	movw	ip, #33896	; 0x8468
   17e50:	e340c002 	movt	ip, #2
   17e54:	e58d2000 	str	r2, [sp]
   17e58:	e28d2014 	add	r2, sp, #20
   17e5c:	e38cc103 	orr	ip, ip, #-1073741824	; 0xc0000000
   17e60:	e58dc02c 	str	ip, [sp, #44]	; 0x2c
   17e64:	e3a0c010 	mov	ip, #16
   17e68:	e58dc020 	str	ip, [sp, #32]
   17e6c:	e58dc024 	str	ip, [sp, #36]	; 0x24
   17e70:	e3a0c000 	mov	ip, #0
   17e74:	e58dc028 	str	ip, [sp, #40]	; 0x28
   17e78:	e58dc030 	str	ip, [sp, #48]	; 0x30
   17e7c:	e58dc034 	str	ip, [sp, #52]	; 0x34
   17e80:	eb0005e4 	bl	19618 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   17e84:	e2504000 	subs	r4, r0, #0
   17e88:	e28d000c 	add	r0, sp, #12
   17e8c:	159d4020 	ldrne	r4, [sp, #32]
   17e90:	116f4f14 	clzne	r4, r4
   17e94:	11a042a4 	lsrne	r4, r4, #5
   17e98:	eb000598 	bl	19500 <CBcmPropertyTags::~CBcmPropertyTags()>
   17e9c:	e1a00004 	mov	r0, r4
   17ea0:	e28dd038 	add	sp, sp, #56	; 0x38
   17ea4:	e8bd8070 	pop	{r4, r5, r6, pc}
   17ea8:	e3081868 	movw	r1, #34920	; 0x8868
   17eac:	e3401002 	movt	r1, #2
   17eb0:	e308087c 	movw	r0, #34940	; 0x887c
   17eb4:	e3400002 	movt	r0, #2
   17eb8:	e3a0204c 	mov	r2, #76	; 0x4c
   17ebc:	eb000564 	bl	19454 <assertion_failed>
   17ec0:	e5846000 	str	r6, [r4]
   17ec4:	e3560000 	cmp	r6, #0
   17ec8:	1affffcb 	bne	17dfc <CMouseBehaviour::Setup(unsigned int, unsigned int)+0x2c>
   17ecc:	e3081868 	movw	r1, #34920	; 0x8868
   17ed0:	e3401002 	movt	r1, #2
   17ed4:	e3080890 	movw	r0, #34960	; 0x8890
   17ed8:	e3400002 	movt	r0, #2
   17edc:	e3a0204e 	mov	r2, #78	; 0x4e
   17ee0:	eb00055b 	bl	19454 <assertion_failed>
   17ee4:	e5943004 	ldr	r3, [r4, #4]
   17ee8:	e3530000 	cmp	r3, #0
   17eec:	0affffc5 	beq	17e08 <CMouseBehaviour::Setup(unsigned int, unsigned int)+0x38>
   17ef0:	e3081868 	movw	r1, #34920	; 0x8868
   17ef4:	e3401002 	movt	r1, #2
   17ef8:	e30808a4 	movw	r0, #34980	; 0x88a4
   17efc:	e3400002 	movt	r0, #2
   17f00:	e3a02050 	mov	r2, #80	; 0x50
   17f04:	eb000552 	bl	19454 <assertion_failed>
   17f08:	e5845004 	str	r5, [r4, #4]
   17f0c:	e3550000 	cmp	r5, #0
   17f10:	1affffbf 	bne	17e14 <CMouseBehaviour::Setup(unsigned int, unsigned int)+0x44>
   17f14:	e3081868 	movw	r1, #34920	; 0x8868
   17f18:	e3401002 	movt	r1, #2
   17f1c:	e30808bc 	movw	r0, #35004	; 0x88bc
   17f20:	e3400002 	movt	r0, #2
   17f24:	e3a02052 	mov	r2, #82	; 0x52
   17f28:	eb000549 	bl	19454 <assertion_failed>
   17f2c:	e5945004 	ldr	r5, [r4, #4]
   17f30:	eaffffb7 	b	17e14 <CMouseBehaviour::Setup(unsigned int, unsigned int)+0x44>

00017f34 <CMouseBehaviour::RegisterEventHandler(void (*)(TMouseEvent, unsigned int, unsigned int, unsigned int))>:
   17f34:	e5903018 	ldr	r3, [r0, #24]
   17f38:	e92d4070 	push	{r4, r5, r6, lr}
   17f3c:	e1a05000 	mov	r5, r0
   17f40:	e1a04001 	mov	r4, r1
   17f44:	e3530000 	cmp	r3, #0
   17f48:	0a000005 	beq	17f64 <CMouseBehaviour::RegisterEventHandler(void (*)(TMouseEvent, unsigned int, unsigned int, unsigned int))+0x30>
   17f4c:	e3081868 	movw	r1, #34920	; 0x8868
   17f50:	e3401002 	movt	r1, #2
   17f54:	e30808d0 	movw	r0, #35024	; 0x88d0
   17f58:	e3400002 	movt	r0, #2
   17f5c:	e3a0206e 	mov	r2, #110	; 0x6e
   17f60:	eb00053b 	bl	19454 <assertion_failed>
   17f64:	e3540000 	cmp	r4, #0
   17f68:	e5854018 	str	r4, [r5, #24]
   17f6c:	18bd8070 	popne	{r4, r5, r6, pc}
   17f70:	e3081868 	movw	r1, #34920	; 0x8868
   17f74:	e3401002 	movt	r1, #2
   17f78:	e306020c 	movw	r0, #25100	; 0x620c
   17f7c:	e3400002 	movt	r0, #2
   17f80:	e3a02070 	mov	r2, #112	; 0x70
   17f84:	e8bd4070 	pop	{r4, r5, r6, lr}
   17f88:	ea000531 	b	19454 <assertion_failed>

00017f8c <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)>:
   17f8c:	e590c000 	ldr	ip, [r0]
   17f90:	e35c0000 	cmp	ip, #0
   17f94:	012fff1e 	bxeq	lr
   17f98:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   17f9c:	e590e004 	ldr	lr, [r0, #4]
   17fa0:	e35e0000 	cmp	lr, #0
   17fa4:	08bd87f0 	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   17fa8:	e1a04000 	mov	r4, r0
   17fac:	e3a00012 	mov	r0, #18
   17fb0:	e1a05001 	mov	r5, r1
   17fb4:	e3061667 	movw	r1, #26215	; 0x6667
   17fb8:	e3461666 	movt	r1, #26214	; 0x6666
   17fbc:	e0020290 	mul	r2, r0, r2
   17fc0:	e5947008 	ldr	r7, [r4, #8]
   17fc4:	e0000390 	mul	r0, r0, r3
   17fc8:	e594800c 	ldr	r8, [r4, #12]
   17fcc:	e1a06fc2 	asr	r6, r2, #31
   17fd0:	e0c32192 	smull	r2, r3, r2, r1
   17fd4:	e1a09fc0 	asr	r9, r0, #31
   17fd8:	e0c10190 	smull	r0, r1, r0, r1
   17fdc:	e0662143 	rsb	r2, r6, r3, asr #2
   17fe0:	e0822007 	add	r2, r2, r7
   17fe4:	e0693141 	rsb	r3, r9, r1, asr #2
   17fe8:	e0883003 	add	r3, r8, r3
   17fec:	e15c0002 	cmp	ip, r2
   17ff0:	9a000027 	bls	18094 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0x108>
   17ff4:	e1c420f8 	strd	r2, [r4, #8]
   17ff8:	e15e0003 	cmp	lr, r3
   17ffc:	8a000030 	bhi	180c4 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0x138>
   18000:	e584800c 	str	r8, [r4, #12]
   18004:	e1520007 	cmp	r2, r7
   18008:	0a000008 	beq	18030 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0xa4>
   1800c:	e5946018 	ldr	r6, [r4, #24]
   18010:	e3a03001 	mov	r3, #1
   18014:	e5c43010 	strb	r3, [r4, #16]
   18018:	e3560000 	cmp	r6, #0
   1801c:	0a000023 	beq	180b0 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0x124>
   18020:	e594300c 	ldr	r3, [r4, #12]
   18024:	e1a01005 	mov	r1, r5
   18028:	e3a00000 	mov	r0, #0
   1802c:	e12fff36 	blx	r6
   18030:	e5942014 	ldr	r2, [r4, #20]
   18034:	e1520005 	cmp	r2, r5
   18038:	0a00001c 	beq	180b0 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0x124>
   1803c:	e5943018 	ldr	r3, [r4, #24]
   18040:	e3530000 	cmp	r3, #0
   18044:	0a000019 	beq	180b0 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0x124>
   18048:	e3a06000 	mov	r6, #0
   1804c:	e3a07001 	mov	r7, #1
   18050:	e1a03617 	lsl	r3, r7, r6
   18054:	e3a00001 	mov	r0, #1
   18058:	e1130002 	tst	r3, r2
   1805c:	e1a01003 	mov	r1, r3
   18060:	e0052003 	and	r2, r5, r3
   18064:	0a000013 	beq	180b8 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0x12c>
   18068:	e3a00002 	mov	r0, #2
   1806c:	e3520000 	cmp	r2, #0
   18070:	1a000002 	bne	18080 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0xf4>
   18074:	e5948018 	ldr	r8, [r4, #24]
   18078:	e1c420d8 	ldrd	r2, [r4, #8]
   1807c:	e12fff38 	blx	r8
   18080:	e2866001 	add	r6, r6, #1
   18084:	e3560003 	cmp	r6, #3
   18088:	0a000008 	beq	180b0 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0x124>
   1808c:	e5942014 	ldr	r2, [r4, #20]
   18090:	eaffffee 	b	18050 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0xc4>
   18094:	e584300c 	str	r3, [r4, #12]
   18098:	e15e0003 	cmp	lr, r3
   1809c:	9a00000b 	bls	180d0 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0x144>
   180a0:	e1580003 	cmp	r8, r3
   180a4:	11a02007 	movne	r2, r7
   180a8:	1affffd7 	bne	1800c <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0x80>
   180ac:	eaffffdf 	b	18030 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0xa4>
   180b0:	e5845014 	str	r5, [r4, #20]
   180b4:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   180b8:	e3520000 	cmp	r2, #0
   180bc:	1affffec 	bne	18074 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0xe8>
   180c0:	eaffffee 	b	18080 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0xf4>
   180c4:	e1520007 	cmp	r2, r7
   180c8:	1affffcf 	bne	1800c <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0x80>
   180cc:	eafffff3 	b	180a0 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0x114>
   180d0:	e584800c 	str	r8, [r4, #12]
   180d4:	eaffffd5 	b	18030 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0xa4>

000180d8 <CMouseBehaviour::SetCursorState(unsigned int, unsigned int, bool)>:
   180d8:	e92d4070 	push	{r4, r5, r6, lr}
   180dc:	e1a05000 	mov	r5, r0
   180e0:	e1a04001 	mov	r4, r1
   180e4:	e24dd030 	sub	sp, sp, #48	; 0x30
   180e8:	e3a01000 	mov	r1, #0
   180ec:	e28d000c 	add	r0, sp, #12
   180f0:	e1a06002 	mov	r6, r2
   180f4:	eb0004fa 	bl	194e4 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   180f8:	e28d2014 	add	r2, sp, #20
   180fc:	e3081011 	movw	r1, #32785	; 0x8011
   18100:	e28d000c 	add	r0, sp, #12
   18104:	e3a03010 	mov	r3, #16
   18108:	e58d3000 	str	r3, [sp]
   1810c:	e3a0301c 	mov	r3, #28
   18110:	e3a0c001 	mov	ip, #1
   18114:	e58d4028 	str	r4, [sp, #40]	; 0x28
   18118:	e58dc02c 	str	ip, [sp, #44]	; 0x2c
   1811c:	e58d6020 	str	r6, [sp, #32]
   18120:	e58d5024 	str	r5, [sp, #36]	; 0x24
   18124:	eb00053b 	bl	19618 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   18128:	e2504000 	subs	r4, r0, #0
   1812c:	e28d000c 	add	r0, sp, #12
   18130:	159d4020 	ldrne	r4, [sp, #32]
   18134:	116f4f14 	clzne	r4, r4
   18138:	11a042a4 	lsrne	r4, r4, #5
   1813c:	eb0004ef 	bl	19500 <CBcmPropertyTags::~CBcmPropertyTags()>
   18140:	e1a00004 	mov	r0, r4
   18144:	e28dd030 	add	sp, sp, #48	; 0x30
   18148:	e8bd8070 	pop	{r4, r5, r6, pc}

0001814c <CMouseBehaviour::SetCursor(unsigned int, unsigned int)>:
   1814c:	e5903000 	ldr	r3, [r0]
   18150:	e92d4070 	push	{r4, r5, r6, lr}
   18154:	e1a04000 	mov	r4, r0
   18158:	e1a05001 	mov	r5, r1
   1815c:	e1a06002 	mov	r6, r2
   18160:	e3530000 	cmp	r3, #0
   18164:	0a000018 	beq	181cc <CMouseBehaviour::SetCursor(unsigned int, unsigned int)+0x80>
   18168:	e5943004 	ldr	r3, [r4, #4]
   1816c:	e3530000 	cmp	r3, #0
   18170:	0a00000e 	beq	181b0 <CMouseBehaviour::SetCursor(unsigned int, unsigned int)+0x64>
   18174:	e5943000 	ldr	r3, [r4]
   18178:	e1530005 	cmp	r3, r5
   1817c:	9a000009 	bls	181a8 <CMouseBehaviour::SetCursor(unsigned int, unsigned int)+0x5c>
   18180:	e5943004 	ldr	r3, [r4, #4]
   18184:	e1530006 	cmp	r3, r6
   18188:	9a000006 	bls	181a8 <CMouseBehaviour::SetCursor(unsigned int, unsigned int)+0x5c>
   1818c:	e5d43011 	ldrb	r3, [r4, #17]
   18190:	e5845008 	str	r5, [r4, #8]
   18194:	e584600c 	str	r6, [r4, #12]
   18198:	e3530000 	cmp	r3, #0
   1819c:	1a000011 	bne	181e8 <CMouseBehaviour::SetCursor(unsigned int, unsigned int)+0x9c>
   181a0:	e3a00001 	mov	r0, #1
   181a4:	e8bd8070 	pop	{r4, r5, r6, pc}
   181a8:	e3a00000 	mov	r0, #0
   181ac:	e8bd8070 	pop	{r4, r5, r6, pc}
   181b0:	e3081868 	movw	r1, #34920	; 0x8868
   181b4:	e3401002 	movt	r1, #2
   181b8:	e30808bc 	movw	r0, #35004	; 0x88bc
   181bc:	e3400002 	movt	r0, #2
   181c0:	e3a02076 	mov	r2, #118	; 0x76
   181c4:	eb0004a2 	bl	19454 <assertion_failed>
   181c8:	eaffffe9 	b	18174 <CMouseBehaviour::SetCursor(unsigned int, unsigned int)+0x28>
   181cc:	e3081868 	movw	r1, #34920	; 0x8868
   181d0:	e3401002 	movt	r1, #2
   181d4:	e3080890 	movw	r0, #34960	; 0x8890
   181d8:	e3400002 	movt	r0, #2
   181dc:	e3a02075 	mov	r2, #117	; 0x75
   181e0:	eb00049b 	bl	19454 <assertion_failed>
   181e4:	eaffffdf 	b	18168 <CMouseBehaviour::SetCursor(unsigned int, unsigned int)+0x1c>
   181e8:	e1a01006 	mov	r1, r6
   181ec:	e1a00005 	mov	r0, r5
   181f0:	e3a02001 	mov	r2, #1
   181f4:	e8bd4070 	pop	{r4, r5, r6, lr}
   181f8:	eaffffb6 	b	180d8 <CMouseBehaviour::SetCursorState(unsigned int, unsigned int, bool)>

000181fc <CMouseBehaviour::ShowCursor(bool)>:
   181fc:	e5902008 	ldr	r2, [r0, #8]
   18200:	e5903000 	ldr	r3, [r0]
   18204:	e92d4070 	push	{r4, r5, r6, lr}
   18208:	e1a04000 	mov	r4, r0
   1820c:	e5d05011 	ldrb	r5, [r0, #17]
   18210:	e1520003 	cmp	r2, r3
   18214:	e5c01011 	strb	r1, [r0, #17]
   18218:	2a00000f 	bcs	1825c <CMouseBehaviour::ShowCursor(bool)+0x60>
   1821c:	e594100c 	ldr	r1, [r4, #12]
   18220:	e5943004 	ldr	r3, [r4, #4]
   18224:	e1510003 	cmp	r1, r3
   18228:	3a000006 	bcc	18248 <CMouseBehaviour::ShowCursor(bool)+0x4c>
   1822c:	e3081868 	movw	r1, #34920	; 0x8868
   18230:	e3401002 	movt	r1, #2
   18234:	e3080904 	movw	r0, #35076	; 0x8904
   18238:	e3400002 	movt	r0, #2
   1823c:	e3a0208e 	mov	r2, #142	; 0x8e
   18240:	eb000483 	bl	19454 <assertion_failed>
   18244:	e594100c 	ldr	r1, [r4, #12]
   18248:	e5d42011 	ldrb	r2, [r4, #17]
   1824c:	e5940008 	ldr	r0, [r4, #8]
   18250:	ebffffa0 	bl	180d8 <CMouseBehaviour::SetCursorState(unsigned int, unsigned int, bool)>
   18254:	e1a00005 	mov	r0, r5
   18258:	e8bd8070 	pop	{r4, r5, r6, pc}
   1825c:	e3081868 	movw	r1, #34920	; 0x8868
   18260:	e3401002 	movt	r1, #2
   18264:	e30808e8 	movw	r0, #35048	; 0x88e8
   18268:	e3400002 	movt	r0, #2
   1826c:	e3a0208d 	mov	r2, #141	; 0x8d
   18270:	eb000477 	bl	19454 <assertion_failed>
   18274:	eaffffe8 	b	1821c <CMouseBehaviour::ShowCursor(bool)+0x20>

00018278 <CMouseBehaviour::UpdateCursor()>:
   18278:	e5d03011 	ldrb	r3, [r0, #17]
   1827c:	e3530000 	cmp	r3, #0
   18280:	012fff1e 	bxeq	lr
   18284:	e5d03010 	ldrb	r3, [r0, #16]
   18288:	e3530000 	cmp	r3, #0
   1828c:	012fff1e 	bxeq	lr
   18290:	e3a03000 	mov	r3, #0
   18294:	e3a02001 	mov	r2, #1
   18298:	e5c03010 	strb	r3, [r0, #16]
   1829c:	e1c000d8 	ldrd	r0, [r0, #8]
   182a0:	eaffff8c 	b	180d8 <CMouseBehaviour::SetCursorState(unsigned int, unsigned int, bool)>

000182a4 <CPartitionManager::CPartitionManager(CDevice*, char const*)>:
   182a4:	e92d4010 	push	{r4, lr}
   182a8:	e1a04000 	mov	r4, r0
   182ac:	e4801004 	str	r1, [r0], #4
   182b0:	e1a01002 	mov	r1, r2
   182b4:	eb001a6b 	bl	1ec68 <CString::CString(char const*)>
   182b8:	e3a03000 	mov	r3, #0
   182bc:	e1a00004 	mov	r0, r4
   182c0:	e5843014 	str	r3, [r4, #20]
   182c4:	e5843018 	str	r3, [r4, #24]
   182c8:	e584301c 	str	r3, [r4, #28]
   182cc:	e5843020 	str	r3, [r4, #32]
   182d0:	e8bd8010 	pop	{r4, pc}

000182d4 <CPartitionManager::~CPartitionManager()>:
   182d4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   182d8:	e1a06000 	mov	r6, r0
   182dc:	e3a05000 	mov	r5, #0
   182e0:	e2804014 	add	r4, r0, #20
   182e4:	e2807024 	add	r7, r0, #36	; 0x24
   182e8:	e4943004 	ldr	r3, [r4], #4
   182ec:	e2530000 	subs	r0, r3, #0
   182f0:	0a000002 	beq	18300 <CPartitionManager::~CPartitionManager()+0x2c>
   182f4:	e5933000 	ldr	r3, [r3]
   182f8:	e5933004 	ldr	r3, [r3, #4]
   182fc:	e12fff33 	blx	r3
   18300:	e5045004 	str	r5, [r4, #-4]
   18304:	e1540007 	cmp	r4, r7
   18308:	1afffff6 	bne	182e8 <CPartitionManager::~CPartitionManager()+0x14>
   1830c:	e1a00006 	mov	r0, r6
   18310:	e4805004 	str	r5, [r0], #4
   18314:	eb001a1b 	bl	1eb88 <CString::~CString()>
   18318:	e1a00006 	mov	r0, r6
   1831c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

00018320 <CPartitionManager::Initialize()>:
   18320:	e5901000 	ldr	r1, [r0]
   18324:	e3a03000 	mov	r3, #0
   18328:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1832c:	e1a04000 	mov	r4, r0
   18330:	e1a00001 	mov	r0, r1
   18334:	e24ddf89 	sub	sp, sp, #548	; 0x224
   18338:	e3a02000 	mov	r2, #0
   1833c:	e5911000 	ldr	r1, [r1]
   18340:	e5911010 	ldr	r1, [r1, #16]
   18344:	e12fff31 	blx	r1
   18348:	e1903001 	orrs	r3, r0, r1
   1834c:	1a000008 	bne	18374 <CPartitionManager::Initialize()+0x54>
   18350:	e5943000 	ldr	r3, [r4]
   18354:	e28d1020 	add	r1, sp, #32
   18358:	e3a02c02 	mov	r2, #512	; 0x200
   1835c:	e1a00003 	mov	r0, r3
   18360:	e5933000 	ldr	r3, [r3]
   18364:	e5933008 	ldr	r3, [r3, #8]
   18368:	e12fff33 	blx	r3
   1836c:	e3500c02 	cmp	r0, #512	; 0x200
   18370:	0a000009 	beq	1839c <CPartitionManager::Initialize()+0x7c>
   18374:	eb000e94 	bl	1bdcc <CLogger::Get()>
   18378:	e3083928 	movw	r3, #35112	; 0x8928
   1837c:	e3403002 	movt	r3, #2
   18380:	e3081920 	movw	r1, #35104	; 0x8920
   18384:	e3401002 	movt	r1, #2
   18388:	e3a02001 	mov	r2, #1
   1838c:	eb000dc5 	bl	1baa8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   18390:	e3a00000 	mov	r0, #0
   18394:	e28ddf89 	add	sp, sp, #548	; 0x224
   18398:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1839c:	e28d3f87 	add	r3, sp, #540	; 0x21c
   183a0:	e2833002 	add	r3, r3, #2
   183a4:	e1d320b0 	ldrh	r2, [r3]
   183a8:	e30a3a55 	movw	r3, #43605	; 0xaa55
   183ac:	e1520003 	cmp	r2, r3
   183b0:	1a000023 	bne	18444 <CPartitionManager::Initialize()+0x124>
   183b4:	e3a06000 	mov	r6, #0
   183b8:	e308b964 	movw	fp, #35172	; 0x8964
   183bc:	e340b002 	movt	fp, #2
   183c0:	e28d5020 	add	r5, sp, #32
   183c4:	e1a07006 	mov	r7, r6
   183c8:	e308a97c 	movw	sl, #35196	; 0x897c
   183cc:	e340a002 	movt	sl, #2
   183d0:	e308394c 	movw	r3, #35148	; 0x894c
   183d4:	e3403002 	movt	r3, #2
   183d8:	e58da008 	str	sl, [sp, #8]
   183dc:	e58d3004 	str	r3, [sp, #4]
   183e0:	e5d511c2 	ldrb	r1, [r5, #450]	; 0x1c2
   183e4:	e3083021 	movw	r3, #32801	; 0x8021
   183e8:	e3a02000 	mov	r2, #0
   183ec:	e286a01c 	add	sl, r6, #28
   183f0:	e351000f 	cmp	r1, #15
   183f4:	91e03133 	mvnls	r3, r3, lsr r1
   183f8:	92033001 	andls	r3, r3, #1
   183fc:	92232001 	eorls	r2, r3, #1
   18400:	e28d3e22 	add	r3, sp, #544	; 0x220
   18404:	e35100ef 	cmp	r1, #239	; 0xef
   18408:	03822001 	orreq	r2, r2, #1
   1840c:	e083120a 	add	r1, r3, sl, lsl #4
   18410:	e3520000 	cmp	r2, #0
   18414:	0a000014 	beq	1846c <CPartitionManager::Initialize()+0x14c>
   18418:	e2866001 	add	r6, r6, #1
   1841c:	e2855010 	add	r5, r5, #16
   18420:	e3560004 	cmp	r6, #4
   18424:	1affffed 	bne	183e0 <CPartitionManager::Initialize()+0xc0>
   18428:	e3570000 	cmp	r7, #0
   1842c:	13a00001 	movne	r0, #1
   18430:	1affffd7 	bne	18394 <CPartitionManager::Initialize()+0x74>
   18434:	eb000e64 	bl	1bdcc <CLogger::Get()>
   18438:	e3083984 	movw	r3, #35204	; 0x8984
   1843c:	e3403002 	movt	r3, #2
   18440:	ea000002 	b	18450 <CPartitionManager::Initialize()+0x130>
   18444:	eb000e60 	bl	1bdcc <CLogger::Get()>
   18448:	e3083938 	movw	r3, #35128	; 0x8938
   1844c:	e3403002 	movt	r3, #2
   18450:	e3a02002 	mov	r2, #2
   18454:	e3081920 	movw	r1, #35104	; 0x8920
   18458:	e3401002 	movt	r1, #2
   1845c:	eb000d91 	bl	1baa8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   18460:	e3a00001 	mov	r0, #1
   18464:	e28ddf89 	add	sp, sp, #548	; 0x224
   18468:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1846c:	e51121fa 	ldr	r2, [r1, #-506]	; 0xfffffe06
   18470:	e1a09004 	mov	r9, r4
   18474:	e0848106 	add	r8, r4, r6, lsl #2
   18478:	e3520000 	cmp	r2, #0
   1847c:	0affffe5 	beq	18418 <CPartitionManager::Initialize()+0xf8>
   18480:	e51121f6 	ldr	r2, [r1, #-502]	; 0xfffffe0a
   18484:	e3520000 	cmp	r2, #0
   18488:	0affffe2 	beq	18418 <CPartitionManager::Initialize()+0xf8>
   1848c:	e598c014 	ldr	ip, [r8, #20]
   18490:	e2877001 	add	r7, r7, #1
   18494:	e3a02070 	mov	r2, #112	; 0x70
   18498:	e59d1004 	ldr	r1, [sp, #4]
   1849c:	e1a0000b 	mov	r0, fp
   184a0:	e35c0000 	cmp	ip, #0
   184a4:	0a000000 	beq	184ac <CPartitionManager::Initialize()+0x18c>
   184a8:	eb0003e9 	bl	19454 <assertion_failed>
   184ac:	e3a00020 	mov	r0, #32
   184b0:	eb0026f2 	bl	22080 <operator new(unsigned int)>
   184b4:	e28d3e22 	add	r3, sp, #544	; 0x220
   184b8:	e083220a 	add	r2, r3, sl, lsl #4
   184bc:	e58d000c 	str	r0, [sp, #12]
   184c0:	e4991004 	ldr	r1, [r9], #4
   184c4:	e51231f6 	ldr	r3, [r2, #-502]	; 0xfffffe0a
   184c8:	e51221fa 	ldr	r2, [r2, #-506]	; 0xfffffe06
   184cc:	eb0000bb 	bl	187c0 <CPartition::CPartition(CDevice*, unsigned int, unsigned int)>
   184d0:	e59d300c 	ldr	r3, [sp, #12]
   184d4:	e5883014 	str	r3, [r8, #20]
   184d8:	e28d0010 	add	r0, sp, #16
   184dc:	eb0019db 	bl	1ec50 <CString::CString()>
   184e0:	e1a00009 	mov	r0, r9
   184e4:	eb0019f0 	bl	1ecac <CString::operator char const*() const>
   184e8:	e1a03007 	mov	r3, r7
   184ec:	e1a02000 	mov	r2, r0
   184f0:	e59d1008 	ldr	r1, [sp, #8]
   184f4:	e28d0010 	add	r0, sp, #16
   184f8:	eb001d9d 	bl	1fb74 <CString::Format(char const*, ...)>
   184fc:	eb000693 	bl	19f50 <CDeviceNameService::Get()>
   18500:	e1a09000 	mov	r9, r0
   18504:	e28d0010 	add	r0, sp, #16
   18508:	eb0019e7 	bl	1ecac <CString::operator char const*() const>
   1850c:	e5982014 	ldr	r2, [r8, #20]
   18510:	e1a01000 	mov	r1, r0
   18514:	e3a03001 	mov	r3, #1
   18518:	e1a00009 	mov	r0, r9
   1851c:	eb0005e1 	bl	19ca8 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)>
   18520:	e28d0010 	add	r0, sp, #16
   18524:	eb001997 	bl	1eb88 <CString::~CString()>
   18528:	eaffffba 	b	18418 <CPartitionManager::Initialize()+0xf8>

0001852c <CPartition::Read(void*, unsigned int)>:
   1852c:	e5d03018 	ldrb	r3, [r0, #24]
   18530:	e3530000 	cmp	r3, #0
   18534:	1a000028 	bne	185dc <CPartition::Read(void*, unsigned int)+0xb0>
   18538:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1853c:	e300a1ff 	movw	sl, #511	; 0x1ff
   18540:	e3a0b000 	mov	fp, #0
   18544:	e1c081d0 	ldrd	r8, [r0, #16]
   18548:	e09a4002 	adds	r4, sl, r2
   1854c:	e2ab5000 	adc	r5, fp, #0
   18550:	e590600c 	ldr	r6, [r0, #12]
   18554:	e094a008 	adds	sl, r4, r8
   18558:	e3a07000 	mov	r7, #0
   1855c:	e0a5b009 	adc	fp, r5, r9
   18560:	e1a044aa 	lsr	r4, sl, #9
   18564:	e1a054ab 	lsr	r5, fp, #9
   18568:	e1844b8b 	orr	r4, r4, fp, lsl #23
   1856c:	e1570005 	cmp	r7, r5
   18570:	e24dd004 	sub	sp, sp, #4
   18574:	01560004 	cmpeq	r6, r4
   18578:	3a000014 	bcc	185d0 <CPartition::Read(void*, unsigned int)+0xa4>
   1857c:	e1a04000 	mov	r4, r0
   18580:	e5900004 	ldr	r0, [r0, #4]
   18584:	e1a05002 	mov	r5, r2
   18588:	e1a06001 	mov	r6, r1
   1858c:	e3500000 	cmp	r0, #0
   18590:	0a000006 	beq	185b0 <CPartition::Read(void*, unsigned int)+0x84>
   18594:	e5903000 	ldr	r3, [r0]
   18598:	e1a02005 	mov	r2, r5
   1859c:	e1a01006 	mov	r1, r6
   185a0:	e5933008 	ldr	r3, [r3, #8]
   185a4:	e28dd004 	add	sp, sp, #4
   185a8:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   185ac:	e12fff13 	bx	r3
   185b0:	e30819c4 	movw	r1, #35268	; 0x89c4
   185b4:	e3401002 	movt	r1, #2
   185b8:	e30408dc 	movw	r0, #18652	; 0x48dc
   185bc:	e3400002 	movt	r0, #2
   185c0:	e3a02035 	mov	r2, #53	; 0x35
   185c4:	eb0003a2 	bl	19454 <assertion_failed>
   185c8:	e5940004 	ldr	r0, [r4, #4]
   185cc:	eafffff0 	b	18594 <CPartition::Read(void*, unsigned int)+0x68>
   185d0:	e3e00000 	mvn	r0, #0
   185d4:	e28dd004 	add	sp, sp, #4
   185d8:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   185dc:	e3e00000 	mvn	r0, #0
   185e0:	e12fff1e 	bx	lr

000185e4 <CPartition::Write(void const*, unsigned int)>:
   185e4:	e5d03018 	ldrb	r3, [r0, #24]
   185e8:	e3530000 	cmp	r3, #0
   185ec:	1a000028 	bne	18694 <CPartition::Write(void const*, unsigned int)+0xb0>
   185f0:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   185f4:	e300a1ff 	movw	sl, #511	; 0x1ff
   185f8:	e3a0b000 	mov	fp, #0
   185fc:	e1c081d0 	ldrd	r8, [r0, #16]
   18600:	e09a4002 	adds	r4, sl, r2
   18604:	e2ab5000 	adc	r5, fp, #0
   18608:	e590600c 	ldr	r6, [r0, #12]
   1860c:	e094a008 	adds	sl, r4, r8
   18610:	e3a07000 	mov	r7, #0
   18614:	e0a5b009 	adc	fp, r5, r9
   18618:	e1a044aa 	lsr	r4, sl, #9
   1861c:	e1a054ab 	lsr	r5, fp, #9
   18620:	e1844b8b 	orr	r4, r4, fp, lsl #23
   18624:	e1570005 	cmp	r7, r5
   18628:	e24dd004 	sub	sp, sp, #4
   1862c:	01560004 	cmpeq	r6, r4
   18630:	3a000014 	bcc	18688 <CPartition::Write(void const*, unsigned int)+0xa4>
   18634:	e1a04000 	mov	r4, r0
   18638:	e5900004 	ldr	r0, [r0, #4]
   1863c:	e1a05002 	mov	r5, r2
   18640:	e1a06001 	mov	r6, r1
   18644:	e3500000 	cmp	r0, #0
   18648:	0a000006 	beq	18668 <CPartition::Write(void const*, unsigned int)+0x84>
   1864c:	e5903000 	ldr	r3, [r0]
   18650:	e1a02005 	mov	r2, r5
   18654:	e1a01006 	mov	r1, r6
   18658:	e593300c 	ldr	r3, [r3, #12]
   1865c:	e28dd004 	add	sp, sp, #4
   18660:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18664:	e12fff13 	bx	r3
   18668:	e30819c4 	movw	r1, #35268	; 0x89c4
   1866c:	e3401002 	movt	r1, #2
   18670:	e30408dc 	movw	r0, #18652	; 0x48dc
   18674:	e3400002 	movt	r0, #2
   18678:	e3a02047 	mov	r2, #71	; 0x47
   1867c:	eb000374 	bl	19454 <assertion_failed>
   18680:	e5940004 	ldr	r0, [r4, #4]
   18684:	eafffff0 	b	1864c <CPartition::Write(void const*, unsigned int)+0x68>
   18688:	e3e00000 	mvn	r0, #0
   1868c:	e28dd004 	add	sp, sp, #4
   18690:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18694:	e3e00000 	mvn	r0, #0
   18698:	e12fff1e 	bx	lr

0001869c <CPartition::~CPartition()>:
   1869c:	e59f2018 	ldr	r2, [pc, #24]	; 186bc <CPartition::~CPartition()+0x20>
   186a0:	e3a03000 	mov	r3, #0
   186a4:	e92d4010 	push	{r4, lr}
   186a8:	e1a04000 	mov	r4, r0
   186ac:	e1c020f0 	strd	r2, [r0]
   186b0:	eb00053c 	bl	19ba8 <CDevice::~CDevice()>
   186b4:	e1a00004 	mov	r0, r4
   186b8:	e8bd8010 	pop	{r4, pc}
   186bc:	000289b0 	.word	0x000289b0

000186c0 <CPartition::~CPartition()>:
   186c0:	e59f2024 	ldr	r2, [pc, #36]	; 186ec <CPartition::~CPartition()+0x2c>
   186c4:	e3a03000 	mov	r3, #0
   186c8:	e92d4010 	push	{r4, lr}
   186cc:	e1a04000 	mov	r4, r0
   186d0:	e1c020f0 	strd	r2, [r0]
   186d4:	eb000533 	bl	19ba8 <CDevice::~CDevice()>
   186d8:	e1a00004 	mov	r0, r4
   186dc:	e3a01020 	mov	r1, #32
   186e0:	eb00266a 	bl	22090 <operator delete(void*, unsigned int)>
   186e4:	e1a00004 	mov	r0, r4
   186e8:	e8bd8010 	pop	{r4, pc}
   186ec:	000289b0 	.word	0x000289b0

000186f0 <CPartition::Seek(unsigned long long)>:
   186f0:	e92d4df0 	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   186f4:	e3a05000 	mov	r5, #0
   186f8:	e30041ff 	movw	r4, #511	; 0x1ff
   186fc:	e0057003 	and	r7, r5, r3
   18700:	e0046002 	and	r6, r4, r2
   18704:	e3a01001 	mov	r1, #1
   18708:	e5c01018 	strb	r1, [r0, #24]
   1870c:	e1961007 	orrs	r1, r6, r7
   18710:	1a00001f 	bne	18794 <CPartition::Seek(unsigned long long)+0xa4>
   18714:	e590400c 	ldr	r4, [r0, #12]
   18718:	e1a064a2 	lsr	r6, r2, #9
   1871c:	e1a074a3 	lsr	r7, r3, #9
   18720:	e3a05000 	mov	r5, #0
   18724:	e1866b83 	orr	r6, r6, r3, lsl #23
   18728:	e1570005 	cmp	r7, r5
   1872c:	01560004 	cmpeq	r6, r4
   18730:	2a000017 	bcs	18794 <CPartition::Seek(unsigned long long)+0xa4>
   18734:	e1a07003 	mov	r7, r3
   18738:	e1a08000 	mov	r8, r0
   1873c:	e9900009 	ldmib	r0, {r0, r3}
   18740:	e1a06002 	mov	r6, r2
   18744:	e1a0a483 	lsl	sl, r3, #9
   18748:	e1a0bba3 	lsr	fp, r3, #23
   1874c:	e09a4002 	adds	r4, sl, r2
   18750:	e0ab5007 	adc	r5, fp, r7
   18754:	e3500000 	cmp	r0, #0
   18758:	0a000010 	beq	187a0 <CPartition::Seek(unsigned long long)+0xb0>
   1875c:	e5901000 	ldr	r1, [r0]
   18760:	e1a02004 	mov	r2, r4
   18764:	e1a03005 	mov	r3, r5
   18768:	e5911010 	ldr	r1, [r1, #16]
   1876c:	e12fff31 	blx	r1
   18770:	e1550001 	cmp	r5, r1
   18774:	01540000 	cmpeq	r4, r0
   18778:	1a000005 	bne	18794 <CPartition::Seek(unsigned long long)+0xa4>
   1877c:	e3a03000 	mov	r3, #0
   18780:	e1a00006 	mov	r0, r6
   18784:	e1a01007 	mov	r1, r7
   18788:	e1c861f0 	strd	r6, [r8, #16]
   1878c:	e5c83018 	strb	r3, [r8, #24]
   18790:	e8bd8df0 	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   18794:	e3e00000 	mvn	r0, #0
   18798:	e1a01000 	mov	r1, r0
   1879c:	e8bd8df0 	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   187a0:	e30819c4 	movw	r1, #35268	; 0x89c4
   187a4:	e3401002 	movt	r1, #2
   187a8:	e30408dc 	movw	r0, #18652	; 0x48dc
   187ac:	e3400002 	movt	r0, #2
   187b0:	e3a02059 	mov	r2, #89	; 0x59
   187b4:	eb000326 	bl	19454 <assertion_failed>
   187b8:	e5980004 	ldr	r0, [r8, #4]
   187bc:	eaffffe6 	b	1875c <CPartition::Seek(unsigned long long)+0x6c>

000187c0 <CPartition::CPartition(CDevice*, unsigned int, unsigned int)>:
   187c0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   187c4:	e1a04000 	mov	r4, r0
   187c8:	e1a05001 	mov	r5, r1
   187cc:	e1a07002 	mov	r7, r2
   187d0:	e1a06003 	mov	r6, r3
   187d4:	eb0004ff 	bl	19bd8 <CDevice::CDevice()>
   187d8:	f2c00010 	vmov.i32	d16, #0	; 0x00000000
   187dc:	e59f1048 	ldr	r1, [pc, #72]	; 1882c <CPartition::CPartition(CDevice*, unsigned int, unsigned int)+0x6c>
   187e0:	e3a02001 	mov	r2, #1
   187e4:	e3550000 	cmp	r5, #0
   187e8:	e5847008 	str	r7, [r4, #8]
   187ec:	e5845004 	str	r5, [r4, #4]
   187f0:	e584600c 	str	r6, [r4, #12]
   187f4:	e5841000 	str	r1, [r4]
   187f8:	edc40b04 	vstr	d16, [r4, #16]
   187fc:	e5c42018 	strb	r2, [r4, #24]
   18800:	0a000001 	beq	1880c <CPartition::CPartition(CDevice*, unsigned int, unsigned int)+0x4c>
   18804:	e1a00004 	mov	r0, r4
   18808:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1880c:	e3a0201f 	mov	r2, #31
   18810:	e30819c4 	movw	r1, #35268	; 0x89c4
   18814:	e3401002 	movt	r1, #2
   18818:	e30408dc 	movw	r0, #18652	; 0x48dc
   1881c:	e3400002 	movt	r0, #2
   18820:	eb00030b 	bl	19454 <assertion_failed>
   18824:	e1a00004 	mov	r0, r4
   18828:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1882c:	000289b0 	.word	0x000289b0

00018830 <CScheduler::CScheduler()>:
   18830:	e92d4070 	push	{r4, r5, r6, lr}
   18834:	e30b54a4 	movw	r5, #46244	; 0xb4a4
   18838:	e3405002 	movt	r5, #2
   1883c:	e3a03000 	mov	r3, #0
   18840:	e1a04000 	mov	r4, r0
   18844:	e5803050 	str	r3, [r0, #80]	; 0x50
   18848:	e5952000 	ldr	r2, [r5]
   1884c:	e5803054 	str	r3, [r0, #84]	; 0x54
   18850:	e1520003 	cmp	r2, r3
   18854:	e5803058 	str	r3, [r0, #88]	; 0x58
   18858:	e580305c 	str	r3, [r0, #92]	; 0x5c
   1885c:	e5803060 	str	r3, [r0, #96]	; 0x60
   18860:	0a000005 	beq	1887c <CScheduler::CScheduler()+0x4c>
   18864:	e30819dc 	movw	r1, #35292	; 0x89dc
   18868:	e3401002 	movt	r1, #2
   1886c:	e30809ec 	movw	r0, #35308	; 0x89ec
   18870:	e3400002 	movt	r0, #2
   18874:	e3a02024 	mov	r2, #36	; 0x24
   18878:	eb0002f5 	bl	19454 <assertion_failed>
   1887c:	e3a000d8 	mov	r0, #216	; 0xd8
   18880:	e5854000 	str	r4, [r5]
   18884:	eb0025fd 	bl	22080 <operator new(unsigned int)>
   18888:	e3a01000 	mov	r1, #0
   1888c:	e1a05000 	mov	r5, r0
   18890:	eb000224 	bl	19128 <CTask::CTask(unsigned int)>
   18894:	e5845054 	str	r5, [r4, #84]	; 0x54
   18898:	e1a00004 	mov	r0, r4
   1889c:	e8bd8070 	pop	{r4, r5, r6, pc}

000188a0 <CScheduler::~CScheduler()>:
   188a0:	e30b34a4 	movw	r3, #46244	; 0xb4a4
   188a4:	e3403002 	movt	r3, #2
   188a8:	e3a02000 	mov	r2, #0
   188ac:	e5832000 	str	r2, [r3]
   188b0:	e12fff1e 	bx	lr

000188b4 <CScheduler::GetCurrentTask()>:
   188b4:	e5900054 	ldr	r0, [r0, #84]	; 0x54
   188b8:	e12fff1e 	bx	lr

000188bc <CScheduler::RegisterTaskSwitchHandler(void (*)(CTask*))>:
   188bc:	e590305c 	ldr	r3, [r0, #92]	; 0x5c
   188c0:	e92d4070 	push	{r4, r5, r6, lr}
   188c4:	e1a05000 	mov	r5, r0
   188c8:	e1a04001 	mov	r4, r1
   188cc:	e3530000 	cmp	r3, #0
   188d0:	0a000005 	beq	188ec <CScheduler::RegisterTaskSwitchHandler(void (*)(CTask*))+0x30>
   188d4:	e30819dc 	movw	r1, #35292	; 0x89dc
   188d8:	e3401002 	movt	r1, #2
   188dc:	e30809fc 	movw	r0, #35324	; 0x89fc
   188e0:	e3400002 	movt	r0, #2
   188e4:	e3a0207e 	mov	r2, #126	; 0x7e
   188e8:	eb0002d9 	bl	19454 <assertion_failed>
   188ec:	e3540000 	cmp	r4, #0
   188f0:	e585405c 	str	r4, [r5, #92]	; 0x5c
   188f4:	18bd8070 	popne	{r4, r5, r6, pc}
   188f8:	e30819dc 	movw	r1, #35292	; 0x89dc
   188fc:	e3401002 	movt	r1, #2
   18900:	e3080a18 	movw	r0, #35352	; 0x8a18
   18904:	e3400002 	movt	r0, #2
   18908:	e3a02080 	mov	r2, #128	; 0x80
   1890c:	e8bd4070 	pop	{r4, r5, r6, lr}
   18910:	ea0002cf 	b	19454 <assertion_failed>

00018914 <CScheduler::RegisterTaskTerminationHandler(void (*)(CTask*))>:
   18914:	e5903060 	ldr	r3, [r0, #96]	; 0x60
   18918:	e92d4070 	push	{r4, r5, r6, lr}
   1891c:	e1a05000 	mov	r5, r0
   18920:	e1a04001 	mov	r4, r1
   18924:	e3530000 	cmp	r3, #0
   18928:	0a000005 	beq	18944 <CScheduler::RegisterTaskTerminationHandler(void (*)(CTask*))+0x30>
   1892c:	e30819dc 	movw	r1, #35292	; 0x89dc
   18930:	e3401002 	movt	r1, #2
   18934:	e3080a34 	movw	r0, #35380	; 0x8a34
   18938:	e3400002 	movt	r0, #2
   1893c:	e3a02085 	mov	r2, #133	; 0x85
   18940:	eb0002c3 	bl	19454 <assertion_failed>
   18944:	e3540000 	cmp	r4, #0
   18948:	e5854060 	str	r4, [r5, #96]	; 0x60
   1894c:	18bd8070 	popne	{r4, r5, r6, pc}
   18950:	e30819dc 	movw	r1, #35292	; 0x89dc
   18954:	e3401002 	movt	r1, #2
   18958:	e3080a54 	movw	r0, #35412	; 0x8a54
   1895c:	e3400002 	movt	r0, #2
   18960:	e3a02087 	mov	r2, #135	; 0x87
   18964:	e8bd4070 	pop	{r4, r5, r6, lr}
   18968:	ea0002b9 	b	19454 <assertion_failed>

0001896c <CScheduler::AddTask(CTask*)>:
   1896c:	e92d4070 	push	{r4, r5, r6, lr}
   18970:	e1a04000 	mov	r4, r0
   18974:	e2515000 	subs	r5, r1, #0
   18978:	0a00001c 	beq	189f0 <CScheduler::AddTask(CTask*)+0x84>
   1897c:	e5940050 	ldr	r0, [r4, #80]	; 0x50
   18980:	e3500000 	cmp	r0, #0
   18984:	0a000020 	beq	18a0c <CScheduler::AddTask(CTask*)+0xa0>
   18988:	e5943000 	ldr	r3, [r4]
   1898c:	e3530000 	cmp	r3, #0
   18990:	11a02004 	movne	r2, r4
   18994:	13a03000 	movne	r3, #0
   18998:	1a000003 	bne	189ac <CScheduler::AddTask(CTask*)+0x40>
   1899c:	ea000011 	b	189e8 <CScheduler::AddTask(CTask*)+0x7c>
   189a0:	e5b21004 	ldr	r1, [r2, #4]!
   189a4:	e3510000 	cmp	r1, #0
   189a8:	0a00000e 	beq	189e8 <CScheduler::AddTask(CTask*)+0x7c>
   189ac:	e2833001 	add	r3, r3, #1
   189b0:	e1500003 	cmp	r0, r3
   189b4:	1afffff9 	bne	189a0 <CScheduler::AddTask(CTask*)+0x34>
   189b8:	e3530014 	cmp	r3, #20
   189bc:	1a000007 	bne	189e0 <CScheduler::AddTask(CTask*)+0x74>
   189c0:	eb000d01 	bl	1bdcc <CLogger::Get()>
   189c4:	e3083a80 	movw	r3, #35456	; 0x8a80
   189c8:	e3403002 	movt	r3, #2
   189cc:	e30819d4 	movw	r1, #35284	; 0x89d4
   189d0:	e3401002 	movt	r1, #2
   189d4:	e3a02000 	mov	r2, #0
   189d8:	eb000c32 	bl	1baa8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   189dc:	e5943050 	ldr	r3, [r4, #80]	; 0x50
   189e0:	e2832001 	add	r2, r3, #1
   189e4:	e5842050 	str	r2, [r4, #80]	; 0x50
   189e8:	e7845103 	str	r5, [r4, r3, lsl #2]
   189ec:	e8bd8070 	pop	{r4, r5, r6, pc}
   189f0:	e30819dc 	movw	r1, #35292	; 0x89dc
   189f4:	e3401002 	movt	r1, #2
   189f8:	e3080a74 	movw	r0, #35444	; 0x8a74
   189fc:	e3400002 	movt	r0, #2
   18a00:	e3a0208c 	mov	r2, #140	; 0x8c
   18a04:	eb000292 	bl	19454 <assertion_failed>
   18a08:	eaffffdb 	b	1897c <CScheduler::AddTask(CTask*)+0x10>
   18a0c:	e1a03000 	mov	r3, r0
   18a10:	eafffff2 	b	189e0 <CScheduler::AddTask(CTask*)+0x74>

00018a14 <CScheduler::RemoveTask(CTask*)>:
   18a14:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   18a18:	e590e050 	ldr	lr, [r0, #80]	; 0x50
   18a1c:	e35e0000 	cmp	lr, #0
   18a20:	0a00000b 	beq	18a54 <CScheduler::RemoveTask(CTask*)+0x40>
   18a24:	e5903000 	ldr	r3, [r0]
   18a28:	e1510003 	cmp	r1, r3
   18a2c:	11a02000 	movne	r2, r0
   18a30:	13a03000 	movne	r3, #0
   18a34:	1a000003 	bne	18a48 <CScheduler::RemoveTask(CTask*)+0x34>
   18a38:	ea00000c 	b	18a70 <CScheduler::RemoveTask(CTask*)+0x5c>
   18a3c:	e5b2c004 	ldr	ip, [r2, #4]!
   18a40:	e15c0001 	cmp	ip, r1
   18a44:	0a00000a 	beq	18a74 <CScheduler::RemoveTask(CTask*)+0x60>
   18a48:	e2833001 	add	r3, r3, #1
   18a4c:	e15e0003 	cmp	lr, r3
   18a50:	1afffff9 	bne	18a3c <CScheduler::RemoveTask(CTask*)+0x28>
   18a54:	e30819dc 	movw	r1, #35292	; 0x89dc
   18a58:	e3401002 	movt	r1, #2
   18a5c:	e3040ad8 	movw	r0, #19160	; 0x4ad8
   18a60:	e3400002 	movt	r0, #2
   18a64:	e3a020b2 	mov	r2, #178	; 0xb2
   18a68:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
   18a6c:	ea000278 	b	19454 <assertion_failed>
   18a70:	e3a03000 	mov	r3, #0
   18a74:	e24ee001 	sub	lr, lr, #1
   18a78:	e3a02000 	mov	r2, #0
   18a7c:	e15e0003 	cmp	lr, r3
   18a80:	e7802103 	str	r2, [r0, r3, lsl #2]
   18a84:	05803050 	streq	r3, [r0, #80]	; 0x50
   18a88:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

00018a8c <CScheduler::WakeTask(CTask**)>:
   18a8c:	e92d4070 	push	{r4, r5, r6, lr}
   18a90:	e2515000 	subs	r5, r1, #0
   18a94:	0a000010 	beq	18adc <CScheduler::WakeTask(CTask**)+0x50>
   18a98:	e5954000 	ldr	r4, [r5]
   18a9c:	e3a03000 	mov	r3, #0
   18aa0:	e5853000 	str	r3, [r5]
   18aa4:	e1540003 	cmp	r4, r3
   18aa8:	0a000012 	beq	18af8 <CScheduler::WakeTask(CTask**)+0x6c>
   18aac:	e5d43004 	ldrb	r3, [r4, #4]
   18ab0:	e3530001 	cmp	r3, #1
   18ab4:	0a000005 	beq	18ad0 <CScheduler::WakeTask(CTask**)+0x44>
   18ab8:	e30819dc 	movw	r1, #35292	; 0x89dc
   18abc:	e3401002 	movt	r1, #2
   18ac0:	e3080aac 	movw	r0, #35500	; 0x8aac
   18ac4:	e3400002 	movt	r0, #2
   18ac8:	e3a020d0 	mov	r2, #208	; 0xd0
   18acc:	eb000260 	bl	19454 <assertion_failed>
   18ad0:	e3a03000 	mov	r3, #0
   18ad4:	e5c43004 	strb	r3, [r4, #4]
   18ad8:	e8bd8070 	pop	{r4, r5, r6, pc}
   18adc:	e30819dc 	movw	r1, #35292	; 0x89dc
   18ae0:	e3401002 	movt	r1, #2
   18ae4:	e3080aa0 	movw	r0, #35488	; 0x8aa0
   18ae8:	e3400002 	movt	r0, #2
   18aec:	e3a020c3 	mov	r2, #195	; 0xc3
   18af0:	eb000257 	bl	19454 <assertion_failed>
   18af4:	eaffffe7 	b	18a98 <CScheduler::WakeTask(CTask**)+0xc>
   18af8:	e30819dc 	movw	r1, #35292	; 0x89dc
   18afc:	e3401002 	movt	r1, #2
   18b00:	e3080a74 	movw	r0, #35444	; 0x8a74
   18b04:	e3400002 	movt	r0, #2
   18b08:	e3a020cf 	mov	r2, #207	; 0xcf
   18b0c:	eb000250 	bl	19454 <assertion_failed>
   18b10:	eaffffe5 	b	18aac <CScheduler::WakeTask(CTask**)+0x20>

00018b14 <CScheduler::GetNextTask()>:
   18b14:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   18b18:	e1a07000 	mov	r7, r0
   18b1c:	e5904058 	ldr	r4, [r0, #88]	; 0x58
   18b20:	e3540014 	cmp	r4, #20
   18b24:	23a04000 	movcs	r4, #0
   18b28:	eb001fba 	bl	20a18 <CTimer::Get()>
   18b2c:	eb001d16 	bl	1ff8c <CTimer::GetClockTicks()>
   18b30:	e5973050 	ldr	r3, [r7, #80]	; 0x50
   18b34:	e3530000 	cmp	r3, #0
   18b38:	0a00001b 	beq	18bac <CScheduler::GetNextTask()+0x98>
   18b3c:	e30899dc 	movw	r9, #35292	; 0x89dc
   18b40:	e3409002 	movt	r9, #2
   18b44:	e3048ad8 	movw	r8, #19160	; 0x4ad8
   18b48:	e3408002 	movt	r8, #2
   18b4c:	e1a0a000 	mov	sl, r0
   18b50:	e3a06001 	mov	r6, #1
   18b54:	e2844001 	add	r4, r4, #1
   18b58:	e2866001 	add	r6, r6, #1
   18b5c:	e1540003 	cmp	r4, r3
   18b60:	23a04000 	movcs	r4, #0
   18b64:	e7975104 	ldr	r5, [r7, r4, lsl #2]
   18b68:	e3550000 	cmp	r5, #0
   18b6c:	0a00000c 	beq	18ba4 <CScheduler::GetNextTask()+0x90>
   18b70:	e5d52004 	ldrb	r2, [r5, #4]
   18b74:	e3520003 	cmp	r2, #3
   18b78:	979ff102 	ldrls	pc, [pc, r2, lsl #2]
   18b7c:	ea000003 	b	18b90 <CScheduler::GetNextTask()+0x7c>
   18b80:	00018bb0 	.word	0x00018bb0
   18b84:	00018ba4 	.word	0x00018ba4
   18b88:	00018bf4 	.word	0x00018bf4
   18b8c:	00018bb8 	.word	0x00018bb8
   18b90:	e3002103 	movw	r2, #259	; 0x103
   18b94:	e1a01009 	mov	r1, r9
   18b98:	e1a00008 	mov	r0, r8
   18b9c:	eb00022c 	bl	19454 <assertion_failed>
   18ba0:	e5973050 	ldr	r3, [r7, #80]	; 0x50
   18ba4:	e1530006 	cmp	r3, r6
   18ba8:	2affffe9 	bcs	18b54 <CScheduler::GetNextTask()+0x40>
   18bac:	e3a04014 	mov	r4, #20
   18bb0:	e1a00004 	mov	r0, r4
   18bb4:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   18bb8:	e5973060 	ldr	r3, [r7, #96]	; 0x60
   18bbc:	e3530000 	cmp	r3, #0
   18bc0:	0a000001 	beq	18bcc <CScheduler::GetNextTask()+0xb8>
   18bc4:	e1a00005 	mov	r0, r5
   18bc8:	e12fff33 	blx	r3
   18bcc:	e1a00007 	mov	r0, r7
   18bd0:	e1a01005 	mov	r1, r5
   18bd4:	ebffff8e 	bl	18a14 <CScheduler::RemoveTask(CTask*)>
   18bd8:	e5953000 	ldr	r3, [r5]
   18bdc:	e1a00005 	mov	r0, r5
   18be0:	e3a04014 	mov	r4, #20
   18be4:	e5933004 	ldr	r3, [r3, #4]
   18be8:	e12fff33 	blx	r3
   18bec:	e1a00004 	mov	r0, r4
   18bf0:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   18bf4:	e5952008 	ldr	r2, [r5, #8]
   18bf8:	e042200a 	sub	r2, r2, sl
   18bfc:	e3520000 	cmp	r2, #0
   18c00:	caffffe7 	bgt	18ba4 <CScheduler::GetNextTask()+0x90>
   18c04:	e3a03000 	mov	r3, #0
   18c08:	e1a00004 	mov	r0, r4
   18c0c:	e5c53004 	strb	r3, [r5, #4]
   18c10:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}

00018c14 <CScheduler::Yield()>:
   18c14:	e92d4070 	push	{r4, r5, r6, lr}
   18c18:	e30869dc 	movw	r6, #35292	; 0x89dc
   18c1c:	e3406002 	movt	r6, #2
   18c20:	e3085ad4 	movw	r5, #35540	; 0x8ad4
   18c24:	e3405002 	movt	r5, #2
   18c28:	e1a04000 	mov	r4, r0
   18c2c:	ea000002 	b	18c3c <CScheduler::Yield()+0x28>
   18c30:	e5943050 	ldr	r3, [r4, #80]	; 0x50
   18c34:	e3530000 	cmp	r3, #0
   18c38:	0a00001c 	beq	18cb0 <CScheduler::Yield()+0x9c>
   18c3c:	e1a00004 	mov	r0, r4
   18c40:	ebffffb3 	bl	18b14 <CScheduler::GetNextTask()>
   18c44:	e3500014 	cmp	r0, #20
   18c48:	e5840058 	str	r0, [r4, #88]	; 0x58
   18c4c:	0afffff7 	beq	18c30 <CScheduler::Yield()+0x1c>
   18c50:	e3500013 	cmp	r0, #19
   18c54:	8a00001a 	bhi	18cc4 <CScheduler::Yield()+0xb0>
   18c58:	e7945100 	ldr	r5, [r4, r0, lsl #2]
   18c5c:	e3550000 	cmp	r5, #0
   18c60:	0a000021 	beq	18cec <CScheduler::Yield()+0xd8>
   18c64:	e5940054 	ldr	r0, [r4, #84]	; 0x54
   18c68:	e1500005 	cmp	r0, r5
   18c6c:	08bd8070 	popeq	{r4, r5, r6, pc}
   18c70:	e594305c 	ldr	r3, [r4, #92]	; 0x5c
   18c74:	e280600c 	add	r6, r0, #12
   18c78:	e5845054 	str	r5, [r4, #84]	; 0x54
   18c7c:	e285400c 	add	r4, r5, #12
   18c80:	e3530000 	cmp	r3, #0
   18c84:	0a000001 	beq	18c90 <CScheduler::Yield()+0x7c>
   18c88:	e1a00005 	mov	r0, r5
   18c8c:	e12fff33 	blx	r3
   18c90:	e3560000 	cmp	r6, #0
   18c94:	0a00001b 	beq	18d08 <CScheduler::Yield()+0xf4>
   18c98:	e3540000 	cmp	r4, #0
   18c9c:	0a000021 	beq	18d28 <CScheduler::Yield()+0x114>
   18ca0:	e1a01004 	mov	r1, r4
   18ca4:	e1a00006 	mov	r0, r6
   18ca8:	e8bd4070 	pop	{r4, r5, r6, lr}
   18cac:	ea0000a0 	b	18f34 <TaskSwitch>
   18cb0:	e3a02037 	mov	r2, #55	; 0x37
   18cb4:	e1a01006 	mov	r1, r6
   18cb8:	e1a00005 	mov	r0, r5
   18cbc:	eb0001e4 	bl	19454 <assertion_failed>
   18cc0:	eaffffdd 	b	18c3c <CScheduler::Yield()+0x28>
   18cc4:	e30819dc 	movw	r1, #35292	; 0x89dc
   18cc8:	e3401002 	movt	r1, #2
   18ccc:	e3080ae4 	movw	r0, #35556	; 0x8ae4
   18cd0:	e3400002 	movt	r0, #2
   18cd4:	e3a0203a 	mov	r2, #58	; 0x3a
   18cd8:	eb0001dd 	bl	19454 <assertion_failed>
   18cdc:	e5940058 	ldr	r0, [r4, #88]	; 0x58
   18ce0:	e7945100 	ldr	r5, [r4, r0, lsl #2]
   18ce4:	e3550000 	cmp	r5, #0
   18ce8:	1affffdd 	bne	18c64 <CScheduler::Yield()+0x50>
   18cec:	e30819dc 	movw	r1, #35292	; 0x89dc
   18cf0:	e3401002 	movt	r1, #2
   18cf4:	e3080afc 	movw	r0, #35580	; 0x8afc
   18cf8:	e3400002 	movt	r0, #2
   18cfc:	e3a0203c 	mov	r2, #60	; 0x3c
   18d00:	eb0001d3 	bl	19454 <assertion_failed>
   18d04:	eaffffd6 	b	18c64 <CScheduler::Yield()+0x50>
   18d08:	e30819dc 	movw	r1, #35292	; 0x89dc
   18d0c:	e3401002 	movt	r1, #2
   18d10:	e3080b08 	movw	r0, #35592	; 0x8b08
   18d14:	e3400002 	movt	r0, #2
   18d18:	e3a0204b 	mov	r2, #75	; 0x4b
   18d1c:	eb0001cc 	bl	19454 <assertion_failed>
   18d20:	e3540000 	cmp	r4, #0
   18d24:	1affffdd 	bne	18ca0 <CScheduler::Yield()+0x8c>
   18d28:	e30819dc 	movw	r1, #35292	; 0x89dc
   18d2c:	e3401002 	movt	r1, #2
   18d30:	e3080b18 	movw	r0, #35608	; 0x8b18
   18d34:	e3400002 	movt	r0, #2
   18d38:	e3a0204c 	mov	r2, #76	; 0x4c
   18d3c:	eb0001c4 	bl	19454 <assertion_failed>
   18d40:	e1a01004 	mov	r1, r4
   18d44:	e1a00006 	mov	r0, r6
   18d48:	e8bd4070 	pop	{r4, r5, r6, lr}
   18d4c:	ea000078 	b	18f34 <TaskSwitch>

00018d50 <CScheduler::usSleep(unsigned int) [clone .part.1]>:
   18d50:	e92d4070 	push	{r4, r5, r6, lr}
   18d54:	e1a05000 	mov	r5, r0
   18d58:	e1a06001 	mov	r6, r1
   18d5c:	eb001f2d 	bl	20a18 <CTimer::Get()>
   18d60:	eb001c89 	bl	1ff8c <CTimer::GetClockTicks()>
   18d64:	e5953054 	ldr	r3, [r5, #84]	; 0x54
   18d68:	e1a04000 	mov	r4, r0
   18d6c:	e3530000 	cmp	r3, #0
   18d70:	0a000011 	beq	18dbc <CScheduler::usSleep(unsigned int) [clone .part.1]+0x6c>
   18d74:	e5d32004 	ldrb	r2, [r3, #4]
   18d78:	e3520000 	cmp	r2, #0
   18d7c:	1a000006 	bne	18d9c <CScheduler::usSleep(unsigned int) [clone .part.1]+0x4c>
   18d80:	e0844006 	add	r4, r4, r6
   18d84:	e1a00005 	mov	r0, r5
   18d88:	e5834008 	str	r4, [r3, #8]
   18d8c:	e3a02002 	mov	r2, #2
   18d90:	e8bd4070 	pop	{r4, r5, r6, lr}
   18d94:	e5c32004 	strb	r2, [r3, #4]
   18d98:	eaffff9d 	b	18c14 <CScheduler::Yield()>
   18d9c:	e30819dc 	movw	r1, #35292	; 0x89dc
   18da0:	e3401002 	movt	r1, #2
   18da4:	e3080b38 	movw	r0, #35640	; 0x8b38
   18da8:	e3400002 	movt	r0, #2
   18dac:	e3a0206f 	mov	r2, #111	; 0x6f
   18db0:	eb0001a7 	bl	19454 <assertion_failed>
   18db4:	e5953054 	ldr	r3, [r5, #84]	; 0x54
   18db8:	eafffff0 	b	18d80 <CScheduler::usSleep(unsigned int) [clone .part.1]+0x30>
   18dbc:	e30819dc 	movw	r1, #35292	; 0x89dc
   18dc0:	e3401002 	movt	r1, #2
   18dc4:	e3080b28 	movw	r0, #35624	; 0x8b28
   18dc8:	e3400002 	movt	r0, #2
   18dcc:	e3a0206e 	mov	r2, #110	; 0x6e
   18dd0:	eb00019f 	bl	19454 <assertion_failed>
   18dd4:	e5953054 	ldr	r3, [r5, #84]	; 0x54
   18dd8:	eaffffe5 	b	18d74 <CScheduler::usSleep(unsigned int) [clone .part.1]+0x24>

00018ddc <CScheduler::usSleep(unsigned int)>:
   18ddc:	e3510000 	cmp	r1, #0
   18de0:	012fff1e 	bxeq	lr
   18de4:	eaffffd9 	b	18d50 <CScheduler::usSleep(unsigned int) [clone .part.1]>

00018de8 <CScheduler::Sleep(unsigned int)>:
   18de8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   18dec:	e3005708 	movw	r5, #1800	; 0x708
   18df0:	e1a04001 	mov	r4, r1
   18df4:	e1a07000 	mov	r7, r0
   18df8:	e1510005 	cmp	r1, r5
   18dfc:	9a000008 	bls	18e24 <CScheduler::Sleep(unsigned int)+0x3c>
   18e00:	e3a06cd2 	mov	r6, #53760	; 0xd200
   18e04:	e3466b49 	movt	r6, #27465	; 0x6b49
   18e08:	e2444c07 	sub	r4, r4, #1792	; 0x700
   18e0c:	e1a01006 	mov	r1, r6
   18e10:	e2444008 	sub	r4, r4, #8
   18e14:	e1a00007 	mov	r0, r7
   18e18:	ebffffcc 	bl	18d50 <CScheduler::usSleep(unsigned int) [clone .part.1]>
   18e1c:	e1540005 	cmp	r4, r5
   18e20:	8afffff8 	bhi	18e08 <CScheduler::Sleep(unsigned int)+0x20>
   18e24:	e3041240 	movw	r1, #16960	; 0x4240
   18e28:	e340100f 	movt	r1, #15
   18e2c:	e0010491 	mul	r1, r1, r4
   18e30:	e3510000 	cmp	r1, #0
   18e34:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
   18e38:	e1a00007 	mov	r0, r7
   18e3c:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   18e40:	eaffffc2 	b	18d50 <CScheduler::usSleep(unsigned int) [clone .part.1]>

00018e44 <CScheduler::MsSleep(unsigned int)>:
   18e44:	e3510000 	cmp	r1, #0
   18e48:	012fff1e 	bxeq	lr
   18e4c:	e3a03ffa 	mov	r3, #1000	; 0x3e8
   18e50:	e0010193 	mul	r1, r3, r1
   18e54:	e3510000 	cmp	r1, #0
   18e58:	012fff1e 	bxeq	lr
   18e5c:	eaffffbb 	b	18d50 <CScheduler::usSleep(unsigned int) [clone .part.1]>

00018e60 <CScheduler::BlockTask(CTask**)>:
   18e60:	e92d4070 	push	{r4, r5, r6, lr}
   18e64:	e1a04000 	mov	r4, r0
   18e68:	e2515000 	subs	r5, r1, #0
   18e6c:	0a00001b 	beq	18ee0 <CScheduler::BlockTask(CTask**)+0x80>
   18e70:	e5943054 	ldr	r3, [r4, #84]	; 0x54
   18e74:	e5853000 	str	r3, [r5]
   18e78:	e5943054 	ldr	r3, [r4, #84]	; 0x54
   18e7c:	e3530000 	cmp	r3, #0
   18e80:	0a00000e 	beq	18ec0 <CScheduler::BlockTask(CTask**)+0x60>
   18e84:	e5d32004 	ldrb	r2, [r3, #4]
   18e88:	e3520000 	cmp	r2, #0
   18e8c:	0a000006 	beq	18eac <CScheduler::BlockTask(CTask**)+0x4c>
   18e90:	e30819dc 	movw	r1, #35292	; 0x89dc
   18e94:	e3401002 	movt	r1, #2
   18e98:	e3080b38 	movw	r0, #35640	; 0x8b38
   18e9c:	e3400002 	movt	r0, #2
   18ea0:	e3a020bb 	mov	r2, #187	; 0xbb
   18ea4:	eb00016a 	bl	19454 <assertion_failed>
   18ea8:	e5943054 	ldr	r3, [r4, #84]	; 0x54
   18eac:	e1a00004 	mov	r0, r4
   18eb0:	e3a02001 	mov	r2, #1
   18eb4:	e8bd4070 	pop	{r4, r5, r6, lr}
   18eb8:	e5c32004 	strb	r2, [r3, #4]
   18ebc:	eaffff54 	b	18c14 <CScheduler::Yield()>
   18ec0:	e30819dc 	movw	r1, #35292	; 0x89dc
   18ec4:	e3401002 	movt	r1, #2
   18ec8:	e3080b28 	movw	r0, #35624	; 0x8b28
   18ecc:	e3400002 	movt	r0, #2
   18ed0:	e3a020ba 	mov	r2, #186	; 0xba
   18ed4:	eb00015e 	bl	19454 <assertion_failed>
   18ed8:	e5943054 	ldr	r3, [r4, #84]	; 0x54
   18edc:	eaffffe8 	b	18e84 <CScheduler::BlockTask(CTask**)+0x24>
   18ee0:	e30819dc 	movw	r1, #35292	; 0x89dc
   18ee4:	e3401002 	movt	r1, #2
   18ee8:	e3080aa0 	movw	r0, #35488	; 0x8aa0
   18eec:	e3400002 	movt	r0, #2
   18ef0:	e3a020b7 	mov	r2, #183	; 0xb7
   18ef4:	eb000156 	bl	19454 <assertion_failed>
   18ef8:	eaffffdc 	b	18e70 <CScheduler::BlockTask(CTask**)+0x10>

00018efc <CScheduler::Get()>:
   18efc:	e92d4010 	push	{r4, lr}
   18f00:	e30b44a4 	movw	r4, #46244	; 0xb4a4
   18f04:	e3404002 	movt	r4, #2
   18f08:	e5940000 	ldr	r0, [r4]
   18f0c:	e3500000 	cmp	r0, #0
   18f10:	18bd8010 	popne	{r4, pc}
   18f14:	e300210d 	movw	r2, #269	; 0x10d
   18f18:	e30819dc 	movw	r1, #35292	; 0x89dc
   18f1c:	e3401002 	movt	r1, #2
   18f20:	e3080b64 	movw	r0, #35684	; 0x8b64
   18f24:	e3400002 	movt	r0, #2
   18f28:	eb000149 	bl	19454 <assertion_failed>
   18f2c:	e5940000 	ldr	r0, [r4]
   18f30:	e8bd8010 	pop	{r4, pc}

00018f34 <TaskSwitch>:
   18f34:	eef82a10 	vmrs	r2, fpexc
   18f38:	eef13a10 	vmrs	r3, fpscr
   18f3c:	e8a07ffd 	stmia	r0!, {r0, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}
   18f40:	ec800b20 	vstmia	r0, {d0-d15}
   18f44:	e8b17ffd 	ldm	r1!, {r0, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}
   18f48:	eee82a10 	vmsr	fpexc, r2
   18f4c:	eee13a10 	vmsr	fpscr, r3
   18f50:	ec910b20 	vldmia	r1, {d0-d15}
   18f54:	e12fff1e 	bx	lr

00018f58 <CTask::Run()>:
   18f58:	e3081b88 	movw	r1, #35720	; 0x8b88
   18f5c:	e3401002 	movt	r1, #2
   18f60:	e3040ad8 	movw	r0, #19160	; 0x4ad8
   18f64:	e3400002 	movt	r0, #2
   18f68:	e3a0203b 	mov	r2, #59	; 0x3b
   18f6c:	ea000138 	b	19454 <assertion_failed>

00018f70 <CTask::~CTask()>:
   18f70:	e5d03004 	ldrb	r3, [r0, #4]
   18f74:	e59f2058 	ldr	r2, [pc, #88]	; 18fd4 <CTask::~CTask()+0x64>
   18f78:	e92d4010 	push	{r4, lr}
   18f7c:	e3530003 	cmp	r3, #3
   18f80:	e1a04000 	mov	r4, r0
   18f84:	e5802000 	str	r2, [r0]
   18f88:	0a000005 	beq	18fa4 <CTask::~CTask()+0x34>
   18f8c:	e3081b88 	movw	r1, #35720	; 0x8b88
   18f90:	e3401002 	movt	r1, #2
   18f94:	e3080b94 	movw	r0, #35732	; 0x8b94
   18f98:	e3400002 	movt	r0, #2
   18f9c:	e3a02032 	mov	r2, #50	; 0x32
   18fa0:	eb00012b 	bl	19454 <assertion_failed>
   18fa4:	e59400c8 	ldr	r0, [r4, #200]	; 0xc8
   18fa8:	e3a03004 	mov	r3, #4
   18fac:	e5c43004 	strb	r3, [r4, #4]
   18fb0:	e3500000 	cmp	r0, #0
   18fb4:	0a000000 	beq	18fbc <CTask::~CTask()+0x4c>
   18fb8:	eb002433 	bl	2208c <operator delete[](void*)>
   18fbc:	e3a03000 	mov	r3, #0
   18fc0:	e28400d0 	add	r0, r4, #208	; 0xd0
   18fc4:	e58430c8 	str	r3, [r4, #200]	; 0xc8
   18fc8:	eb000089 	bl	191f4 <CSynchronizationEvent::~CSynchronizationEvent()>
   18fcc:	e1a00004 	mov	r0, r4
   18fd0:	e8bd8010 	pop	{r4, pc}
   18fd4:	00028b7c 	.word	0x00028b7c

00018fd8 <CTask::~CTask()>:
   18fd8:	e92d4010 	push	{r4, lr}
   18fdc:	e1a04000 	mov	r4, r0
   18fe0:	ebffffe2 	bl	18f70 <CTask::~CTask()>
   18fe4:	e1a00004 	mov	r0, r4
   18fe8:	e3a010d8 	mov	r1, #216	; 0xd8
   18fec:	eb002427 	bl	22090 <operator delete(void*, unsigned int)>
   18ff0:	e1a00004 	mov	r0, r4
   18ff4:	e8bd8010 	pop	{r4, pc}

00018ff8 <CTask::TaskEntry(void*)>:
   18ff8:	e92d4010 	push	{r4, lr}
   18ffc:	e2504000 	subs	r4, r0, #0
   19000:	0a000010 	beq	19048 <CTask::TaskEntry(void*)+0x50>
   19004:	e5943000 	ldr	r3, [r4]
   19008:	e1a00004 	mov	r0, r4
   1900c:	e5933008 	ldr	r3, [r3, #8]
   19010:	e12fff33 	blx	r3
   19014:	e3a03003 	mov	r3, #3
   19018:	e28400d0 	add	r0, r4, #208	; 0xd0
   1901c:	e5c43004 	strb	r3, [r4, #4]
   19020:	eb000086 	bl	19240 <CSynchronizationEvent::Set()>
   19024:	ebffffb4 	bl	18efc <CScheduler::Get()>
   19028:	ebfffef9 	bl	18c14 <CScheduler::Yield()>
   1902c:	e3081b88 	movw	r1, #35720	; 0x8b88
   19030:	e3401002 	movt	r1, #2
   19034:	e3040ad8 	movw	r0, #19160	; 0x4ad8
   19038:	e3400002 	movt	r0, #2
   1903c:	e3a02088 	mov	r2, #136	; 0x88
   19040:	e8bd4010 	pop	{r4, lr}
   19044:	ea000102 	b	19454 <assertion_failed>
   19048:	e3081b88 	movw	r1, #35720	; 0x8b88
   1904c:	e3401002 	movt	r1, #2
   19050:	e3040220 	movw	r0, #16928	; 0x4220
   19054:	e3400002 	movt	r0, #2
   19058:	e3a02080 	mov	r2, #128	; 0x80
   1905c:	eb0000fc 	bl	19454 <assertion_failed>
   19060:	eaffffe7 	b	19004 <CTask::TaskEntry(void*)+0xc>

00019064 <CTask::Terminate()>:
   19064:	e1a03000 	mov	r3, r0
   19068:	e92d4010 	push	{r4, lr}
   1906c:	e3a02003 	mov	r2, #3
   19070:	e28000d0 	add	r0, r0, #208	; 0xd0
   19074:	e5c32004 	strb	r2, [r3, #4]
   19078:	eb000070 	bl	19240 <CSynchronizationEvent::Set()>
   1907c:	ebffff9e 	bl	18efc <CScheduler::Get()>
   19080:	ebfffee3 	bl	18c14 <CScheduler::Yield()>
   19084:	e3081b88 	movw	r1, #35720	; 0x8b88
   19088:	e3401002 	movt	r1, #2
   1908c:	e3040ad8 	movw	r0, #19160	; 0x4ad8
   19090:	e3400002 	movt	r0, #2
   19094:	e3a02044 	mov	r2, #68	; 0x44
   19098:	e8bd4010 	pop	{r4, lr}
   1909c:	ea0000ec 	b	19454 <assertion_failed>

000190a0 <CTask::WaitForTermination()>:
   190a0:	e28000d0 	add	r0, r0, #208	; 0xd0
   190a4:	ea000074 	b	1927c <CSynchronizationEvent::Wait()>

000190a8 <CTask::SetUserData(void*)>:
   190a8:	e58010cc 	str	r1, [r0, #204]	; 0xcc
   190ac:	e12fff1e 	bx	lr

000190b0 <CTask::GetUserData()>:
   190b0:	e59000cc 	ldr	r0, [r0, #204]	; 0xcc
   190b4:	e12fff1e 	bx	lr

000190b8 <CTask::InitializeRegs()>:
   190b8:	e92d4010 	push	{r4, lr}
   190bc:	e1a04000 	mov	r4, r0
   190c0:	e3a020b4 	mov	r2, #180	; 0xb4
   190c4:	e2800010 	add	r0, r0, #16
   190c8:	e3a01000 	mov	r1, #0
   190cc:	eb001e5f 	bl	20a50 <memset>
   190d0:	e59430c8 	ldr	r3, [r4, #200]	; 0xc8
   190d4:	e584400c 	str	r4, [r4, #12]
   190d8:	e3530000 	cmp	r3, #0
   190dc:	0a000009 	beq	19108 <CTask::InitializeRegs()+0x50>
   190e0:	e59410c4 	ldr	r1, [r4, #196]	; 0xc4
   190e4:	e3082ff8 	movw	r2, #36856	; 0x8ff8
   190e8:	e3402001 	movt	r2, #1
   190ec:	e5842040 	str	r2, [r4, #64]	; 0x40
   190f0:	e0833001 	add	r3, r3, r1
   190f4:	e3a02101 	mov	r2, #1073741824	; 0x40000000
   190f8:	e584303c 	str	r3, [r4, #60]	; 0x3c
   190fc:	e3a03402 	mov	r3, #33554432	; 0x2000000
   19100:	e1c421f0 	strd	r2, [r4, #16]
   19104:	e8bd8010 	pop	{r4, pc}
   19108:	e3081b88 	movw	r1, #35720	; 0x8b88
   1910c:	e3401002 	movt	r1, #2
   19110:	e3080bb4 	movw	r0, #35764	; 0x8bb4
   19114:	e3400002 	movt	r0, #2
   19118:	e3a0205e 	mov	r2, #94	; 0x5e
   1911c:	eb0000cc 	bl	19454 <assertion_failed>
   19120:	e59430c8 	ldr	r3, [r4, #200]	; 0xc8
   19124:	eaffffed 	b	190e0 <CTask::InitializeRegs()+0x28>

00019128 <CTask::CTask(unsigned int)>:
   19128:	e92d4010 	push	{r4, lr}
   1912c:	e1a04000 	mov	r4, r0
   19130:	e3a03000 	mov	r3, #0
   19134:	e59f20a4 	ldr	r2, [pc, #164]	; 191e0 <CTask::CTask(unsigned int)+0xb8>
   19138:	e28000d0 	add	r0, r0, #208	; 0xd0
   1913c:	e58410c4 	str	r1, [r4, #196]	; 0xc4
   19140:	e1a01003 	mov	r1, r3
   19144:	e5842000 	str	r2, [r4]
   19148:	e5c43004 	strb	r3, [r4, #4]
   1914c:	e58430c8 	str	r3, [r4, #200]	; 0xc8
   19150:	e58430cc 	str	r3, [r4, #204]	; 0xcc
   19154:	eb000022 	bl	191e4 <CSynchronizationEvent::CSynchronizationEvent(bool)>
   19158:	e59400c4 	ldr	r0, [r4, #196]	; 0xc4
   1915c:	e3500000 	cmp	r0, #0
   19160:	0a000007 	beq	19184 <CTask::CTask(unsigned int)+0x5c>
   19164:	e3500b01 	cmp	r0, #1024	; 0x400
   19168:	3a000012 	bcc	191b8 <CTask::CTask(unsigned int)+0x90>
   1916c:	e3100003 	tst	r0, #3
   19170:	1a000008 	bne	19198 <CTask::CTask(unsigned int)+0x70>
   19174:	eb0023c2 	bl	22084 <operator new[](unsigned int)>
   19178:	e58400c8 	str	r0, [r4, #200]	; 0xc8
   1917c:	e1a00004 	mov	r0, r4
   19180:	ebffffcc 	bl	190b8 <CTask::InitializeRegs()>
   19184:	ebffff5c 	bl	18efc <CScheduler::Get()>
   19188:	e1a01004 	mov	r1, r4
   1918c:	ebfffdf6 	bl	1896c <CScheduler::AddTask(CTask*)>
   19190:	e1a00004 	mov	r0, r4
   19194:	e8bd8010 	pop	{r4, pc}
   19198:	e3081b88 	movw	r1, #35720	; 0x8b88
   1919c:	e3401002 	movt	r1, #2
   191a0:	e3080bdc 	movw	r0, #35804	; 0x8bdc
   191a4:	e3400002 	movt	r0, #2
   191a8:	e3a02023 	mov	r2, #35	; 0x23
   191ac:	eb0000a8 	bl	19454 <assertion_failed>
   191b0:	e59400c4 	ldr	r0, [r4, #196]	; 0xc4
   191b4:	eaffffee 	b	19174 <CTask::CTask(unsigned int)+0x4c>
   191b8:	e3081b88 	movw	r1, #35720	; 0x8b88
   191bc:	e3401002 	movt	r1, #2
   191c0:	e3080bc4 	movw	r0, #35780	; 0x8bc4
   191c4:	e3400002 	movt	r0, #2
   191c8:	e3a02021 	mov	r2, #33	; 0x21
   191cc:	eb0000a0 	bl	19454 <assertion_failed>
   191d0:	e59400c4 	ldr	r0, [r4, #196]	; 0xc4
   191d4:	e3100003 	tst	r0, #3
   191d8:	0affffe5 	beq	19174 <CTask::CTask(unsigned int)+0x4c>
   191dc:	eaffffed 	b	19198 <CTask::CTask(unsigned int)+0x70>
   191e0:	00028b7c 	.word	0x00028b7c

000191e4 <CSynchronizationEvent::CSynchronizationEvent(bool)>:
   191e4:	e3a02000 	mov	r2, #0
   191e8:	e5c01000 	strb	r1, [r0]
   191ec:	e5802004 	str	r2, [r0, #4]
   191f0:	e12fff1e 	bx	lr

000191f4 <CSynchronizationEvent::~CSynchronizationEvent()>:
   191f4:	e5903004 	ldr	r3, [r0, #4]
   191f8:	e92d4010 	push	{r4, lr}
   191fc:	e1a04000 	mov	r4, r0
   19200:	e3530000 	cmp	r3, #0
   19204:	0a000005 	beq	19220 <CSynchronizationEvent::~CSynchronizationEvent()+0x2c>
   19208:	e3081bf4 	movw	r1, #35828	; 0x8bf4
   1920c:	e3401002 	movt	r1, #2
   19210:	e3080c10 	movw	r0, #35856	; 0x8c10
   19214:	e3400002 	movt	r0, #2
   19218:	e3a02023 	mov	r2, #35	; 0x23
   1921c:	eb00008c 	bl	19454 <assertion_failed>
   19220:	e1a00004 	mov	r0, r4
   19224:	e8bd8010 	pop	{r4, pc}

00019228 <CSynchronizationEvent::GetState()>:
   19228:	e5d00000 	ldrb	r0, [r0]
   1922c:	e12fff1e 	bx	lr

00019230 <CSynchronizationEvent::Clear()>:
   19230:	e3a03000 	mov	r3, #0
   19234:	e5c03000 	strb	r3, [r0]
   19238:	f57ff04f 	dsb	sy
   1923c:	e12fff1e 	bx	lr

00019240 <CSynchronizationEvent::Set()>:
   19240:	e5d03000 	ldrb	r3, [r0]
   19244:	e3530000 	cmp	r3, #0
   19248:	112fff1e 	bxne	lr
   1924c:	e3a03001 	mov	r3, #1
   19250:	e5c03000 	strb	r3, [r0]
   19254:	f57ff04f 	dsb	sy
   19258:	e5903004 	ldr	r3, [r0, #4]
   1925c:	e3530000 	cmp	r3, #0
   19260:	012fff1e 	bxeq	lr
   19264:	e92d4010 	push	{r4, lr}
   19268:	e1a04000 	mov	r4, r0
   1926c:	ebffff22 	bl	18efc <CScheduler::Get()>
   19270:	e2841004 	add	r1, r4, #4
   19274:	e8bd4010 	pop	{r4, lr}
   19278:	eafffe03 	b	18a8c <CScheduler::WakeTask(CTask**)>

0001927c <CSynchronizationEvent::Wait()>:
   1927c:	e5d03000 	ldrb	r3, [r0]
   19280:	e3530000 	cmp	r3, #0
   19284:	112fff1e 	bxne	lr
   19288:	e5903004 	ldr	r3, [r0, #4]
   1928c:	e92d4010 	push	{r4, lr}
   19290:	e1a04000 	mov	r4, r0
   19294:	e3530000 	cmp	r3, #0
   19298:	0a000005 	beq	192b4 <CSynchronizationEvent::Wait()+0x38>
   1929c:	e3081bf4 	movw	r1, #35828	; 0x8bf4
   192a0:	e3401002 	movt	r1, #2
   192a4:	e3080c10 	movw	r0, #35856	; 0x8c10
   192a8:	e3400002 	movt	r0, #2
   192ac:	e3a02049 	mov	r2, #73	; 0x49
   192b0:	eb000067 	bl	19454 <assertion_failed>
   192b4:	ebffff10 	bl	18efc <CScheduler::Get()>
   192b8:	e2841004 	add	r1, r4, #4
   192bc:	ebfffee7 	bl	18e60 <CScheduler::BlockTask(CTask**)>
   192c0:	e5d43000 	ldrb	r3, [r4]
   192c4:	e3530000 	cmp	r3, #0
   192c8:	18bd8010 	popne	{r4, pc}
   192cc:	e3081bf4 	movw	r1, #35828	; 0x8bf4
   192d0:	e3401002 	movt	r1, #2
   192d4:	e3080c24 	movw	r0, #35876	; 0x8c24
   192d8:	e3400002 	movt	r0, #2
   192dc:	e3a0204c 	mov	r2, #76	; 0x4c
   192e0:	e8bd4010 	pop	{r4, lr}
   192e4:	ea00005a 	b	19454 <assertion_failed>

000192e8 <CActLED::CActLED(bool)>:
   192e8:	e30b34a8 	movw	r3, #46248	; 0xb4a8
   192ec:	e3403002 	movt	r3, #2
   192f0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   192f4:	e3a02000 	mov	r2, #0
   192f8:	e1a07001 	mov	r7, r1
   192fc:	e5802000 	str	r2, [r0]
   19300:	e1a05000 	mov	r5, r0
   19304:	e5802004 	str	r2, [r0, #4]
   19308:	e5830000 	str	r0, [r3]
   1930c:	eb000d73 	bl	1c8e0 <CMachineInfo::Get()>
   19310:	eb000cab 	bl	1c5c4 <CMachineInfo::GetActLEDInfo() const>
   19314:	e1a04000 	mov	r4, r0
   19318:	e2106080 	ands	r6, r0, #128	; 0x80
   1931c:	1a00000e 	bne	1935c <CActLED::CActLED(bool)+0x74>
   19320:	e3a00028 	mov	r0, #40	; 0x28
   19324:	eb002355 	bl	22080 <operator new(unsigned int)>
   19328:	e1a03006 	mov	r3, r6
   1932c:	e3a02001 	mov	r2, #1
   19330:	e204103f 	and	r1, r4, #63	; 0x3f
   19334:	e1a07000 	mov	r7, r0
   19338:	eb0003b7 	bl	1a21c <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>
   1933c:	e5857000 	str	r7, [r5]
   19340:	e2244040 	eor	r4, r4, #64	; 0x40
   19344:	e1a00005 	mov	r0, r5
   19348:	e7e04354 	ubfx	r4, r4, #6, #1
   1934c:	e5c54008 	strb	r4, [r5, #8]
   19350:	eb00001a 	bl	193c0 <CActLED::Off()>
   19354:	e1a00005 	mov	r0, r5
   19358:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1935c:	e3a00014 	mov	r0, #20
   19360:	eb002346 	bl	22080 <operator new(unsigned int)>
   19364:	e1a02007 	mov	r2, r7
   19368:	e204103f 	and	r1, r4, #63	; 0x3f
   1936c:	e1a06000 	mov	r6, r0
   19370:	eb001fc9 	bl	2129c <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)>
   19374:	e5856004 	str	r6, [r5, #4]
   19378:	eafffff0 	b	19340 <CActLED::CActLED(bool)+0x58>

0001937c <CActLED::~CActLED()>:
   1937c:	e30b34a8 	movw	r3, #46248	; 0xb4a8
   19380:	e3403002 	movt	r3, #2
   19384:	e3a02000 	mov	r2, #0
   19388:	e5832000 	str	r2, [r3]
   1938c:	e12fff1e 	bx	lr

00019390 <CActLED::On()>:
   19390:	e5903000 	ldr	r3, [r0]
   19394:	e3530000 	cmp	r3, #0
   19398:	0a000002 	beq	193a8 <CActLED::On()+0x18>
   1939c:	e5d01008 	ldrb	r1, [r0, #8]
   193a0:	e1a00003 	mov	r0, r3
   193a4:	ea000443 	b	1a4b8 <CGPIOPin::Write(unsigned int)>
   193a8:	e5903004 	ldr	r3, [r0, #4]
   193ac:	e3530000 	cmp	r3, #0
   193b0:	012fff1e 	bxeq	lr
   193b4:	e5d01008 	ldrb	r1, [r0, #8]
   193b8:	e1a00003 	mov	r0, r3
   193bc:	ea001f69 	b	21168 <CVirtualGPIOPin::Write(unsigned int)>

000193c0 <CActLED::Off()>:
   193c0:	e5903000 	ldr	r3, [r0]
   193c4:	e3530000 	cmp	r3, #0
   193c8:	0a000003 	beq	193dc <CActLED::Off()+0x1c>
   193cc:	e5d01008 	ldrb	r1, [r0, #8]
   193d0:	e1a00003 	mov	r0, r3
   193d4:	e2211001 	eor	r1, r1, #1
   193d8:	ea000436 	b	1a4b8 <CGPIOPin::Write(unsigned int)>
   193dc:	e5903004 	ldr	r3, [r0, #4]
   193e0:	e3530000 	cmp	r3, #0
   193e4:	012fff1e 	bxeq	lr
   193e8:	e5d01008 	ldrb	r1, [r0, #8]
   193ec:	e1a00003 	mov	r0, r3
   193f0:	e2211001 	eor	r1, r1, #1
   193f4:	ea001f5b 	b	21168 <CVirtualGPIOPin::Write(unsigned int)>

000193f8 <CActLED::Blink(unsigned int, unsigned int, unsigned int)>:
   193f8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   193fc:	e2518000 	subs	r8, r1, #0
   19400:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
   19404:	e1a07003 	mov	r7, r3
   19408:	e1a06002 	mov	r6, r2
   1940c:	e1a05000 	mov	r5, r0
   19410:	e3a04001 	mov	r4, #1
   19414:	e1a00005 	mov	r0, r5
   19418:	e2844001 	add	r4, r4, #1
   1941c:	ebffffdb 	bl	19390 <CActLED::On()>
   19420:	e1a00006 	mov	r0, r6
   19424:	eb001d3e 	bl	20924 <CTimer::SimpleMsDelay(unsigned int)>
   19428:	e1a00005 	mov	r0, r5
   1942c:	ebffffe3 	bl	193c0 <CActLED::Off()>
   19430:	e1a00007 	mov	r0, r7
   19434:	eb001d3a 	bl	20924 <CTimer::SimpleMsDelay(unsigned int)>
   19438:	e1580004 	cmp	r8, r4
   1943c:	2afffff4 	bcs	19414 <CActLED::Blink(unsigned int, unsigned int, unsigned int)+0x1c>
   19440:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

00019444 <CActLED::Get()>:
   19444:	e30b34a8 	movw	r3, #46248	; 0xb4a8
   19448:	e3403002 	movt	r3, #2
   1944c:	e5930000 	ldr	r0, [r3]
   19450:	e12fff1e 	bx	lr

00019454 <assertion_failed>:
   19454:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   19458:	e1a05000 	mov	r5, r0
   1945c:	e1a06001 	mov	r6, r1
   19460:	e24dd01c 	sub	sp, sp, #28
   19464:	e1a07002 	mov	r7, r2
   19468:	e1a0400d 	mov	r4, sp
   1946c:	eb00076d 	bl	1b228 <CInterruptSystem::DisableFIQ()>
   19470:	f1080040 	cpsie	f
   19474:	e28d0008 	add	r0, sp, #8
   19478:	eb0015f4 	bl	1ec50 <CString::CString()>
   1947c:	e1a03007 	mov	r3, r7
   19480:	e1a02006 	mov	r2, r6
   19484:	e28d0008 	add	r0, sp, #8
   19488:	e3081c30 	movw	r1, #35888	; 0x8c30
   1948c:	e3401002 	movt	r1, #2
   19490:	eb0019b7 	bl	1fb74 <CString::Format(char const*, ...)>
   19494:	e28d0008 	add	r0, sp, #8
   19498:	eb001603 	bl	1ecac <CString::operator char const*() const>
   1949c:	e1a01000 	mov	r1, r0
   194a0:	e1a00004 	mov	r0, r4
   194a4:	eb00019b 	bl	19b18 <debug_stacktrace(unsigned int const*, char const*)>
   194a8:	eb000a47 	bl	1bdcc <CLogger::Get()>
   194ac:	e1a04000 	mov	r4, r0
   194b0:	e28d0008 	add	r0, sp, #8
   194b4:	eb0015fc 	bl	1ecac <CString::operator char const*() const>
   194b8:	e3a02000 	mov	r2, #0
   194bc:	e1a01000 	mov	r1, r0
   194c0:	e58d5000 	str	r5, [sp]
   194c4:	e1a00004 	mov	r0, r4
   194c8:	e3083c38 	movw	r3, #35896	; 0x8c38
   194cc:	e3403002 	movt	r3, #2
   194d0:	eb000974 	bl	1baa8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   194d4:	e28d0008 	add	r0, sp, #8
   194d8:	eb0015aa 	bl	1eb88 <CString::~CString()>
   194dc:	e28dd01c 	add	sp, sp, #28
   194e0:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}

000194e4 <CBcmPropertyTags::CBcmPropertyTags(bool)>:
   194e4:	e92d4010 	push	{r4, lr}
   194e8:	e1a02001 	mov	r2, r1
   194ec:	e1a04000 	mov	r4, r0
   194f0:	e3a01008 	mov	r1, #8
   194f4:	eb00251c 	bl	2296c <CBcmMailBox::CBcmMailBox(unsigned int, bool)>
   194f8:	e1a00004 	mov	r0, r4
   194fc:	e8bd8010 	pop	{r4, pc}

00019500 <CBcmPropertyTags::~CBcmPropertyTags()>:
   19500:	e92d4010 	push	{r4, lr}
   19504:	e1a04000 	mov	r4, r0
   19508:	eb00251a 	bl	22978 <CBcmMailBox::~CBcmMailBox()>
   1950c:	e1a00004 	mov	r0, r4
   19510:	e8bd8010 	pop	{r4, pc}

00019514 <CBcmPropertyTags::GetTags(void*, unsigned int)>:
   19514:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   19518:	e1a0a000 	mov	sl, r0
   1951c:	e1a06002 	mov	r6, r2
   19520:	e2519000 	subs	r9, r1, #0
   19524:	0a000034 	beq	195fc <CBcmPropertyTags::GetTags(void*, unsigned int)+0xe8>
   19528:	e356000f 	cmp	r6, #15
   1952c:	9a00002b 	bls	195e0 <CBcmPropertyTags::GetTags(void*, unsigned int)+0xcc>
   19530:	e286800c 	add	r8, r6, #12
   19534:	e3180003 	tst	r8, #3
   19538:	1a000021 	bne	195c4 <CBcmPropertyTags::GetTags(void*, unsigned int)+0xb0>
   1953c:	e3a00000 	mov	r0, #0
   19540:	e1a05000 	mov	r5, r0
   19544:	eb002248 	bl	21e6c <CMemorySystem::GetCoherentPage(unsigned int)>
   19548:	e1a04000 	mov	r4, r0
   1954c:	e2807008 	add	r7, r0, #8
   19550:	e1a02006 	mov	r2, r6
   19554:	e1a00007 	mov	r0, r7
   19558:	e1a01009 	mov	r1, r9
   1955c:	e5848000 	str	r8, [r4]
   19560:	e5c45004 	strb	r5, [r4, #4]
   19564:	e5c45005 	strb	r5, [r4, #5]
   19568:	e5c45006 	strb	r5, [r4, #6]
   1956c:	e5c45007 	strb	r5, [r4, #7]
   19570:	eb001ede 	bl	210f0 <memcpy>
   19574:	e7875006 	str	r5, [r7, r6]
   19578:	f57ff04f 	dsb	sy
   1957c:	e3845103 	orr	r5, r4, #-1073741824	; 0xc0000000
   19580:	e1a0000a 	mov	r0, sl
   19584:	e1a01005 	mov	r1, r5
   19588:	eb00252a 	bl	22a38 <CBcmMailBox::WriteRead(unsigned int)>
   1958c:	e1500005 	cmp	r0, r5
   19590:	0a000001 	beq	1959c <CBcmPropertyTags::GetTags(void*, unsigned int)+0x88>
   19594:	e3a00000 	mov	r0, #0
   19598:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1959c:	f57ff05f 	dmb	sy
   195a0:	e5943004 	ldr	r3, [r4, #4]
   195a4:	e3530102 	cmp	r3, #-2147483648	; 0x80000000
   195a8:	1afffff9 	bne	19594 <CBcmPropertyTags::GetTags(void*, unsigned int)+0x80>
   195ac:	e1a02006 	mov	r2, r6
   195b0:	e1a01007 	mov	r1, r7
   195b4:	e1a00009 	mov	r0, r9
   195b8:	eb001ecc 	bl	210f0 <memcpy>
   195bc:	e3a00001 	mov	r0, #1
   195c0:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   195c4:	e3081c50 	movw	r1, #35920	; 0x8c50
   195c8:	e3401002 	movt	r1, #2
   195cc:	e3080c9c 	movw	r0, #35996	; 0x8c9c
   195d0:	e3400002 	movt	r0, #2
   195d4:	e3a02053 	mov	r2, #83	; 0x53
   195d8:	ebffff9d 	bl	19454 <assertion_failed>
   195dc:	eaffffd6 	b	1953c <CBcmPropertyTags::GetTags(void*, unsigned int)+0x28>
   195e0:	e3081c50 	movw	r1, #35920	; 0x8c50
   195e4:	e3401002 	movt	r1, #2
   195e8:	e3080c70 	movw	r0, #35952	; 0x8c70
   195ec:	e3400002 	movt	r0, #2
   195f0:	e3a02051 	mov	r2, #81	; 0x51
   195f4:	ebffff96 	bl	19454 <assertion_failed>
   195f8:	eaffffcc 	b	19530 <CBcmPropertyTags::GetTags(void*, unsigned int)+0x1c>
   195fc:	e3081c50 	movw	r1, #35920	; 0x8c50
   19600:	e3401002 	movt	r1, #2
   19604:	e3080c64 	movw	r0, #35940	; 0x8c64
   19608:	e3400002 	movt	r0, #2
   1960c:	e3a02050 	mov	r2, #80	; 0x50
   19610:	ebffff8f 	bl	19454 <assertion_failed>
   19614:	eaffffc3 	b	19528 <CBcmPropertyTags::GetTags(void*, unsigned int)+0x14>

00019618 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>:
   19618:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   1961c:	e1a07000 	mov	r7, r0
   19620:	e1a08001 	mov	r8, r1
   19624:	e1a05003 	mov	r5, r3
   19628:	e2524000 	subs	r4, r2, #0
   1962c:	e59d6018 	ldr	r6, [sp, #24]
   19630:	0a00001d 	beq	196ac <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0x94>
   19634:	e355000f 	cmp	r5, #15
   19638:	9a000014 	bls	19690 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0x78>
   1963c:	e245300c 	sub	r3, r5, #12
   19640:	e3c66102 	bic	r6, r6, #-2147483648	; 0x80000000
   19644:	e5848000 	str	r8, [r4]
   19648:	e1a00007 	mov	r0, r7
   1964c:	e5846008 	str	r6, [r4, #8]
   19650:	e1a02005 	mov	r2, r5
   19654:	e5843004 	str	r3, [r4, #4]
   19658:	e1a01004 	mov	r1, r4
   1965c:	ebffffac 	bl	19514 <CBcmPropertyTags::GetTags(void*, unsigned int)>
   19660:	e3500000 	cmp	r0, #0
   19664:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
   19668:	e5940008 	ldr	r0, [r4, #8]
   1966c:	e3500000 	cmp	r0, #0
   19670:	ba000001 	blt	1967c <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0x64>
   19674:	e3a00000 	mov	r0, #0
   19678:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1967c:	e3c00102 	bic	r0, r0, #-2147483648	; 0x80000000
   19680:	e5840008 	str	r0, [r4, #8]
   19684:	e2900000 	adds	r0, r0, #0
   19688:	13a00001 	movne	r0, #1
   1968c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   19690:	e3081c50 	movw	r1, #35920	; 0x8c50
   19694:	e3401002 	movt	r1, #2
   19698:	e3080cc0 	movw	r0, #36032	; 0x8cc0
   1969c:	e3400002 	movt	r0, #2
   196a0:	e3a02034 	mov	r2, #52	; 0x34
   196a4:	ebffff6a 	bl	19454 <assertion_failed>
   196a8:	eaffffe3 	b	1963c <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0x24>
   196ac:	e3081c50 	movw	r1, #35920	; 0x8c50
   196b0:	e3401002 	movt	r1, #2
   196b4:	e3080cb4 	movw	r0, #36020	; 0x8cb4
   196b8:	e3400002 	movt	r0, #2
   196bc:	e3a02033 	mov	r2, #51	; 0x33
   196c0:	ebffff63 	bl	19454 <assertion_failed>
   196c4:	eaffffda 	b	19634 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0x1c>

000196c8 <CClassAllocator::~CClassAllocator()>:
   196c8:	e92d4010 	push	{r4, lr}
   196cc:	e1a04000 	mov	r4, r0
   196d0:	e590000c 	ldr	r0, [r0, #12]
   196d4:	e3a03000 	mov	r3, #0
   196d8:	e1500003 	cmp	r0, r3
   196dc:	e5843010 	str	r3, [r4, #16]
   196e0:	0a000000 	beq	196e8 <CClassAllocator::~CClassAllocator()+0x20>
   196e4:	eb0022ef 	bl	222a8 <free>
   196e8:	e3a03000 	mov	r3, #0
   196ec:	e2840018 	add	r0, r4, #24
   196f0:	e584300c 	str	r3, [r4, #12]
   196f4:	eb0014e0 	bl	1ea7c <CSpinLock::~CSpinLock()>
   196f8:	e1a00004 	mov	r0, r4
   196fc:	e8bd8010 	pop	{r4, pc}

00019700 <CClassAllocator::Init(unsigned int, unsigned int)>:
   19700:	e92d4070 	push	{r4, r5, r6, lr}
   19704:	e1a04000 	mov	r4, r0
   19708:	e3510000 	cmp	r1, #0
   1970c:	1281001f 	addne	r0, r1, #31
   19710:	03a00020 	moveq	r0, #32
   19714:	13c0000f 	bicne	r0, r0, #15
   19718:	e1a05002 	mov	r5, r2
   1971c:	e5840000 	str	r0, [r4]
   19720:	e3520000 	cmp	r2, #0
   19724:	0a000023 	beq	197b8 <CClassAllocator::Init(unsigned int, unsigned int)+0xb8>
   19728:	e5845004 	str	r5, [r4, #4]
   1972c:	e0000590 	mul	r0, r0, r5
   19730:	eb002276 	bl	22110 <malloc>
   19734:	e3500000 	cmp	r0, #0
   19738:	e584000c 	str	r0, [r4, #12]
   1973c:	0a000025 	beq	197d8 <CClassAllocator::Init(unsigned int, unsigned int)+0xd8>
   19740:	e310000f 	tst	r0, #15
   19744:	1a000011 	bne	19790 <CClassAllocator::Init(unsigned int, unsigned int)+0x90>
   19748:	e3550000 	cmp	r5, #0
   1974c:	08bd8070 	popeq	{r4, r5, r6, pc}
   19750:	e305c350 	movw	ip, #21328	; 0x5350
   19754:	e344cf42 	movt	ip, #20290	; 0x4f42
   19758:	e3a02000 	mov	r2, #0
   1975c:	e5943000 	ldr	r3, [r4]
   19760:	e594000c 	ldr	r0, [r4, #12]
   19764:	e0030293 	mul	r3, r3, r2
   19768:	e2822001 	add	r2, r2, #1
   1976c:	e0801003 	add	r1, r0, r3
   19770:	e780c003 	str	ip, [r0, r3]
   19774:	e5943010 	ldr	r3, [r4, #16]
   19778:	e581300c 	str	r3, [r1, #12]
   1977c:	e5841010 	str	r1, [r4, #16]
   19780:	e5943004 	ldr	r3, [r4, #4]
   19784:	e1530002 	cmp	r3, r2
   19788:	8afffff3 	bhi	1975c <CClassAllocator::Init(unsigned int, unsigned int)+0x5c>
   1978c:	e8bd8070 	pop	{r4, r5, r6, pc}
   19790:	e3081ce8 	movw	r1, #36072	; 0x8ce8
   19794:	e3401002 	movt	r1, #2
   19798:	e3080d14 	movw	r0, #36116	; 0x8d14
   1979c:	e3400002 	movt	r0, #2
   197a0:	e3a0205f 	mov	r2, #95	; 0x5f
   197a4:	ebffff2a 	bl	19454 <assertion_failed>
   197a8:	e5945004 	ldr	r5, [r4, #4]
   197ac:	e3550000 	cmp	r5, #0
   197b0:	1affffe6 	bne	19750 <CClassAllocator::Init(unsigned int, unsigned int)+0x50>
   197b4:	e8bd8070 	pop	{r4, r5, r6, pc}
   197b8:	e3081ce8 	movw	r1, #36072	; 0x8ce8
   197bc:	e3401002 	movt	r1, #2
   197c0:	e3080cfc 	movw	r0, #36092	; 0x8cfc
   197c4:	e3400002 	movt	r0, #2
   197c8:	e3a02055 	mov	r2, #85	; 0x55
   197cc:	ebffff20 	bl	19454 <assertion_failed>
   197d0:	e5940000 	ldr	r0, [r4]
   197d4:	eaffffd3 	b	19728 <CClassAllocator::Init(unsigned int, unsigned int)+0x28>
   197d8:	e5840004 	str	r0, [r4, #4]
   197dc:	e8bd8070 	pop	{r4, r5, r6, pc}

000197e0 <CClassAllocator::CClassAllocator(unsigned int, unsigned int, char const*)>:
   197e0:	e92d4070 	push	{r4, r5, r6, lr}
   197e4:	e1a04000 	mov	r4, r0
   197e8:	e3a0c000 	mov	ip, #0
   197ec:	e1a05001 	mov	r5, r1
   197f0:	e1a06002 	mov	r6, r2
   197f4:	e5843008 	str	r3, [r4, #8]
   197f8:	e3a01001 	mov	r1, #1
   197fc:	e584c00c 	str	ip, [r4, #12]
   19800:	e2800018 	add	r0, r0, #24
   19804:	e584c010 	str	ip, [r4, #16]
   19808:	e5c4c014 	strb	ip, [r4, #20]
   1980c:	eb00148c 	bl	1ea44 <CSpinLock::CSpinLock(unsigned int)>
   19810:	e1a00004 	mov	r0, r4
   19814:	e1a02006 	mov	r2, r6
   19818:	e1a01005 	mov	r1, r5
   1981c:	ebffffb7 	bl	19700 <CClassAllocator::Init(unsigned int, unsigned int)>
   19820:	e1a00004 	mov	r0, r4
   19824:	e8bd8070 	pop	{r4, r5, r6, pc}

00019828 <CClassAllocator::CClassAllocator(unsigned int, unsigned int, unsigned int, char const*)>:
   19828:	e92d4070 	push	{r4, r5, r6, lr}
   1982c:	e1a04000 	mov	r4, r0
   19830:	e59d0010 	ldr	r0, [sp, #16]
   19834:	e1a05001 	mov	r5, r1
   19838:	e1a06002 	mov	r6, r2
   1983c:	e1a01003 	mov	r1, r3
   19840:	e3a02001 	mov	r2, #1
   19844:	e3a03000 	mov	r3, #0
   19848:	e5840008 	str	r0, [r4, #8]
   1984c:	e5c42014 	strb	r2, [r4, #20]
   19850:	e2840018 	add	r0, r4, #24
   19854:	e584300c 	str	r3, [r4, #12]
   19858:	e5843010 	str	r3, [r4, #16]
   1985c:	eb001478 	bl	1ea44 <CSpinLock::CSpinLock(unsigned int)>
   19860:	e1a00004 	mov	r0, r4
   19864:	e1a02006 	mov	r2, r6
   19868:	e1a01005 	mov	r1, r5
   1986c:	ebffffa3 	bl	19700 <CClassAllocator::Init(unsigned int, unsigned int)>
   19870:	e1a00004 	mov	r0, r4
   19874:	e8bd8070 	pop	{r4, r5, r6, pc}

00019878 <CClassAllocator::Allocate()>:
   19878:	e92d4070 	push	{r4, r5, r6, lr}
   1987c:	e1a05000 	mov	r5, r0
   19880:	e5d03014 	ldrb	r3, [r0, #20]
   19884:	e24dd008 	sub	sp, sp, #8
   19888:	e3530000 	cmp	r3, #0
   1988c:	1a000018 	bne	198f4 <CClassAllocator::Allocate()+0x7c>
   19890:	e5904010 	ldr	r4, [r0, #16]
   19894:	e3540000 	cmp	r4, #0
   19898:	0a000020 	beq	19920 <CClassAllocator::Allocate()+0xa8>
   1989c:	e5942000 	ldr	r2, [r4]
   198a0:	e3053350 	movw	r3, #21328	; 0x5350
   198a4:	e3443f42 	movt	r3, #20290	; 0x4f42
   198a8:	e1520003 	cmp	r2, r3
   198ac:	1a000009 	bne	198d8 <CClassAllocator::Allocate()+0x60>
   198b0:	e594200c 	ldr	r2, [r4, #12]
   198b4:	e3a03000 	mov	r3, #0
   198b8:	e5852010 	str	r2, [r5, #16]
   198bc:	e584300c 	str	r3, [r4, #12]
   198c0:	e5d53014 	ldrb	r3, [r5, #20]
   198c4:	e3530000 	cmp	r3, #0
   198c8:	1a00001e 	bne	19948 <CClassAllocator::Allocate()+0xd0>
   198cc:	e2840010 	add	r0, r4, #16
   198d0:	e28dd008 	add	sp, sp, #8
   198d4:	e8bd8070 	pop	{r4, r5, r6, pc}
   198d8:	e3081ce8 	movw	r1, #36072	; 0x8ce8
   198dc:	e3401002 	movt	r1, #2
   198e0:	e3080d7c 	movw	r0, #36220	; 0x8d7c
   198e4:	e3400002 	movt	r0, #2
   198e8:	e3a02082 	mov	r2, #130	; 0x82
   198ec:	ebfffed8 	bl	19454 <assertion_failed>
   198f0:	eaffffee 	b	198b0 <CClassAllocator::Allocate()+0x38>
   198f4:	e2806018 	add	r6, r0, #24
   198f8:	e1a00006 	mov	r0, r6
   198fc:	eb00146b 	bl	1eab0 <CSpinLock::Acquire()>
   19900:	e5954010 	ldr	r4, [r5, #16]
   19904:	e3540000 	cmp	r4, #0
   19908:	1affffe3 	bne	1989c <CClassAllocator::Allocate()+0x24>
   1990c:	e5d53014 	ldrb	r3, [r5, #20]
   19910:	e3530000 	cmp	r3, #0
   19914:	0a000001 	beq	19920 <CClassAllocator::Allocate()+0xa8>
   19918:	e1a00006 	mov	r0, r6
   1991c:	eb00147a 	bl	1eb0c <CSpinLock::Release()>
   19920:	eb000929 	bl	1bdcc <CLogger::Get()>
   19924:	e5952004 	ldr	r2, [r5, #4]
   19928:	e5951008 	ldr	r1, [r5, #8]
   1992c:	e3083d50 	movw	r3, #36176	; 0x8d50
   19930:	e3403002 	movt	r3, #2
   19934:	e58d2000 	str	r2, [sp]
   19938:	e3a02000 	mov	r2, #0
   1993c:	eb000859 	bl	1baa8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   19940:	e3a00000 	mov	r0, #0
   19944:	eaffffe1 	b	198d0 <CClassAllocator::Allocate()+0x58>
   19948:	e2850018 	add	r0, r5, #24
   1994c:	eb00146e 	bl	1eb0c <CSpinLock::Release()>
   19950:	eaffffdd 	b	198cc <CClassAllocator::Allocate()+0x54>

00019954 <CClassAllocator::Free(void*)>:
   19954:	e92d4070 	push	{r4, r5, r6, lr}
   19958:	e1a04000 	mov	r4, r0
   1995c:	e2515000 	subs	r5, r1, #0
   19960:	0a000023 	beq	199f4 <CClassAllocator::Free(void*)+0xa0>
   19964:	e5152010 	ldr	r2, [r5, #-16]
   19968:	e3053350 	movw	r3, #21328	; 0x5350
   1996c:	e3443f42 	movt	r3, #20290	; 0x4f42
   19970:	e1520003 	cmp	r2, r3
   19974:	e2456010 	sub	r6, r5, #16
   19978:	0a000005 	beq	19994 <CClassAllocator::Free(void*)+0x40>
   1997c:	e3081ce8 	movw	r1, #36072	; 0x8ce8
   19980:	e3401002 	movt	r1, #2
   19984:	e3080da8 	movw	r0, #36264	; 0x8da8
   19988:	e3400002 	movt	r0, #2
   1998c:	e3a02094 	mov	r2, #148	; 0x94
   19990:	ebfffeaf 	bl	19454 <assertion_failed>
   19994:	e5153004 	ldr	r3, [r5, #-4]
   19998:	e3530000 	cmp	r3, #0
   1999c:	0a000005 	beq	199b8 <CClassAllocator::Free(void*)+0x64>
   199a0:	e3081ce8 	movw	r1, #36072	; 0x8ce8
   199a4:	e3401002 	movt	r1, #2
   199a8:	e3080dc4 	movw	r0, #36292	; 0x8dc4
   199ac:	e3400002 	movt	r0, #2
   199b0:	e3a02095 	mov	r2, #149	; 0x95
   199b4:	ebfffea6 	bl	19454 <assertion_failed>
   199b8:	e5d43014 	ldrb	r3, [r4, #20]
   199bc:	e3530000 	cmp	r3, #0
   199c0:	1a000008 	bne	199e8 <CClassAllocator::Free(void*)+0x94>
   199c4:	e5943010 	ldr	r3, [r4, #16]
   199c8:	e5053004 	str	r3, [r5, #-4]
   199cc:	e5846010 	str	r6, [r4, #16]
   199d0:	e5d43014 	ldrb	r3, [r4, #20]
   199d4:	e3530000 	cmp	r3, #0
   199d8:	08bd8070 	popeq	{r4, r5, r6, pc}
   199dc:	e2840018 	add	r0, r4, #24
   199e0:	e8bd4070 	pop	{r4, r5, r6, lr}
   199e4:	ea001448 	b	1eb0c <CSpinLock::Release()>
   199e8:	e2840018 	add	r0, r4, #24
   199ec:	eb00142f 	bl	1eab0 <CSpinLock::Acquire()>
   199f0:	eafffff3 	b	199c4 <CClassAllocator::Free(void*)+0x70>
   199f4:	e3081ce8 	movw	r1, #36072	; 0x8ce8
   199f8:	e3401002 	movt	r1, #2
   199fc:	e3080d9c 	movw	r0, #36252	; 0x8d9c
   19a00:	e3400002 	movt	r0, #2
   19a04:	e3a02090 	mov	r2, #144	; 0x90
   19a08:	ebfffe91 	bl	19454 <assertion_failed>
   19a0c:	eaffffd4 	b	19964 <CClassAllocator::Free(void*)+0x10>

00019a10 <debug_hexdump(void const*, unsigned int, char const*)>:
   19a10:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   19a14:	e3520000 	cmp	r2, #0
   19a18:	e3087dd8 	movw	r7, #36312	; 0x8dd8
   19a1c:	e3407002 	movt	r7, #2
   19a20:	11a07002 	movne	r7, r2
   19a24:	e24dd048 	sub	sp, sp, #72	; 0x48
   19a28:	e1a05001 	mov	r5, r1
   19a2c:	e1a04000 	mov	r4, r0
   19a30:	eb0008e5 	bl	1bdcc <CLogger::Get()>
   19a34:	e1a01007 	mov	r1, r7
   19a38:	e3083de0 	movw	r3, #36320	; 0x8de0
   19a3c:	e3403002 	movt	r3, #2
   19a40:	e58d4004 	str	r4, [sp, #4]
   19a44:	e3a02004 	mov	r2, #4
   19a48:	e58d5000 	str	r5, [sp]
   19a4c:	eb000815 	bl	1baa8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   19a50:	e3550000 	cmp	r5, #0
   19a54:	0a00002d 	beq	19b10 <debug_hexdump(void const*, unsigned int, char const*)+0x100>
   19a58:	e3088e08 	movw	r8, #36360	; 0x8e08
   19a5c:	e3408002 	movt	r8, #2
   19a60:	ea000001 	b	19a6c <debug_hexdump(void const*, unsigned int, char const*)+0x5c>
   19a64:	e2555010 	subs	r5, r5, #16
   19a68:	0a000028 	beq	19b10 <debug_hexdump(void const*, unsigned int, char const*)+0x100>
   19a6c:	eb0008d6 	bl	1bdcc <CLogger::Get()>
   19a70:	e5d4c00f 	ldrb	ip, [r4, #15]
   19a74:	e5d4900e 	ldrb	r9, [r4, #14]
   19a78:	e1a03008 	mov	r3, r8
   19a7c:	e5d4600d 	ldrb	r6, [r4, #13]
   19a80:	e3a02004 	mov	r2, #4
   19a84:	e5d4e00c 	ldrb	lr, [r4, #12]
   19a88:	e1a01007 	mov	r1, r7
   19a8c:	e5d4a00b 	ldrb	sl, [r4, #11]
   19a90:	e58dc040 	str	ip, [sp, #64]	; 0x40
   19a94:	e6ffc074 	uxth	ip, r4
   19a98:	e58d903c 	str	r9, [sp, #60]	; 0x3c
   19a9c:	e2844010 	add	r4, r4, #16
   19aa0:	e5549006 	ldrb	r9, [r4, #-6]
   19aa4:	e58d6038 	str	r6, [sp, #56]	; 0x38
   19aa8:	e5546007 	ldrb	r6, [r4, #-7]
   19aac:	e58de034 	str	lr, [sp, #52]	; 0x34
   19ab0:	e554e008 	ldrb	lr, [r4, #-8]
   19ab4:	e58da030 	str	sl, [sp, #48]	; 0x30
   19ab8:	e554a009 	ldrb	sl, [r4, #-9]
   19abc:	e58d902c 	str	r9, [sp, #44]	; 0x2c
   19ac0:	e554900a 	ldrb	r9, [r4, #-10]
   19ac4:	e58d6028 	str	r6, [sp, #40]	; 0x28
   19ac8:	e554600b 	ldrb	r6, [r4, #-11]
   19acc:	e58de024 	str	lr, [sp, #36]	; 0x24
   19ad0:	e554e00c 	ldrb	lr, [r4, #-12]
   19ad4:	e58da020 	str	sl, [sp, #32]
   19ad8:	e554a00d 	ldrb	sl, [r4, #-13]
   19adc:	e58d901c 	str	r9, [sp, #28]
   19ae0:	e554900e 	ldrb	r9, [r4, #-14]
   19ae4:	e58d6018 	str	r6, [sp, #24]
   19ae8:	e554600f 	ldrb	r6, [r4, #-15]
   19aec:	e58de014 	str	lr, [sp, #20]
   19af0:	e554e010 	ldrb	lr, [r4, #-16]
   19af4:	e58da010 	str	sl, [sp, #16]
   19af8:	e58d900c 	str	r9, [sp, #12]
   19afc:	e58d6008 	str	r6, [sp, #8]
   19b00:	e88d5000 	stm	sp, {ip, lr}
   19b04:	eb0007e7 	bl	1baa8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   19b08:	e355000f 	cmp	r5, #15
   19b0c:	8affffd4 	bhi	19a64 <debug_hexdump(void const*, unsigned int, char const*)+0x54>
   19b10:	e28dd048 	add	sp, sp, #72	; 0x48
   19b14:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}

00019b18 <debug_stacktrace(unsigned int const*, char const*)>:
   19b18:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   19b1c:	e3510000 	cmp	r1, #0
   19b20:	e3087dd8 	movw	r7, #36312	; 0x8dd8
   19b24:	e3407002 	movt	r7, #2
   19b28:	11a07001 	movne	r7, r1
   19b2c:	e30461b4 	movw	r6, #16820	; 0x41b4
   19b30:	e3406002 	movt	r6, #2
   19b34:	e3088e60 	movw	r8, #36448	; 0x8e60
   19b38:	e3408002 	movt	r8, #2
   19b3c:	e24dd008 	sub	sp, sp, #8
   19b40:	e2405004 	sub	r5, r0, #4
   19b44:	e3a04000 	mov	r4, #0
   19b48:	ea000002 	b	19b58 <debug_stacktrace(unsigned int const*, char const*)+0x40>
   19b4c:	e2844001 	add	r4, r4, #1
   19b50:	e3540040 	cmp	r4, #64	; 0x40
   19b54:	0a000011 	beq	19ba0 <debug_stacktrace(unsigned int const*, char const*)+0x88>
   19b58:	e5b53004 	ldr	r3, [r5, #4]!
   19b5c:	e3530902 	cmp	r3, #32768	; 0x8000
   19b60:	3afffff9 	bcc	19b4c <debug_stacktrace(unsigned int const*, char const*)+0x34>
   19b64:	e1530006 	cmp	r3, r6
   19b68:	2afffff7 	bcs	19b4c <debug_stacktrace(unsigned int const*, char const*)+0x34>
   19b6c:	e3130003 	tst	r3, #3
   19b70:	1afffff5 	bne	19b4c <debug_stacktrace(unsigned int const*, char const*)+0x34>
   19b74:	eb000894 	bl	1bdcc <CLogger::Get()>
   19b78:	e5951000 	ldr	r1, [r5]
   19b7c:	e58d1004 	str	r1, [sp, #4]
   19b80:	e1a03008 	mov	r3, r8
   19b84:	e58d4000 	str	r4, [sp]
   19b88:	e3a02004 	mov	r2, #4
   19b8c:	e1a01007 	mov	r1, r7
   19b90:	e2844001 	add	r4, r4, #1
   19b94:	eb0007c3 	bl	1baa8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   19b98:	e3540040 	cmp	r4, #64	; 0x40
   19b9c:	1affffed 	bne	19b58 <debug_stacktrace(unsigned int const*, char const*)+0x40>
   19ba0:	e28dd008 	add	sp, sp, #8
   19ba4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

00019ba8 <CDevice::~CDevice()>:
   19ba8:	e12fff1e 	bx	lr

00019bac <CDevice::Read(void*, unsigned int)>:
   19bac:	e3e00000 	mvn	r0, #0
   19bb0:	e12fff1e 	bx	lr

00019bb4 <CDevice::Seek(unsigned long long)>:
   19bb4:	e3e00000 	mvn	r0, #0
   19bb8:	e3e01000 	mvn	r1, #0
   19bbc:	e12fff1e 	bx	lr

00019bc0 <CDevice::~CDevice()>:
   19bc0:	e92d4010 	push	{r4, lr}
   19bc4:	e3a01004 	mov	r1, #4
   19bc8:	e1a04000 	mov	r4, r0
   19bcc:	eb00212f 	bl	22090 <operator delete(void*, unsigned int)>
   19bd0:	e1a00004 	mov	r0, r4
   19bd4:	e8bd8010 	pop	{r4, pc}

00019bd8 <CDevice::CDevice()>:
   19bd8:	e59f3004 	ldr	r3, [pc, #4]	; 19be4 <CDevice::CDevice()+0xc>
   19bdc:	e5803000 	str	r3, [r0]
   19be0:	e12fff1e 	bx	lr
   19be4:	00028e7c 	.word	0x00028e7c

00019be8 <CDeviceNameService::CDeviceNameService()>:
   19be8:	e92d4070 	push	{r4, r5, r6, lr}
   19bec:	e30b44ac 	movw	r4, #46252	; 0xb4ac
   19bf0:	e3404002 	movt	r4, #2
   19bf4:	e3a03000 	mov	r3, #0
   19bf8:	e1a05000 	mov	r5, r0
   19bfc:	e1a01003 	mov	r1, r3
   19c00:	e4803004 	str	r3, [r0], #4
   19c04:	eb00138e 	bl	1ea44 <CSpinLock::CSpinLock(unsigned int)>
   19c08:	e5943000 	ldr	r3, [r4]
   19c0c:	e3530000 	cmp	r3, #0
   19c10:	0a000005 	beq	19c2c <CDeviceNameService::CDeviceNameService()+0x44>
   19c14:	e3081e90 	movw	r1, #36496	; 0x8e90
   19c18:	e3401002 	movt	r1, #2
   19c1c:	e3080ea8 	movw	r0, #36520	; 0x8ea8
   19c20:	e3400002 	movt	r0, #2
   19c24:	e3a0201f 	mov	r2, #31
   19c28:	ebfffe09 	bl	19454 <assertion_failed>
   19c2c:	e5845000 	str	r5, [r4]
   19c30:	e1a00005 	mov	r0, r5
   19c34:	e8bd8070 	pop	{r4, r5, r6, pc}

00019c38 <CDeviceNameService::~CDeviceNameService()>:
   19c38:	e92d4070 	push	{r4, r5, r6, lr}
   19c3c:	e1a05000 	mov	r5, r0
   19c40:	e5904000 	ldr	r4, [r0]
   19c44:	e3540000 	cmp	r4, #0
   19c48:	0a00000e 	beq	19c88 <CDeviceNameService::~CDeviceNameService()+0x50>
   19c4c:	e3a06000 	mov	r6, #0
   19c50:	e5943004 	ldr	r3, [r4, #4]
   19c54:	e5944000 	ldr	r4, [r4]
   19c58:	e2530000 	subs	r0, r3, #0
   19c5c:	0a000000 	beq	19c64 <CDeviceNameService::~CDeviceNameService()+0x2c>
   19c60:	eb002109 	bl	2208c <operator delete[](void*)>
   19c64:	e5953000 	ldr	r3, [r5]
   19c68:	e3a01010 	mov	r1, #16
   19c6c:	e1a00003 	mov	r0, r3
   19c70:	e5836004 	str	r6, [r3, #4]
   19c74:	e5836008 	str	r6, [r3, #8]
   19c78:	eb002104 	bl	22090 <operator delete(void*, unsigned int)>
   19c7c:	e5854000 	str	r4, [r5]
   19c80:	e3540000 	cmp	r4, #0
   19c84:	1afffff1 	bne	19c50 <CDeviceNameService::~CDeviceNameService()+0x18>
   19c88:	e30b34ac 	movw	r3, #46252	; 0xb4ac
   19c8c:	e3403002 	movt	r3, #2
   19c90:	e2850004 	add	r0, r5, #4
   19c94:	e3a02000 	mov	r2, #0
   19c98:	e5832000 	str	r2, [r3]
   19c9c:	eb001376 	bl	1ea7c <CSpinLock::~CSpinLock()>
   19ca0:	e1a00005 	mov	r0, r5
   19ca4:	e8bd8070 	pop	{r4, r5, r6, pc}

00019ca8 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)>:
   19ca8:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   19cac:	e2808004 	add	r8, r0, #4
   19cb0:	e1a05000 	mov	r5, r0
   19cb4:	e1a00008 	mov	r0, r8
   19cb8:	e1a06001 	mov	r6, r1
   19cbc:	e1a07002 	mov	r7, r2
   19cc0:	e1a09003 	mov	r9, r3
   19cc4:	eb001379 	bl	1eab0 <CSpinLock::Acquire()>
   19cc8:	e3a00010 	mov	r0, #16
   19ccc:	eb0020eb 	bl	22080 <operator new(unsigned int)>
   19cd0:	e3560000 	cmp	r6, #0
   19cd4:	e1a04000 	mov	r4, r0
   19cd8:	0a000017 	beq	19d3c <CDeviceNameService::AddDevice(char const*, CDevice*, bool)+0x94>
   19cdc:	e1a00006 	mov	r0, r6
   19ce0:	eb001baa 	bl	20b90 <strlen>
   19ce4:	e2800001 	add	r0, r0, #1
   19ce8:	eb0020e5 	bl	22084 <operator new[](unsigned int)>
   19cec:	e1a01006 	mov	r1, r6
   19cf0:	e5840004 	str	r0, [r4, #4]
   19cf4:	eb001c0f 	bl	20d38 <strcpy>
   19cf8:	e3570000 	cmp	r7, #0
   19cfc:	0a000007 	beq	19d20 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)+0x78>
   19d00:	e5953000 	ldr	r3, [r5]
   19d04:	e1a00008 	mov	r0, r8
   19d08:	e5854000 	str	r4, [r5]
   19d0c:	e5847008 	str	r7, [r4, #8]
   19d10:	e5c4900c 	strb	r9, [r4, #12]
   19d14:	e5843000 	str	r3, [r4]
   19d18:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   19d1c:	ea00137a 	b	1eb0c <CSpinLock::Release()>
   19d20:	e3081e90 	movw	r1, #36496	; 0x8e90
   19d24:	e3401002 	movt	r1, #2
   19d28:	e3080eb4 	movw	r0, #36532	; 0x8eb4
   19d2c:	e3400002 	movt	r0, #2
   19d30:	e3a02040 	mov	r2, #64	; 0x40
   19d34:	ebfffdc6 	bl	19454 <assertion_failed>
   19d38:	eafffff0 	b	19d00 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)+0x58>
   19d3c:	e3081e90 	movw	r1, #36496	; 0x8e90
   19d40:	e3401002 	movt	r1, #2
   19d44:	e3040a98 	movw	r0, #19096	; 0x4a98
   19d48:	e3400002 	movt	r0, #2
   19d4c:	e3a0203b 	mov	r2, #59	; 0x3b
   19d50:	ebfffdbf 	bl	19454 <assertion_failed>
   19d54:	eaffffe0 	b	19cdc <CDeviceNameService::AddDevice(char const*, CDevice*, bool)+0x34>

00019d58 <CDeviceNameService::RemoveDevice(char const*, bool)>:
   19d58:	e92d4ff8 	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19d5c:	e1a0b000 	mov	fp, r0
   19d60:	e1a07002 	mov	r7, r2
   19d64:	e2516000 	subs	r6, r1, #0
   19d68:	0a000036 	beq	19e48 <CDeviceNameService::RemoveDevice(char const*, bool)+0xf0>
   19d6c:	e28ba004 	add	sl, fp, #4
   19d70:	e1a0000a 	mov	r0, sl
   19d74:	eb00134d 	bl	1eab0 <CSpinLock::Acquire()>
   19d78:	e59b4000 	ldr	r4, [fp]
   19d7c:	e3540000 	cmp	r4, #0
   19d80:	0a00002b 	beq	19e34 <CDeviceNameService::RemoveDevice(char const*, bool)+0xdc>
   19d84:	e3089e90 	movw	r9, #36496	; 0x8e90
   19d88:	e3409002 	movt	r9, #2
   19d8c:	e3088ec4 	movw	r8, #36548	; 0x8ec4
   19d90:	e3408002 	movt	r8, #2
   19d94:	e3a05000 	mov	r5, #0
   19d98:	ea00000b 	b	19dcc <CDeviceNameService::RemoveDevice(char const*, bool)+0x74>
   19d9c:	e1a00006 	mov	r0, r6
   19da0:	eb001b84 	bl	20bb8 <strcmp>
   19da4:	e3500000 	cmp	r0, #0
   19da8:	1a000002 	bne	19db8 <CDeviceNameService::RemoveDevice(char const*, bool)+0x60>
   19dac:	e5d4300c 	ldrb	r3, [r4, #12]
   19db0:	e1530007 	cmp	r3, r7
   19db4:	0a00000d 	beq	19df0 <CDeviceNameService::RemoveDevice(char const*, bool)+0x98>
   19db8:	e5943000 	ldr	r3, [r4]
   19dbc:	e1a05004 	mov	r5, r4
   19dc0:	e3530000 	cmp	r3, #0
   19dc4:	0a00001a 	beq	19e34 <CDeviceNameService::RemoveDevice(char const*, bool)+0xdc>
   19dc8:	e1a04003 	mov	r4, r3
   19dcc:	e5941004 	ldr	r1, [r4, #4]
   19dd0:	e3510000 	cmp	r1, #0
   19dd4:	1afffff0 	bne	19d9c <CDeviceNameService::RemoveDevice(char const*, bool)+0x44>
   19dd8:	e1a01009 	mov	r1, r9
   19ddc:	e3a0205e 	mov	r2, #94	; 0x5e
   19de0:	e1a00008 	mov	r0, r8
   19de4:	ebfffd9a 	bl	19454 <assertion_failed>
   19de8:	e5941004 	ldr	r1, [r4, #4]
   19dec:	eaffffea 	b	19d9c <CDeviceNameService::RemoveDevice(char const*, bool)+0x44>
   19df0:	e5943000 	ldr	r3, [r4]
   19df4:	e3550000 	cmp	r5, #0
   19df8:	15853000 	strne	r3, [r5]
   19dfc:	0a00000f 	beq	19e40 <CDeviceNameService::RemoveDevice(char const*, bool)+0xe8>
   19e00:	e1a0000a 	mov	r0, sl
   19e04:	eb001340 	bl	1eb0c <CSpinLock::Release()>
   19e08:	e5940004 	ldr	r0, [r4, #4]
   19e0c:	e3500000 	cmp	r0, #0
   19e10:	0a000000 	beq	19e18 <CDeviceNameService::RemoveDevice(char const*, bool)+0xc0>
   19e14:	eb00209c 	bl	2208c <operator delete[](void*)>
   19e18:	e3a03000 	mov	r3, #0
   19e1c:	e1a00004 	mov	r0, r4
   19e20:	e5843004 	str	r3, [r4, #4]
   19e24:	e3a01010 	mov	r1, #16
   19e28:	e5843008 	str	r3, [r4, #8]
   19e2c:	e8bd4ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19e30:	ea002096 	b	22090 <operator delete(void*, unsigned int)>
   19e34:	e1a0000a 	mov	r0, sl
   19e38:	e8bd4ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19e3c:	ea001332 	b	1eb0c <CSpinLock::Release()>
   19e40:	e58b3000 	str	r3, [fp]
   19e44:	eaffffed 	b	19e00 <CDeviceNameService::RemoveDevice(char const*, bool)+0xa8>
   19e48:	e3081e90 	movw	r1, #36496	; 0x8e90
   19e4c:	e3401002 	movt	r1, #2
   19e50:	e3040a98 	movw	r0, #19096	; 0x4a98
   19e54:	e3400002 	movt	r0, #2
   19e58:	e3a02056 	mov	r2, #86	; 0x56
   19e5c:	ebfffd7c 	bl	19454 <assertion_failed>
   19e60:	eaffffc1 	b	19d6c <CDeviceNameService::RemoveDevice(char const*, bool)+0x14>

00019e64 <CDeviceNameService::GetDevice(char const*, bool)>:
   19e64:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   19e68:	e1a04000 	mov	r4, r0
   19e6c:	e1a06002 	mov	r6, r2
   19e70:	e2515000 	subs	r5, r1, #0
   19e74:	0a00002e 	beq	19f34 <CDeviceNameService::GetDevice(char const*, bool)+0xd0>
   19e78:	e2849004 	add	r9, r4, #4
   19e7c:	e1a00009 	mov	r0, r9
   19e80:	eb00130a 	bl	1eab0 <CSpinLock::Acquire()>
   19e84:	e5944000 	ldr	r4, [r4]
   19e88:	e3540000 	cmp	r4, #0
   19e8c:	0a000017 	beq	19ef0 <CDeviceNameService::GetDevice(char const*, bool)+0x8c>
   19e90:	e3088e90 	movw	r8, #36496	; 0x8e90
   19e94:	e3408002 	movt	r8, #2
   19e98:	e3087ec4 	movw	r7, #36548	; 0x8ec4
   19e9c:	e3407002 	movt	r7, #2
   19ea0:	ea000009 	b	19ecc <CDeviceNameService::GetDevice(char const*, bool)+0x68>
   19ea4:	e1a00005 	mov	r0, r5
   19ea8:	eb001b42 	bl	20bb8 <strcmp>
   19eac:	e3500000 	cmp	r0, #0
   19eb0:	1a000002 	bne	19ec0 <CDeviceNameService::GetDevice(char const*, bool)+0x5c>
   19eb4:	e5d4300c 	ldrb	r3, [r4, #12]
   19eb8:	e1530006 	cmp	r3, r6
   19ebc:	0a000010 	beq	19f04 <CDeviceNameService::GetDevice(char const*, bool)+0xa0>
   19ec0:	e5944000 	ldr	r4, [r4]
   19ec4:	e3540000 	cmp	r4, #0
   19ec8:	0a000008 	beq	19ef0 <CDeviceNameService::GetDevice(char const*, bool)+0x8c>
   19ecc:	e5941004 	ldr	r1, [r4, #4]
   19ed0:	e3510000 	cmp	r1, #0
   19ed4:	1afffff2 	bne	19ea4 <CDeviceNameService::GetDevice(char const*, bool)+0x40>
   19ed8:	e1a01008 	mov	r1, r8
   19edc:	e3a02092 	mov	r2, #146	; 0x92
   19ee0:	e1a00007 	mov	r0, r7
   19ee4:	ebfffd5a 	bl	19454 <assertion_failed>
   19ee8:	e5941004 	ldr	r1, [r4, #4]
   19eec:	eaffffec 	b	19ea4 <CDeviceNameService::GetDevice(char const*, bool)+0x40>
   19ef0:	e1a00009 	mov	r0, r9
   19ef4:	e3a04000 	mov	r4, #0
   19ef8:	eb001303 	bl	1eb0c <CSpinLock::Release()>
   19efc:	e1a00004 	mov	r0, r4
   19f00:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   19f04:	e5944008 	ldr	r4, [r4, #8]
   19f08:	e1a00009 	mov	r0, r9
   19f0c:	eb0012fe 	bl	1eb0c <CSpinLock::Release()>
   19f10:	e3540000 	cmp	r4, #0
   19f14:	1afffff8 	bne	19efc <CDeviceNameService::GetDevice(char const*, bool)+0x98>
   19f18:	e3081e90 	movw	r1, #36496	; 0x8e90
   19f1c:	e3401002 	movt	r1, #2
   19f20:	e3080ed8 	movw	r0, #36568	; 0x8ed8
   19f24:	e3400002 	movt	r0, #2
   19f28:	e3a0209a 	mov	r2, #154	; 0x9a
   19f2c:	ebfffd48 	bl	19454 <assertion_failed>
   19f30:	eafffff1 	b	19efc <CDeviceNameService::GetDevice(char const*, bool)+0x98>
   19f34:	e3081e90 	movw	r1, #36496	; 0x8e90
   19f38:	e3401002 	movt	r1, #2
   19f3c:	e3040a98 	movw	r0, #19096	; 0x4a98
   19f40:	e3400002 	movt	r0, #2
   19f44:	e3a0208b 	mov	r2, #139	; 0x8b
   19f48:	ebfffd41 	bl	19454 <assertion_failed>
   19f4c:	eaffffc9 	b	19e78 <CDeviceNameService::GetDevice(char const*, bool)+0x14>

00019f50 <CDeviceNameService::Get()>:
   19f50:	e92d4010 	push	{r4, lr}
   19f54:	e30b44ac 	movw	r4, #46252	; 0xb4ac
   19f58:	e3404002 	movt	r4, #2
   19f5c:	e5940000 	ldr	r0, [r4]
   19f60:	e3500000 	cmp	r0, #0
   19f64:	18bd8010 	popne	{r4, pc}
   19f68:	e3a020cc 	mov	r2, #204	; 0xcc
   19f6c:	e3081e90 	movw	r1, #36496	; 0x8e90
   19f70:	e3401002 	movt	r1, #2
   19f74:	e3080ee8 	movw	r0, #36584	; 0x8ee8
   19f78:	e3400002 	movt	r0, #2
   19f7c:	ebfffd34 	bl	19454 <assertion_failed>
   19f80:	e5940000 	ldr	r0, [r4]
   19f84:	e8bd8010 	pop	{r4, pc}

00019f88 <CDeviceNameService::AddDevice(char const*, unsigned int, CDevice*, bool)>:
   19f88:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   19f8c:	e1a07001 	mov	r7, r1
   19f90:	e1a08002 	mov	r8, r2
   19f94:	e24dd010 	sub	sp, sp, #16
   19f98:	e1a04000 	mov	r4, r0
   19f9c:	e1a0000d 	mov	r0, sp
   19fa0:	e1a05003 	mov	r5, r3
   19fa4:	e5dd6028 	ldrb	r6, [sp, #40]	; 0x28
   19fa8:	eb001328 	bl	1ec50 <CString::CString()>
   19fac:	e1a03008 	mov	r3, r8
   19fb0:	e1a02007 	mov	r2, r7
   19fb4:	e1a0000d 	mov	r0, sp
   19fb8:	e3081ef4 	movw	r1, #36596	; 0x8ef4
   19fbc:	e3401002 	movt	r1, #2
   19fc0:	eb0016eb 	bl	1fb74 <CString::Format(char const*, ...)>
   19fc4:	e1a0000d 	mov	r0, sp
   19fc8:	eb001337 	bl	1ecac <CString::operator char const*() const>
   19fcc:	e1a03006 	mov	r3, r6
   19fd0:	e1a01000 	mov	r1, r0
   19fd4:	e1a02005 	mov	r2, r5
   19fd8:	e1a00004 	mov	r0, r4
   19fdc:	ebffff31 	bl	19ca8 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)>
   19fe0:	e1a0000d 	mov	r0, sp
   19fe4:	eb0012e7 	bl	1eb88 <CString::~CString()>
   19fe8:	e28dd010 	add	sp, sp, #16
   19fec:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

00019ff0 <CDeviceNameService::RemoveDevice(char const*, unsigned int, bool)>:
   19ff0:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   19ff4:	e1a06001 	mov	r6, r1
   19ff8:	e1a07002 	mov	r7, r2
   19ffc:	e24dd014 	sub	sp, sp, #20
   1a000:	e1a04000 	mov	r4, r0
   1a004:	e1a0000d 	mov	r0, sp
   1a008:	e1a05003 	mov	r5, r3
   1a00c:	eb00130f 	bl	1ec50 <CString::CString()>
   1a010:	e1a03007 	mov	r3, r7
   1a014:	e1a02006 	mov	r2, r6
   1a018:	e1a0000d 	mov	r0, sp
   1a01c:	e3081ef4 	movw	r1, #36596	; 0x8ef4
   1a020:	e3401002 	movt	r1, #2
   1a024:	eb0016d2 	bl	1fb74 <CString::Format(char const*, ...)>
   1a028:	e1a0000d 	mov	r0, sp
   1a02c:	eb00131e 	bl	1ecac <CString::operator char const*() const>
   1a030:	e1a02005 	mov	r2, r5
   1a034:	e1a01000 	mov	r1, r0
   1a038:	e1a00004 	mov	r0, r4
   1a03c:	ebffff45 	bl	19d58 <CDeviceNameService::RemoveDevice(char const*, bool)>
   1a040:	e1a0000d 	mov	r0, sp
   1a044:	eb0012cf 	bl	1eb88 <CString::~CString()>
   1a048:	e28dd014 	add	sp, sp, #20
   1a04c:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}

0001a050 <CDeviceNameService::GetDevice(char const*, unsigned int, bool)>:
   1a050:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   1a054:	e1a06001 	mov	r6, r1
   1a058:	e1a07002 	mov	r7, r2
   1a05c:	e24dd014 	sub	sp, sp, #20
   1a060:	e1a04000 	mov	r4, r0
   1a064:	e1a0000d 	mov	r0, sp
   1a068:	e1a05003 	mov	r5, r3
   1a06c:	eb0012f7 	bl	1ec50 <CString::CString()>
   1a070:	e1a03007 	mov	r3, r7
   1a074:	e1a02006 	mov	r2, r6
   1a078:	e1a0000d 	mov	r0, sp
   1a07c:	e3081ef4 	movw	r1, #36596	; 0x8ef4
   1a080:	e3401002 	movt	r1, #2
   1a084:	eb0016ba 	bl	1fb74 <CString::Format(char const*, ...)>
   1a088:	e1a0000d 	mov	r0, sp
   1a08c:	eb001306 	bl	1ecac <CString::operator char const*() const>
   1a090:	e1a02005 	mov	r2, r5
   1a094:	e1a01000 	mov	r1, r0
   1a098:	e1a00004 	mov	r0, r4
   1a09c:	ebffff70 	bl	19e64 <CDeviceNameService::GetDevice(char const*, bool)>
   1a0a0:	e1a04000 	mov	r4, r0
   1a0a4:	e1a0000d 	mov	r0, sp
   1a0a8:	eb0012b6 	bl	1eb88 <CString::~CString()>
   1a0ac:	e1a00004 	mov	r0, r4
   1a0b0:	e28dd014 	add	sp, sp, #20
   1a0b4:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}

0001a0b8 <CDeviceNameService::ListDevices(CDevice*)>:
   1a0b8:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a0bc:	e1a04000 	mov	r4, r0
   1a0c0:	e2516000 	subs	r6, r1, #0
   1a0c4:	e24dd024 	sub	sp, sp, #36	; 0x24
   1a0c8:	0a00003d 	beq	1a1c4 <CDeviceNameService::ListDevices(CDevice*)+0x10c>
   1a0cc:	e5944000 	ldr	r4, [r4]
   1a0d0:	e3540000 	cmp	r4, #0
   1a0d4:	0a000038 	beq	1a1bc <CDeviceNameService::ListDevices(CDevice*)+0x104>
   1a0d8:	e308ae90 	movw	sl, #36496	; 0x8e90
   1a0dc:	e340a002 	movt	sl, #2
   1a0e0:	e3083ec4 	movw	r3, #36548	; 0x8ec4
   1a0e4:	e3403002 	movt	r3, #2
   1a0e8:	e3088f0c 	movw	r8, #36620	; 0x8f0c
   1a0ec:	e3408002 	movt	r8, #2
   1a0f0:	e58d300c 	str	r3, [sp, #12]
   1a0f4:	e3a05000 	mov	r5, #0
   1a0f8:	ea00001a 	b	1a168 <CDeviceNameService::ListDevices(CDevice*)+0xb0>
   1a0fc:	e5d4200c 	ldrb	r2, [r4, #12]
   1a100:	e1a01008 	mov	r1, r8
   1a104:	e28d0010 	add	r0, sp, #16
   1a108:	e3520000 	cmp	r2, #0
   1a10c:	03a02063 	moveq	r2, #99	; 0x63
   1a110:	13a02062 	movne	r2, #98	; 0x62
   1a114:	e215b003 	ands	fp, r5, #3
   1a118:	13a0c020 	movne	ip, #32
   1a11c:	03a0c00a 	moveq	ip, #10
   1a120:	e58dc000 	str	ip, [sp]
   1a124:	eb001692 	bl	1fb74 <CString::Format(char const*, ...)>
   1a128:	e5963000 	ldr	r3, [r6]
   1a12c:	e28d0010 	add	r0, sp, #16
   1a130:	e593700c 	ldr	r7, [r3, #12]
   1a134:	eb0012dc 	bl	1ecac <CString::operator char const*() const>
   1a138:	e1a09000 	mov	r9, r0
   1a13c:	e28d0010 	add	r0, sp, #16
   1a140:	eb001308 	bl	1ed68 <CString::GetLength() const>
   1a144:	e1a01009 	mov	r1, r9
   1a148:	e1a02000 	mov	r2, r0
   1a14c:	e1a00006 	mov	r0, r6
   1a150:	e12fff37 	blx	r7
   1a154:	e5944000 	ldr	r4, [r4]
   1a158:	e28d0010 	add	r0, sp, #16
   1a15c:	eb001289 	bl	1eb88 <CString::~CString()>
   1a160:	e3540000 	cmp	r4, #0
   1a164:	0a00000b 	beq	1a198 <CDeviceNameService::ListDevices(CDevice*)+0xe0>
   1a168:	e28d0010 	add	r0, sp, #16
   1a16c:	e2855001 	add	r5, r5, #1
   1a170:	eb0012b6 	bl	1ec50 <CString::CString()>
   1a174:	e5943004 	ldr	r3, [r4, #4]
   1a178:	e3530000 	cmp	r3, #0
   1a17c:	1affffde 	bne	1a0fc <CDeviceNameService::ListDevices(CDevice*)+0x44>
   1a180:	e3a020b9 	mov	r2, #185	; 0xb9
   1a184:	e1a0100a 	mov	r1, sl
   1a188:	e59d000c 	ldr	r0, [sp, #12]
   1a18c:	ebfffcb0 	bl	19454 <assertion_failed>
   1a190:	e5943004 	ldr	r3, [r4, #4]
   1a194:	eaffffd8 	b	1a0fc <CDeviceNameService::ListDevices(CDevice*)+0x44>
   1a198:	e35b0000 	cmp	fp, #0
   1a19c:	0a000006 	beq	1a1bc <CDeviceNameService::ListDevices(CDevice*)+0x104>
   1a1a0:	e5963000 	ldr	r3, [r6]
   1a1a4:	e3081374 	movw	r1, #33652	; 0x8374
   1a1a8:	e3401002 	movt	r1, #2
   1a1ac:	e1a00006 	mov	r0, r6
   1a1b0:	e3a02001 	mov	r2, #1
   1a1b4:	e593300c 	ldr	r3, [r3, #12]
   1a1b8:	e12fff33 	blx	r3
   1a1bc:	e28dd024 	add	sp, sp, #36	; 0x24
   1a1c0:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a1c4:	e3081e90 	movw	r1, #36496	; 0x8e90
   1a1c8:	e3401002 	movt	r1, #2
   1a1cc:	e3080efc 	movw	r0, #36604	; 0x8efc
   1a1d0:	e3400002 	movt	r0, #2
   1a1d4:	e3a020b0 	mov	r2, #176	; 0xb0
   1a1d8:	ebfffc9d 	bl	19454 <assertion_failed>
   1a1dc:	eaffffba 	b	1a0cc <CDeviceNameService::ListDevices(CDevice*)+0x14>

0001a1e0 <CGPIOPin::CGPIOPin()>:
   1a1e0:	e59f2030 	ldr	r2, [pc, #48]	; 1a218 <CGPIOPin::CGPIOPin()+0x38>
   1a1e4:	e3a01000 	mov	r1, #0
   1a1e8:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   1a1ec:	e3a0c00a 	mov	ip, #10
   1a1f0:	e3a0e036 	mov	lr, #54	; 0x36
   1a1f4:	e5802000 	str	r2, [r0]
   1a1f8:	e3a02006 	mov	r2, #6
   1a1fc:	e580e004 	str	lr, [r0, #4]
   1a200:	e5c0c010 	strb	ip, [r0, #16]
   1a204:	e5801018 	str	r1, [r0, #24]
   1a208:	e580101c 	str	r1, [r0, #28]
   1a20c:	e5c02024 	strb	r2, [r0, #36]	; 0x24
   1a210:	e5c02025 	strb	r2, [r0, #37]	; 0x25
   1a214:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   1a218:	00028f20 	.word	0x00028f20

0001a21c <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>:
   1a21c:	e59fc050 	ldr	ip, [pc, #80]	; 1a274 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)+0x58>
   1a220:	e92d4070 	push	{r4, r5, r6, lr}
   1a224:	e1a04000 	mov	r4, r0
   1a228:	e1a05002 	mov	r5, r2
   1a22c:	e580c000 	str	ip, [r0]
   1a230:	e3a02036 	mov	r2, #54	; 0x36
   1a234:	e5803018 	str	r3, [r0, #24]
   1a238:	e3a0300a 	mov	r3, #10
   1a23c:	e5802004 	str	r2, [r0, #4]
   1a240:	e3a02000 	mov	r2, #0
   1a244:	e5c03010 	strb	r3, [r0, #16]
   1a248:	e3a03006 	mov	r3, #6
   1a24c:	e580201c 	str	r2, [r0, #28]
   1a250:	e5c03024 	strb	r3, [r0, #36]	; 0x24
   1a254:	e5c03025 	strb	r3, [r0, #37]	; 0x25
   1a258:	eb00000d 	bl	1a294 <CGPIOPin::AssignPin(unsigned int)>
   1a25c:	e1a00004 	mov	r0, r4
   1a260:	e1a01005 	mov	r1, r5
   1a264:	e3a02001 	mov	r2, #1
   1a268:	eb00002c 	bl	1a320 <CGPIOPin::SetMode(TGPIOMode, bool)>
   1a26c:	e1a00004 	mov	r0, r4
   1a270:	e8bd8070 	pop	{r4, r5, r6, pc}
   1a274:	00028f20 	.word	0x00028f20

0001a278 <CGPIOPin::~CGPIOPin()>:
   1a278:	e12fff1e 	bx	lr

0001a27c <CGPIOPin::~CGPIOPin()>:
   1a27c:	e92d4010 	push	{r4, lr}
   1a280:	e3a01028 	mov	r1, #40	; 0x28
   1a284:	e1a04000 	mov	r4, r0
   1a288:	eb001f80 	bl	22090 <operator delete(void*, unsigned int)>
   1a28c:	e1a00004 	mov	r0, r4
   1a290:	e8bd8010 	pop	{r4, pc}

0001a294 <CGPIOPin::AssignPin(unsigned int)>:
   1a294:	e5903004 	ldr	r3, [r0, #4]
   1a298:	e92d4070 	push	{r4, r5, r6, lr}
   1a29c:	e1a05000 	mov	r5, r0
   1a2a0:	e1a04001 	mov	r4, r1
   1a2a4:	e3530036 	cmp	r3, #54	; 0x36
   1a2a8:	0a000003 	beq	1a2bc <CGPIOPin::AssignPin(unsigned int)+0x28>
   1a2ac:	e59f1068 	ldr	r1, [pc, #104]	; 1a31c <CGPIOPin::AssignPin(unsigned int)+0x88>
   1a2b0:	e3a02040 	mov	r2, #64	; 0x40
   1a2b4:	e281000c 	add	r0, r1, #12
   1a2b8:	ebfffc65 	bl	19454 <assertion_failed>
   1a2bc:	e5854004 	str	r4, [r5, #4]
   1a2c0:	e3540035 	cmp	r4, #53	; 0x35
   1a2c4:	8a000007 	bhi	1a2e8 <CGPIOPin::AssignPin(unsigned int)+0x54>
   1a2c8:	e204201f 	and	r2, r4, #31
   1a2cc:	e3a03001 	mov	r3, #1
   1a2d0:	e1a042a4 	lsr	r4, r4, #5
   1a2d4:	e1a04104 	lsl	r4, r4, #2
   1a2d8:	e1a03213 	lsl	r3, r3, r2
   1a2dc:	e5854008 	str	r4, [r5, #8]
   1a2e0:	e585300c 	str	r3, [r5, #12]
   1a2e4:	e8bd8070 	pop	{r4, r5, r6, pc}
   1a2e8:	eb00097c 	bl	1c8e0 <CMachineInfo::Get()>
   1a2ec:	e6ef1074 	uxtb	r1, r4
   1a2f0:	eb0008eb 	bl	1c6a4 <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const>
   1a2f4:	e1a04000 	mov	r4, r0
   1a2f8:	e3500035 	cmp	r0, #53	; 0x35
   1a2fc:	e5850004 	str	r0, [r5, #4]
   1a300:	9afffff0 	bls	1a2c8 <CGPIOPin::AssignPin(unsigned int)+0x34>
   1a304:	e59f1010 	ldr	r1, [pc, #16]	; 1a31c <CGPIOPin::AssignPin(unsigned int)+0x88>
   1a308:	e3a02047 	mov	r2, #71	; 0x47
   1a30c:	e2810020 	add	r0, r1, #32
   1a310:	ebfffc4f 	bl	19454 <assertion_failed>
   1a314:	e5954004 	ldr	r4, [r5, #4]
   1a318:	eaffffea 	b	1a2c8 <CGPIOPin::AssignPin(unsigned int)+0x34>
   1a31c:	00028f28 	.word	0x00028f28

0001a320 <CGPIOPin::SetMode(TGPIOMode, bool)>:
   1a320:	e92d4df0 	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1a324:	e3510009 	cmp	r1, #9
   1a328:	e1a04001 	mov	r4, r1
   1a32c:	e1a05000 	mov	r5, r0
   1a330:	e1a06002 	mov	r6, r2
   1a334:	8a000036 	bhi	1a414 <CGPIOPin::SetMode(TGPIOMode, bool)+0xf4>
   1a338:	e2441004 	sub	r1, r4, #4
   1a33c:	e5c54010 	strb	r4, [r5, #16]
   1a340:	e6ef3071 	uxtb	r3, r1
   1a344:	e3530005 	cmp	r3, #5
   1a348:	8a000004 	bhi	1a360 <CGPIOPin::SetMode(TGPIOMode, bool)+0x40>
   1a34c:	e3560000 	cmp	r6, #0
   1a350:	1a000035 	bne	1a42c <CGPIOPin::SetMode(TGPIOMode, bool)+0x10c>
   1a354:	e1a00005 	mov	r0, r5
   1a358:	e8bd4df0 	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   1a35c:	ea00021b 	b	1abd0 <CGPIOPin::SetAlternateFunction(unsigned int)>
   1a360:	e3540001 	cmp	r4, #1
   1a364:	13a04000 	movne	r4, #0
   1a368:	02064001 	andeq	r4, r6, #1
   1a36c:	e3540000 	cmp	r4, #0
   1a370:	1a00004b 	bne	1a4a4 <CGPIOPin::SetMode(TGPIOMode, bool)+0x184>
   1a374:	e5954004 	ldr	r4, [r5, #4]
   1a378:	e3540035 	cmp	r4, #53	; 0x35
   1a37c:	8a000032 	bhi	1a44c <CGPIOPin::SetMode(TGPIOMode, bool)+0x12c>
   1a380:	e30c8ccd 	movw	r8, #52429	; 0xcccd
   1a384:	e34c8ccc 	movt	r8, #52428	; 0xcccc
   1a388:	e3a0300a 	mov	r3, #10
   1a38c:	e30b04b0 	movw	r0, #46256	; 0xb4b0
   1a390:	e3400002 	movt	r0, #2
   1a394:	e08ba894 	umull	sl, fp, r4, r8
   1a398:	e1a071ab 	lsr	r7, fp, #3
   1a39c:	e0674793 	mls	r7, r3, r7, r4
   1a3a0:	eb0011c2 	bl	1eab0 <CSpinLock::Acquire()>
   1a3a4:	e0843498 	umull	r3, r4, r8, r4
   1a3a8:	e5d52010 	ldrb	r2, [r5, #16]
   1a3ac:	e3a01007 	mov	r1, #7
   1a3b0:	e30b04b0 	movw	r0, #46256	; 0xb4b0
   1a3b4:	e3400002 	movt	r0, #2
   1a3b8:	e1a041a4 	lsr	r4, r4, #3
   1a3bc:	e0877087 	add	r7, r7, r7, lsl #1
   1a3c0:	e284453f 	add	r4, r4, #264241152	; 0xfc00000
   1a3c4:	e2422001 	sub	r2, r2, #1
   1a3c8:	e2844702 	add	r4, r4, #524288	; 0x80000
   1a3cc:	e16f2f12 	clz	r2, r2
   1a3d0:	e1a04104 	lsl	r4, r4, #2
   1a3d4:	e1a022a2 	lsr	r2, r2, #5
   1a3d8:	e5943000 	ldr	r3, [r4]
   1a3dc:	e1c33711 	bic	r3, r3, r1, lsl r7
   1a3e0:	e1837712 	orr	r7, r3, r2, lsl r7
   1a3e4:	e5847000 	str	r7, [r4]
   1a3e8:	eb0011c7 	bl	1eb0c <CSpinLock::Release()>
   1a3ec:	e3560000 	cmp	r6, #0
   1a3f0:	08bd8df0 	popeq	{r4, r5, r6, r7, r8, sl, fp, pc}
   1a3f4:	e5d53010 	ldrb	r3, [r5, #16]
   1a3f8:	e3530003 	cmp	r3, #3
   1a3fc:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   1a400:	ea000008 	b	1a428 <CGPIOPin::SetMode(TGPIOMode, bool)+0x108>
   1a404:	0001a494 	.word	0x0001a494
   1a408:	0001a484 	.word	0x0001a484
   1a40c:	0001a474 	.word	0x0001a474
   1a410:	0001a464 	.word	0x0001a464
   1a414:	e59f1098 	ldr	r1, [pc, #152]	; 1a4b4 <CGPIOPin::SetMode(TGPIOMode, bool)+0x194>
   1a418:	e3a0204f 	mov	r2, #79	; 0x4f
   1a41c:	e2810034 	add	r0, r1, #52	; 0x34
   1a420:	ebfffc0b 	bl	19454 <assertion_failed>
   1a424:	eaffffc3 	b	1a338 <CGPIOPin::SetMode(TGPIOMode, bool)+0x18>
   1a428:	e8bd8df0 	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1a42c:	e1a00005 	mov	r0, r5
   1a430:	e3a01000 	mov	r1, #0
   1a434:	eb0001c4 	bl	1ab4c <CGPIOPin::SetPullUpMode(unsigned int)>
   1a438:	e5d54010 	ldrb	r4, [r5, #16]
   1a43c:	e1a00005 	mov	r0, r5
   1a440:	e2441004 	sub	r1, r4, #4
   1a444:	e8bd4df0 	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   1a448:	ea0001e0 	b	1abd0 <CGPIOPin::SetAlternateFunction(unsigned int)>
   1a44c:	e59f1060 	ldr	r1, [pc, #96]	; 1a4b4 <CGPIOPin::SetMode(TGPIOMode, bool)+0x194>
   1a450:	e3a02068 	mov	r2, #104	; 0x68
   1a454:	e2810020 	add	r0, r1, #32
   1a458:	ebfffbfd 	bl	19454 <assertion_failed>
   1a45c:	e5954004 	ldr	r4, [r5, #4]
   1a460:	eaffffc6 	b	1a380 <CGPIOPin::SetMode(TGPIOMode, bool)+0x60>
   1a464:	e1a00005 	mov	r0, r5
   1a468:	e3a01001 	mov	r1, #1
   1a46c:	e8bd4df0 	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   1a470:	ea0001b5 	b	1ab4c <CGPIOPin::SetPullUpMode(unsigned int)>
   1a474:	e1a00005 	mov	r0, r5
   1a478:	e3a01002 	mov	r1, #2
   1a47c:	e8bd4df0 	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   1a480:	ea0001b1 	b	1ab4c <CGPIOPin::SetPullUpMode(unsigned int)>
   1a484:	e1a00005 	mov	r0, r5
   1a488:	e3a01000 	mov	r1, #0
   1a48c:	e8bd4df0 	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   1a490:	ea000008 	b	1a4b8 <CGPIOPin::Write(unsigned int)>
   1a494:	e1a00005 	mov	r0, r5
   1a498:	e3a01000 	mov	r1, #0
   1a49c:	e8bd4df0 	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   1a4a0:	ea0001a9 	b	1ab4c <CGPIOPin::SetPullUpMode(unsigned int)>
   1a4a4:	e3a01000 	mov	r1, #0
   1a4a8:	e1a00005 	mov	r0, r5
   1a4ac:	eb0001a6 	bl	1ab4c <CGPIOPin::SetPullUpMode(unsigned int)>
   1a4b0:	eaffffaf 	b	1a374 <CGPIOPin::SetMode(TGPIOMode, bool)+0x54>
   1a4b4:	00028f28 	.word	0x00028f28

0001a4b8 <CGPIOPin::Write(unsigned int)>:
   1a4b8:	e5903004 	ldr	r3, [r0, #4]
   1a4bc:	e92d4070 	push	{r4, r5, r6, lr}
   1a4c0:	e1a04000 	mov	r4, r0
   1a4c4:	e1a05001 	mov	r5, r1
   1a4c8:	e3530035 	cmp	r3, #53	; 0x35
   1a4cc:	8a00001c 	bhi	1a544 <CGPIOPin::Write(unsigned int)+0x8c>
   1a4d0:	e5d43010 	ldrb	r3, [r4, #16]
   1a4d4:	e3530003 	cmp	r3, #3
   1a4d8:	8a000014 	bhi	1a530 <CGPIOPin::Write(unsigned int)+0x78>
   1a4dc:	e3550001 	cmp	r5, #1
   1a4e0:	8a00000a 	bhi	1a510 <CGPIOPin::Write(unsigned int)+0x58>
   1a4e4:	e3a02028 	mov	r2, #40	; 0x28
   1a4e8:	e3432f20 	movt	r2, #16160	; 0x3f20
   1a4ec:	e3550000 	cmp	r5, #0
   1a4f0:	e3a0301c 	mov	r3, #28
   1a4f4:	e3433f20 	movt	r3, #16160	; 0x3f20
   1a4f8:	01a03002 	moveq	r3, r2
   1a4fc:	e5845014 	str	r5, [r4, #20]
   1a500:	e5942008 	ldr	r2, [r4, #8]
   1a504:	e594100c 	ldr	r1, [r4, #12]
   1a508:	e7831002 	str	r1, [r3, r2]
   1a50c:	e8bd8070 	pop	{r4, r5, r6, pc}
   1a510:	e59f1040 	ldr	r1, [pc, #64]	; 1a558 <CGPIOPin::Write(unsigned int)+0xa0>
   1a514:	e3a02098 	mov	r2, #152	; 0x98
   1a518:	e2810070 	add	r0, r1, #112	; 0x70
   1a51c:	ebfffbcc 	bl	19454 <assertion_failed>
   1a520:	e3a0301c 	mov	r3, #28
   1a524:	e3433f20 	movt	r3, #16160	; 0x3f20
   1a528:	e5845014 	str	r5, [r4, #20]
   1a52c:	eafffff3 	b	1a500 <CGPIOPin::Write(unsigned int)+0x48>
   1a530:	e59f1020 	ldr	r1, [pc, #32]	; 1a558 <CGPIOPin::Write(unsigned int)+0xa0>
   1a534:	e3a02094 	mov	r2, #148	; 0x94
   1a538:	e281004c 	add	r0, r1, #76	; 0x4c
   1a53c:	ebfffbc4 	bl	19454 <assertion_failed>
   1a540:	eaffffe5 	b	1a4dc <CGPIOPin::Write(unsigned int)+0x24>
   1a544:	e59f100c 	ldr	r1, [pc, #12]	; 1a558 <CGPIOPin::Write(unsigned int)+0xa0>
   1a548:	e3a02091 	mov	r2, #145	; 0x91
   1a54c:	e2810020 	add	r0, r1, #32
   1a550:	ebfffbbf 	bl	19454 <assertion_failed>
   1a554:	eaffffdd 	b	1a4d0 <CGPIOPin::Write(unsigned int)+0x18>
   1a558:	00028f28 	.word	0x00028f28

0001a55c <CGPIOPin::Read() const>:
   1a55c:	e5903004 	ldr	r3, [r0, #4]
   1a560:	e92d4010 	push	{r4, lr}
   1a564:	e1a04000 	mov	r4, r0
   1a568:	e3530035 	cmp	r3, #53	; 0x35
   1a56c:	8a00000d 	bhi	1a5a8 <CGPIOPin::Read() const+0x4c>
   1a570:	e5d43010 	ldrb	r3, [r4, #16]
   1a574:	e2432002 	sub	r2, r3, #2
   1a578:	e3530000 	cmp	r3, #0
   1a57c:	13520001 	cmpne	r2, #1
   1a580:	8a00000d 	bhi	1a5bc <CGPIOPin::Read() const+0x60>
   1a584:	e5941008 	ldr	r1, [r4, #8]
   1a588:	e3a03034 	mov	r3, #52	; 0x34
   1a58c:	e3433f20 	movt	r3, #16160	; 0x3f20
   1a590:	e594200c 	ldr	r2, [r4, #12]
   1a594:	e7913003 	ldr	r3, [r1, r3]
   1a598:	e1130002 	tst	r3, r2
   1a59c:	13a00001 	movne	r0, #1
   1a5a0:	03a00000 	moveq	r0, #0
   1a5a4:	e8bd8010 	pop	{r4, pc}
   1a5a8:	e59f1020 	ldr	r1, [pc, #32]	; 1a5d0 <CGPIOPin::Read() const+0x74>
   1a5ac:	e3a020a4 	mov	r2, #164	; 0xa4
   1a5b0:	e2810020 	add	r0, r1, #32
   1a5b4:	ebfffba6 	bl	19454 <assertion_failed>
   1a5b8:	eaffffec 	b	1a570 <CGPIOPin::Read() const+0x14>
   1a5bc:	e59f100c 	ldr	r1, [pc, #12]	; 1a5d0 <CGPIOPin::Read() const+0x74>
   1a5c0:	e3a020a8 	mov	r2, #168	; 0xa8
   1a5c4:	e2810090 	add	r0, r1, #144	; 0x90
   1a5c8:	ebfffba1 	bl	19454 <assertion_failed>
   1a5cc:	eaffffec 	b	1a584 <CGPIOPin::Read() const+0x28>
   1a5d0:	00028f28 	.word	0x00028f28

0001a5d4 <CGPIOPin::Invert()>:
   1a5d4:	e5d03010 	ldrb	r3, [r0, #16]
   1a5d8:	e92d4010 	push	{r4, lr}
   1a5dc:	e1a04000 	mov	r4, r0
   1a5e0:	e3530001 	cmp	r3, #1
   1a5e4:	0a000003 	beq	1a5f8 <CGPIOPin::Invert()+0x24>
   1a5e8:	e59f101c 	ldr	r1, [pc, #28]	; 1a60c <CGPIOPin::Invert()+0x38>
   1a5ec:	e3a020b5 	mov	r2, #181	; 0xb5
   1a5f0:	e28100ec 	add	r0, r1, #236	; 0xec
   1a5f4:	ebfffb96 	bl	19454 <assertion_failed>
   1a5f8:	e5941014 	ldr	r1, [r4, #20]
   1a5fc:	e1a00004 	mov	r0, r4
   1a600:	e8bd4010 	pop	{r4, lr}
   1a604:	e2211001 	eor	r1, r1, #1
   1a608:	eaffffaa 	b	1a4b8 <CGPIOPin::Write(unsigned int)>
   1a60c:	00028f28 	.word	0x00028f28

0001a610 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)>:
   1a610:	e5d03010 	ldrb	r3, [r0, #16]
   1a614:	e92d4070 	push	{r4, r5, r6, lr}
   1a618:	e1a06002 	mov	r6, r2
   1a61c:	e2432002 	sub	r2, r3, #2
   1a620:	e1a04000 	mov	r4, r0
   1a624:	e1a05001 	mov	r5, r1
   1a628:	e3530000 	cmp	r3, #0
   1a62c:	13520001 	cmpne	r2, #1
   1a630:	8a00001e 	bhi	1a6b0 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0xa0>
   1a634:	e5d43024 	ldrb	r3, [r4, #36]	; 0x24
   1a638:	e3530006 	cmp	r3, #6
   1a63c:	0a000003 	beq	1a650 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0x40>
   1a640:	e59f10b0 	ldr	r1, [pc, #176]	; 1a6f8 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0xe8>
   1a644:	e3a020c0 	mov	r2, #192	; 0xc0
   1a648:	e2810f42 	add	r0, r1, #264	; 0x108
   1a64c:	ebfffb80 	bl	19454 <assertion_failed>
   1a650:	e5d43025 	ldrb	r3, [r4, #37]	; 0x25
   1a654:	e3530006 	cmp	r3, #6
   1a658:	0a000003 	beq	1a66c <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0x5c>
   1a65c:	e59f1094 	ldr	r1, [pc, #148]	; 1a6f8 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0xe8>
   1a660:	e3a020c1 	mov	r2, #193	; 0xc1
   1a664:	e2810f4b 	add	r0, r1, #300	; 0x12c
   1a668:	ebfffb79 	bl	19454 <assertion_failed>
   1a66c:	e3550000 	cmp	r5, #0
   1a670:	0a00001b 	beq	1a6e4 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0xd4>
   1a674:	e594301c 	ldr	r3, [r4, #28]
   1a678:	e3530000 	cmp	r3, #0
   1a67c:	0a000003 	beq	1a690 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0x80>
   1a680:	e59f1070 	ldr	r1, [pc, #112]	; 1a6f8 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0xe8>
   1a684:	e3a020c4 	mov	r2, #196	; 0xc4
   1a688:	e2810f59 	add	r0, r1, #356	; 0x164
   1a68c:	ebfffb70 	bl	19454 <assertion_failed>
   1a690:	e5940018 	ldr	r0, [r4, #24]
   1a694:	e584501c 	str	r5, [r4, #28]
   1a698:	e5846020 	str	r6, [r4, #32]
   1a69c:	e3500000 	cmp	r0, #0
   1a6a0:	0a000007 	beq	1a6c4 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0xb4>
   1a6a4:	e1a01004 	mov	r1, r4
   1a6a8:	e8bd4070 	pop	{r4, r5, r6, lr}
   1a6ac:	ea0024dd 	b	23a28 <CGPIOManager::ConnectInterrupt(CGPIOPin*)>
   1a6b0:	e59f1040 	ldr	r1, [pc, #64]	; 1a6f8 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0xe8>
   1a6b4:	e3a020be 	mov	r2, #190	; 0xbe
   1a6b8:	e2810090 	add	r0, r1, #144	; 0x90
   1a6bc:	ebfffb64 	bl	19454 <assertion_failed>
   1a6c0:	eaffffdb 	b	1a634 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0x24>
   1a6c4:	e59f102c 	ldr	r1, [pc, #44]	; 1a6f8 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0xe8>
   1a6c8:	e3a020c9 	mov	r2, #201	; 0xc9
   1a6cc:	e2810f5d 	add	r0, r1, #372	; 0x174
   1a6d0:	ebfffb5f 	bl	19454 <assertion_failed>
   1a6d4:	e5940018 	ldr	r0, [r4, #24]
   1a6d8:	e1a01004 	mov	r1, r4
   1a6dc:	e8bd4070 	pop	{r4, r5, r6, lr}
   1a6e0:	ea0024d0 	b	23a28 <CGPIOManager::ConnectInterrupt(CGPIOPin*)>
   1a6e4:	e59f100c 	ldr	r1, [pc, #12]	; 1a6f8 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0xe8>
   1a6e8:	e3a020c3 	mov	r2, #195	; 0xc3
   1a6ec:	e2810f55 	add	r0, r1, #340	; 0x154
   1a6f0:	ebfffb57 	bl	19454 <assertion_failed>
   1a6f4:	eaffffde 	b	1a674 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*)+0x64>
   1a6f8:	00028f28 	.word	0x00028f28

0001a6fc <CGPIOPin::DisconnectInterrupt()>:
   1a6fc:	e5d03010 	ldrb	r3, [r0, #16]
   1a700:	e92d4010 	push	{r4, lr}
   1a704:	e1a04000 	mov	r4, r0
   1a708:	e2432002 	sub	r2, r3, #2
   1a70c:	e3530000 	cmp	r3, #0
   1a710:	13520001 	cmpne	r2, #1
   1a714:	8a000018 	bhi	1a77c <CGPIOPin::DisconnectInterrupt()+0x80>
   1a718:	e5d43024 	ldrb	r3, [r4, #36]	; 0x24
   1a71c:	e3530006 	cmp	r3, #6
   1a720:	0a000003 	beq	1a734 <CGPIOPin::DisconnectInterrupt()+0x38>
   1a724:	e59f1098 	ldr	r1, [pc, #152]	; 1a7c4 <CGPIOPin::DisconnectInterrupt()+0xc8>
   1a728:	e3a020d3 	mov	r2, #211	; 0xd3
   1a72c:	e2810f42 	add	r0, r1, #264	; 0x108
   1a730:	ebfffb47 	bl	19454 <assertion_failed>
   1a734:	e5d43025 	ldrb	r3, [r4, #37]	; 0x25
   1a738:	e3530006 	cmp	r3, #6
   1a73c:	0a000003 	beq	1a750 <CGPIOPin::DisconnectInterrupt()+0x54>
   1a740:	e59f107c 	ldr	r1, [pc, #124]	; 1a7c4 <CGPIOPin::DisconnectInterrupt()+0xc8>
   1a744:	e3a020d4 	mov	r2, #212	; 0xd4
   1a748:	e2810f4b 	add	r0, r1, #300	; 0x12c
   1a74c:	ebfffb40 	bl	19454 <assertion_failed>
   1a750:	e594301c 	ldr	r3, [r4, #28]
   1a754:	e3530000 	cmp	r3, #0
   1a758:	0a000014 	beq	1a7b0 <CGPIOPin::DisconnectInterrupt()+0xb4>
   1a75c:	e5940018 	ldr	r0, [r4, #24]
   1a760:	e3a03000 	mov	r3, #0
   1a764:	e584301c 	str	r3, [r4, #28]
   1a768:	e1500003 	cmp	r0, r3
   1a76c:	0a000007 	beq	1a790 <CGPIOPin::DisconnectInterrupt()+0x94>
   1a770:	e1a01004 	mov	r1, r4
   1a774:	e8bd4010 	pop	{r4, lr}
   1a778:	ea0024d9 	b	23ae4 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)>
   1a77c:	e59f1040 	ldr	r1, [pc, #64]	; 1a7c4 <CGPIOPin::DisconnectInterrupt()+0xc8>
   1a780:	e3a020d1 	mov	r2, #209	; 0xd1
   1a784:	e2810090 	add	r0, r1, #144	; 0x90
   1a788:	ebfffb31 	bl	19454 <assertion_failed>
   1a78c:	eaffffe1 	b	1a718 <CGPIOPin::DisconnectInterrupt()+0x1c>
   1a790:	e59f102c 	ldr	r1, [pc, #44]	; 1a7c4 <CGPIOPin::DisconnectInterrupt()+0xc8>
   1a794:	e3a020d9 	mov	r2, #217	; 0xd9
   1a798:	e2810f5d 	add	r0, r1, #372	; 0x174
   1a79c:	ebfffb2c 	bl	19454 <assertion_failed>
   1a7a0:	e5940018 	ldr	r0, [r4, #24]
   1a7a4:	e1a01004 	mov	r1, r4
   1a7a8:	e8bd4010 	pop	{r4, lr}
   1a7ac:	ea0024cc 	b	23ae4 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)>
   1a7b0:	e59f100c 	ldr	r1, [pc, #12]	; 1a7c4 <CGPIOPin::DisconnectInterrupt()+0xc8>
   1a7b4:	e3a020d6 	mov	r2, #214	; 0xd6
   1a7b8:	e2810f61 	add	r0, r1, #388	; 0x184
   1a7bc:	ebfffb24 	bl	19454 <assertion_failed>
   1a7c0:	eaffffe5 	b	1a75c <CGPIOPin::DisconnectInterrupt()+0x60>
   1a7c4:	00028f28 	.word	0x00028f28

0001a7c8 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)>:
   1a7c8:	e5d03010 	ldrb	r3, [r0, #16]
   1a7cc:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   1a7d0:	e1a04000 	mov	r4, r0
   1a7d4:	e2432002 	sub	r2, r3, #2
   1a7d8:	e1a07001 	mov	r7, r1
   1a7dc:	e3530000 	cmp	r3, #0
   1a7e0:	13520001 	cmpne	r2, #1
   1a7e4:	8a00002c 	bhi	1a89c <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xd4>
   1a7e8:	e594301c 	ldr	r3, [r4, #28]
   1a7ec:	e3530000 	cmp	r3, #0
   1a7f0:	0a000030 	beq	1a8b8 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xf0>
   1a7f4:	e5d43024 	ldrb	r3, [r4, #36]	; 0x24
   1a7f8:	e3530006 	cmp	r3, #6
   1a7fc:	0a000003 	beq	1a810 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x48>
   1a800:	e59f10c4 	ldr	r1, [pc, #196]	; 1a8cc <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x104>
   1a804:	e3a020e4 	mov	r2, #228	; 0xe4
   1a808:	e2810f42 	add	r0, r1, #264	; 0x108
   1a80c:	ebfffb10 	bl	19454 <assertion_failed>
   1a810:	e3570005 	cmp	r7, #5
   1a814:	8a000014 	bhi	1a86c <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xa4>
   1a818:	e5d43025 	ldrb	r3, [r4, #37]	; 0x25
   1a81c:	e1530007 	cmp	r3, r7
   1a820:	0a000018 	beq	1a888 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xc0>
   1a824:	e3a0600c 	mov	r6, #12
   1a828:	e5943008 	ldr	r3, [r4, #8]
   1a82c:	e3a0504c 	mov	r5, #76	; 0x4c
   1a830:	e3435f20 	movt	r5, #16160	; 0x3f20
   1a834:	e0835005 	add	r5, r3, r5
   1a838:	e5c47024 	strb	r7, [r4, #36]	; 0x24
   1a83c:	e0060796 	mul	r6, r6, r7
   1a840:	e30b04b0 	movw	r0, #46256	; 0xb4b0
   1a844:	e3400002 	movt	r0, #2
   1a848:	eb001098 	bl	1eab0 <CSpinLock::Acquire()>
   1a84c:	e594200c 	ldr	r2, [r4, #12]
   1a850:	e30b04b0 	movw	r0, #46256	; 0xb4b0
   1a854:	e3400002 	movt	r0, #2
   1a858:	e7953006 	ldr	r3, [r5, r6]
   1a85c:	e1833002 	orr	r3, r3, r2
   1a860:	e7853006 	str	r3, [r5, r6]
   1a864:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   1a868:	ea0010a7 	b	1eb0c <CSpinLock::Release()>
   1a86c:	e59f1058 	ldr	r1, [pc, #88]	; 1a8cc <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x104>
   1a870:	e3a020e5 	mov	r2, #229	; 0xe5
   1a874:	e2810f65 	add	r0, r1, #404	; 0x194
   1a878:	ebfffaf5 	bl	19454 <assertion_failed>
   1a87c:	e5d43025 	ldrb	r3, [r4, #37]	; 0x25
   1a880:	e1530007 	cmp	r3, r7
   1a884:	1affffe6 	bne	1a824 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x5c>
   1a888:	e59f103c 	ldr	r1, [pc, #60]	; 1a8cc <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x104>
   1a88c:	e3a020e6 	mov	r2, #230	; 0xe6
   1a890:	e2810f6e 	add	r0, r1, #440	; 0x1b8
   1a894:	ebfffaee 	bl	19454 <assertion_failed>
   1a898:	eaffffe1 	b	1a824 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x5c>
   1a89c:	e59f1028 	ldr	r1, [pc, #40]	; 1a8cc <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x104>
   1a8a0:	e3a020e1 	mov	r2, #225	; 0xe1
   1a8a4:	e2810090 	add	r0, r1, #144	; 0x90
   1a8a8:	ebfffae9 	bl	19454 <assertion_failed>
   1a8ac:	e594301c 	ldr	r3, [r4, #28]
   1a8b0:	e3530000 	cmp	r3, #0
   1a8b4:	1affffce 	bne	1a7f4 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x2c>
   1a8b8:	e59f100c 	ldr	r1, [pc, #12]	; 1a8cc <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x104>
   1a8bc:	e3a020e2 	mov	r2, #226	; 0xe2
   1a8c0:	e2810f61 	add	r0, r1, #388	; 0x184
   1a8c4:	ebfffae2 	bl	19454 <assertion_failed>
   1a8c8:	eaffffc9 	b	1a7f4 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x2c>
   1a8cc:	00028f28 	.word	0x00028f28

0001a8d0 <CGPIOPin::DisableInterrupt()>:
   1a8d0:	e5d03010 	ldrb	r3, [r0, #16]
   1a8d4:	e92d4070 	push	{r4, r5, r6, lr}
   1a8d8:	e1a04000 	mov	r4, r0
   1a8dc:	e2432002 	sub	r2, r3, #2
   1a8e0:	e3530000 	cmp	r3, #0
   1a8e4:	13520001 	cmpne	r2, #1
   1a8e8:	8a00001a 	bhi	1a958 <CGPIOPin::DisableInterrupt()+0x88>
   1a8ec:	e5d43024 	ldrb	r3, [r4, #36]	; 0x24
   1a8f0:	e3530005 	cmp	r3, #5
   1a8f4:	9a000004 	bls	1a90c <CGPIOPin::DisableInterrupt()+0x3c>
   1a8f8:	e59f106c 	ldr	r1, [pc, #108]	; 1a96c <CGPIOPin::DisableInterrupt()+0x9c>
   1a8fc:	e3a020f9 	mov	r2, #249	; 0xf9
   1a900:	e2810f75 	add	r0, r1, #468	; 0x1d4
   1a904:	ebfffad2 	bl	19454 <assertion_failed>
   1a908:	e5d43024 	ldrb	r3, [r4, #36]	; 0x24
   1a90c:	e3a0600c 	mov	r6, #12
   1a910:	e5942008 	ldr	r2, [r4, #8]
   1a914:	e3a0504c 	mov	r5, #76	; 0x4c
   1a918:	e3435f20 	movt	r5, #16160	; 0x3f20
   1a91c:	e0825005 	add	r5, r2, r5
   1a920:	e30b04b0 	movw	r0, #46256	; 0xb4b0
   1a924:	e3400002 	movt	r0, #2
   1a928:	e0060396 	mul	r6, r6, r3
   1a92c:	eb00105f 	bl	1eab0 <CSpinLock::Acquire()>
   1a930:	e594200c 	ldr	r2, [r4, #12]
   1a934:	e30b04b0 	movw	r0, #46256	; 0xb4b0
   1a938:	e3400002 	movt	r0, #2
   1a93c:	e7953006 	ldr	r3, [r5, r6]
   1a940:	e1c33002 	bic	r3, r3, r2
   1a944:	e7853006 	str	r3, [r5, r6]
   1a948:	eb00106f 	bl	1eb0c <CSpinLock::Release()>
   1a94c:	e3a03006 	mov	r3, #6
   1a950:	e5c43024 	strb	r3, [r4, #36]	; 0x24
   1a954:	e8bd8070 	pop	{r4, r5, r6, pc}
   1a958:	e59f100c 	ldr	r1, [pc, #12]	; 1a96c <CGPIOPin::DisableInterrupt()+0x9c>
   1a95c:	e3a020f7 	mov	r2, #247	; 0xf7
   1a960:	e2810090 	add	r0, r1, #144	; 0x90
   1a964:	ebfffaba 	bl	19454 <assertion_failed>
   1a968:	eaffffdf 	b	1a8ec <CGPIOPin::DisableInterrupt()+0x1c>
   1a96c:	00028f28 	.word	0x00028f28

0001a970 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)>:
   1a970:	e5d03010 	ldrb	r3, [r0, #16]
   1a974:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   1a978:	e1a04000 	mov	r4, r0
   1a97c:	e2432002 	sub	r2, r3, #2
   1a980:	e1a07001 	mov	r7, r1
   1a984:	e3530000 	cmp	r3, #0
   1a988:	13520001 	cmpne	r2, #1
   1a98c:	8a00002c 	bhi	1aa44 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xd4>
   1a990:	e594301c 	ldr	r3, [r4, #28]
   1a994:	e3530000 	cmp	r3, #0
   1a998:	0a000030 	beq	1aa60 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xf0>
   1a99c:	e5d43025 	ldrb	r3, [r4, #37]	; 0x25
   1a9a0:	e3530006 	cmp	r3, #6
   1a9a4:	0a000003 	beq	1a9b8 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x48>
   1a9a8:	e59f10c4 	ldr	r1, [pc, #196]	; 1aa74 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x104>
   1a9ac:	e300210d 	movw	r2, #269	; 0x10d
   1a9b0:	e2810f4b 	add	r0, r1, #300	; 0x12c
   1a9b4:	ebfffaa6 	bl	19454 <assertion_failed>
   1a9b8:	e3570005 	cmp	r7, #5
   1a9bc:	8a000014 	bhi	1aa14 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xa4>
   1a9c0:	e5d43024 	ldrb	r3, [r4, #36]	; 0x24
   1a9c4:	e1530007 	cmp	r3, r7
   1a9c8:	0a000018 	beq	1aa30 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xc0>
   1a9cc:	e3a0600c 	mov	r6, #12
   1a9d0:	e5943008 	ldr	r3, [r4, #8]
   1a9d4:	e3a0504c 	mov	r5, #76	; 0x4c
   1a9d8:	e3435f20 	movt	r5, #16160	; 0x3f20
   1a9dc:	e0835005 	add	r5, r3, r5
   1a9e0:	e5c47025 	strb	r7, [r4, #37]	; 0x25
   1a9e4:	e0060796 	mul	r6, r6, r7
   1a9e8:	e30b04b0 	movw	r0, #46256	; 0xb4b0
   1a9ec:	e3400002 	movt	r0, #2
   1a9f0:	eb00102e 	bl	1eab0 <CSpinLock::Acquire()>
   1a9f4:	e594200c 	ldr	r2, [r4, #12]
   1a9f8:	e30b04b0 	movw	r0, #46256	; 0xb4b0
   1a9fc:	e3400002 	movt	r0, #2
   1aa00:	e7953006 	ldr	r3, [r5, r6]
   1aa04:	e1833002 	orr	r3, r3, r2
   1aa08:	e7853006 	str	r3, [r5, r6]
   1aa0c:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   1aa10:	ea00103d 	b	1eb0c <CSpinLock::Release()>
   1aa14:	e59f1058 	ldr	r1, [pc, #88]	; 1aa74 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x104>
   1aa18:	e300210e 	movw	r2, #270	; 0x10e
   1aa1c:	e2810f65 	add	r0, r1, #404	; 0x194
   1aa20:	ebfffa8b 	bl	19454 <assertion_failed>
   1aa24:	e5d43024 	ldrb	r3, [r4, #36]	; 0x24
   1aa28:	e1530007 	cmp	r3, r7
   1aa2c:	1affffe6 	bne	1a9cc <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x5c>
   1aa30:	e59f103c 	ldr	r1, [pc, #60]	; 1aa74 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x104>
   1aa34:	e300210f 	movw	r2, #271	; 0x10f
   1aa38:	e2810f7e 	add	r0, r1, #504	; 0x1f8
   1aa3c:	ebfffa84 	bl	19454 <assertion_failed>
   1aa40:	eaffffe1 	b	1a9cc <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x5c>
   1aa44:	e59f1028 	ldr	r1, [pc, #40]	; 1aa74 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x104>
   1aa48:	e300210a 	movw	r2, #266	; 0x10a
   1aa4c:	e2810090 	add	r0, r1, #144	; 0x90
   1aa50:	ebfffa7f 	bl	19454 <assertion_failed>
   1aa54:	e594301c 	ldr	r3, [r4, #28]
   1aa58:	e3530000 	cmp	r3, #0
   1aa5c:	1affffce 	bne	1a99c <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x2c>
   1aa60:	e59f100c 	ldr	r1, [pc, #12]	; 1aa74 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x104>
   1aa64:	e300210b 	movw	r2, #267	; 0x10b
   1aa68:	e2810f61 	add	r0, r1, #388	; 0x184
   1aa6c:	ebfffa78 	bl	19454 <assertion_failed>
   1aa70:	eaffffc9 	b	1a99c <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x2c>
   1aa74:	00028f28 	.word	0x00028f28

0001aa78 <CGPIOPin::DisableInterrupt2()>:
   1aa78:	e5d03010 	ldrb	r3, [r0, #16]
   1aa7c:	e92d4070 	push	{r4, r5, r6, lr}
   1aa80:	e1a04000 	mov	r4, r0
   1aa84:	e2432002 	sub	r2, r3, #2
   1aa88:	e3530000 	cmp	r3, #0
   1aa8c:	13520001 	cmpne	r2, #1
   1aa90:	8a00001a 	bhi	1ab00 <CGPIOPin::DisableInterrupt2()+0x88>
   1aa94:	e5d43025 	ldrb	r3, [r4, #37]	; 0x25
   1aa98:	e3530005 	cmp	r3, #5
   1aa9c:	9a000004 	bls	1aab4 <CGPIOPin::DisableInterrupt2()+0x3c>
   1aaa0:	e59f106c 	ldr	r1, [pc, #108]	; 1ab14 <CGPIOPin::DisableInterrupt2()+0x9c>
   1aaa4:	e3002122 	movw	r2, #290	; 0x122
   1aaa8:	e2810f85 	add	r0, r1, #532	; 0x214
   1aaac:	ebfffa68 	bl	19454 <assertion_failed>
   1aab0:	e5d43025 	ldrb	r3, [r4, #37]	; 0x25
   1aab4:	e3a0600c 	mov	r6, #12
   1aab8:	e5942008 	ldr	r2, [r4, #8]
   1aabc:	e3a0504c 	mov	r5, #76	; 0x4c
   1aac0:	e3435f20 	movt	r5, #16160	; 0x3f20
   1aac4:	e0825005 	add	r5, r2, r5
   1aac8:	e30b04b0 	movw	r0, #46256	; 0xb4b0
   1aacc:	e3400002 	movt	r0, #2
   1aad0:	e0060396 	mul	r6, r6, r3
   1aad4:	eb000ff5 	bl	1eab0 <CSpinLock::Acquire()>
   1aad8:	e594200c 	ldr	r2, [r4, #12]
   1aadc:	e30b04b0 	movw	r0, #46256	; 0xb4b0
   1aae0:	e3400002 	movt	r0, #2
   1aae4:	e7953006 	ldr	r3, [r5, r6]
   1aae8:	e1c33002 	bic	r3, r3, r2
   1aaec:	e7853006 	str	r3, [r5, r6]
   1aaf0:	eb001005 	bl	1eb0c <CSpinLock::Release()>
   1aaf4:	e3a03006 	mov	r3, #6
   1aaf8:	e5c43025 	strb	r3, [r4, #37]	; 0x25
   1aafc:	e8bd8070 	pop	{r4, r5, r6, pc}
   1ab00:	e59f100c 	ldr	r1, [pc, #12]	; 1ab14 <CGPIOPin::DisableInterrupt2()+0x9c>
   1ab04:	e3a02e12 	mov	r2, #288	; 0x120
   1ab08:	e2810090 	add	r0, r1, #144	; 0x90
   1ab0c:	ebfffa50 	bl	19454 <assertion_failed>
   1ab10:	eaffffdf 	b	1aa94 <CGPIOPin::DisableInterrupt2()+0x1c>
   1ab14:	00028f28 	.word	0x00028f28

0001ab18 <CGPIOPin::WriteAll(unsigned int, unsigned int)>:
   1ab18:	e1d12000 	bics	r2, r1, r0
   1ab1c:	13a03000 	movne	r3, #0
   1ab20:	13433f20 	movtne	r3, #16160	; 0x3f20
   1ab24:	15832028 	strne	r2, [r3, #40]	; 0x28
   1ab28:	e0100001 	ands	r0, r0, r1
   1ab2c:	13a03000 	movne	r3, #0
   1ab30:	13433f20 	movtne	r3, #16160	; 0x3f20
   1ab34:	1583001c 	strne	r0, [r3, #28]
   1ab38:	e12fff1e 	bx	lr

0001ab3c <CGPIOPin::ReadAll()>:
   1ab3c:	e3a03000 	mov	r3, #0
   1ab40:	e3433f20 	movt	r3, #16160	; 0x3f20
   1ab44:	e5930034 	ldr	r0, [r3, #52]	; 0x34
   1ab48:	e12fff1e 	bx	lr

0001ab4c <CGPIOPin::SetPullUpMode(unsigned int)>:
   1ab4c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   1ab50:	e1a06000 	mov	r6, r0
   1ab54:	e1a07001 	mov	r7, r1
   1ab58:	e3a04098 	mov	r4, #152	; 0x98
   1ab5c:	e3434f20 	movt	r4, #16160	; 0x3f20
   1ab60:	e5963008 	ldr	r3, [r6, #8]
   1ab64:	e30b04b0 	movw	r0, #46256	; 0xb4b0
   1ab68:	e3400002 	movt	r0, #2
   1ab6c:	e0834004 	add	r4, r3, r4
   1ab70:	eb000fce 	bl	1eab0 <CSpinLock::Acquire()>
   1ab74:	e3570002 	cmp	r7, #2
   1ab78:	9a000003 	bls	1ab8c <CGPIOPin::SetPullUpMode(unsigned int)+0x40>
   1ab7c:	e59f1048 	ldr	r1, [pc, #72]	; 1abcc <CGPIOPin::SetPullUpMode(unsigned int)+0x80>
   1ab80:	e3a02f55 	mov	r2, #340	; 0x154
   1ab84:	e2810f8e 	add	r0, r1, #568	; 0x238
   1ab88:	ebfffa31 	bl	19454 <assertion_failed>
   1ab8c:	e3a05000 	mov	r5, #0
   1ab90:	e3435f20 	movt	r5, #16160	; 0x3f20
   1ab94:	e3a00005 	mov	r0, #5
   1ab98:	e5857094 	str	r7, [r5, #148]	; 0x94
   1ab9c:	eb001767 	bl	20940 <CTimer::SimpleusDelay(unsigned int)>
   1aba0:	e596300c 	ldr	r3, [r6, #12]
   1aba4:	e5843000 	str	r3, [r4]
   1aba8:	e3a00005 	mov	r0, #5
   1abac:	eb001763 	bl	20940 <CTimer::SimpleusDelay(unsigned int)>
   1abb0:	e3a03000 	mov	r3, #0
   1abb4:	e30b04b0 	movw	r0, #46256	; 0xb4b0
   1abb8:	e3400002 	movt	r0, #2
   1abbc:	e5853094 	str	r3, [r5, #148]	; 0x94
   1abc0:	e5843000 	str	r3, [r4]
   1abc4:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   1abc8:	ea000fcf 	b	1eb0c <CSpinLock::Release()>
   1abcc:	00028f28 	.word	0x00028f28

0001abd0 <CGPIOPin::SetAlternateFunction(unsigned int)>:
   1abd0:	e5902004 	ldr	r2, [r0, #4]
   1abd4:	e92d4070 	push	{r4, r5, r6, lr}
   1abd8:	e1a05001 	mov	r5, r1
   1abdc:	e3520035 	cmp	r2, #53	; 0x35
   1abe0:	8a00001f 	bhi	1ac64 <CGPIOPin::SetAlternateFunction(unsigned int)+0x94>
   1abe4:	e30c3ccd 	movw	r3, #52429	; 0xcccd
   1abe8:	e34c3ccc 	movt	r3, #52428	; 0xcccc
   1abec:	e3a0100a 	mov	r1, #10
   1abf0:	e3550005 	cmp	r5, #5
   1abf4:	e0843293 	umull	r3, r4, r3, r2
   1abf8:	e1a041a4 	lsr	r4, r4, #3
   1abfc:	e284353f 	add	r3, r4, #264241152	; 0xfc00000
   1ac00:	e2833702 	add	r3, r3, #524288	; 0x80000
   1ac04:	e0642491 	mls	r4, r1, r4, r2
   1ac08:	e1a06103 	lsl	r6, r3, #2
   1ac0c:	e0844084 	add	r4, r4, r4, lsl #1
   1ac10:	9a000003 	bls	1ac24 <CGPIOPin::SetAlternateFunction(unsigned int)+0x54>
   1ac14:	e59f1064 	ldr	r1, [pc, #100]	; 1ac80 <CGPIOPin::SetAlternateFunction(unsigned int)+0xb0>
   1ac18:	e3002165 	movw	r2, #357	; 0x165
   1ac1c:	e2810f97 	add	r0, r1, #604	; 0x25c
   1ac20:	ebfffa0b 	bl	19454 <assertion_failed>
   1ac24:	e30b04b0 	movw	r0, #46256	; 0xb4b0
   1ac28:	e3400002 	movt	r0, #2
   1ac2c:	eb000f9f 	bl	1eab0 <CSpinLock::Acquire()>
   1ac30:	e3081f18 	movw	r1, #36632	; 0x8f18
   1ac34:	e3401002 	movt	r1, #2
   1ac38:	e0811105 	add	r1, r1, r5, lsl #2
   1ac3c:	e5963000 	ldr	r3, [r6]
   1ac40:	e3a0c007 	mov	ip, #7
   1ac44:	e30b04b0 	movw	r0, #46256	; 0xb4b0
   1ac48:	e3400002 	movt	r0, #2
   1ac4c:	e5912254 	ldr	r2, [r1, #596]	; 0x254
   1ac50:	e1c3341c 	bic	r3, r3, ip, lsl r4
   1ac54:	e1834412 	orr	r4, r3, r2, lsl r4
   1ac58:	e5864000 	str	r4, [r6]
   1ac5c:	e8bd4070 	pop	{r4, r5, r6, lr}
   1ac60:	ea000fa9 	b	1eb0c <CSpinLock::Release()>
   1ac64:	e1a04000 	mov	r4, r0
   1ac68:	e59f1010 	ldr	r1, [pc, #16]	; 1ac80 <CGPIOPin::SetAlternateFunction(unsigned int)+0xb0>
   1ac6c:	e3002161 	movw	r2, #353	; 0x161
   1ac70:	e2810020 	add	r0, r1, #32
   1ac74:	ebfff9f6 	bl	19454 <assertion_failed>
   1ac78:	e5942004 	ldr	r2, [r4, #4]
   1ac7c:	eaffffd8 	b	1abe4 <CGPIOPin::SetAlternateFunction(unsigned int)+0x14>
   1ac80:	00028f28 	.word	0x00028f28

0001ac84 <CGPIOPin::InterruptHandler()>:
   1ac84:	e5d03010 	ldrb	r3, [r0, #16]
   1ac88:	e92d4010 	push	{r4, lr}
   1ac8c:	e1a04000 	mov	r4, r0
   1ac90:	e2432002 	sub	r2, r3, #2
   1ac94:	e3530000 	cmp	r3, #0
   1ac98:	13520001 	cmpne	r2, #1
   1ac9c:	8a00000b 	bhi	1acd0 <CGPIOPin::InterruptHandler()+0x4c>
   1aca0:	e5d43024 	ldrb	r3, [r4, #36]	; 0x24
   1aca4:	e3530005 	cmp	r3, #5
   1aca8:	9a000002 	bls	1acb8 <CGPIOPin::InterruptHandler()+0x34>
   1acac:	e5d43025 	ldrb	r3, [r4, #37]	; 0x25
   1acb0:	e3530005 	cmp	r3, #5
   1acb4:	8a00000a 	bhi	1ace4 <CGPIOPin::InterruptHandler()+0x60>
   1acb8:	e594301c 	ldr	r3, [r4, #28]
   1acbc:	e3530000 	cmp	r3, #0
   1acc0:	0a00000e 	beq	1ad00 <CGPIOPin::InterruptHandler()+0x7c>
   1acc4:	e5940020 	ldr	r0, [r4, #32]
   1acc8:	e8bd4010 	pop	{r4, lr}
   1accc:	e12fff13 	bx	r3
   1acd0:	e59f1048 	ldr	r1, [pc, #72]	; 1ad20 <CGPIOPin::InterruptHandler()+0x9c>
   1acd4:	e3a02f5d 	mov	r2, #372	; 0x174
   1acd8:	e2810090 	add	r0, r1, #144	; 0x90
   1acdc:	ebfff9dc 	bl	19454 <assertion_failed>
   1ace0:	eaffffee 	b	1aca0 <CGPIOPin::InterruptHandler()+0x1c>
   1ace4:	e59f1034 	ldr	r1, [pc, #52]	; 1ad20 <CGPIOPin::InterruptHandler()+0x9c>
   1ace8:	e3002176 	movw	r2, #374	; 0x176
   1acec:	e2810f9b 	add	r0, r1, #620	; 0x26c
   1acf0:	ebfff9d7 	bl	19454 <assertion_failed>
   1acf4:	e594301c 	ldr	r3, [r4, #28]
   1acf8:	e3530000 	cmp	r3, #0
   1acfc:	1afffff0 	bne	1acc4 <CGPIOPin::InterruptHandler()+0x40>
   1ad00:	e59f1018 	ldr	r1, [pc, #24]	; 1ad20 <CGPIOPin::InterruptHandler()+0x9c>
   1ad04:	e3a02f5e 	mov	r2, #376	; 0x178
   1ad08:	e2810f61 	add	r0, r1, #388	; 0x184
   1ad0c:	ebfff9d0 	bl	19454 <assertion_failed>
   1ad10:	e594301c 	ldr	r3, [r4, #28]
   1ad14:	e5940020 	ldr	r0, [r4, #32]
   1ad18:	e8bd4010 	pop	{r4, lr}
   1ad1c:	e12fff13 	bx	r3
   1ad20:	00028f28 	.word	0x00028f28

0001ad24 <CGPIOPin::DisableAllInterrupts(unsigned int)>:
   1ad24:	e92d4070 	push	{r4, r5, r6, lr}
   1ad28:	e3500035 	cmp	r0, #53	; 0x35
   1ad2c:	e1a06000 	mov	r6, r0
   1ad30:	8a000017 	bhi	1ad94 <CGPIOPin::DisableAllInterrupts(unsigned int)+0x70>
   1ad34:	e3a01001 	mov	r1, #1
   1ad38:	e3a04013 	mov	r4, #19
   1ad3c:	e3404fc8 	movt	r4, #4040	; 0xfc8
   1ad40:	e206501f 	and	r5, r6, #31
   1ad44:	e08442a6 	add	r4, r4, r6, lsr #5
   1ad48:	e30b04b0 	movw	r0, #46256	; 0xb4b0
   1ad4c:	e3400002 	movt	r0, #2
   1ad50:	e1a04104 	lsl	r4, r4, #2
   1ad54:	e1a05511 	lsl	r5, r1, r5
   1ad58:	eb000f54 	bl	1eab0 <CSpinLock::Acquire()>
   1ad5c:	e3a0208b 	mov	r2, #139	; 0x8b
   1ad60:	e3432f20 	movt	r2, #16160	; 0x3f20
   1ad64:	e1540002 	cmp	r4, r2
   1ad68:	8a000005 	bhi	1ad84 <CGPIOPin::DisableAllInterrupts(unsigned int)+0x60>
   1ad6c:	e1e01005 	mvn	r1, r5
   1ad70:	e5943000 	ldr	r3, [r4]
   1ad74:	e0033001 	and	r3, r3, r1
   1ad78:	e484300c 	str	r3, [r4], #12
   1ad7c:	e1540002 	cmp	r4, r2
   1ad80:	9afffffa 	bls	1ad70 <CGPIOPin::DisableAllInterrupts(unsigned int)+0x4c>
   1ad84:	e30b04b0 	movw	r0, #46256	; 0xb4b0
   1ad88:	e3400002 	movt	r0, #2
   1ad8c:	e8bd4070 	pop	{r4, r5, r6, lr}
   1ad90:	ea000f5d 	b	1eb0c <CSpinLock::Release()>
   1ad94:	e59f100c 	ldr	r1, [pc, #12]	; 1ada8 <CGPIOPin::DisableAllInterrupts(unsigned int)+0x84>
   1ad98:	e300217e 	movw	r2, #382	; 0x17e
   1ad9c:	e2810fae 	add	r0, r1, #696	; 0x2b8
   1ada0:	ebfff9ab 	bl	19454 <assertion_failed>
   1ada4:	eaffffe2 	b	1ad34 <CGPIOPin::DisableAllInterrupts(unsigned int)+0x10>
   1ada8:	00028f28 	.word	0x00028f28

0001adac <CInterruptSystem::CInterruptSystem()>:
   1adac:	e2802f53 	add	r2, r0, #332	; 0x14c
   1adb0:	e1a0c000 	mov	ip, r0
   1adb4:	e2403004 	sub	r3, r0, #4
   1adb8:	e3a01000 	mov	r1, #0
   1adbc:	e1a00002 	mov	r0, r2
   1adc0:	e5a31004 	str	r1, [r3, #4]!
   1adc4:	e5a21004 	str	r1, [r2, #4]!
   1adc8:	e1530000 	cmp	r3, r0
   1adcc:	1afffffb 	bne	1adc0 <CInterruptSystem::CInterruptSystem()+0x14>
   1add0:	e30b34b8 	movw	r3, #46264	; 0xb4b8
   1add4:	e3403002 	movt	r3, #2
   1add8:	e1a0000c 	mov	r0, ip
   1addc:	e583c000 	str	ip, [r3]
   1ade0:	e12fff1e 	bx	lr

0001ade4 <CInterruptSystem::~CInterruptSystem()>:
   1ade4:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   1ade8:	f10c0080 	cpsid	i
   1adec:	e3a0e101 	mov	lr, #1073741824	; 0x40000000
   1adf0:	e3a03a0b 	mov	r3, #45056	; 0xb000
   1adf4:	e3433f00 	movt	r3, #16128	; 0x3f00
   1adf8:	e30b24b8 	movw	r2, #46264	; 0xb4b8
   1adfc:	e3402002 	movt	r2, #2
   1ae00:	e3a01000 	mov	r1, #0
   1ae04:	e3e0c000 	mvn	ip, #0
   1ae08:	e583120c 	str	r1, [r3, #524]	; 0x20c
   1ae0c:	e583c21c 	str	ip, [r3, #540]	; 0x21c
   1ae10:	e583c220 	str	ip, [r3, #544]	; 0x220
   1ae14:	e583c224 	str	ip, [r3, #548]	; 0x224
   1ae18:	e58e1040 	str	r1, [lr, #64]	; 0x40
   1ae1c:	e5821000 	str	r1, [r2]
   1ae20:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

0001ae24 <CInterruptSystem::Initialize()>:
   1ae24:	e59f2058 	ldr	r2, [pc, #88]	; 1ae84 <CInterruptSystem::Initialize()+0x60>
   1ae28:	e59f3058 	ldr	r3, [pc, #88]	; 1ae88 <CInterruptSystem::Initialize()+0x64>
   1ae2c:	e92d4010 	push	{r4, lr}
   1ae30:	e3a04000 	mov	r4, #0
   1ae34:	e1a02142 	asr	r2, r2, #2
   1ae38:	e1a03143 	asr	r3, r3, #2
   1ae3c:	e2422002 	sub	r2, r2, #2
   1ae40:	e2433002 	sub	r3, r3, #2
   1ae44:	e38224ea 	orr	r2, r2, #-369098752	; 0xea000000
   1ae48:	e38334ea 	orr	r3, r3, #-369098752	; 0xea000000
   1ae4c:	e1c421f8 	strd	r2, [r4, #24]
   1ae50:	eb001c82 	bl	22060 <SyncDataAndInstructionCache>
   1ae54:	e3a01101 	mov	r1, #1073741824	; 0x40000000
   1ae58:	e3a03a0b 	mov	r3, #45056	; 0xb000
   1ae5c:	e3433f00 	movt	r3, #16128	; 0x3f00
   1ae60:	e3e02000 	mvn	r2, #0
   1ae64:	e583420c 	str	r4, [r3, #524]	; 0x20c
   1ae68:	e583221c 	str	r2, [r3, #540]	; 0x21c
   1ae6c:	e5832220 	str	r2, [r3, #544]	; 0x220
   1ae70:	e5832224 	str	r2, [r3, #548]	; 0x224
   1ae74:	e5814040 	str	r4, [r1, #64]	; 0x40
   1ae78:	f1080080 	cpsie	i
   1ae7c:	e3a00001 	mov	r0, #1
   1ae80:	e8bd8010 	pop	{r4, pc}
   1ae84:	00021ac0 	.word	0x00021ac0
   1ae88:	00021acc 	.word	0x00021acc

0001ae8c <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)>:
   1ae8c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   1ae90:	e3510047 	cmp	r1, #71	; 0x47
   1ae94:	e1a04001 	mov	r4, r1
   1ae98:	e1a06002 	mov	r6, r2
   1ae9c:	e1a07003 	mov	r7, r3
   1aea0:	8a00001b 	bhi	1af14 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0x88>
   1aea4:	e3560000 	cmp	r6, #0
   1aea8:	0a000021 	beq	1af34 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0xa8>
   1aeac:	e30b53d0 	movw	r5, #46032	; 0xb3d0
   1aeb0:	e3405002 	movt	r5, #2
   1aeb4:	e5953000 	ldr	r3, [r5]
   1aeb8:	e3530000 	cmp	r3, #0
   1aebc:	0a000005 	beq	1aed8 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0x4c>
   1aec0:	e30911f4 	movw	r1, #37364	; 0x91f4
   1aec4:	e3401002 	movt	r1, #2
   1aec8:	e3090218 	movw	r0, #37400	; 0x9218
   1aecc:	e3400002 	movt	r0, #2
   1aed0:	e3a02091 	mov	r2, #145	; 0x91
   1aed4:	ebfff95e 	bl	19454 <assertion_failed>
   1aed8:	e5856000 	str	r6, [r5]
   1aedc:	e3540047 	cmp	r4, #71	; 0x47
   1aee0:	e5857004 	str	r7, [r5, #4]
   1aee4:	9a000005 	bls	1af00 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0x74>
   1aee8:	e30911f4 	movw	r1, #37364	; 0x91f4
   1aeec:	e3401002 	movt	r1, #2
   1aef0:	e3090204 	movw	r0, #37380	; 0x9204
   1aef4:	e3400002 	movt	r0, #2
   1aef8:	e3a020d7 	mov	r2, #215	; 0xd7
   1aefc:	ebfff954 	bl	19454 <assertion_failed>
   1af00:	e3a03a0b 	mov	r3, #45056	; 0xb000
   1af04:	e3433f00 	movt	r3, #16128	; 0x3f00
   1af08:	e3844080 	orr	r4, r4, #128	; 0x80
   1af0c:	e583420c 	str	r4, [r3, #524]	; 0x20c
   1af10:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1af14:	e30911f4 	movw	r1, #37364	; 0x91f4
   1af18:	e3401002 	movt	r1, #2
   1af1c:	e3090204 	movw	r0, #37380	; 0x9204
   1af20:	e3400002 	movt	r0, #2
   1af24:	e3a0208f 	mov	r2, #143	; 0x8f
   1af28:	ebfff949 	bl	19454 <assertion_failed>
   1af2c:	e3560000 	cmp	r6, #0
   1af30:	1affffdd 	bne	1aeac <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0x20>
   1af34:	e30911f4 	movw	r1, #37364	; 0x91f4
   1af38:	e3401002 	movt	r1, #2
   1af3c:	e3090238 	movw	r0, #37432	; 0x9238
   1af40:	e3400002 	movt	r0, #2
   1af44:	e3a02090 	mov	r2, #144	; 0x90
   1af48:	ebfff941 	bl	19454 <assertion_failed>
   1af4c:	eaffffd6 	b	1aeac <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0x20>

0001af50 <CInterruptSystem::DisconnectFIQ()>:
   1af50:	e92d4010 	push	{r4, lr}
   1af54:	e30b43d0 	movw	r4, #46032	; 0xb3d0
   1af58:	e3404002 	movt	r4, #2
   1af5c:	e5943000 	ldr	r3, [r4]
   1af60:	e3530000 	cmp	r3, #0
   1af64:	0a00000c 	beq	1af9c <CInterruptSystem::DisconnectFIQ()+0x4c>
   1af68:	e3a02a0b 	mov	r2, #45056	; 0xb000
   1af6c:	e3432f00 	movt	r2, #16128	; 0x3f00
   1af70:	e3a03000 	mov	r3, #0
   1af74:	e582320c 	str	r3, [r2, #524]	; 0x20c
   1af78:	e5c43000 	strb	r3, [r4]
   1af7c:	e5c43001 	strb	r3, [r4, #1]
   1af80:	e5c43002 	strb	r3, [r4, #2]
   1af84:	e5c43003 	strb	r3, [r4, #3]
   1af88:	e5c43004 	strb	r3, [r4, #4]
   1af8c:	e5c43005 	strb	r3, [r4, #5]
   1af90:	e5c43006 	strb	r3, [r4, #6]
   1af94:	e5c43007 	strb	r3, [r4, #7]
   1af98:	e8bd8010 	pop	{r4, pc}
   1af9c:	e30911f4 	movw	r1, #37364	; 0x91f4
   1afa0:	e3401002 	movt	r1, #2
   1afa4:	e3090230 	movw	r0, #37424	; 0x9230
   1afa8:	e3400002 	movt	r0, #2
   1afac:	e3a0209b 	mov	r2, #155	; 0x9b
   1afb0:	ebfff927 	bl	19454 <assertion_failed>
   1afb4:	eaffffeb 	b	1af68 <CInterruptSystem::DisconnectFIQ()+0x18>

0001afb8 <CInterruptSystem::EnableIRQ(unsigned int)>:
   1afb8:	e92d4010 	push	{r4, lr}
   1afbc:	e3500053 	cmp	r0, #83	; 0x53
   1afc0:	8a000010 	bhi	1b008 <CInterruptSystem::EnableIRQ(unsigned int)+0x50>
   1afc4:	e3500047 	cmp	r0, #71	; 0x47
   1afc8:	8a00001f 	bhi	1b04c <CInterruptSystem::EnableIRQ(unsigned int)+0x94>
   1afcc:	e350001f 	cmp	r0, #31
   1afd0:	930b3210 	movwls	r3, #45584	; 0xb210
   1afd4:	93433f00 	movtls	r3, #16128	; 0x3f00
   1afd8:	9a000005 	bls	1aff4 <CInterruptSystem::EnableIRQ(unsigned int)+0x3c>
   1afdc:	e30b2214 	movw	r2, #45588	; 0xb214
   1afe0:	e3432f00 	movt	r2, #16128	; 0x3f00
   1afe4:	e350003f 	cmp	r0, #63	; 0x3f
   1afe8:	e30b3218 	movw	r3, #45592	; 0xb218
   1afec:	e3433f00 	movt	r3, #16128	; 0x3f00
   1aff0:	91a03002 	movls	r3, r2
   1aff4:	e200001f 	and	r0, r0, #31
   1aff8:	e3a02001 	mov	r2, #1
   1affc:	e1a00012 	lsl	r0, r2, r0
   1b000:	e5830000 	str	r0, [r3]
   1b004:	e8bd8010 	pop	{r4, pc}
   1b008:	e30911f4 	movw	r1, #37364	; 0x91f4
   1b00c:	e3401002 	movt	r1, #2
   1b010:	e3090248 	movw	r0, #37448	; 0x9248
   1b014:	e3400002 	movt	r0, #2
   1b018:	e3a020a7 	mov	r2, #167	; 0xa7
   1b01c:	ebfff90c 	bl	19454 <assertion_failed>
   1b020:	e30911f4 	movw	r1, #37364	; 0x91f4
   1b024:	e3401002 	movt	r1, #2
   1b028:	e309025c 	movw	r0, #37468	; 0x925c
   1b02c:	e3400002 	movt	r0, #2
   1b030:	e3a020b0 	mov	r2, #176	; 0xb0
   1b034:	ebfff906 	bl	19454 <assertion_failed>
   1b038:	e3a02101 	mov	r2, #1073741824	; 0x40000000
   1b03c:	e5923040 	ldr	r3, [r2, #64]	; 0x40
   1b040:	e3833002 	orr	r3, r3, #2
   1b044:	e5823040 	str	r3, [r2, #64]	; 0x40
   1b048:	e8bd8010 	pop	{r4, pc}
   1b04c:	e3500049 	cmp	r0, #73	; 0x49
   1b050:	0afffff8 	beq	1b038 <CInterruptSystem::EnableIRQ(unsigned int)+0x80>
   1b054:	eafffff1 	b	1b020 <CInterruptSystem::EnableIRQ(unsigned int)+0x68>

0001b058 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)>:
   1b058:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   1b05c:	e3510053 	cmp	r1, #83	; 0x53
   1b060:	e1a04001 	mov	r4, r1
   1b064:	e1a05000 	mov	r5, r0
   1b068:	e1a08002 	mov	r8, r2
   1b06c:	e1a07003 	mov	r7, r3
   1b070:	8a00000e 	bhi	1b0b0 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0x58>
   1b074:	e7953104 	ldr	r3, [r5, r4, lsl #2]
   1b078:	e0856104 	add	r6, r5, r4, lsl #2
   1b07c:	e3530000 	cmp	r3, #0
   1b080:	0a000005 	beq	1b09c <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0x44>
   1b084:	e30911f4 	movw	r1, #37364	; 0x91f4
   1b088:	e3401002 	movt	r1, #2
   1b08c:	e309027c 	movw	r0, #37500	; 0x927c
   1b090:	e3400002 	movt	r0, #2
   1b094:	e3a02077 	mov	r2, #119	; 0x77
   1b098:	ebfff8ed 	bl	19454 <assertion_failed>
   1b09c:	e7858104 	str	r8, [r5, r4, lsl #2]
   1b0a0:	e1a00004 	mov	r0, r4
   1b0a4:	e5867150 	str	r7, [r6, #336]	; 0x150
   1b0a8:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   1b0ac:	eaffffc1 	b	1afb8 <CInterruptSystem::EnableIRQ(unsigned int)>
   1b0b0:	e30911f4 	movw	r1, #37364	; 0x91f4
   1b0b4:	e3401002 	movt	r1, #2
   1b0b8:	e3090248 	movw	r0, #37448	; 0x9248
   1b0bc:	e3400002 	movt	r0, #2
   1b0c0:	e3a02076 	mov	r2, #118	; 0x76
   1b0c4:	ebfff8e2 	bl	19454 <assertion_failed>
   1b0c8:	eaffffe9 	b	1b074 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0x1c>

0001b0cc <CInterruptSystem::DisableIRQ(unsigned int)>:
   1b0cc:	e92d4010 	push	{r4, lr}
   1b0d0:	e3500053 	cmp	r0, #83	; 0x53
   1b0d4:	8a000010 	bhi	1b11c <CInterruptSystem::DisableIRQ(unsigned int)+0x50>
   1b0d8:	e3500047 	cmp	r0, #71	; 0x47
   1b0dc:	8a00001f 	bhi	1b160 <CInterruptSystem::DisableIRQ(unsigned int)+0x94>
   1b0e0:	e350001f 	cmp	r0, #31
   1b0e4:	930b321c 	movwls	r3, #45596	; 0xb21c
   1b0e8:	93433f00 	movtls	r3, #16128	; 0x3f00
   1b0ec:	9a000005 	bls	1b108 <CInterruptSystem::DisableIRQ(unsigned int)+0x3c>
   1b0f0:	e30b2220 	movw	r2, #45600	; 0xb220
   1b0f4:	e3432f00 	movt	r2, #16128	; 0x3f00
   1b0f8:	e350003f 	cmp	r0, #63	; 0x3f
   1b0fc:	e30b3224 	movw	r3, #45604	; 0xb224
   1b100:	e3433f00 	movt	r3, #16128	; 0x3f00
   1b104:	91a03002 	movls	r3, r2
   1b108:	e200001f 	and	r0, r0, #31
   1b10c:	e3a02001 	mov	r2, #1
   1b110:	e1a00012 	lsl	r0, r2, r0
   1b114:	e5830000 	str	r0, [r3]
   1b118:	e8bd8010 	pop	{r4, pc}
   1b11c:	e30911f4 	movw	r1, #37364	; 0x91f4
   1b120:	e3401002 	movt	r1, #2
   1b124:	e3090248 	movw	r0, #37448	; 0x9248
   1b128:	e3400002 	movt	r0, #2
   1b12c:	e3a020bf 	mov	r2, #191	; 0xbf
   1b130:	ebfff8c7 	bl	19454 <assertion_failed>
   1b134:	e30911f4 	movw	r1, #37364	; 0x91f4
   1b138:	e3401002 	movt	r1, #2
   1b13c:	e309025c 	movw	r0, #37468	; 0x925c
   1b140:	e3400002 	movt	r0, #2
   1b144:	e3a020c8 	mov	r2, #200	; 0xc8
   1b148:	ebfff8c1 	bl	19454 <assertion_failed>
   1b14c:	e3a02101 	mov	r2, #1073741824	; 0x40000000
   1b150:	e5923040 	ldr	r3, [r2, #64]	; 0x40
   1b154:	e3c33002 	bic	r3, r3, #2
   1b158:	e5823040 	str	r3, [r2, #64]	; 0x40
   1b15c:	e8bd8010 	pop	{r4, pc}
   1b160:	e3500049 	cmp	r0, #73	; 0x49
   1b164:	0afffff8 	beq	1b14c <CInterruptSystem::DisableIRQ(unsigned int)+0x80>
   1b168:	eafffff1 	b	1b134 <CInterruptSystem::DisableIRQ(unsigned int)+0x68>

0001b16c <CInterruptSystem::DisconnectIRQ(unsigned int)>:
   1b16c:	e92d4070 	push	{r4, r5, r6, lr}
   1b170:	e3510053 	cmp	r1, #83	; 0x53
   1b174:	e1a04001 	mov	r4, r1
   1b178:	e1a05000 	mov	r5, r0
   1b17c:	8a000009 	bhi	1b1a8 <CInterruptSystem::DisconnectIRQ(unsigned int)+0x3c>
   1b180:	e7953104 	ldr	r3, [r5, r4, lsl #2]
   1b184:	e0856104 	add	r6, r5, r4, lsl #2
   1b188:	e3530000 	cmp	r3, #0
   1b18c:	0a00000f 	beq	1b1d0 <CInterruptSystem::DisconnectIRQ(unsigned int)+0x64>
   1b190:	e1a00004 	mov	r0, r4
   1b194:	ebffffcc 	bl	1b0cc <CInterruptSystem::DisableIRQ(unsigned int)>
   1b198:	e3a03000 	mov	r3, #0
   1b19c:	e7853104 	str	r3, [r5, r4, lsl #2]
   1b1a0:	e5863150 	str	r3, [r6, #336]	; 0x150
   1b1a4:	e8bd8070 	pop	{r4, r5, r6, pc}
   1b1a8:	e30911f4 	movw	r1, #37364	; 0x91f4
   1b1ac:	e3401002 	movt	r1, #2
   1b1b0:	e3090248 	movw	r0, #37448	; 0x9248
   1b1b4:	e3400002 	movt	r0, #2
   1b1b8:	e3a02081 	mov	r2, #129	; 0x81
   1b1bc:	e0856104 	add	r6, r5, r4, lsl #2
   1b1c0:	ebfff8a3 	bl	19454 <assertion_failed>
   1b1c4:	e7953104 	ldr	r3, [r5, r4, lsl #2]
   1b1c8:	e3530000 	cmp	r3, #0
   1b1cc:	1affffef 	bne	1b190 <CInterruptSystem::DisconnectIRQ(unsigned int)+0x24>
   1b1d0:	e30911f4 	movw	r1, #37364	; 0x91f4
   1b1d4:	e3401002 	movt	r1, #2
   1b1d8:	e3090298 	movw	r0, #37528	; 0x9298
   1b1dc:	e3400002 	movt	r0, #2
   1b1e0:	e3a02082 	mov	r2, #130	; 0x82
   1b1e4:	ebfff89a 	bl	19454 <assertion_failed>
   1b1e8:	eaffffe8 	b	1b190 <CInterruptSystem::DisconnectIRQ(unsigned int)+0x24>

0001b1ec <CInterruptSystem::EnableFIQ(unsigned int)>:
   1b1ec:	e92d4010 	push	{r4, lr}
   1b1f0:	e3500047 	cmp	r0, #71	; 0x47
   1b1f4:	e1a04000 	mov	r4, r0
   1b1f8:	9a000005 	bls	1b214 <CInterruptSystem::EnableFIQ(unsigned int)+0x28>
   1b1fc:	e30911f4 	movw	r1, #37364	; 0x91f4
   1b200:	e3401002 	movt	r1, #2
   1b204:	e3090204 	movw	r0, #37380	; 0x9204
   1b208:	e3400002 	movt	r0, #2
   1b20c:	e3a020d7 	mov	r2, #215	; 0xd7
   1b210:	ebfff88f 	bl	19454 <assertion_failed>
   1b214:	e3a03a0b 	mov	r3, #45056	; 0xb000
   1b218:	e3433f00 	movt	r3, #16128	; 0x3f00
   1b21c:	e3844080 	orr	r4, r4, #128	; 0x80
   1b220:	e583420c 	str	r4, [r3, #524]	; 0x20c
   1b224:	e8bd8010 	pop	{r4, pc}

0001b228 <CInterruptSystem::DisableFIQ()>:
   1b228:	e3a03a0b 	mov	r3, #45056	; 0xb000
   1b22c:	e3433f00 	movt	r3, #16128	; 0x3f00
   1b230:	e3a02000 	mov	r2, #0
   1b234:	e583220c 	str	r2, [r3, #524]	; 0x20c
   1b238:	e12fff1e 	bx	lr

0001b23c <CInterruptSystem::Get()>:
   1b23c:	e92d4010 	push	{r4, lr}
   1b240:	e30b44b8 	movw	r4, #46264	; 0xb4b8
   1b244:	e3404002 	movt	r4, #2
   1b248:	e5940000 	ldr	r0, [r4]
   1b24c:	e3500000 	cmp	r0, #0
   1b250:	18bd8010 	popne	{r4, pc}
   1b254:	e3a020e9 	mov	r2, #233	; 0xe9
   1b258:	e30911f4 	movw	r1, #37364	; 0x91f4
   1b25c:	e3401002 	movt	r1, #2
   1b260:	e3080b64 	movw	r0, #35684	; 0x8b64
   1b264:	e3400002 	movt	r0, #2
   1b268:	ebfff879 	bl	19454 <assertion_failed>
   1b26c:	e5940000 	ldr	r0, [r4]
   1b270:	e8bd8010 	pop	{r4, pc}

0001b274 <CInterruptSystem::CallIRQHandler(unsigned int)>:
   1b274:	e92d4070 	push	{r4, r5, r6, lr}
   1b278:	e3510053 	cmp	r1, #83	; 0x53
   1b27c:	e1a06001 	mov	r6, r1
   1b280:	e1a05000 	mov	r5, r0
   1b284:	8a000007 	bhi	1b2a8 <CInterruptSystem::CallIRQHandler(unsigned int)+0x34>
   1b288:	e7954106 	ldr	r4, [r5, r6, lsl #2]
   1b28c:	e0855106 	add	r5, r5, r6, lsl #2
   1b290:	e3540000 	cmp	r4, #0
   1b294:	0a00000a 	beq	1b2c4 <CInterruptSystem::CallIRQHandler(unsigned int)+0x50>
   1b298:	e5950150 	ldr	r0, [r5, #336]	; 0x150
   1b29c:	e12fff34 	blx	r4
   1b2a0:	e3a00001 	mov	r0, #1
   1b2a4:	e8bd8070 	pop	{r4, r5, r6, pc}
   1b2a8:	e30911f4 	movw	r1, #37364	; 0x91f4
   1b2ac:	e3401002 	movt	r1, #2
   1b2b0:	e3090248 	movw	r0, #37448	; 0x9248
   1b2b4:	e3400002 	movt	r0, #2
   1b2b8:	e3a020ef 	mov	r2, #239	; 0xef
   1b2bc:	ebfff864 	bl	19454 <assertion_failed>
   1b2c0:	eafffff0 	b	1b288 <CInterruptSystem::CallIRQHandler(unsigned int)+0x14>
   1b2c4:	e1a00006 	mov	r0, r6
   1b2c8:	ebffff7f 	bl	1b0cc <CInterruptSystem::DisableIRQ(unsigned int)>
   1b2cc:	e1a00004 	mov	r0, r4
   1b2d0:	e8bd8070 	pop	{r4, r5, r6, pc}

0001b2d4 <CInterruptSystem::InterruptHandler()>:
   1b2d4:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   1b2d8:	e30b54b8 	movw	r5, #46264	; 0xb4b8
   1b2dc:	e3405002 	movt	r5, #2
   1b2e0:	e24dd014 	sub	sp, sp, #20
   1b2e4:	e5953000 	ldr	r3, [r5]
   1b2e8:	e3530000 	cmp	r3, #0
   1b2ec:	0a000036 	beq	1b3cc <CInterruptSystem::InterruptHandler()+0xf8>
   1b2f0:	e3a03101 	mov	r3, #1073741824	; 0x40000000
   1b2f4:	e5934060 	ldr	r4, [r3, #96]	; 0x60
   1b2f8:	e3c43c01 	bic	r3, r4, #256	; 0x100
   1b2fc:	e3c33002 	bic	r3, r3, #2
   1b300:	e3530000 	cmp	r3, #0
   1b304:	1a000029 	bne	1b3b0 <CInterruptSystem::InterruptHandler()+0xdc>
   1b308:	e3140002 	tst	r4, #2
   1b30c:	0a000004 	beq	1b324 <CInterruptSystem::InterruptHandler()+0x50>
   1b310:	e5950000 	ldr	r0, [r5]
   1b314:	e3a01049 	mov	r1, #73	; 0x49
   1b318:	e28dd014 	add	sp, sp, #20
   1b31c:	e8bd40f0 	pop	{r4, r5, r6, r7, lr}
   1b320:	eaffffd3 	b	1b274 <CInterruptSystem::CallIRQHandler(unsigned int)>
   1b324:	eb000629 	bl	1cbd0 <CMultiCoreSupport::LocalInterruptHandler()>
   1b328:	e2507000 	subs	r7, r0, #0
   1b32c:	1a00001d 	bne	1b3a8 <CInterruptSystem::InterruptHandler()+0xd4>
   1b330:	e3a03a0b 	mov	r3, #45056	; 0xb000
   1b334:	e3433f00 	movt	r3, #16128	; 0x3f00
   1b338:	e5934204 	ldr	r4, [r3, #516]	; 0x204
   1b33c:	e58d4004 	str	r4, [sp, #4]
   1b340:	e3540000 	cmp	r4, #0
   1b344:	e5932208 	ldr	r2, [r3, #520]	; 0x208
   1b348:	e58d2008 	str	r2, [sp, #8]
   1b34c:	e5933200 	ldr	r3, [r3, #512]	; 0x200
   1b350:	e6ef3073 	uxtb	r3, r3
   1b354:	e58d300c 	str	r3, [sp, #12]
   1b358:	1a000006 	bne	1b378 <CInterruptSystem::InterruptHandler()+0xa4>
   1b35c:	e2877001 	add	r7, r7, #1
   1b360:	e3570003 	cmp	r7, #3
   1b364:	0a00000f 	beq	1b3a8 <CInterruptSystem::InterruptHandler()+0xd4>
   1b368:	e28d3004 	add	r3, sp, #4
   1b36c:	e7934107 	ldr	r4, [r3, r7, lsl #2]
   1b370:	e3540000 	cmp	r4, #0
   1b374:	0afffff8 	beq	1b35c <CInterruptSystem::InterruptHandler()+0x88>
   1b378:	e1a06287 	lsl	r6, r7, #5
   1b37c:	ea000002 	b	1b38c <CInterruptSystem::InterruptHandler()+0xb8>
   1b380:	e2866001 	add	r6, r6, #1
   1b384:	e1b040a4 	lsrs	r4, r4, #1
   1b388:	0afffff3 	beq	1b35c <CInterruptSystem::InterruptHandler()+0x88>
   1b38c:	e3140001 	tst	r4, #1
   1b390:	0afffffa 	beq	1b380 <CInterruptSystem::InterruptHandler()+0xac>
   1b394:	e1a01006 	mov	r1, r6
   1b398:	e5950000 	ldr	r0, [r5]
   1b39c:	ebffffb4 	bl	1b274 <CInterruptSystem::CallIRQHandler(unsigned int)>
   1b3a0:	e3500000 	cmp	r0, #0
   1b3a4:	0afffff5 	beq	1b380 <CInterruptSystem::InterruptHandler()+0xac>
   1b3a8:	e28dd014 	add	sp, sp, #20
   1b3ac:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   1b3b0:	e30911f4 	movw	r1, #37364	; 0x91f4
   1b3b4:	e3401002 	movt	r1, #2
   1b3b8:	e30902b4 	movw	r0, #37556	; 0x92b4
   1b3bc:	e3400002 	movt	r0, #2
   1b3c0:	e3002106 	movw	r2, #262	; 0x106
   1b3c4:	ebfff822 	bl	19454 <assertion_failed>
   1b3c8:	eaffffce 	b	1b308 <CInterruptSystem::InterruptHandler()+0x34>
   1b3cc:	e30911f4 	movw	r1, #37364	; 0x91f4
   1b3d0:	e3401002 	movt	r1, #2
   1b3d4:	e3080b64 	movw	r0, #35684	; 0x8b64
   1b3d8:	e3400002 	movt	r0, #2
   1b3dc:	e3002102 	movw	r2, #258	; 0x102
   1b3e0:	ebfff81b 	bl	19454 <assertion_failed>
   1b3e4:	eaffffc1 	b	1b2f0 <CInterruptSystem::InterruptHandler()+0x1c>

0001b3e8 <InterruptHandler>:
   1b3e8:	eaffffb9 	b	1b2d4 <CInterruptSystem::InterruptHandler()>

0001b3ec <CKernelOptions::GetDecimal(char*) [clone .part.0]>:
   1b3ec:	e3a01000 	mov	r1, #0
   1b3f0:	e3a0c00a 	mov	ip, #10
   1b3f4:	ea00000a 	b	1b424 <CKernelOptions::GetDecimal(char*) [clone .part.0]+0x38>
   1b3f8:	e3520009 	cmp	r2, #9
   1b3fc:	8a00000f 	bhi	1b440 <CKernelOptions::GetDecimal(char*) [clone .part.0]+0x54>
   1b400:	e023319c 	mla	r3, ip, r1, r3
   1b404:	e3730001 	cmn	r3, #1
   1b408:	13a02000 	movne	r2, #0
   1b40c:	03a02001 	moveq	r2, #1
   1b410:	e1510003 	cmp	r1, r3
   1b414:	83822001 	orrhi	r2, r2, #1
   1b418:	e1a01003 	mov	r1, r3
   1b41c:	e3520000 	cmp	r2, #0
   1b420:	1a000006 	bne	1b440 <CKernelOptions::GetDecimal(char*) [clone .part.0]+0x54>
   1b424:	e0d020d1 	ldrsb	r2, [r0], #1
   1b428:	e2423030 	sub	r3, r2, #48	; 0x30
   1b42c:	e3520000 	cmp	r2, #0
   1b430:	e6ef2073 	uxtb	r2, r3
   1b434:	1affffef 	bne	1b3f8 <CKernelOptions::GetDecimal(char*) [clone .part.0]+0xc>
   1b438:	e1a00001 	mov	r0, r1
   1b43c:	e12fff1e 	bx	lr
   1b440:	e3e01000 	mvn	r1, #0
   1b444:	e1a00001 	mov	r0, r1
   1b448:	e12fff1e 	bx	lr

0001b44c <CKernelOptions::~CKernelOptions()>:
   1b44c:	e30b34bc 	movw	r3, #46268	; 0xb4bc
   1b450:	e3403002 	movt	r3, #2
   1b454:	e3a02000 	mov	r2, #0
   1b458:	e5832000 	str	r2, [r3]
   1b45c:	e12fff1e 	bx	lr

0001b460 <CKernelOptions::GetWidth() const>:
   1b460:	e5900810 	ldr	r0, [r0, #2064]	; 0x810
   1b464:	e12fff1e 	bx	lr

0001b468 <CKernelOptions::GetHeight() const>:
   1b468:	e5900814 	ldr	r0, [r0, #2068]	; 0x814
   1b46c:	e12fff1e 	bx	lr

0001b470 <CKernelOptions::GetLogDevice() const>:
   1b470:	e2800e81 	add	r0, r0, #2064	; 0x810
   1b474:	e2800008 	add	r0, r0, #8
   1b478:	e12fff1e 	bx	lr

0001b47c <CKernelOptions::GetLogLevel() const>:
   1b47c:	e590082c 	ldr	r0, [r0, #2092]	; 0x82c
   1b480:	e12fff1e 	bx	lr

0001b484 <CKernelOptions::GetKeyMap() const>:
   1b484:	e2800e83 	add	r0, r0, #2096	; 0x830
   1b488:	e12fff1e 	bx	lr

0001b48c <CKernelOptions::GetUSBPowerDelay() const>:
   1b48c:	e5900834 	ldr	r0, [r0, #2100]	; 0x834
   1b490:	e12fff1e 	bx	lr

0001b494 <CKernelOptions::GetSoundDevice() const>:
   1b494:	e2800e83 	add	r0, r0, #2096	; 0x830
   1b498:	e2800008 	add	r0, r0, #8
   1b49c:	e12fff1e 	bx	lr

0001b4a0 <CKernelOptions::GetSoundOption() const>:
   1b4a0:	e590084c 	ldr	r0, [r0, #2124]	; 0x84c
   1b4a4:	e12fff1e 	bx	lr

0001b4a8 <CKernelOptions::GetCPUSpeed() const>:
   1b4a8:	e5d00850 	ldrb	r0, [r0, #2128]	; 0x850
   1b4ac:	e12fff1e 	bx	lr

0001b4b0 <CKernelOptions::GetSoCMaxTemp() const>:
   1b4b0:	e5900854 	ldr	r0, [r0, #2132]	; 0x854
   1b4b4:	e12fff1e 	bx	lr

0001b4b8 <CKernelOptions::Get()>:
   1b4b8:	e30b34bc 	movw	r3, #46268	; 0xb4bc
   1b4bc:	e3403002 	movt	r3, #2
   1b4c0:	e5930000 	ldr	r0, [r3]
   1b4c4:	e12fff1e 	bx	lr

0001b4c8 <CKernelOptions::GetToken()>:
   1b4c8:	e590380c 	ldr	r3, [r0, #2060]	; 0x80c
   1b4cc:	e1d320d0 	ldrsb	r2, [r3]
   1b4d0:	e3520000 	cmp	r2, #0
   1b4d4:	1a000005 	bne	1b4f0 <CKernelOptions::GetToken()+0x28>
   1b4d8:	ea000016 	b	1b538 <CKernelOptions::GetToken()+0x70>
   1b4dc:	e2833001 	add	r3, r3, #1
   1b4e0:	e580380c 	str	r3, [r0, #2060]	; 0x80c
   1b4e4:	e1d320d0 	ldrsb	r2, [r3]
   1b4e8:	e3520000 	cmp	r2, #0
   1b4ec:	0a000011 	beq	1b538 <CKernelOptions::GetToken()+0x70>
   1b4f0:	e3520020 	cmp	r2, #32
   1b4f4:	0afffff8 	beq	1b4dc <CKernelOptions::GetToken()+0x14>
   1b4f8:	e1a02003 	mov	r2, r3
   1b4fc:	ea000000 	b	1b504 <CKernelOptions::GetToken()+0x3c>
   1b500:	e1a02001 	mov	r2, r1
   1b504:	e2821001 	add	r1, r2, #1
   1b508:	e580180c 	str	r1, [r0, #2060]	; 0x80c
   1b50c:	e1d2c0d1 	ldrsb	ip, [r2, #1]
   1b510:	e35c0000 	cmp	ip, #0
   1b514:	0a000008 	beq	1b53c <CKernelOptions::GetToken()+0x74>
   1b518:	e35c0020 	cmp	ip, #32
   1b51c:	1afffff7 	bne	1b500 <CKernelOptions::GetToken()+0x38>
   1b520:	e2822002 	add	r2, r2, #2
   1b524:	e3a0c000 	mov	ip, #0
   1b528:	e580280c 	str	r2, [r0, #2060]	; 0x80c
   1b52c:	e1a00003 	mov	r0, r3
   1b530:	e5c1c000 	strb	ip, [r1]
   1b534:	e12fff1e 	bx	lr
   1b538:	e3a03000 	mov	r3, #0
   1b53c:	e1a00003 	mov	r0, r3
   1b540:	e12fff1e 	bx	lr

0001b544 <CKernelOptions::CKernelOptions()>:
   1b544:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b548:	e30922dc 	movw	r2, #37596	; 0x92dc
   1b54c:	e3402002 	movt	r2, #2
   1b550:	e2806e81 	add	r6, r0, #2064	; 0x810
   1b554:	e3083338 	movw	r3, #33592	; 0x8338
   1b558:	e3403002 	movt	r3, #2
   1b55c:	e1a05000 	mov	r5, r0
   1b560:	e2808e83 	add	r8, r0, #2096	; 0x830
   1b564:	e2866008 	add	r6, r6, #8
   1b568:	e24dd01c 	sub	sp, sp, #28
   1b56c:	e30bc4bc 	movw	ip, #46268	; 0xb4bc
   1b570:	e340c002 	movt	ip, #2
   1b574:	e3a04000 	mov	r4, #0
   1b578:	e5920000 	ldr	r0, [r2]
   1b57c:	e5d2e004 	ldrb	lr, [r2, #4]
   1b580:	e3a01004 	mov	r1, #4
   1b584:	e1d320b0 	ldrh	r2, [r3]
   1b588:	e5d33002 	ldrb	r3, [r3, #2]
   1b58c:	e5850818 	str	r0, [r5, #2072]	; 0x818
   1b590:	e28d0010 	add	r0, sp, #16
   1b594:	e585182c 	str	r1, [r5, #2092]	; 0x82c
   1b598:	e3a0103c 	mov	r1, #60	; 0x3c
   1b59c:	e5854810 	str	r4, [r5, #2064]	; 0x810
   1b5a0:	e5851854 	str	r1, [r5, #2132]	; 0x854
   1b5a4:	e1a01004 	mov	r1, r4
   1b5a8:	e5854814 	str	r4, [r5, #2068]	; 0x814
   1b5ac:	e5854834 	str	r4, [r5, #2100]	; 0x834
   1b5b0:	e585484c 	str	r4, [r5, #2124]	; 0x84c
   1b5b4:	e5c54850 	strb	r4, [r5, #2128]	; 0x850
   1b5b8:	e5c6e004 	strb	lr, [r6, #4]
   1b5bc:	e1c820b0 	strh	r2, [r8]
   1b5c0:	e5c53832 	strb	r3, [r5, #2098]	; 0x832
   1b5c4:	e5c54838 	strb	r4, [r5, #2104]	; 0x838
   1b5c8:	e58c5000 	str	r5, [ip]
   1b5cc:	ebfff7c4 	bl	194e4 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   1b5d0:	e58d4000 	str	r4, [sp]
   1b5d4:	e1a02005 	mov	r2, r5
   1b5d8:	e28d0010 	add	r0, sp, #16
   1b5dc:	e3a01001 	mov	r1, #1
   1b5e0:	e3401005 	movt	r1, #5
   1b5e4:	e300380c 	movw	r3, #2060	; 0x80c
   1b5e8:	ebfff80a 	bl	19618 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   1b5ec:	e1500004 	cmp	r0, r4
   1b5f0:	0a00004b 	beq	1b724 <CKernelOptions::CKernelOptions()+0x1e0>
   1b5f4:	e5953008 	ldr	r3, [r5, #8]
   1b5f8:	e3530b02 	cmp	r3, #2048	; 0x800
   1b5fc:	2a000048 	bcs	1b724 <CKernelOptions::CKernelOptions()+0x1e0>
   1b600:	e0853003 	add	r3, r5, r3
   1b604:	e309734c 	movw	r7, #37708	; 0x934c
   1b608:	e3407002 	movt	r7, #2
   1b60c:	e30992e4 	movw	r9, #37604	; 0x92e4
   1b610:	e3409002 	movt	r9, #2
   1b614:	e5c3400c 	strb	r4, [r3, #12]
   1b618:	e30922ec 	movw	r2, #37612	; 0x92ec
   1b61c:	e3402002 	movt	r2, #2
   1b620:	e58d200c 	str	r2, [sp, #12]
   1b624:	e285300c 	add	r3, r5, #12
   1b628:	e585380c 	str	r3, [r5, #2060]	; 0x80c
   1b62c:	e1a00005 	mov	r0, r5
   1b630:	ebffffa4 	bl	1b4c8 <CKernelOptions::GetToken()>
   1b634:	e250a000 	subs	sl, r0, #0
   1b638:	0a000039 	beq	1b724 <CKernelOptions::CKernelOptions()+0x1e0>
   1b63c:	e1da30d0 	ldrsb	r3, [sl]
   1b640:	e3530000 	cmp	r3, #0
   1b644:	0a000008 	beq	1b66c <CKernelOptions::CKernelOptions()+0x128>
   1b648:	e1a0400a 	mov	r4, sl
   1b64c:	e353003d 	cmp	r3, #61	; 0x3d
   1b650:	1a000002 	bne	1b660 <CKernelOptions::CKernelOptions()+0x11c>
   1b654:	ea000037 	b	1b738 <CKernelOptions::CKernelOptions()+0x1f4>
   1b658:	e353003d 	cmp	r3, #61	; 0x3d
   1b65c:	0a000035 	beq	1b738 <CKernelOptions::CKernelOptions()+0x1f4>
   1b660:	e1f430d1 	ldrsb	r3, [r4, #1]!
   1b664:	e3530000 	cmp	r3, #0
   1b668:	1afffffa 	bne	1b658 <CKernelOptions::CKernelOptions()+0x114>
   1b66c:	e1a01007 	mov	r1, r7
   1b670:	e1a0000a 	mov	r0, sl
   1b674:	eb00154f 	bl	20bb8 <strcmp>
   1b678:	e3500000 	cmp	r0, #0
   1b67c:	0affffea 	beq	1b62c <CKernelOptions::CKernelOptions()+0xe8>
   1b680:	e1a01009 	mov	r1, r9
   1b684:	e1a0000a 	mov	r0, sl
   1b688:	eb00154a 	bl	20bb8 <strcmp>
   1b68c:	e3500000 	cmp	r0, #0
   1b690:	13a0b000 	movne	fp, #0
   1b694:	0affffe4 	beq	1b62c <CKernelOptions::CKernelOptions()+0xe8>
   1b698:	e59d100c 	ldr	r1, [sp, #12]
   1b69c:	e1a0000a 	mov	r0, sl
   1b6a0:	eb001544 	bl	20bb8 <strcmp>
   1b6a4:	e2504000 	subs	r4, r0, #0
   1b6a8:	0a000050 	beq	1b7f0 <CKernelOptions::CKernelOptions()+0x2ac>
   1b6ac:	e30912f4 	movw	r1, #37620	; 0x92f4
   1b6b0:	e3401002 	movt	r1, #2
   1b6b4:	e1a0000a 	mov	r0, sl
   1b6b8:	eb00153e 	bl	20bb8 <strcmp>
   1b6bc:	e3500000 	cmp	r0, #0
   1b6c0:	0a000040 	beq	1b7c8 <CKernelOptions::CKernelOptions()+0x284>
   1b6c4:	e3091300 	movw	r1, #37632	; 0x9300
   1b6c8:	e3401002 	movt	r1, #2
   1b6cc:	e1a0000a 	mov	r0, sl
   1b6d0:	eb001538 	bl	20bb8 <strcmp>
   1b6d4:	e2504000 	subs	r4, r0, #0
   1b6d8:	0a000060 	beq	1b860 <CKernelOptions::CKernelOptions()+0x31c>
   1b6dc:	e3091308 	movw	r1, #37640	; 0x9308
   1b6e0:	e3401002 	movt	r1, #2
   1b6e4:	e1a0000a 	mov	r0, sl
   1b6e8:	eb001532 	bl	20bb8 <strcmp>
   1b6ec:	e3500000 	cmp	r0, #0
   1b6f0:	1a000044 	bne	1b808 <CKernelOptions::CKernelOptions()+0x2c4>
   1b6f4:	e35b0000 	cmp	fp, #0
   1b6f8:	0affffcb 	beq	1b62c <CKernelOptions::CKernelOptions()+0xe8>
   1b6fc:	e1db30d0 	ldrsb	r3, [fp]
   1b700:	e3530000 	cmp	r3, #0
   1b704:	0affffc8 	beq	1b62c <CKernelOptions::CKernelOptions()+0xe8>
   1b708:	e1a0000b 	mov	r0, fp
   1b70c:	ebffff36 	bl	1b3ec <CKernelOptions::GetDecimal(char*) [clone .part.0]>
   1b710:	e24020c8 	sub	r2, r0, #200	; 0xc8
   1b714:	e3013e78 	movw	r3, #7800	; 0x1e78
   1b718:	e1520003 	cmp	r2, r3
   1b71c:	95850834 	strls	r0, [r5, #2100]	; 0x834
   1b720:	eaffffc1 	b	1b62c <CKernelOptions::CKernelOptions()+0xe8>
   1b724:	e28d0010 	add	r0, sp, #16
   1b728:	ebfff774 	bl	19500 <CBcmPropertyTags::~CBcmPropertyTags()>
   1b72c:	e1a00005 	mov	r0, r5
   1b730:	e28dd01c 	add	sp, sp, #28
   1b734:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b738:	e3a03000 	mov	r3, #0
   1b73c:	e1a01007 	mov	r1, r7
   1b740:	e5c43000 	strb	r3, [r4]
   1b744:	e1a0000a 	mov	r0, sl
   1b748:	eb00151a 	bl	20bb8 <strcmp>
   1b74c:	e284b001 	add	fp, r4, #1
   1b750:	e3500000 	cmp	r0, #0
   1b754:	1a00000b 	bne	1b788 <CKernelOptions::CKernelOptions()+0x244>
   1b758:	e35b0000 	cmp	fp, #0
   1b75c:	0affffb2 	beq	1b62c <CKernelOptions::CKernelOptions()+0xe8>
   1b760:	e1d430d1 	ldrsb	r3, [r4, #1]
   1b764:	e3530000 	cmp	r3, #0
   1b768:	0affffaf 	beq	1b62c <CKernelOptions::CKernelOptions()+0xe8>
   1b76c:	e1a0000b 	mov	r0, fp
   1b770:	ebffff1d 	bl	1b3ec <CKernelOptions::GetDecimal(char*) [clone .part.0]>
   1b774:	e2402d0a 	sub	r2, r0, #640	; 0x280
   1b778:	e300353c 	movw	r3, #1340	; 0x53c
   1b77c:	e1520003 	cmp	r2, r3
   1b780:	95850810 	strls	r0, [r5, #2064]	; 0x810
   1b784:	eaffffa8 	b	1b62c <CKernelOptions::CKernelOptions()+0xe8>
   1b788:	e1a01009 	mov	r1, r9
   1b78c:	e1a0000a 	mov	r0, sl
   1b790:	eb001508 	bl	20bb8 <strcmp>
   1b794:	e3500000 	cmp	r0, #0
   1b798:	1affffbe 	bne	1b698 <CKernelOptions::CKernelOptions()+0x154>
   1b79c:	e35b0000 	cmp	fp, #0
   1b7a0:	0affffa1 	beq	1b62c <CKernelOptions::CKernelOptions()+0xe8>
   1b7a4:	e1d430d1 	ldrsb	r3, [r4, #1]
   1b7a8:	e3530000 	cmp	r3, #0
   1b7ac:	0affff9e 	beq	1b62c <CKernelOptions::CKernelOptions()+0xe8>
   1b7b0:	e1a0000b 	mov	r0, fp
   1b7b4:	ebffff0c 	bl	1b3ec <CKernelOptions::GetDecimal(char*) [clone .part.0]>
   1b7b8:	e2403e1e 	sub	r3, r0, #480	; 0x1e0
   1b7bc:	e3530f96 	cmp	r3, #600	; 0x258
   1b7c0:	95850814 	strls	r0, [r5, #2068]	; 0x814
   1b7c4:	eaffff98 	b	1b62c <CKernelOptions::CKernelOptions()+0xe8>
   1b7c8:	e35b0000 	cmp	fp, #0
   1b7cc:	0affff96 	beq	1b62c <CKernelOptions::CKernelOptions()+0xe8>
   1b7d0:	e1db30d0 	ldrsb	r3, [fp]
   1b7d4:	e3530000 	cmp	r3, #0
   1b7d8:	0affff93 	beq	1b62c <CKernelOptions::CKernelOptions()+0xe8>
   1b7dc:	e1a0000b 	mov	r0, fp
   1b7e0:	ebffff01 	bl	1b3ec <CKernelOptions::GetDecimal(char*) [clone .part.0]>
   1b7e4:	e3500004 	cmp	r0, #4
   1b7e8:	9585082c 	strls	r0, [r5, #2092]	; 0x82c
   1b7ec:	eaffff8e 	b	1b62c <CKernelOptions::CKernelOptions()+0xe8>
   1b7f0:	e1a0100b 	mov	r1, fp
   1b7f4:	e3a02013 	mov	r2, #19
   1b7f8:	e1a00006 	mov	r0, r6
   1b7fc:	eb001558 	bl	20d64 <strncpy>
   1b800:	e5c5482b 	strb	r4, [r5, #2091]	; 0x82b
   1b804:	eaffff88 	b	1b62c <CKernelOptions::CKernelOptions()+0xe8>
   1b808:	e3091318 	movw	r1, #37656	; 0x9318
   1b80c:	e3401002 	movt	r1, #2
   1b810:	e1a0000a 	mov	r0, sl
   1b814:	eb0014e7 	bl	20bb8 <strcmp>
   1b818:	e2504000 	subs	r4, r0, #0
   1b81c:	0a000015 	beq	1b878 <CKernelOptions::CKernelOptions()+0x334>
   1b820:	e3091324 	movw	r1, #37668	; 0x9324
   1b824:	e3401002 	movt	r1, #2
   1b828:	e1a0000a 	mov	r0, sl
   1b82c:	eb0014e1 	bl	20bb8 <strcmp>
   1b830:	e3500000 	cmp	r0, #0
   1b834:	1a000016 	bne	1b894 <CKernelOptions::CKernelOptions()+0x350>
   1b838:	e35b0000 	cmp	fp, #0
   1b83c:	0affff7a 	beq	1b62c <CKernelOptions::CKernelOptions()+0xe8>
   1b840:	e1db30d0 	ldrsb	r3, [fp]
   1b844:	e3530000 	cmp	r3, #0
   1b848:	0affff77 	beq	1b62c <CKernelOptions::CKernelOptions()+0xe8>
   1b84c:	e1a0000b 	mov	r0, fp
   1b850:	ebfffee5 	bl	1b3ec <CKernelOptions::GetDecimal(char*) [clone .part.0]>
   1b854:	e3500002 	cmp	r0, #2
   1b858:	9585084c 	strls	r0, [r5, #2124]	; 0x84c
   1b85c:	eaffff72 	b	1b62c <CKernelOptions::CKernelOptions()+0xe8>
   1b860:	e1a0100b 	mov	r1, fp
   1b864:	e3a02002 	mov	r2, #2
   1b868:	e1a00008 	mov	r0, r8
   1b86c:	eb00153c 	bl	20d64 <strncpy>
   1b870:	e5c54832 	strb	r4, [r5, #2098]	; 0x832
   1b874:	eaffff6c 	b	1b62c <CKernelOptions::CKernelOptions()+0xe8>
   1b878:	e2850e83 	add	r0, r5, #2096	; 0x830
   1b87c:	e1a0100b 	mov	r1, fp
   1b880:	e2800008 	add	r0, r0, #8
   1b884:	e3a02013 	mov	r2, #19
   1b888:	eb001535 	bl	20d64 <strncpy>
   1b88c:	e5c5484b 	strb	r4, [r5, #2123]	; 0x84b
   1b890:	eaffff65 	b	1b62c <CKernelOptions::CKernelOptions()+0xe8>
   1b894:	e3091330 	movw	r1, #37680	; 0x9330
   1b898:	e3401002 	movt	r1, #2
   1b89c:	e1a0000a 	mov	r0, sl
   1b8a0:	eb0014c4 	bl	20bb8 <strcmp>
   1b8a4:	e3500000 	cmp	r0, #0
   1b8a8:	1a000007 	bne	1b8cc <CKernelOptions::CKernelOptions()+0x388>
   1b8ac:	e1a0000b 	mov	r0, fp
   1b8b0:	e3091338 	movw	r1, #37688	; 0x9338
   1b8b4:	e3401002 	movt	r1, #2
   1b8b8:	eb0014be 	bl	20bb8 <strcmp>
   1b8bc:	e3500000 	cmp	r0, #0
   1b8c0:	03a03001 	moveq	r3, #1
   1b8c4:	05c53850 	strbeq	r3, [r5, #2128]	; 0x850
   1b8c8:	eaffff57 	b	1b62c <CKernelOptions::CKernelOptions()+0xe8>
   1b8cc:	e1a0000a 	mov	r0, sl
   1b8d0:	e3091340 	movw	r1, #37696	; 0x9340
   1b8d4:	e3401002 	movt	r1, #2
   1b8d8:	eb0014b6 	bl	20bb8 <strcmp>
   1b8dc:	e16f3f1b 	clz	r3, fp
   1b8e0:	e3500000 	cmp	r0, #0
   1b8e4:	e1a032a3 	lsr	r3, r3, #5
   1b8e8:	13a03001 	movne	r3, #1
   1b8ec:	e3530000 	cmp	r3, #0
   1b8f0:	1affff4d 	bne	1b62c <CKernelOptions::CKernelOptions()+0xe8>
   1b8f4:	e1db30d0 	ldrsb	r3, [fp]
   1b8f8:	e3530000 	cmp	r3, #0
   1b8fc:	0affff4a 	beq	1b62c <CKernelOptions::CKernelOptions()+0xe8>
   1b900:	e1a0000b 	mov	r0, fp
   1b904:	ebfffeb8 	bl	1b3ec <CKernelOptions::GetDecimal(char*) [clone .part.0]>
   1b908:	e2403028 	sub	r3, r0, #40	; 0x28
   1b90c:	e3530026 	cmp	r3, #38	; 0x26
   1b910:	95850854 	strls	r0, [r5, #2132]	; 0x854
   1b914:	eaffff44 	b	1b62c <CKernelOptions::CKernelOptions()+0xe8>

0001b918 <CKernelOptions::GetOptionValue(char*)>:
   1b918:	e1d030d0 	ldrsb	r3, [r0]
   1b91c:	e3530000 	cmp	r3, #0
   1b920:	1a000003 	bne	1b934 <CKernelOptions::GetOptionValue(char*)+0x1c>
   1b924:	ea000007 	b	1b948 <CKernelOptions::GetOptionValue(char*)+0x30>
   1b928:	e1f030d1 	ldrsb	r3, [r0, #1]!
   1b92c:	e3530000 	cmp	r3, #0
   1b930:	0a000004 	beq	1b948 <CKernelOptions::GetOptionValue(char*)+0x30>
   1b934:	e353003d 	cmp	r3, #61	; 0x3d
   1b938:	1afffffa 	bne	1b928 <CKernelOptions::GetOptionValue(char*)+0x10>
   1b93c:	e2803001 	add	r3, r0, #1
   1b940:	e3a02000 	mov	r2, #0
   1b944:	e5c02000 	strb	r2, [r0]
   1b948:	e1a00003 	mov	r0, r3
   1b94c:	e12fff1e 	bx	lr

0001b950 <CKernelOptions::GetDecimal(char*)>:
   1b950:	e2503000 	subs	r3, r0, #0
   1b954:	0a000003 	beq	1b968 <CKernelOptions::GetDecimal(char*)+0x18>
   1b958:	e1d330d0 	ldrsb	r3, [r3]
   1b95c:	e3530000 	cmp	r3, #0
   1b960:	0a000000 	beq	1b968 <CKernelOptions::GetDecimal(char*)+0x18>
   1b964:	eafffea0 	b	1b3ec <CKernelOptions::GetDecimal(char*) [clone .part.0]>
   1b968:	e3e00000 	mvn	r0, #0
   1b96c:	e12fff1e 	bx	lr

0001b970 <CLogger::CLogger(unsigned int, CTimer*)>:
   1b970:	e92d4070 	push	{r4, r5, r6, lr}
   1b974:	e1a04000 	mov	r4, r0
   1b978:	e3a05000 	mov	r5, #0
   1b97c:	e2800018 	add	r0, r0, #24
   1b980:	e9840024 	stmib	r4, {r2, r5}
   1b984:	e5841000 	str	r1, [r4]
   1b988:	e3a01001 	mov	r1, #1
   1b98c:	e584500c 	str	r5, [r4, #12]
   1b990:	e5845010 	str	r5, [r4, #16]
   1b994:	e5845014 	str	r5, [r4, #20]
   1b998:	eb000c29 	bl	1ea44 <CSpinLock::CSpinLock(unsigned int)>
   1b99c:	e3a01001 	mov	r1, #1
   1b9a0:	e58450e8 	str	r5, [r4, #232]	; 0xe8
   1b9a4:	e28400f0 	add	r0, r4, #240	; 0xf0
   1b9a8:	e58450ec 	str	r5, [r4, #236]	; 0xec
   1b9ac:	eb000c24 	bl	1ea44 <CSpinLock::CSpinLock(unsigned int)>
   1b9b0:	e58450f8 	str	r5, [r4, #248]	; 0xf8
   1b9b4:	e58450fc 	str	r5, [r4, #252]	; 0xfc
   1b9b8:	e3a00901 	mov	r0, #16384	; 0x4000
   1b9bc:	eb0019b0 	bl	22084 <operator new[](unsigned int)>
   1b9c0:	e30b34c0 	movw	r3, #46272	; 0xb4c0
   1b9c4:	e3403002 	movt	r3, #2
   1b9c8:	e584000c 	str	r0, [r4, #12]
   1b9cc:	e1a00004 	mov	r0, r4
   1b9d0:	e5834000 	str	r4, [r3]
   1b9d4:	e8bd8070 	pop	{r4, r5, r6, pc}

0001b9d8 <CLogger::~CLogger()>:
   1b9d8:	e30b24c0 	movw	r2, #46272	; 0xb4c0
   1b9dc:	e3402002 	movt	r2, #2
   1b9e0:	e3a01000 	mov	r1, #0
   1b9e4:	e92d4070 	push	{r4, r5, r6, lr}
   1b9e8:	e59030ec 	ldr	r3, [r0, #236]	; 0xec
   1b9ec:	e1a04000 	mov	r4, r0
   1b9f0:	e1a05001 	mov	r5, r1
   1b9f4:	e5821000 	str	r1, [r2]
   1b9f8:	ea000007 	b	1ba1c <CLogger::~CLogger()+0x44>
   1b9fc:	e7940100 	ldr	r0, [r4, r0, lsl #2]
   1ba00:	eb0019a2 	bl	22090 <operator delete(void*, unsigned int)>
   1ba04:	e59430ec 	ldr	r3, [r4, #236]	; 0xec
   1ba08:	e2833001 	add	r3, r3, #1
   1ba0c:	e58430ec 	str	r3, [r4, #236]	; 0xec
   1ba10:	e3530032 	cmp	r3, #50	; 0x32
   1ba14:	058450ec 	streq	r5, [r4, #236]	; 0xec
   1ba18:	03a03000 	moveq	r3, #0
   1ba1c:	e59420e8 	ldr	r2, [r4, #232]	; 0xe8
   1ba20:	e2830008 	add	r0, r3, #8
   1ba24:	e3a01f42 	mov	r1, #264	; 0x108
   1ba28:	e1520003 	cmp	r2, r3
   1ba2c:	1afffff2 	bne	1b9fc <CLogger::~CLogger()+0x24>
   1ba30:	e594000c 	ldr	r0, [r4, #12]
   1ba34:	e3500000 	cmp	r0, #0
   1ba38:	0a000000 	beq	1ba40 <CLogger::~CLogger()+0x68>
   1ba3c:	eb001992 	bl	2208c <operator delete[](void*)>
   1ba40:	e3a03000 	mov	r3, #0
   1ba44:	e28400f0 	add	r0, r4, #240	; 0xf0
   1ba48:	e584300c 	str	r3, [r4, #12]
   1ba4c:	e5843008 	str	r3, [r4, #8]
   1ba50:	e5843004 	str	r3, [r4, #4]
   1ba54:	eb000c08 	bl	1ea7c <CSpinLock::~CSpinLock()>
   1ba58:	e2840018 	add	r0, r4, #24
   1ba5c:	eb000c06 	bl	1ea7c <CSpinLock::~CSpinLock()>
   1ba60:	e1a00004 	mov	r0, r4
   1ba64:	e8bd8070 	pop	{r4, r5, r6, pc}

0001ba68 <CLogger::Initialize(CDevice*)>:
   1ba68:	e92d4010 	push	{r4, lr}
   1ba6c:	e1a04000 	mov	r4, r0
   1ba70:	e24dd008 	sub	sp, sp, #8
   1ba74:	e5801008 	str	r1, [r0, #8]
   1ba78:	eb000398 	bl	1c8e0 <CMachineInfo::Get()>
   1ba7c:	eb0002ba 	bl	1c56c <CMachineInfo::GetMachineName() const>
   1ba80:	e3093354 	movw	r3, #37716	; 0x9354
   1ba84:	e3403002 	movt	r3, #2
   1ba88:	e58d0000 	str	r0, [sp]
   1ba8c:	e283101c 	add	r1, r3, #28
   1ba90:	e1a00004 	mov	r0, r4
   1ba94:	e3a02003 	mov	r2, #3
   1ba98:	eb000002 	bl	1baa8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1ba9c:	e3a00001 	mov	r0, #1
   1baa0:	e28dd008 	add	sp, sp, #8
   1baa4:	e8bd8010 	pop	{r4, pc}

0001baa8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>:
   1baa8:	e52d3004 	push	{r3}		; (str r3, [sp, #-4]!)
   1baac:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   1bab0:	e24dd010 	sub	sp, sp, #16
   1bab4:	e28dc018 	add	ip, sp, #24
   1bab8:	e59d3014 	ldr	r3, [sp, #20]
   1babc:	e58dc000 	str	ip, [sp]
   1bac0:	e58dc00c 	str	ip, [sp, #12]
   1bac4:	eb000003 	bl	1bad8 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)>
   1bac8:	e28dd010 	add	sp, sp, #16
   1bacc:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
   1bad0:	e28dd004 	add	sp, sp, #4
   1bad4:	e12fff1e 	bx	lr

0001bad8 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)>:
   1bad8:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   1badc:	e1a07003 	mov	r7, r3
   1bae0:	e1a04000 	mov	r4, r0
   1bae4:	e24dd024 	sub	sp, sp, #36	; 0x24
   1bae8:	e1a05002 	mov	r5, r2
   1baec:	e1a0000d 	mov	r0, sp
   1baf0:	e1a06001 	mov	r6, r1
   1baf4:	eb000c55 	bl	1ec50 <CString::CString()>
   1baf8:	e1a01007 	mov	r1, r7
   1bafc:	e59d2038 	ldr	r2, [sp, #56]	; 0x38
   1bb00:	e1a0000d 	mov	r0, sp
   1bb04:	eb000e03 	bl	1f318 <CString::FormatV(char const*, std::__va_list)>
   1bb08:	e1a0000d 	mov	r0, sp
   1bb0c:	eb000c66 	bl	1ecac <CString::operator char const*() const>
   1bb10:	e1a02005 	mov	r2, r5
   1bb14:	e1a03000 	mov	r3, r0
   1bb18:	e1a01006 	mov	r1, r6
   1bb1c:	e1a00004 	mov	r0, r4
   1bb20:	eb0000f4 	bl	1bef8 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)>
   1bb24:	e5943000 	ldr	r3, [r4]
   1bb28:	e1550003 	cmp	r5, r3
   1bb2c:	8a00001f 	bhi	1bbb0 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0xd8>
   1bb30:	e28d0010 	add	r0, sp, #16
   1bb34:	eb000c45 	bl	1ec50 <CString::CString()>
   1bb38:	e3550000 	cmp	r5, #0
   1bb3c:	0a00001f 	beq	1bbc0 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0xe8>
   1bb40:	e5940004 	ldr	r0, [r4, #4]
   1bb44:	e3500000 	cmp	r0, #0
   1bb48:	1a00004c 	bne	1bc80 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1a8>
   1bb4c:	e1a01006 	mov	r1, r6
   1bb50:	e28d0010 	add	r0, sp, #16
   1bb54:	eb000c87 	bl	1ed78 <CString::Append(char const*)>
   1bb58:	e59f115c 	ldr	r1, [pc, #348]	; 1bcbc <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1e4>
   1bb5c:	e28d0010 	add	r0, sp, #16
   1bb60:	eb000c84 	bl	1ed78 <CString::Append(char const*)>
   1bb64:	e1a0000d 	mov	r0, sp
   1bb68:	eb000c4f 	bl	1ecac <CString::operator char const*() const>
   1bb6c:	e1a01000 	mov	r1, r0
   1bb70:	e28d0010 	add	r0, sp, #16
   1bb74:	eb000c7f 	bl	1ed78 <CString::Append(char const*)>
   1bb78:	e59f1140 	ldr	r1, [pc, #320]	; 1bcc0 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1e8>
   1bb7c:	e28d0010 	add	r0, sp, #16
   1bb80:	eb000c7c 	bl	1ed78 <CString::Append(char const*)>
   1bb84:	e28d0010 	add	r0, sp, #16
   1bb88:	eb000c47 	bl	1ecac <CString::operator char const*() const>
   1bb8c:	e1a01000 	mov	r1, r0
   1bb90:	e1a00004 	mov	r0, r4
   1bb94:	eb000090 	bl	1bddc <CLogger::Write(char const*)>
   1bb98:	e28d0010 	add	r0, sp, #16
   1bb9c:	eb000bf9 	bl	1eb88 <CString::~CString()>
   1bba0:	e1a0000d 	mov	r0, sp
   1bba4:	eb000bf7 	bl	1eb88 <CString::~CString()>
   1bba8:	e28dd024 	add	sp, sp, #36	; 0x24
   1bbac:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   1bbb0:	e1a0000d 	mov	r0, sp
   1bbb4:	eb000bf3 	bl	1eb88 <CString::~CString()>
   1bbb8:	e28dd024 	add	sp, sp, #36	; 0x24
   1bbbc:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   1bbc0:	e59f10fc 	ldr	r1, [pc, #252]	; 1bcc4 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1ec>
   1bbc4:	e28d0010 	add	r0, sp, #16
   1bbc8:	eb000c3d 	bl	1ecc4 <CString::operator=(char const*)>
   1bbcc:	e5940004 	ldr	r0, [r4, #4]
   1bbd0:	e3500000 	cmp	r0, #0
   1bbd4:	0a00000d 	beq	1bc10 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x138>
   1bbd8:	eb001156 	bl	20138 <CTimer::GetTimeString()>
   1bbdc:	e2505000 	subs	r5, r0, #0
   1bbe0:	0a00000a 	beq	1bc10 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x138>
   1bbe4:	eb000c30 	bl	1ecac <CString::operator char const*() const>
   1bbe8:	e1a01000 	mov	r1, r0
   1bbec:	e28d0010 	add	r0, sp, #16
   1bbf0:	eb000c60 	bl	1ed78 <CString::Append(char const*)>
   1bbf4:	e28d0010 	add	r0, sp, #16
   1bbf8:	e59f10c8 	ldr	r1, [pc, #200]	; 1bcc8 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1f0>
   1bbfc:	eb000c5d 	bl	1ed78 <CString::Append(char const*)>
   1bc00:	e5953000 	ldr	r3, [r5]
   1bc04:	e1a00005 	mov	r0, r5
   1bc08:	e5933004 	ldr	r3, [r3, #4]
   1bc0c:	e12fff33 	blx	r3
   1bc10:	e1a01006 	mov	r1, r6
   1bc14:	e28d0010 	add	r0, sp, #16
   1bc18:	eb000c56 	bl	1ed78 <CString::Append(char const*)>
   1bc1c:	e59f1098 	ldr	r1, [pc, #152]	; 1bcbc <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1e4>
   1bc20:	e28d0010 	add	r0, sp, #16
   1bc24:	eb000c53 	bl	1ed78 <CString::Append(char const*)>
   1bc28:	e1a0000d 	mov	r0, sp
   1bc2c:	eb000c1e 	bl	1ecac <CString::operator char const*() const>
   1bc30:	e1a01000 	mov	r1, r0
   1bc34:	e28d0010 	add	r0, sp, #16
   1bc38:	eb000c4e 	bl	1ed78 <CString::Append(char const*)>
   1bc3c:	e59f1088 	ldr	r1, [pc, #136]	; 1bccc <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1f4>
   1bc40:	e28d0010 	add	r0, sp, #16
   1bc44:	eb000c4b 	bl	1ed78 <CString::Append(char const*)>
   1bc48:	e59f1070 	ldr	r1, [pc, #112]	; 1bcc0 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1e8>
   1bc4c:	e28d0010 	add	r0, sp, #16
   1bc50:	eb000c48 	bl	1ed78 <CString::Append(char const*)>
   1bc54:	e28d0010 	add	r0, sp, #16
   1bc58:	eb000c13 	bl	1ecac <CString::operator char const*() const>
   1bc5c:	e1a01000 	mov	r1, r0
   1bc60:	e1a00004 	mov	r0, r4
   1bc64:	eb00005c 	bl	1bddc <CLogger::Write(char const*)>
   1bc68:	e59430fc 	ldr	r3, [r4, #252]	; 0xfc
   1bc6c:	e3530000 	cmp	r3, #0
   1bc70:	0a000000 	beq	1bc78 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1a0>
   1bc74:	e12fff33 	blx	r3
   1bc78:	eb0003c7 	bl	1cb9c <CMultiCoreSupport::HaltAll()>
   1bc7c:	eaffffc5 	b	1bb98 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0xc0>
   1bc80:	eb00112c 	bl	20138 <CTimer::GetTimeString()>
   1bc84:	e2505000 	subs	r5, r0, #0
   1bc88:	0affffaf 	beq	1bb4c <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x74>
   1bc8c:	eb000c06 	bl	1ecac <CString::operator char const*() const>
   1bc90:	e1a01000 	mov	r1, r0
   1bc94:	e28d0010 	add	r0, sp, #16
   1bc98:	eb000c36 	bl	1ed78 <CString::Append(char const*)>
   1bc9c:	e28d0010 	add	r0, sp, #16
   1bca0:	e59f1020 	ldr	r1, [pc, #32]	; 1bcc8 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1f0>
   1bca4:	eb000c33 	bl	1ed78 <CString::Append(char const*)>
   1bca8:	e5953000 	ldr	r3, [r5]
   1bcac:	e1a00005 	mov	r0, r5
   1bcb0:	e5933004 	ldr	r3, [r3, #4]
   1bcb4:	e12fff33 	blx	r3
   1bcb8:	eaffffa3 	b	1bb4c <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x74>
   1bcbc:	0002938c 	.word	0x0002938c
   1bcc0:	00029388 	.word	0x00029388
   1bcc4:	00029378 	.word	0x00029378
   1bcc8:	00029390 	.word	0x00029390
   1bccc:	00029380 	.word	0x00029380

0001bcd0 <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)>:
   1bcd0:	e590c000 	ldr	ip, [r0]
   1bcd4:	e152000c 	cmp	r2, ip
   1bcd8:	812fff1e 	bxhi	lr
   1bcdc:	e92d4070 	push	{r4, r5, r6, lr}
   1bce0:	e3520000 	cmp	r2, #0
   1bce4:	e1a05003 	mov	r5, r3
   1bce8:	e24dd0c8 	sub	sp, sp, #200	; 0xc8
   1bcec:	e3a03000 	mov	r3, #0
   1bcf0:	e1a04000 	mov	r4, r0
   1bcf4:	e5cd3000 	strb	r3, [sp]
   1bcf8:	0a000014 	beq	1bd50 <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)+0x80>
   1bcfc:	e59f60c4 	ldr	r6, [pc, #196]	; 1bdc8 <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)+0xf8>
   1bd00:	e1a0000d 	mov	r0, sp
   1bd04:	eb00140b 	bl	20d38 <strcpy>
   1bd08:	e1a0000d 	mov	r0, sp
   1bd0c:	eb00139f 	bl	20b90 <strlen>
   1bd10:	e1a03000 	mov	r3, r0
   1bd14:	e2800002 	add	r0, r0, #2
   1bd18:	e1a01005 	mov	r1, r5
   1bd1c:	e05620b4 	ldrh	r2, [r6], #-4
   1bd20:	e08d0000 	add	r0, sp, r0
   1bd24:	e18d20b3 	strh	r2, [sp, r3]
   1bd28:	eb001402 	bl	20d38 <strcpy>
   1bd2c:	e1a0000d 	mov	r0, sp
   1bd30:	eb001396 	bl	20b90 <strlen>
   1bd34:	e1a0100d 	mov	r1, sp
   1bd38:	e1d630b0 	ldrh	r3, [r6]
   1bd3c:	e18d30b0 	strh	r3, [sp, r0]
   1bd40:	e1a00004 	mov	r0, r4
   1bd44:	eb000024 	bl	1bddc <CLogger::Write(char const*)>
   1bd48:	e28dd0c8 	add	sp, sp, #200	; 0xc8
   1bd4c:	e8bd8070 	pop	{r4, r5, r6, pc}
   1bd50:	e28d0004 	add	r0, sp, #4
   1bd54:	e3053b1b 	movw	r3, #23323	; 0x5b1b
   1bd58:	e3463d31 	movt	r3, #27953	; 0x6d31
   1bd5c:	e58d3000 	str	r3, [sp]
   1bd60:	e3096354 	movw	r6, #37716	; 0x9354
   1bd64:	e3406002 	movt	r6, #2
   1bd68:	eb0013f2 	bl	20d38 <strcpy>
   1bd6c:	e1a0000d 	mov	r0, sp
   1bd70:	eb001386 	bl	20b90 <strlen>
   1bd74:	e1a03000 	mov	r3, r0
   1bd78:	e2800002 	add	r0, r0, #2
   1bd7c:	e1d623b8 	ldrh	r2, [r6, #56]	; 0x38
   1bd80:	e1a01005 	mov	r1, r5
   1bd84:	e08d0000 	add	r0, sp, r0
   1bd88:	e18d20b3 	strh	r2, [sp, r3]
   1bd8c:	eb0013e9 	bl	20d38 <strcpy>
   1bd90:	e1a0000d 	mov	r0, sp
   1bd94:	eb00137d 	bl	20b90 <strlen>
   1bd98:	e1a03000 	mov	r3, r0
   1bd9c:	e2802004 	add	r2, r0, #4
   1bda0:	e596002c 	ldr	r0, [r6, #44]	; 0x2c
   1bda4:	e1d6c3b4 	ldrh	ip, [r6, #52]	; 0x34
   1bda8:	e1a0100d 	mov	r1, sp
   1bdac:	e78d0003 	str	r0, [sp, r3]
   1bdb0:	e1a00004 	mov	r0, r4
   1bdb4:	e18dc0b2 	strh	ip, [sp, r2]
   1bdb8:	eb000007 	bl	1bddc <CLogger::Write(char const*)>
   1bdbc:	eb000376 	bl	1cb9c <CMultiCoreSupport::HaltAll()>
   1bdc0:	e28dd0c8 	add	sp, sp, #200	; 0xc8
   1bdc4:	e8bd8070 	pop	{r4, r5, r6, pc}
   1bdc8:	0002938c 	.word	0x0002938c

0001bdcc <CLogger::Get()>:
   1bdcc:	e30b34c0 	movw	r3, #46272	; 0xb4c0
   1bdd0:	e3403002 	movt	r3, #2
   1bdd4:	e5930000 	ldr	r0, [r3]
   1bdd8:	e12fff1e 	bx	lr

0001bddc <CLogger::Write(char const*)>:
   1bddc:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   1bde0:	e1a04000 	mov	r4, r0
   1bde4:	e1a00001 	mov	r0, r1
   1bde8:	e1a05001 	mov	r5, r1
   1bdec:	eb001367 	bl	20b90 <strlen>
   1bdf0:	e5943008 	ldr	r3, [r4, #8]
   1bdf4:	e1a02000 	mov	r2, r0
   1bdf8:	e1a07000 	mov	r7, r0
   1bdfc:	e1a01005 	mov	r1, r5
   1be00:	e1a00003 	mov	r0, r3
   1be04:	e2846018 	add	r6, r4, #24
   1be08:	e5933000 	ldr	r3, [r3]
   1be0c:	e593300c 	ldr	r3, [r3, #12]
   1be10:	e12fff33 	blx	r3
   1be14:	e1a00006 	mov	r0, r6
   1be18:	eb000b24 	bl	1eab0 <CSpinLock::Acquire()>
   1be1c:	e0850007 	add	r0, r5, r7
   1be20:	e1500005 	cmp	r0, r5
   1be24:	0a00000f 	beq	1be68 <CLogger::Write(char const*)+0x8c>
   1be28:	e0d530d1 	ldrsb	r3, [r5], #1
   1be2c:	e353000d 	cmp	r3, #13
   1be30:	0afffffa 	beq	1be20 <CLogger::Write(char const*)+0x44>
   1be34:	e5942010 	ldr	r2, [r4, #16]
   1be38:	e594100c 	ldr	r1, [r4, #12]
   1be3c:	e7c13002 	strb	r3, [r1, r2]
   1be40:	e5943010 	ldr	r3, [r4, #16]
   1be44:	e5942014 	ldr	r2, [r4, #20]
   1be48:	e2833001 	add	r3, r3, #1
   1be4c:	e7ed3053 	ubfx	r3, r3, #0, #14
   1be50:	e5843010 	str	r3, [r4, #16]
   1be54:	e1530002 	cmp	r3, r2
   1be58:	1afffff0 	bne	1be20 <CLogger::Write(char const*)+0x44>
   1be5c:	e2433001 	sub	r3, r3, #1
   1be60:	e7ed3053 	ubfx	r3, r3, #0, #14
   1be64:	e5843010 	str	r3, [r4, #16]
   1be68:	e1a00006 	mov	r0, r6
   1be6c:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   1be70:	ea000b25 	b	1eb0c <CSpinLock::Release()>

0001be74 <CLogger::Read(void*, unsigned int)>:
   1be74:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   1be78:	e1a04000 	mov	r4, r0
   1be7c:	e2808018 	add	r8, r0, #24
   1be80:	e1a00008 	mov	r0, r8
   1be84:	e1a07002 	mov	r7, r2
   1be88:	e1a06001 	mov	r6, r1
   1be8c:	eb000b07 	bl	1eab0 <CSpinLock::Acquire()>
   1be90:	e1c421d0 	ldrd	r2, [r4, #16]
   1be94:	e1520003 	cmp	r2, r3
   1be98:	13a05000 	movne	r5, #0
   1be9c:	1a00000b 	bne	1bed0 <CLogger::Read(void*, unsigned int)+0x5c>
   1bea0:	ea000010 	b	1bee8 <CLogger::Read(void*, unsigned int)+0x74>
   1bea4:	e594100c 	ldr	r1, [r4, #12]
   1bea8:	e2855001 	add	r5, r5, #1
   1beac:	e19130d3 	ldrsb	r3, [r1, r3]
   1beb0:	e4c63001 	strb	r3, [r6], #1
   1beb4:	e5943014 	ldr	r3, [r4, #20]
   1beb8:	e5941010 	ldr	r1, [r4, #16]
   1bebc:	e2833001 	add	r3, r3, #1
   1bec0:	e7ed3053 	ubfx	r3, r3, #0, #14
   1bec4:	e5843014 	str	r3, [r4, #20]
   1bec8:	e1530001 	cmp	r3, r1
   1becc:	0a000001 	beq	1bed8 <CLogger::Read(void*, unsigned int)+0x64>
   1bed0:	e1550007 	cmp	r5, r7
   1bed4:	1afffff2 	bne	1bea4 <CLogger::Read(void*, unsigned int)+0x30>
   1bed8:	e1a00008 	mov	r0, r8
   1bedc:	eb000b0a 	bl	1eb0c <CSpinLock::Release()>
   1bee0:	e1a00005 	mov	r0, r5
   1bee4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1bee8:	e1a00008 	mov	r0, r8
   1beec:	e3e05000 	mvn	r5, #0
   1bef0:	eb000b05 	bl	1eb0c <CSpinLock::Release()>
   1bef4:	eafffff9 	b	1bee0 <CLogger::Read(void*, unsigned int)+0x6c>

0001bef8 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)>:
   1bef8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   1befc:	e1a05000 	mov	r5, r0
   1bf00:	e3a00f42 	mov	r0, #264	; 0x108
   1bf04:	e24dd008 	sub	sp, sp, #8
   1bf08:	e1a07003 	mov	r7, r3
   1bf0c:	e1a06001 	mov	r6, r1
   1bf10:	e1a08002 	mov	r8, r2
   1bf14:	eb001859 	bl	22080 <operator new(unsigned int)>
   1bf18:	e1a04000 	mov	r4, r0
   1bf1c:	e1a01006 	mov	r1, r6
   1bf20:	e3a02032 	mov	r2, #50	; 0x32
   1bf24:	e4c08001 	strb	r8, [r0], #1
   1bf28:	e3a06000 	mov	r6, #0
   1bf2c:	eb00138c 	bl	20d64 <strncpy>
   1bf30:	e1a01007 	mov	r1, r7
   1bf34:	e2840033 	add	r0, r4, #51	; 0x33
   1bf38:	e3a020c8 	mov	r2, #200	; 0xc8
   1bf3c:	e5c46032 	strb	r6, [r4, #50]	; 0x32
   1bf40:	eb001387 	bl	20d64 <strncpy>
   1bf44:	e5950004 	ldr	r0, [r5, #4]
   1bf48:	e5c460fa 	strb	r6, [r4, #250]	; 0xfa
   1bf4c:	e1500006 	cmp	r0, r6
   1bf50:	0a000004 	beq	1bf68 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x70>
   1bf54:	e28d2004 	add	r2, sp, #4
   1bf58:	e1a0100d 	mov	r1, sp
   1bf5c:	eb001013 	bl	1ffb0 <CTimer::GetLocalTime(unsigned int*, unsigned int*)>
   1bf60:	e1500006 	cmp	r0, r6
   1bf64:	1a000026 	bne	1c004 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x10c>
   1bf68:	e3a03000 	mov	r3, #0
   1bf6c:	e58430fc 	str	r3, [r4, #252]	; 0xfc
   1bf70:	e5843100 	str	r3, [r4, #256]	; 0x100
   1bf74:	e5843104 	str	r3, [r4, #260]	; 0x104
   1bf78:	e28560f0 	add	r6, r5, #240	; 0xf0
   1bf7c:	e1a00006 	mov	r0, r6
   1bf80:	eb000aca 	bl	1eab0 <CSpinLock::Acquire()>
   1bf84:	e59530e8 	ldr	r3, [r5, #232]	; 0xe8
   1bf88:	e2832008 	add	r2, r3, #8
   1bf8c:	e2833001 	add	r3, r3, #1
   1bf90:	e3530032 	cmp	r3, #50	; 0x32
   1bf94:	03a03000 	moveq	r3, #0
   1bf98:	e7854102 	str	r4, [r5, r2, lsl #2]
   1bf9c:	e59520ec 	ldr	r2, [r5, #236]	; 0xec
   1bfa0:	e58530e8 	str	r3, [r5, #232]	; 0xe8
   1bfa4:	e1520003 	cmp	r2, r3
   1bfa8:	0a000007 	beq	1bfcc <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xd4>
   1bfac:	e1a00006 	mov	r0, r6
   1bfb0:	eb000ad5 	bl	1eb0c <CSpinLock::Release()>
   1bfb4:	e59530f8 	ldr	r3, [r5, #248]	; 0xf8
   1bfb8:	e3530000 	cmp	r3, #0
   1bfbc:	0a000000 	beq	1bfc4 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xcc>
   1bfc0:	e12fff33 	blx	r3
   1bfc4:	e28dd008 	add	sp, sp, #8
   1bfc8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1bfcc:	e2832008 	add	r2, r3, #8
   1bfd0:	e2833001 	add	r3, r3, #1
   1bfd4:	e3530032 	cmp	r3, #50	; 0x32
   1bfd8:	e1a00006 	mov	r0, r6
   1bfdc:	03a03000 	moveq	r3, #0
   1bfe0:	e7954102 	ldr	r4, [r5, r2, lsl #2]
   1bfe4:	e58530ec 	str	r3, [r5, #236]	; 0xec
   1bfe8:	eb000ac7 	bl	1eb0c <CSpinLock::Release()>
   1bfec:	e3540000 	cmp	r4, #0
   1bff0:	0affffef 	beq	1bfb4 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xbc>
   1bff4:	e1a00004 	mov	r0, r4
   1bff8:	e3a01f42 	mov	r1, #264	; 0x108
   1bffc:	eb001823 	bl	22090 <operator delete(void*, unsigned int)>
   1c000:	eaffffeb 	b	1bfb4 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xbc>
   1c004:	e59d3004 	ldr	r3, [sp, #4]
   1c008:	e3012759 	movw	r2, #5977	; 0x1759
   1c00c:	e34d21b7 	movt	r2, #53687	; 0xd1b7
   1c010:	e59d1000 	ldr	r1, [sp]
   1c014:	e58410fc 	str	r1, [r4, #252]	; 0xfc
   1c018:	e0832392 	umull	r2, r3, r2, r3
   1c01c:	e5950004 	ldr	r0, [r5, #4]
   1c020:	e1a036a3 	lsr	r3, r3, #13
   1c024:	e5843100 	str	r3, [r4, #256]	; 0x100
   1c028:	eb000fbd 	bl	1ff24 <CTimer::GetTimeZone() const>
   1c02c:	e5840104 	str	r0, [r4, #260]	; 0x104
   1c030:	eaffffd0 	b	1bf78 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x80>

0001c034 <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)>:
   1c034:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1c038:	e1a05000 	mov	r5, r0
   1c03c:	e28090f0 	add	r9, r0, #240	; 0xf0
   1c040:	e1a00009 	mov	r0, r9
   1c044:	e1a08002 	mov	r8, r2
   1c048:	e1a06003 	mov	r6, r3
   1c04c:	e1a07001 	mov	r7, r1
   1c050:	eb000a96 	bl	1eab0 <CSpinLock::Acquire()>
   1c054:	e1c52ed8 	ldrd	r2, [r5, #232]	; 0xe8
   1c058:	e1520003 	cmp	r2, r3
   1c05c:	0a00001d 	beq	1c0d8 <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)+0xa4>
   1c060:	e2832008 	add	r2, r3, #8
   1c064:	e2833001 	add	r3, r3, #1
   1c068:	e3530032 	cmp	r3, #50	; 0x32
   1c06c:	e1a00009 	mov	r0, r9
   1c070:	03a03000 	moveq	r3, #0
   1c074:	e7954102 	ldr	r4, [r5, r2, lsl #2]
   1c078:	e58530ec 	str	r3, [r5, #236]	; 0xec
   1c07c:	eb000aa2 	bl	1eb0c <CSpinLock::Release()>
   1c080:	e1a01004 	mov	r1, r4
   1c084:	e1a00008 	mov	r0, r8
   1c088:	e4d13001 	ldrb	r3, [r1], #1
   1c08c:	e5c73000 	strb	r3, [r7]
   1c090:	eb001328 	bl	20d38 <strcpy>
   1c094:	e2841033 	add	r1, r4, #51	; 0x33
   1c098:	e1a00006 	mov	r0, r6
   1c09c:	eb001325 	bl	20d38 <strcpy>
   1c0a0:	e59d2020 	ldr	r2, [sp, #32]
   1c0a4:	e59430fc 	ldr	r3, [r4, #252]	; 0xfc
   1c0a8:	e1a00004 	mov	r0, r4
   1c0ac:	e3a01f42 	mov	r1, #264	; 0x108
   1c0b0:	e5823000 	str	r3, [r2]
   1c0b4:	e59d2024 	ldr	r2, [sp, #36]	; 0x24
   1c0b8:	e5943100 	ldr	r3, [r4, #256]	; 0x100
   1c0bc:	e5823000 	str	r3, [r2]
   1c0c0:	e59d2028 	ldr	r2, [sp, #40]	; 0x28
   1c0c4:	e5943104 	ldr	r3, [r4, #260]	; 0x104
   1c0c8:	e5823000 	str	r3, [r2]
   1c0cc:	eb0017ef 	bl	22090 <operator delete(void*, unsigned int)>
   1c0d0:	e3a00001 	mov	r0, #1
   1c0d4:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1c0d8:	e1a00009 	mov	r0, r9
   1c0dc:	eb000a8a 	bl	1eb0c <CSpinLock::Release()>
   1c0e0:	e3a00000 	mov	r0, #0
   1c0e4:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}

0001c0e8 <CLogger::RegisterEventNotificationHandler(void (*)())>:
   1c0e8:	e58010f8 	str	r1, [r0, #248]	; 0xf8
   1c0ec:	e12fff1e 	bx	lr

0001c0f0 <CLogger::RegisterPanicHandler(void (*)())>:
   1c0f0:	e58010fc 	str	r1, [r0, #252]	; 0xfc
   1c0f4:	e12fff1e 	bx	lr

0001c0f8 <CMachineInfo::CMachineInfo()>:
   1c0f8:	e92d4810 	push	{r4, fp, lr}
   1c0fc:	e28db008 	add	fp, sp, #8
   1c100:	e24dd04c 	sub	sp, sp, #76	; 0x4c
   1c104:	e50b0048 	str	r0, [fp, #-72]	; 0xffffffb8
   1c108:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   1c10c:	e3a02000 	mov	r2, #0
   1c110:	e5832000 	str	r2, [r3]
   1c114:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   1c118:	e3a0200f 	mov	r2, #15
   1c11c:	e5c32004 	strb	r2, [r3, #4]
   1c120:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   1c124:	e3a02000 	mov	r2, #0
   1c128:	e5832008 	str	r2, [r3, #8]
   1c12c:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   1c130:	e3a02000 	mov	r2, #0
   1c134:	e583200c 	str	r2, [r3, #12]
   1c138:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   1c13c:	e3a02003 	mov	r2, #3
   1c140:	e5c32010 	strb	r2, [r3, #16]
   1c144:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   1c148:	e3a02000 	mov	r2, #0
   1c14c:	e5832014 	str	r2, [r3, #20]
   1c150:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   1c154:	e3012f35 	movw	r2, #7989	; 0x1f35
   1c158:	e1c321b8 	strh	r2, [r3, #24]
   1c15c:	e30b34c4 	movw	r3, #46276	; 0xb4c4
   1c160:	e3403002 	movt	r3, #2
   1c164:	e5933000 	ldr	r3, [r3]
   1c168:	e3530000 	cmp	r3, #0
   1c16c:	0a000024 	beq	1c204 <CMachineInfo::CMachineInfo()+0x10c>
   1c170:	e30b34c4 	movw	r3, #46276	; 0xb4c4
   1c174:	e3403002 	movt	r3, #2
   1c178:	e5933000 	ldr	r3, [r3]
   1c17c:	e5932000 	ldr	r2, [r3]
   1c180:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   1c184:	e5832000 	str	r2, [r3]
   1c188:	e30b34c4 	movw	r3, #46276	; 0xb4c4
   1c18c:	e3403002 	movt	r3, #2
   1c190:	e5933000 	ldr	r3, [r3]
   1c194:	e5d32004 	ldrb	r2, [r3, #4]
   1c198:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   1c19c:	e5c32004 	strb	r2, [r3, #4]
   1c1a0:	e30b34c4 	movw	r3, #46276	; 0xb4c4
   1c1a4:	e3403002 	movt	r3, #2
   1c1a8:	e5933000 	ldr	r3, [r3]
   1c1ac:	e5932008 	ldr	r2, [r3, #8]
   1c1b0:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   1c1b4:	e5832008 	str	r2, [r3, #8]
   1c1b8:	e30b34c4 	movw	r3, #46276	; 0xb4c4
   1c1bc:	e3403002 	movt	r3, #2
   1c1c0:	e5933000 	ldr	r3, [r3]
   1c1c4:	e593200c 	ldr	r2, [r3, #12]
   1c1c8:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   1c1cc:	e583200c 	str	r2, [r3, #12]
   1c1d0:	e30b34c4 	movw	r3, #46276	; 0xb4c4
   1c1d4:	e3403002 	movt	r3, #2
   1c1d8:	e5933000 	ldr	r3, [r3]
   1c1dc:	e5d32010 	ldrb	r2, [r3, #16]
   1c1e0:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   1c1e4:	e5c32010 	strb	r2, [r3, #16]
   1c1e8:	e30b34c4 	movw	r3, #46276	; 0xb4c4
   1c1ec:	e3403002 	movt	r3, #2
   1c1f0:	e5933000 	ldr	r3, [r3]
   1c1f4:	e5932014 	ldr	r2, [r3, #20]
   1c1f8:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   1c1fc:	e5832014 	str	r2, [r3, #20]
   1c200:	ea0000ca 	b	1c530 <CMachineInfo::CMachineInfo()+0x438>
   1c204:	e30b34c4 	movw	r3, #46276	; 0xb4c4
   1c208:	e3403002 	movt	r3, #2
   1c20c:	e51b2048 	ldr	r2, [fp, #-72]	; 0xffffffb8
   1c210:	e5832000 	str	r2, [r3]
   1c214:	e24b3020 	sub	r3, fp, #32
   1c218:	e3a01001 	mov	r1, #1
   1c21c:	e1a00003 	mov	r0, r3
   1c220:	ebfff4af 	bl	194e4 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   1c224:	e24b2030 	sub	r2, fp, #48	; 0x30
   1c228:	e24b0020 	sub	r0, fp, #32
   1c22c:	e3a03000 	mov	r3, #0
   1c230:	e58d3000 	str	r3, [sp]
   1c234:	e3a03010 	mov	r3, #16
   1c238:	e3a01001 	mov	r1, #1
   1c23c:	e3401006 	movt	r1, #6
   1c240:	ebfff4f4 	bl	19618 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   1c244:	e1a03000 	mov	r3, r0
   1c248:	e3530000 	cmp	r3, #0
   1c24c:	0a000003 	beq	1c260 <CMachineInfo::CMachineInfo()+0x168>
   1c250:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
   1c254:	e6ff2073 	uxth	r2, r3
   1c258:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   1c25c:	e1c321b8 	strh	r2, [r3, #24]
   1c260:	e24b2040 	sub	r2, fp, #64	; 0x40
   1c264:	e24b0020 	sub	r0, fp, #32
   1c268:	e3a03000 	mov	r3, #0
   1c26c:	e58d3000 	str	r3, [sp]
   1c270:	e3a03010 	mov	r3, #16
   1c274:	e3a01002 	mov	r1, #2
   1c278:	e3401001 	movt	r1, #1
   1c27c:	ebfff4e5 	bl	19618 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   1c280:	e1a03000 	mov	r3, r0
   1c284:	e2233001 	eor	r3, r3, #1
   1c288:	e6ef3073 	uxtb	r3, r3
   1c28c:	e3530000 	cmp	r3, #0
   1c290:	0a000001 	beq	1c29c <CMachineInfo::CMachineInfo()+0x1a4>
   1c294:	e3a04000 	mov	r4, #0
   1c298:	ea00009f 	b	1c51c <CMachineInfo::CMachineInfo()+0x424>
   1c29c:	e51b2034 	ldr	r2, [fp, #-52]	; 0xffffffcc
   1c2a0:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   1c2a4:	e5832000 	str	r2, [r3]
   1c2a8:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   1c2ac:	e5933000 	ldr	r3, [r3]
   1c2b0:	e2033502 	and	r3, r3, #8388608	; 0x800000
   1c2b4:	e3530000 	cmp	r3, #0
   1c2b8:	0a000061 	beq	1c444 <CMachineInfo::CMachineInfo()+0x34c>
   1c2bc:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   1c2c0:	e5933000 	ldr	r3, [r3]
   1c2c4:	e1a03223 	lsr	r3, r3, #4
   1c2c8:	e6ef3073 	uxtb	r3, r3
   1c2cc:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
   1c2d0:	e3a03000 	mov	r3, #0
   1c2d4:	e50b3010 	str	r3, [fp, #-16]
   1c2d8:	e51b3010 	ldr	r3, [fp, #-16]
   1c2dc:	e353000c 	cmp	r3, #12
   1c2e0:	8a00000e 	bhi	1c320 <CMachineInfo::CMachineInfo()+0x228>
   1c2e4:	e30b3260 	movw	r3, #45664	; 0xb260
   1c2e8:	e3403002 	movt	r3, #2
   1c2ec:	e51b2010 	ldr	r2, [fp, #-16]
   1c2f0:	e3a0100c 	mov	r1, #12
   1c2f4:	e0020291 	mul	r2, r1, r2
   1c2f8:	e0833002 	add	r3, r3, r2
   1c2fc:	e5933000 	ldr	r3, [r3]
   1c300:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
   1c304:	e1520003 	cmp	r2, r3
   1c308:	0a000003 	beq	1c31c <CMachineInfo::CMachineInfo()+0x224>
   1c30c:	e51b3010 	ldr	r3, [fp, #-16]
   1c310:	e2833001 	add	r3, r3, #1
   1c314:	e50b3010 	str	r3, [fp, #-16]
   1c318:	eaffffee 	b	1c2d8 <CMachineInfo::CMachineInfo()+0x1e0>
   1c31c:	e320f000 	nop	{0}
   1c320:	e51b3010 	ldr	r3, [fp, #-16]
   1c324:	e353000c 	cmp	r3, #12
   1c328:	9a000001 	bls	1c334 <CMachineInfo::CMachineInfo()+0x23c>
   1c32c:	e3a04000 	mov	r4, #0
   1c330:	ea000079 	b	1c51c <CMachineInfo::CMachineInfo()+0x424>
   1c334:	e30b3260 	movw	r3, #45664	; 0xb260
   1c338:	e3403002 	movt	r3, #2
   1c33c:	e51b2010 	ldr	r2, [fp, #-16]
   1c340:	e3a0100c 	mov	r1, #12
   1c344:	e0020291 	mul	r2, r1, r2
   1c348:	e0833002 	add	r3, r3, r2
   1c34c:	e2833004 	add	r3, r3, #4
   1c350:	e5d32000 	ldrb	r2, [r3]
   1c354:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   1c358:	e5c32004 	strb	r2, [r3, #4]
   1c35c:	e30b3260 	movw	r3, #45664	; 0xb260
   1c360:	e3403002 	movt	r3, #2
   1c364:	e51b2010 	ldr	r2, [fp, #-16]
   1c368:	e3a0100c 	mov	r1, #12
   1c36c:	e0020291 	mul	r2, r1, r2
   1c370:	e0833002 	add	r3, r3, r2
   1c374:	e2833008 	add	r3, r3, #8
   1c378:	e5932000 	ldr	r2, [r3]
   1c37c:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   1c380:	e5832008 	str	r2, [r3, #8]
   1c384:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   1c388:	e5933000 	ldr	r3, [r3]
   1c38c:	e203300f 	and	r3, r3, #15
   1c390:	e2832001 	add	r2, r3, #1
   1c394:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   1c398:	e583200c 	str	r2, [r3, #12]
   1c39c:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   1c3a0:	e5933000 	ldr	r3, [r3]
   1c3a4:	e1a03623 	lsr	r3, r3, #12
   1c3a8:	e6ef3073 	uxtb	r3, r3
   1c3ac:	e203300f 	and	r3, r3, #15
   1c3b0:	e6ef2073 	uxtb	r2, r3
   1c3b4:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   1c3b8:	e5c32010 	strb	r2, [r3, #16]
   1c3bc:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   1c3c0:	e5933000 	ldr	r3, [r3]
   1c3c4:	e1a03a23 	lsr	r3, r3, #20
   1c3c8:	e2033007 	and	r3, r3, #7
   1c3cc:	e3a02c01 	mov	r2, #256	; 0x100
   1c3d0:	e1a03312 	lsl	r3, r2, r3
   1c3d4:	e1a02003 	mov	r2, r3
   1c3d8:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   1c3dc:	e5832014 	str	r2, [r3, #20]
   1c3e0:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   1c3e4:	e5d33010 	ldrb	r3, [r3, #16]
   1c3e8:	e3530002 	cmp	r3, #2
   1c3ec:	9a000002 	bls	1c3fc <CMachineInfo::CMachineInfo()+0x304>
   1c3f0:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   1c3f4:	e3a02003 	mov	r2, #3
   1c3f8:	e5c32010 	strb	r2, [r3, #16]
   1c3fc:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   1c400:	e5d33004 	ldrb	r3, [r3, #4]
   1c404:	e3530003 	cmp	r3, #3
   1c408:	1a000042 	bne	1c518 <CMachineInfo::CMachineInfo()+0x420>
   1c40c:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   1c410:	e5933014 	ldr	r3, [r3, #20]
   1c414:	e3530c01 	cmp	r3, #256	; 0x100
   1c418:	1a00003e 	bne	1c518 <CMachineInfo::CMachineInfo()+0x420>
   1c41c:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   1c420:	e593300c 	ldr	r3, [r3, #12]
   1c424:	e3530001 	cmp	r3, #1
   1c428:	1a000001 	bne	1c434 <CMachineInfo::CMachineInfo()+0x33c>
   1c42c:	e3a02001 	mov	r2, #1
   1c430:	ea000000 	b	1c438 <CMachineInfo::CMachineInfo()+0x340>
   1c434:	e3a02002 	mov	r2, #2
   1c438:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   1c43c:	e5c32004 	strb	r2, [r3, #4]
   1c440:	ea000034 	b	1c518 <CMachineInfo::CMachineInfo()+0x420>
   1c444:	e3a03000 	mov	r3, #0
   1c448:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
   1c44c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   1c450:	e3530010 	cmp	r3, #16
   1c454:	8a00000c 	bhi	1c48c <CMachineInfo::CMachineInfo()+0x394>
   1c458:	e30b3150 	movw	r3, #45392	; 0xb150
   1c45c:	e3403002 	movt	r3, #2
   1c460:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   1c464:	e7932202 	ldr	r2, [r3, r2, lsl #4]
   1c468:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   1c46c:	e5933000 	ldr	r3, [r3]
   1c470:	e1520003 	cmp	r2, r3
   1c474:	0a000003 	beq	1c488 <CMachineInfo::CMachineInfo()+0x390>
   1c478:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   1c47c:	e2833001 	add	r3, r3, #1
   1c480:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
   1c484:	eafffff0 	b	1c44c <CMachineInfo::CMachineInfo()+0x354>
   1c488:	e320f000 	nop	{0}
   1c48c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   1c490:	e3530010 	cmp	r3, #16
   1c494:	9a000001 	bls	1c4a0 <CMachineInfo::CMachineInfo()+0x3a8>
   1c498:	e3a04000 	mov	r4, #0
   1c49c:	ea00001e 	b	1c51c <CMachineInfo::CMachineInfo()+0x424>
   1c4a0:	e30b2150 	movw	r2, #45392	; 0xb150
   1c4a4:	e3402002 	movt	r2, #2
   1c4a8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   1c4ac:	e1a03203 	lsl	r3, r3, #4
   1c4b0:	e0823003 	add	r3, r2, r3
   1c4b4:	e5d32004 	ldrb	r2, [r3, #4]
   1c4b8:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   1c4bc:	e5c32004 	strb	r2, [r3, #4]
   1c4c0:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   1c4c4:	e3a02001 	mov	r2, #1
   1c4c8:	e5832008 	str	r2, [r3, #8]
   1c4cc:	e30b2150 	movw	r2, #45392	; 0xb150
   1c4d0:	e3402002 	movt	r2, #2
   1c4d4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   1c4d8:	e1a03203 	lsl	r3, r3, #4
   1c4dc:	e0823003 	add	r3, r2, r3
   1c4e0:	e5932008 	ldr	r2, [r3, #8]
   1c4e4:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   1c4e8:	e583200c 	str	r2, [r3, #12]
   1c4ec:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   1c4f0:	e3a02000 	mov	r2, #0
   1c4f4:	e5c32010 	strb	r2, [r3, #16]
   1c4f8:	e30b2150 	movw	r2, #45392	; 0xb150
   1c4fc:	e3402002 	movt	r2, #2
   1c500:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   1c504:	e1a03203 	lsl	r3, r3, #4
   1c508:	e0823003 	add	r3, r2, r3
   1c50c:	e593200c 	ldr	r2, [r3, #12]
   1c510:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   1c514:	e5832014 	str	r2, [r3, #20]
   1c518:	e3a04001 	mov	r4, #1
   1c51c:	e24b3020 	sub	r3, fp, #32
   1c520:	e1a00003 	mov	r0, r3
   1c524:	ebfff3f5 	bl	19500 <CBcmPropertyTags::~CBcmPropertyTags()>
   1c528:	e3540001 	cmp	r4, #1
   1c52c:	e320f000 	nop	{0}
   1c530:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   1c534:	e1a00003 	mov	r0, r3
   1c538:	e24bd008 	sub	sp, fp, #8
   1c53c:	e8bd8810 	pop	{r4, fp, pc}

0001c540 <CMachineInfo::~CMachineInfo()>:
   1c540:	e30b34c4 	movw	r3, #46276	; 0xb4c4
   1c544:	e3403002 	movt	r3, #2
   1c548:	e3a0100f 	mov	r1, #15
   1c54c:	e5c01004 	strb	r1, [r0, #4]
   1c550:	e5932000 	ldr	r2, [r3]
   1c554:	e1520000 	cmp	r2, r0
   1c558:	03a02000 	moveq	r2, #0
   1c55c:	05832000 	streq	r2, [r3]
   1c560:	e12fff1e 	bx	lr

0001c564 <CMachineInfo::GetMachineModel() const>:
   1c564:	e5d00004 	ldrb	r0, [r0, #4]
   1c568:	e12fff1e 	bx	lr

0001c56c <CMachineInfo::GetMachineName() const>:
   1c56c:	e5d02004 	ldrb	r2, [r0, #4]
   1c570:	e30b3150 	movw	r3, #45392	; 0xb150
   1c574:	e3403002 	movt	r3, #2
   1c578:	e0833102 	add	r3, r3, r2, lsl #2
   1c57c:	e59301ac 	ldr	r0, [r3, #428]	; 0x1ac
   1c580:	e12fff1e 	bx	lr

0001c584 <CMachineInfo::GetModelMajor() const>:
   1c584:	e5900008 	ldr	r0, [r0, #8]
   1c588:	e12fff1e 	bx	lr

0001c58c <CMachineInfo::GetModelRevision() const>:
   1c58c:	e590000c 	ldr	r0, [r0, #12]
   1c590:	e12fff1e 	bx	lr

0001c594 <CMachineInfo::GetSoCType() const>:
   1c594:	e5d00010 	ldrb	r0, [r0, #16]
   1c598:	e12fff1e 	bx	lr

0001c59c <CMachineInfo::GetRAMSize() const>:
   1c59c:	e5900014 	ldr	r0, [r0, #20]
   1c5a0:	e12fff1e 	bx	lr

0001c5a4 <CMachineInfo::GetSoCName() const>:
   1c5a4:	e5d02010 	ldrb	r2, [r0, #16]
   1c5a8:	e30b3150 	movw	r3, #45392	; 0xb150
   1c5ac:	e3403002 	movt	r3, #2
   1c5b0:	e0833102 	add	r3, r3, r2, lsl #2
   1c5b4:	e59301ec 	ldr	r0, [r3, #492]	; 0x1ec
   1c5b8:	e12fff1e 	bx	lr

0001c5bc <CMachineInfo::GetRevisionRaw() const>:
   1c5bc:	e5900000 	ldr	r0, [r0]
   1c5c0:	e12fff1e 	bx	lr

0001c5c4 <CMachineInfo::GetActLEDInfo() const>:
   1c5c4:	e5d02004 	ldrb	r2, [r0, #4]
   1c5c8:	e30b3150 	movw	r3, #45392	; 0xb150
   1c5cc:	e3403002 	movt	r3, #2
   1c5d0:	e0833102 	add	r3, r3, r2, lsl #2
   1c5d4:	e59301fc 	ldr	r0, [r3, #508]	; 0x1fc
   1c5d8:	e12fff1e 	bx	lr

0001c5dc <CMachineInfo::GetClockRate(unsigned int) const>:
   1c5dc:	e92d4030 	push	{r4, r5, lr}
   1c5e0:	e1a04001 	mov	r4, r1
   1c5e4:	e1a05000 	mov	r5, r0
   1c5e8:	e24dd02c 	sub	sp, sp, #44	; 0x2c
   1c5ec:	e3a01000 	mov	r1, #0
   1c5f0:	e28d000c 	add	r0, sp, #12
   1c5f4:	ebfff3ba 	bl	194e4 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   1c5f8:	e3a03004 	mov	r3, #4
   1c5fc:	e58d3000 	str	r3, [sp]
   1c600:	e3a03014 	mov	r3, #20
   1c604:	e28d000c 	add	r0, sp, #12
   1c608:	e3a01002 	mov	r1, #2
   1c60c:	e3401003 	movt	r1, #3
   1c610:	e08d2003 	add	r2, sp, r3
   1c614:	e58d4020 	str	r4, [sp, #32]
   1c618:	ebfff3fe 	bl	19618 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   1c61c:	e3500000 	cmp	r0, #0
   1c620:	159d4024 	ldrne	r4, [sp, #36]	; 0x24
   1c624:	1a00000a 	bne	1c654 <CMachineInfo::GetClockRate(unsigned int) const+0x78>
   1c628:	e3540002 	cmp	r4, #2
   1c62c:	0a00000d 	beq	1c668 <CMachineInfo::GetClockRate(unsigned int) const+0x8c>
   1c630:	e3540004 	cmp	r4, #4
   1c634:	0a000011 	beq	1c680 <CMachineInfo::GetClockRate(unsigned int) const+0xa4>
   1c638:	e3540001 	cmp	r4, #1
   1c63c:	0a00000c 	beq	1c674 <CMachineInfo::GetClockRate(unsigned int) const+0x98>
   1c640:	e59f1058 	ldr	r1, [pc, #88]	; 1c6a0 <CMachineInfo::GetClockRate(unsigned int) const+0xc4>
   1c644:	e1a04000 	mov	r4, r0
   1c648:	e3a02f4e 	mov	r2, #312	; 0x138
   1c64c:	e2810010 	add	r0, r1, #16
   1c650:	ebfff37f 	bl	19454 <assertion_failed>
   1c654:	e28d000c 	add	r0, sp, #12
   1c658:	ebfff3a8 	bl	19500 <CBcmPropertyTags::~CBcmPropertyTags()>
   1c65c:	e1a00004 	mov	r0, r4
   1c660:	e28dd02c 	add	sp, sp, #44	; 0x2c
   1c664:	e8bd8030 	pop	{r4, r5, pc}
   1c668:	e3a04b1b 	mov	r4, #27648	; 0x6c00
   1c66c:	e34042dc 	movt	r4, #732	; 0x2dc
   1c670:	eafffff7 	b	1c654 <CMachineInfo::GetClockRate(unsigned int) const+0x78>
   1c674:	e3a04ce1 	mov	r4, #57600	; 0xe100
   1c678:	e34045f5 	movt	r4, #1525	; 0x5f5
   1c67c:	eafffff4 	b	1c654 <CMachineInfo::GetClockRate(unsigned int) const+0x78>
   1c680:	e5953008 	ldr	r3, [r5, #8]
   1c684:	e3a00ca3 	mov	r0, #41728	; 0xa300
   1c688:	e34101e1 	movt	r0, #4577	; 0x11e1
   1c68c:	e3530002 	cmp	r3, #2
   1c690:	e30b4280 	movw	r4, #45696	; 0xb280
   1c694:	e3404ee6 	movt	r4, #3814	; 0xee6
   1c698:	81a04000 	movhi	r4, r0
   1c69c:	eaffffec 	b	1c654 <CMachineInfo::GetClockRate(unsigned int) const+0x78>
   1c6a0:	000294ec 	.word	0x000294ec

0001c6a4 <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const>:
   1c6a4:	e3510036 	cmp	r1, #54	; 0x36
   1c6a8:	0a00000d 	beq	1c6e4 <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const+0x40>
   1c6ac:	e3510037 	cmp	r1, #55	; 0x37
   1c6b0:	1a000004 	bne	1c6c8 <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const+0x24>
   1c6b4:	e5d03004 	ldrb	r3, [r0, #4]
   1c6b8:	e3530003 	cmp	r3, #3
   1c6bc:	83a00028 	movhi	r0, #40	; 0x28
   1c6c0:	93a0002d 	movls	r0, #45	; 0x2d
   1c6c4:	e12fff1e 	bx	lr
   1c6c8:	e59f103c 	ldr	r1, [pc, #60]	; 1c70c <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const+0x68>
   1c6cc:	e3002171 	movw	r2, #369	; 0x171
   1c6d0:	e92d4010 	push	{r4, lr}
   1c6d4:	e2810010 	add	r0, r1, #16
   1c6d8:	ebfff35d 	bl	19454 <assertion_failed>
   1c6dc:	e3a00000 	mov	r0, #0
   1c6e0:	e8bd8010 	pop	{r4, pc}
   1c6e4:	e5d03004 	ldrb	r3, [r0, #4]
   1c6e8:	e3530003 	cmp	r3, #3
   1c6ec:	9a000004 	bls	1c704 <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const+0x60>
   1c6f0:	e5903008 	ldr	r3, [r0, #8]
   1c6f4:	e3530003 	cmp	r3, #3
   1c6f8:	33a0002d 	movcc	r0, #45	; 0x2d
   1c6fc:	23a00029 	movcs	r0, #41	; 0x29
   1c700:	e12fff1e 	bx	lr
   1c704:	e3a00028 	mov	r0, #40	; 0x28
   1c708:	e12fff1e 	bx	lr
   1c70c:	000294ec 	.word	0x000294ec

0001c710 <CMachineInfo::GetDevice(TDeviceId) const>:
   1c710:	e3510000 	cmp	r1, #0
   1c714:	1a000003 	bne	1c728 <CMachineInfo::GetDevice(TDeviceId) const+0x18>
   1c718:	e5d00004 	ldrb	r0, [r0, #4]
   1c71c:	e2500001 	subs	r0, r0, #1
   1c720:	13a00001 	movne	r0, #1
   1c724:	e12fff1e 	bx	lr
   1c728:	e59f1014 	ldr	r1, [pc, #20]	; 1c744 <CMachineInfo::GetDevice(TDeviceId) const+0x34>
   1c72c:	e300218a 	movw	r2, #394	; 0x18a
   1c730:	e92d4010 	push	{r4, lr}
   1c734:	e2810010 	add	r0, r1, #16
   1c738:	ebfff345 	bl	19454 <assertion_failed>
   1c73c:	e3a00000 	mov	r0, #0
   1c740:	e8bd8010 	pop	{r4, pc}
   1c744:	000294ec 	.word	0x000294ec

0001c748 <CMachineInfo::AllocateDMAChannel(unsigned int)>:
   1c748:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   1c74c:	e30b54c4 	movw	r5, #46276	; 0xb4c4
   1c750:	e3405002 	movt	r5, #2
   1c754:	e1a04000 	mov	r4, r0
   1c758:	e1a06001 	mov	r6, r1
   1c75c:	e59f70cc 	ldr	r7, [pc, #204]	; 1c830 <CMachineInfo::AllocateDMAChannel(unsigned int)+0xe8>
   1c760:	e5953000 	ldr	r3, [r5]
   1c764:	ea000002 	b	1c774 <CMachineInfo::AllocateDMAChannel(unsigned int)+0x2c>
   1c768:	e1540003 	cmp	r4, r3
   1c76c:	0a000009 	beq	1c798 <CMachineInfo::AllocateDMAChannel(unsigned int)+0x50>
   1c770:	e1a04003 	mov	r4, r3
   1c774:	e3530000 	cmp	r3, #0
   1c778:	1afffffa 	bne	1c768 <CMachineInfo::AllocateDMAChannel(unsigned int)+0x20>
   1c77c:	e3002193 	movw	r2, #403	; 0x193
   1c780:	e1a01007 	mov	r1, r7
   1c784:	e59f00a8 	ldr	r0, [pc, #168]	; 1c834 <CMachineInfo::AllocateDMAChannel(unsigned int)+0xec>
   1c788:	ebfff331 	bl	19454 <assertion_failed>
   1c78c:	e5953000 	ldr	r3, [r5]
   1c790:	e1540003 	cmp	r4, r3
   1c794:	1afffff5 	bne	1c770 <CMachineInfo::AllocateDMAChannel(unsigned int)+0x28>
   1c798:	e3d6300f 	bics	r3, r6, #15
   1c79c:	1a00000a 	bne	1c7cc <CMachineInfo::AllocateDMAChannel(unsigned int)+0x84>
   1c7a0:	e356000c 	cmp	r6, #12
   1c7a4:	8a000018 	bhi	1c80c <CMachineInfo::AllocateDMAChannel(unsigned int)+0xc4>
   1c7a8:	e1d431b8 	ldrh	r3, [r4, #24]
   1c7ac:	e1a02653 	asr	r2, r3, r6
   1c7b0:	e3120001 	tst	r2, #1
   1c7b4:	0a00000d 	beq	1c7f0 <CMachineInfo::AllocateDMAChannel(unsigned int)+0xa8>
   1c7b8:	e3a02001 	mov	r2, #1
   1c7bc:	e1a00006 	mov	r0, r6
   1c7c0:	e1c36612 	bic	r6, r3, r2, lsl r6
   1c7c4:	e1c461b8 	strh	r6, [r4, #24]
   1c7c8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1c7cc:	e3560081 	cmp	r6, #129	; 0x81
   1c7d0:	e1d411b8 	ldrh	r1, [r4, #24]
   1c7d4:	13a0300c 	movne	r3, #12
   1c7d8:	03a03006 	moveq	r3, #6
   1c7dc:	e1a02351 	asr	r2, r1, r3
   1c7e0:	e3120001 	tst	r2, #1
   1c7e4:	1a000003 	bne	1c7f8 <CMachineInfo::AllocateDMAChannel(unsigned int)+0xb0>
   1c7e8:	e2533001 	subs	r3, r3, #1
   1c7ec:	2afffffa 	bcs	1c7dc <CMachineInfo::AllocateDMAChannel(unsigned int)+0x94>
   1c7f0:	e3a00080 	mov	r0, #128	; 0x80
   1c7f4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1c7f8:	e3a02001 	mov	r2, #1
   1c7fc:	e1a00003 	mov	r0, r3
   1c800:	e1c13312 	bic	r3, r1, r2, lsl r3
   1c804:	e1c431b8 	strh	r3, [r4, #24]
   1c808:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1c80c:	e59f101c 	ldr	r1, [pc, #28]	; 1c830 <CMachineInfo::AllocateDMAChannel(unsigned int)+0xe8>
   1c810:	e3a02f67 	mov	r2, #412	; 0x19c
   1c814:	e2810024 	add	r0, r1, #36	; 0x24
   1c818:	ebfff30d 	bl	19454 <assertion_failed>
   1c81c:	e1d431b8 	ldrh	r3, [r4, #24]
   1c820:	e1a02653 	asr	r2, r3, r6
   1c824:	e3120001 	tst	r2, #1
   1c828:	1affffe2 	bne	1c7b8 <CMachineInfo::AllocateDMAChannel(unsigned int)+0x70>
   1c82c:	eaffffef 	b	1c7f0 <CMachineInfo::AllocateDMAChannel(unsigned int)+0xa8>
   1c830:	000294ec 	.word	0x000294ec
   1c834:	00029500 	.word	0x00029500

0001c838 <CMachineInfo::FreeDMAChannel(unsigned int)>:
   1c838:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   1c83c:	e30b54c4 	movw	r5, #46276	; 0xb4c4
   1c840:	e3405002 	movt	r5, #2
   1c844:	e1a04000 	mov	r4, r0
   1c848:	e1a06001 	mov	r6, r1
   1c84c:	e59f7084 	ldr	r7, [pc, #132]	; 1c8d8 <CMachineInfo::FreeDMAChannel(unsigned int)+0xa0>
   1c850:	e5953000 	ldr	r3, [r5]
   1c854:	ea000002 	b	1c864 <CMachineInfo::FreeDMAChannel(unsigned int)+0x2c>
   1c858:	e1540003 	cmp	r4, r3
   1c85c:	0a000009 	beq	1c888 <CMachineInfo::FreeDMAChannel(unsigned int)+0x50>
   1c860:	e1a04003 	mov	r4, r3
   1c864:	e3530000 	cmp	r3, #0
   1c868:	1afffffa 	bne	1c858 <CMachineInfo::FreeDMAChannel(unsigned int)+0x20>
   1c86c:	e3a02f6e 	mov	r2, #440	; 0x1b8
   1c870:	e1a01007 	mov	r1, r7
   1c874:	e59f0060 	ldr	r0, [pc, #96]	; 1c8dc <CMachineInfo::FreeDMAChannel(unsigned int)+0xa4>
   1c878:	ebfff2f5 	bl	19454 <assertion_failed>
   1c87c:	e5953000 	ldr	r3, [r5]
   1c880:	e1540003 	cmp	r4, r3
   1c884:	1afffff5 	bne	1c860 <CMachineInfo::FreeDMAChannel(unsigned int)+0x28>
   1c888:	e356000c 	cmp	r6, #12
   1c88c:	8a00000c 	bhi	1c8c4 <CMachineInfo::FreeDMAChannel(unsigned int)+0x8c>
   1c890:	e1d431b8 	ldrh	r3, [r4, #24]
   1c894:	e1a02653 	asr	r2, r3, r6
   1c898:	e3120001 	tst	r2, #1
   1c89c:	0a000004 	beq	1c8b4 <CMachineInfo::FreeDMAChannel(unsigned int)+0x7c>
   1c8a0:	e59f1030 	ldr	r1, [pc, #48]	; 1c8d8 <CMachineInfo::FreeDMAChannel(unsigned int)+0xa0>
   1c8a4:	e30021c1 	movw	r2, #449	; 0x1c1
   1c8a8:	e2810040 	add	r0, r1, #64	; 0x40
   1c8ac:	ebfff2e8 	bl	19454 <assertion_failed>
   1c8b0:	e1d431b8 	ldrh	r3, [r4, #24]
   1c8b4:	e3a02001 	mov	r2, #1
   1c8b8:	e1833612 	orr	r3, r3, r2, lsl r6
   1c8bc:	e1c431b8 	strh	r3, [r4, #24]
   1c8c0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1c8c4:	e59f100c 	ldr	r1, [pc, #12]	; 1c8d8 <CMachineInfo::FreeDMAChannel(unsigned int)+0xa0>
   1c8c8:	e3a02d07 	mov	r2, #448	; 0x1c0
   1c8cc:	e2810024 	add	r0, r1, #36	; 0x24
   1c8d0:	ebfff2df 	bl	19454 <assertion_failed>
   1c8d4:	eaffffed 	b	1c890 <CMachineInfo::FreeDMAChannel(unsigned int)+0x58>
   1c8d8:	000294ec 	.word	0x000294ec
   1c8dc:	00029500 	.word	0x00029500

0001c8e0 <CMachineInfo::Get()>:
   1c8e0:	e92d4010 	push	{r4, lr}
   1c8e4:	e30b44c4 	movw	r4, #46276	; 0xb4c4
   1c8e8:	e3404002 	movt	r4, #2
   1c8ec:	e5940000 	ldr	r0, [r4]
   1c8f0:	e3500000 	cmp	r0, #0
   1c8f4:	18bd8010 	popne	{r4, pc}
   1c8f8:	e59f1010 	ldr	r1, [pc, #16]	; 1c910 <CMachineInfo::Get()+0x30>
   1c8fc:	e30021c7 	movw	r2, #455	; 0x1c7
   1c900:	e2810014 	add	r0, r1, #20
   1c904:	ebfff2d2 	bl	19454 <assertion_failed>
   1c908:	e5940000 	ldr	r0, [r4]
   1c90c:	e8bd8010 	pop	{r4, pc}
   1c910:	000294ec 	.word	0x000294ec

0001c914 <CMultiCoreSupport::IPIHandler(unsigned int, unsigned int)>:
   1c914:	e92d4030 	push	{r4, r5, lr}
   1c918:	e3510003 	cmp	r1, #3
   1c91c:	e1a05001 	mov	r5, r1
   1c920:	e24dd00c 	sub	sp, sp, #12
   1c924:	e1a04002 	mov	r4, r2
   1c928:	8a000005 	bhi	1c944 <CMultiCoreSupport::IPIHandler(unsigned int, unsigned int)+0x30>
   1c92c:	e354001f 	cmp	r4, #31
   1c930:	8a00000b 	bhi	1c964 <CMultiCoreSupport::IPIHandler(unsigned int, unsigned int)+0x50>
   1c934:	e3540000 	cmp	r4, #0
   1c938:	0a000011 	beq	1c984 <CMultiCoreSupport::IPIHandler(unsigned int, unsigned int)+0x70>
   1c93c:	e28dd00c 	add	sp, sp, #12
   1c940:	e8bd8030 	pop	{r4, r5, pc}
   1c944:	e3091574 	movw	r1, #38260	; 0x9574
   1c948:	e3401002 	movt	r1, #2
   1c94c:	e3090584 	movw	r0, #38276	; 0x9584
   1c950:	e3400002 	movt	r0, #2
   1c954:	e3a0207a 	mov	r2, #122	; 0x7a
   1c958:	ebfff2bd 	bl	19454 <assertion_failed>
   1c95c:	e354001f 	cmp	r4, #31
   1c960:	9afffff3 	bls	1c934 <CMultiCoreSupport::IPIHandler(unsigned int, unsigned int)+0x20>
   1c964:	e3091574 	movw	r1, #38260	; 0x9574
   1c968:	e3401002 	movt	r1, #2
   1c96c:	e3090594 	movw	r0, #38292	; 0x9594
   1c970:	e3400002 	movt	r0, #2
   1c974:	e3a0207b 	mov	r2, #123	; 0x7b
   1c978:	e28dd00c 	add	sp, sp, #12
   1c97c:	e8bd4030 	pop	{r4, r5, lr}
   1c980:	eafff2b3 	b	19454 <assertion_failed>
   1c984:	ebfffd10 	bl	1bdcc <CLogger::Get()>
   1c988:	e30935a0 	movw	r3, #38304	; 0x95a0
   1c98c:	e3403002 	movt	r3, #2
   1c990:	e3091554 	movw	r1, #38228	; 0x9554
   1c994:	e3401002 	movt	r1, #2
   1c998:	e3a02004 	mov	r2, #4
   1c99c:	e58d5000 	str	r5, [sp]
   1c9a0:	ebfffc40 	bl	1baa8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1c9a4:	eb000c82 	bl	1fbb4 <halt>

0001c9a8 <CMultiCoreSupport::CMultiCoreSupport(CMemorySystem*)>:
   1c9a8:	e92d4070 	push	{r4, r5, r6, lr}
   1c9ac:	e30b54c8 	movw	r5, #46280	; 0xb4c8
   1c9b0:	e3405002 	movt	r5, #2
   1c9b4:	e59f2038 	ldr	r2, [pc, #56]	; 1c9f4 <CMultiCoreSupport::CMultiCoreSupport(CMemorySystem*)+0x4c>
   1c9b8:	e1a04000 	mov	r4, r0
   1c9bc:	e5801004 	str	r1, [r0, #4]
   1c9c0:	e5953000 	ldr	r3, [r5]
   1c9c4:	e5802000 	str	r2, [r0]
   1c9c8:	e3530000 	cmp	r3, #0
   1c9cc:	0a000005 	beq	1c9e8 <CMultiCoreSupport::CMultiCoreSupport(CMemorySystem*)+0x40>
   1c9d0:	e3091574 	movw	r1, #38260	; 0x9574
   1c9d4:	e3401002 	movt	r1, #2
   1c9d8:	e30809ec 	movw	r0, #35308	; 0x89ec
   1c9dc:	e3400002 	movt	r0, #2
   1c9e0:	e3a0202b 	mov	r2, #43	; 0x2b
   1c9e4:	ebfff29a 	bl	19454 <assertion_failed>
   1c9e8:	e5854000 	str	r4, [r5]
   1c9ec:	e1a00004 	mov	r0, r4
   1c9f0:	e8bd8070 	pop	{r4, r5, r6, pc}
   1c9f4:	00029564 	.word	0x00029564

0001c9f8 <CMultiCoreSupport::~CMultiCoreSupport()>:
   1c9f8:	e30b34c8 	movw	r3, #46280	; 0xb4c8
   1c9fc:	e3403002 	movt	r3, #2
   1ca00:	e3a02000 	mov	r2, #0
   1ca04:	e5832000 	str	r2, [r3]
   1ca08:	e12fff1e 	bx	lr

0001ca0c <CMultiCoreSupport::~CMultiCoreSupport()>:
   1ca0c:	e30b34c8 	movw	r3, #46280	; 0xb4c8
   1ca10:	e3403002 	movt	r3, #2
   1ca14:	e92d4010 	push	{r4, lr}
   1ca18:	e3a01008 	mov	r1, #8
   1ca1c:	e1a04000 	mov	r4, r0
   1ca20:	e3a02000 	mov	r2, #0
   1ca24:	e5832000 	str	r2, [r3]
   1ca28:	eb001598 	bl	22090 <operator delete(void*, unsigned int)>
   1ca2c:	e1a00004 	mov	r0, r4
   1ca30:	e8bd8010 	pop	{r4, pc}

0001ca34 <CMultiCoreSupport::Initialize()>:
   1ca34:	e3a03101 	mov	r3, #1073741824	; 0x40000000
   1ca38:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   1ca3c:	e3a01001 	mov	r1, #1
   1ca40:	e3a050dc 	mov	r5, #220	; 0xdc
   1ca44:	e3445000 	movt	r5, #16384	; 0x4000
   1ca48:	e593200c 	ldr	r2, [r3, #12]
   1ca4c:	e3087068 	movw	r7, #32872	; 0x8068
   1ca50:	e3407000 	movt	r7, #0
   1ca54:	e24dd00c 	sub	sp, sp, #12
   1ca58:	e1a06001 	mov	r6, r1
   1ca5c:	e3c2200f 	bic	r2, r2, #15
   1ca60:	e583200c 	str	r2, [r3, #12]
   1ca64:	e5831050 	str	r1, [r3, #80]	; 0x50
   1ca68:	f57ff04f 	dsb	sy
   1ca6c:	e5953000 	ldr	r3, [r5]
   1ca70:	e3530000 	cmp	r3, #0
   1ca74:	13a04063 	movne	r4, #99	; 0x63
   1ca78:	1a000002 	bne	1ca88 <CMultiCoreSupport::Initialize()+0x54>
   1ca7c:	ea000006 	b	1ca9c <CMultiCoreSupport::Initialize()+0x68>
   1ca80:	e2544001 	subs	r4, r4, #1
   1ca84:	0a000019 	beq	1caf0 <CMultiCoreSupport::Initialize()+0xbc>
   1ca88:	e3a00001 	mov	r0, #1
   1ca8c:	eb000fa4 	bl	20924 <CTimer::SimpleMsDelay(unsigned int)>
   1ca90:	e5953000 	ldr	r3, [r5]
   1ca94:	e3530000 	cmp	r3, #0
   1ca98:	1afffff8 	bne	1ca80 <CMultiCoreSupport::Initialize()+0x4c>
   1ca9c:	e5057040 	str	r7, [r5, #-64]	; 0xffffffc0
   1caa0:	e320f004 	sev
   1caa4:	e5953000 	ldr	r3, [r5]
   1caa8:	e3530000 	cmp	r3, #0
   1caac:	13a04063 	movne	r4, #99	; 0x63
   1cab0:	1a000002 	bne	1cac0 <CMultiCoreSupport::Initialize()+0x8c>
   1cab4:	ea000006 	b	1cad4 <CMultiCoreSupport::Initialize()+0xa0>
   1cab8:	e2544001 	subs	r4, r4, #1
   1cabc:	0a000016 	beq	1cb1c <CMultiCoreSupport::Initialize()+0xe8>
   1cac0:	e3a00001 	mov	r0, #1
   1cac4:	eb000f96 	bl	20924 <CTimer::SimpleMsDelay(unsigned int)>
   1cac8:	e5953000 	ldr	r3, [r5]
   1cacc:	e3530000 	cmp	r3, #0
   1cad0:	1afffff8 	bne	1cab8 <CMultiCoreSupport::Initialize()+0x84>
   1cad4:	e2866001 	add	r6, r6, #1
   1cad8:	e2855010 	add	r5, r5, #16
   1cadc:	e3560004 	cmp	r6, #4
   1cae0:	1affffe0 	bne	1ca68 <CMultiCoreSupport::Initialize()+0x34>
   1cae4:	e3a00001 	mov	r0, #1
   1cae8:	e28dd00c 	add	sp, sp, #12
   1caec:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   1caf0:	ebfffcb5 	bl	1bdcc <CLogger::Get()>
   1caf4:	e30935bc 	movw	r3, #38332	; 0x95bc
   1caf8:	e3403002 	movt	r3, #2
   1cafc:	e58d6000 	str	r6, [sp]
   1cb00:	e3a02001 	mov	r2, #1
   1cb04:	e3091554 	movw	r1, #38228	; 0x9554
   1cb08:	e3401002 	movt	r1, #2
   1cb0c:	ebfffbe5 	bl	1baa8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1cb10:	e1a00004 	mov	r0, r4
   1cb14:	e28dd00c 	add	sp, sp, #12
   1cb18:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   1cb1c:	ebfffcaa 	bl	1bdcc <CLogger::Get()>
   1cb20:	e30935dc 	movw	r3, #38364	; 0x95dc
   1cb24:	e3403002 	movt	r3, #2
   1cb28:	e58d6000 	str	r6, [sp]
   1cb2c:	eafffff3 	b	1cb00 <CMultiCoreSupport::Initialize()+0xcc>

0001cb30 <CMultiCoreSupport::SendIPI(unsigned int, unsigned int)>:
   1cb30:	e92d4070 	push	{r4, r5, r6, lr}
   1cb34:	e3500003 	cmp	r0, #3
   1cb38:	e1a04000 	mov	r4, r0
   1cb3c:	e1a05001 	mov	r5, r1
   1cb40:	8a00000e 	bhi	1cb80 <CMultiCoreSupport::SendIPI(unsigned int, unsigned int)+0x50>
   1cb44:	e355001f 	cmp	r5, #31
   1cb48:	9a000005 	bls	1cb64 <CMultiCoreSupport::SendIPI(unsigned int, unsigned int)+0x34>
   1cb4c:	e3091574 	movw	r1, #38260	; 0x9574
   1cb50:	e3401002 	movt	r1, #2
   1cb54:	e3090594 	movw	r0, #38292	; 0x9594
   1cb58:	e3400002 	movt	r0, #2
   1cb5c:	e3a02088 	mov	r2, #136	; 0x88
   1cb60:	ebfff23b 	bl	19454 <assertion_failed>
   1cb64:	e2840301 	add	r0, r4, #67108864	; 0x4000000
   1cb68:	e3a01001 	mov	r1, #1
   1cb6c:	e2800008 	add	r0, r0, #8
   1cb70:	e1a00200 	lsl	r0, r0, #4
   1cb74:	e1a01511 	lsl	r1, r1, r5
   1cb78:	e5801000 	str	r1, [r0]
   1cb7c:	e8bd8070 	pop	{r4, r5, r6, pc}
   1cb80:	e3091574 	movw	r1, #38260	; 0x9574
   1cb84:	e3401002 	movt	r1, #2
   1cb88:	e3090584 	movw	r0, #38276	; 0x9584
   1cb8c:	e3400002 	movt	r0, #2
   1cb90:	e3a02087 	mov	r2, #135	; 0x87
   1cb94:	ebfff22e 	bl	19454 <assertion_failed>
   1cb98:	eaffffe9 	b	1cb44 <CMultiCoreSupport::SendIPI(unsigned int, unsigned int)+0x14>

0001cb9c <CMultiCoreSupport::HaltAll()>:
   1cb9c:	e92d4010 	push	{r4, lr}
   1cba0:	e3a04000 	mov	r4, #0
   1cba4:	ee103fb0 	mrc	15, 0, r3, cr0, cr0, {5}
   1cba8:	e2033003 	and	r3, r3, #3
   1cbac:	e1530004 	cmp	r3, r4
   1cbb0:	0a000002 	beq	1cbc0 <CMultiCoreSupport::HaltAll()+0x24>
   1cbb4:	e3a01000 	mov	r1, #0
   1cbb8:	e1a00004 	mov	r0, r4
   1cbbc:	ebffffdb 	bl	1cb30 <CMultiCoreSupport::SendIPI(unsigned int, unsigned int)>
   1cbc0:	e2844001 	add	r4, r4, #1
   1cbc4:	e3540004 	cmp	r4, #4
   1cbc8:	1afffff5 	bne	1cba4 <CMultiCoreSupport::HaltAll()+0x8>
   1cbcc:	eb000bf8 	bl	1fbb4 <halt>

0001cbd0 <CMultiCoreSupport::LocalInterruptHandler()>:
   1cbd0:	e30bc4c8 	movw	ip, #46280	; 0xb4c8
   1cbd4:	e340c002 	movt	ip, #2
   1cbd8:	e59c0000 	ldr	r0, [ip]
   1cbdc:	e3500000 	cmp	r0, #0
   1cbe0:	012fff1e 	bxeq	lr
   1cbe4:	ee101fb0 	mrc	15, 0, r1, cr0, cr0, {5}
   1cbe8:	e2011003 	and	r1, r1, #3
   1cbec:	e2813201 	add	r3, r1, #268435456	; 0x10000000
   1cbf0:	e2833018 	add	r3, r3, #24
   1cbf4:	e1a03103 	lsl	r3, r3, #2
   1cbf8:	e5930000 	ldr	r0, [r3]
   1cbfc:	e2100010 	ands	r0, r0, #16
   1cc00:	012fff1e 	bxeq	lr
   1cc04:	e2813301 	add	r3, r1, #67108864	; 0x4000000
   1cc08:	e283300c 	add	r3, r3, #12
   1cc0c:	e1a03203 	lsl	r3, r3, #4
   1cc10:	e5930000 	ldr	r0, [r3]
   1cc14:	e3500000 	cmp	r0, #0
   1cc18:	012fff1e 	bxeq	lr
   1cc1c:	e92d4010 	push	{r4, lr}
   1cc20:	e2102001 	ands	r2, r0, #1
   1cc24:	1a00000e 	bne	1cc64 <CMultiCoreSupport::LocalInterruptHandler()+0x94>
   1cc28:	e1a000a0 	lsr	r0, r0, #1
   1cc2c:	e2822001 	add	r2, r2, #1
   1cc30:	e3100001 	tst	r0, #1
   1cc34:	0afffffb 	beq	1cc28 <CMultiCoreSupport::LocalInterruptHandler()+0x58>
   1cc38:	e3a00001 	mov	r0, #1
   1cc3c:	e1a00210 	lsl	r0, r0, r2
   1cc40:	e5830000 	str	r0, [r3]
   1cc44:	f57ff04f 	dsb	sy
   1cc48:	e59c3000 	ldr	r3, [ip]
   1cc4c:	e1a00003 	mov	r0, r3
   1cc50:	e5933000 	ldr	r3, [r3]
   1cc54:	e593300c 	ldr	r3, [r3, #12]
   1cc58:	e12fff33 	blx	r3
   1cc5c:	e3a00001 	mov	r0, #1
   1cc60:	e8bd8010 	pop	{r4, pc}
   1cc64:	e1a00002 	mov	r0, r2
   1cc68:	e3a02000 	mov	r2, #0
   1cc6c:	eafffff3 	b	1cc40 <CMultiCoreSupport::LocalInterruptHandler()+0x70>

0001cc70 <CMultiCoreSupport::EntrySecondary()>:
   1cc70:	e92d4030 	push	{r4, r5, lr}
   1cc74:	e30b54c8 	movw	r5, #46280	; 0xb4c8
   1cc78:	e3405002 	movt	r5, #2
   1cc7c:	e24dd00c 	sub	sp, sp, #12
   1cc80:	e5953000 	ldr	r3, [r5]
   1cc84:	e3530000 	cmp	r3, #0
   1cc88:	0a000030 	beq	1cd50 <CMultiCoreSupport::EntrySecondary()+0xe0>
   1cc8c:	e5930004 	ldr	r0, [r3, #4]
   1cc90:	e3500000 	cmp	r0, #0
   1cc94:	0a000024 	beq	1cd2c <CMultiCoreSupport::EntrySecondary()+0xbc>
   1cc98:	eb001459 	bl	21e04 <CMemorySystem::InitializeSecondary()>
   1cc9c:	ee104fb0 	mrc	15, 0, r4, cr0, cr0, {5}
   1cca0:	e2044003 	and	r4, r4, #3
   1cca4:	e3a00000 	mov	r0, #0
   1cca8:	e2843201 	add	r3, r4, #268435456	; 0x10000000
   1ccac:	e1a02204 	lsl	r2, r4, #4
   1ccb0:	e2833014 	add	r3, r3, #20
   1ccb4:	e2822101 	add	r2, r2, #1073741824	; 0x40000000
   1ccb8:	e1a03103 	lsl	r3, r3, #2
   1ccbc:	e3a01001 	mov	r1, #1
   1ccc0:	e58200cc 	str	r0, [r2, #204]	; 0xcc
   1ccc4:	e5831000 	str	r1, [r3]
   1ccc8:	f1080080 	cpsie	i
   1cccc:	ebfffc3e 	bl	1bdcc <CLogger::Get()>
   1ccd0:	e3a02004 	mov	r2, #4
   1ccd4:	e58d4000 	str	r4, [sp]
   1ccd8:	e3093618 	movw	r3, #38424	; 0x9618
   1ccdc:	e3403002 	movt	r3, #2
   1cce0:	e3091554 	movw	r1, #38228	; 0x9554
   1cce4:	e3401002 	movt	r1, #2
   1cce8:	ebfffb6e 	bl	1baa8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1ccec:	e5953000 	ldr	r3, [r5]
   1ccf0:	e1a01004 	mov	r1, r4
   1ccf4:	e1a00003 	mov	r0, r3
   1ccf8:	e5933000 	ldr	r3, [r3]
   1ccfc:	e5933008 	ldr	r3, [r3, #8]
   1cd00:	e12fff33 	blx	r3
   1cd04:	ebfffc30 	bl	1bdcc <CLogger::Get()>
   1cd08:	e58d4000 	str	r4, [sp]
   1cd0c:	e3a02004 	mov	r2, #4
   1cd10:	e30935a0 	movw	r3, #38304	; 0x95a0
   1cd14:	e3403002 	movt	r3, #2
   1cd18:	e3091554 	movw	r1, #38228	; 0x9554
   1cd1c:	e3401002 	movt	r1, #2
   1cd20:	ebfffb60 	bl	1baa8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1cd24:	e28dd00c 	add	sp, sp, #12
   1cd28:	e8bd8030 	pop	{r4, r5, pc}
   1cd2c:	e3091574 	movw	r1, #38260	; 0x9574
   1cd30:	e3401002 	movt	r1, #2
   1cd34:	e30905f8 	movw	r0, #38392	; 0x95f8
   1cd38:	e3400002 	movt	r0, #2
   1cd3c:	e3a020c0 	mov	r2, #192	; 0xc0
   1cd40:	ebfff1c3 	bl	19454 <assertion_failed>
   1cd44:	e5953000 	ldr	r3, [r5]
   1cd48:	e5930004 	ldr	r0, [r3, #4]
   1cd4c:	eaffffd1 	b	1cc98 <CMultiCoreSupport::EntrySecondary()+0x28>
   1cd50:	e3091574 	movw	r1, #38260	; 0x9574
   1cd54:	e3401002 	movt	r1, #2
   1cd58:	e3080b64 	movw	r0, #35684	; 0x8b64
   1cd5c:	e3400002 	movt	r0, #2
   1cd60:	e3a020be 	mov	r2, #190	; 0xbe
   1cd64:	ebfff1ba 	bl	19454 <assertion_failed>
   1cd68:	e5953000 	ldr	r3, [r5]
   1cd6c:	eaffffc6 	b	1cc8c <CMultiCoreSupport::EntrySecondary()+0x1c>

0001cd70 <main_secondary>:
   1cd70:	eaffffbe 	b	1cc70 <CMultiCoreSupport::EntrySecondary()>

0001cd74 <CScreenDevice::CScreenDevice(unsigned int, unsigned int, bool)>:
   1cd74:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   1cd78:	e1a04000 	mov	r4, r0
   1cd7c:	e1a05001 	mov	r5, r1
   1cd80:	e1a07002 	mov	r7, r2
   1cd84:	e1a06003 	mov	r6, r3
   1cd88:	ebfff392 	bl	19bd8 <CDevice::CDevice()>
   1cd8c:	e59fc06c 	ldr	ip, [pc, #108]	; 1ce00 <CScreenDevice::CScreenDevice(unsigned int, unsigned int, bool)+0x8c>
   1cd90:	e584c000 	str	ip, [r4]
   1cd94:	e2840014 	add	r0, r4, #20
   1cd98:	e5845004 	str	r5, [r4, #4]
   1cd9c:	e3a05000 	mov	r5, #0
   1cda0:	e5c4600c 	strb	r6, [r4, #12]
   1cda4:	e3a06001 	mov	r6, #1
   1cda8:	e5847008 	str	r7, [r4, #8]
   1cdac:	e5845010 	str	r5, [r4, #16]
   1cdb0:	eb00174b 	bl	22ae4 <CCharGenerator::CCharGenerator()>
   1cdb4:	e3e03020 	mvn	r3, #32
   1cdb8:	e1a02005 	mov	r2, r5
   1cdbc:	e1c434b6 	strh	r3, [r4, #70]	; 0x46
   1cdc0:	e5845018 	str	r5, [r4, #24]
   1cdc4:	e2840058 	add	r0, r4, #88	; 0x58
   1cdc8:	e5845030 	str	r5, [r4, #48]	; 0x30
   1cdcc:	e3a01081 	mov	r1, #129	; 0x81
   1cdd0:	e5845034 	str	r5, [r4, #52]	; 0x34
   1cdd4:	e584503c 	str	r5, [r4, #60]	; 0x3c
   1cdd8:	e5845040 	str	r5, [r4, #64]	; 0x40
   1cddc:	e5c45048 	strb	r5, [r4, #72]	; 0x48
   1cde0:	e5c45054 	strb	r5, [r4, #84]	; 0x54
   1cde4:	e5c46044 	strb	r6, [r4, #68]	; 0x44
   1cde8:	eb00176b 	bl	22b9c <CDMAChannel::CDMAChannel(unsigned int, CInterruptSystem*)>
   1cdec:	e1a01006 	mov	r1, r6
   1cdf0:	e2840080 	add	r0, r4, #128	; 0x80
   1cdf4:	eb000712 	bl	1ea44 <CSpinLock::CSpinLock(unsigned int)>
   1cdf8:	e1a00004 	mov	r0, r4
   1cdfc:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1ce00:	00029634 	.word	0x00029634

0001ce04 <CScreenDevice::~CScreenDevice()>:
   1ce04:	e5d0300c 	ldrb	r3, [r0, #12]
   1ce08:	e59f2078 	ldr	r2, [pc, #120]	; 1ce88 <CScreenDevice::~CScreenDevice()+0x84>
   1ce0c:	e92d4070 	push	{r4, r5, r6, lr}
   1ce10:	e3530000 	cmp	r3, #0
   1ce14:	e1a04000 	mov	r4, r0
   1ce18:	e5802000 	str	r2, [r0]
   1ce1c:	0a000003 	beq	1ce30 <CScreenDevice::~CScreenDevice()+0x2c>
   1ce20:	e5900018 	ldr	r0, [r0, #24]
   1ce24:	e3500000 	cmp	r0, #0
   1ce28:	0a000000 	beq	1ce30 <CScreenDevice::~CScreenDevice()+0x2c>
   1ce2c:	eb001496 	bl	2208c <operator delete[](void*)>
   1ce30:	e5945010 	ldr	r5, [r4, #16]
   1ce34:	e3a03000 	mov	r3, #0
   1ce38:	e5843018 	str	r3, [r4, #24]
   1ce3c:	e1550003 	cmp	r5, r3
   1ce40:	0a000004 	beq	1ce58 <CScreenDevice::~CScreenDevice()+0x54>
   1ce44:	e1a00005 	mov	r0, r5
   1ce48:	eb001633 	bl	2271c <CBcmFrameBuffer::~CBcmFrameBuffer()>
   1ce4c:	e1a00005 	mov	r0, r5
   1ce50:	e3a01094 	mov	r1, #148	; 0x94
   1ce54:	eb00148d 	bl	22090 <operator delete(void*, unsigned int)>
   1ce58:	e3a03000 	mov	r3, #0
   1ce5c:	e2840080 	add	r0, r4, #128	; 0x80
   1ce60:	e5843010 	str	r3, [r4, #16]
   1ce64:	eb000704 	bl	1ea7c <CSpinLock::~CSpinLock()>
   1ce68:	e2840058 	add	r0, r4, #88	; 0x58
   1ce6c:	eb00178c 	bl	22ca4 <CDMAChannel::~CDMAChannel()>
   1ce70:	e2840014 	add	r0, r4, #20
   1ce74:	eb00171d 	bl	22af0 <CCharGenerator::~CCharGenerator()>
   1ce78:	e1a00004 	mov	r0, r4
   1ce7c:	ebfff349 	bl	19ba8 <CDevice::~CDevice()>
   1ce80:	e1a00004 	mov	r0, r4
   1ce84:	e8bd8070 	pop	{r4, r5, r6, pc}
   1ce88:	00029634 	.word	0x00029634

0001ce8c <CScreenDevice::~CScreenDevice()>:
   1ce8c:	e92d4010 	push	{r4, lr}
   1ce90:	e1a04000 	mov	r4, r0
   1ce94:	ebffffda 	bl	1ce04 <CScreenDevice::~CScreenDevice()>
   1ce98:	e1a00004 	mov	r0, r4
   1ce9c:	e3a01088 	mov	r1, #136	; 0x88
   1cea0:	eb00147a 	bl	22090 <operator delete(void*, unsigned int)>
   1cea4:	e1a00004 	mov	r0, r4
   1cea8:	e8bd8010 	pop	{r4, pc}

0001ceac <CScreenDevice::Initialize()>:
   1ceac:	e92d4070 	push	{r4, r5, r6, lr}
   1ceb0:	e1a04000 	mov	r4, r0
   1ceb4:	e5d0600c 	ldrb	r6, [r0, #12]
   1ceb8:	e24dd008 	sub	sp, sp, #8
   1cebc:	e3560000 	cmp	r6, #0
   1cec0:	0a00002b 	beq	1cf74 <CScreenDevice::Initialize()+0xc8>
   1cec4:	e5903004 	ldr	r3, [r0, #4]
   1cec8:	e5900008 	ldr	r0, [r0, #8]
   1cecc:	e5840028 	str	r0, [r4, #40]	; 0x28
   1ced0:	e5843024 	str	r3, [r4, #36]	; 0x24
   1ced4:	e5843020 	str	r3, [r4, #32]
   1ced8:	e0000390 	mul	r0, r0, r3
   1cedc:	e370010f 	cmn	r0, #-1073741821	; 0xc0000003
   1cee0:	e1a00080 	lsl	r0, r0, #1
   1cee4:	e584001c 	str	r0, [r4, #28]
   1cee8:	23e00000 	mvncs	r0, #0
   1ceec:	eb001464 	bl	22084 <operator new[](unsigned int)>
   1cef0:	e5945028 	ldr	r5, [r4, #40]	; 0x28
   1cef4:	e5840018 	str	r0, [r4, #24]
   1cef8:	e2846014 	add	r6, r4, #20
   1cefc:	e1a00006 	mov	r0, r6
   1cf00:	eb0016fd 	bl	22afc <CCharGenerator::GetCharHeight() const>
   1cf04:	e735f015 	udiv	r5, r5, r0
   1cf08:	e1a00006 	mov	r0, r6
   1cf0c:	eb0016fa 	bl	22afc <CCharGenerator::GetCharHeight() const>
   1cf10:	e5943034 	ldr	r3, [r4, #52]	; 0x34
   1cf14:	e5843040 	str	r3, [r4, #64]	; 0x40
   1cf18:	e3a03000 	mov	r3, #0
   1cf1c:	e584303c 	str	r3, [r4, #60]	; 0x3c
   1cf20:	e0050590 	mul	r5, r0, r5
   1cf24:	e1a00004 	mov	r0, r4
   1cf28:	e584502c 	str	r5, [r4, #44]	; 0x2c
   1cf2c:	e5845038 	str	r5, [r4, #56]	; 0x38
   1cf30:	eb0001ff 	bl	1d734 <CScreenDevice::ClearDisplayEnd()>
   1cf34:	e5d43044 	ldrb	r3, [r4, #68]	; 0x44
   1cf38:	e3530000 	cmp	r3, #0
   1cf3c:	1a000009 	bne	1cf68 <CScreenDevice::Initialize()+0xbc>
   1cf40:	ebfff402 	bl	19f50 <CDeviceNameService::Get()>
   1cf44:	e30912dc 	movw	r1, #37596	; 0x92dc
   1cf48:	e3401002 	movt	r1, #2
   1cf4c:	e1a02004 	mov	r2, r4
   1cf50:	e3a03000 	mov	r3, #0
   1cf54:	e3a06001 	mov	r6, #1
   1cf58:	ebfff352 	bl	19ca8 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)>
   1cf5c:	e1a00006 	mov	r0, r6
   1cf60:	e28dd008 	add	sp, sp, #8
   1cf64:	e8bd8070 	pop	{r4, r5, r6, pc}
   1cf68:	e1a00004 	mov	r0, r4
   1cf6c:	eb0003cc 	bl	1dea4 <CScreenDevice::InvertCursor() [clone .part.6]>
   1cf70:	eafffff2 	b	1cf40 <CScreenDevice::Initialize()+0x94>
   1cf74:	e3a00094 	mov	r0, #148	; 0x94
   1cf78:	eb001440 	bl	22080 <operator new(unsigned int)>
   1cf7c:	e5942008 	ldr	r2, [r4, #8]
   1cf80:	e5941004 	ldr	r1, [r4, #4]
   1cf84:	e1a05000 	mov	r5, r0
   1cf88:	e3a03010 	mov	r3, #16
   1cf8c:	e58d6004 	str	r6, [sp, #4]
   1cf90:	e58d6000 	str	r6, [sp]
   1cf94:	eb00158f 	bl	225d8 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
   1cf98:	e5845010 	str	r5, [r4, #16]
   1cf9c:	e1a00005 	mov	r0, r5
   1cfa0:	eb0015f9 	bl	2278c <CBcmFrameBuffer::Initialize()>
   1cfa4:	e3500000 	cmp	r0, #0
   1cfa8:	0affffeb 	beq	1cf5c <CScreenDevice::Initialize()+0xb0>
   1cfac:	e5940010 	ldr	r0, [r4, #16]
   1cfb0:	eb00162f 	bl	22874 <CBcmFrameBuffer::GetDepth() const>
   1cfb4:	e3500010 	cmp	r0, #16
   1cfb8:	1affffe7 	bne	1cf5c <CScreenDevice::Initialize()+0xb0>
   1cfbc:	e5940010 	ldr	r0, [r4, #16]
   1cfc0:	eb00162d 	bl	2287c <CBcmFrameBuffer::GetBuffer() const>
   1cfc4:	e5840018 	str	r0, [r4, #24]
   1cfc8:	e5940010 	ldr	r0, [r4, #16]
   1cfcc:	eb00162c 	bl	22884 <CBcmFrameBuffer::GetSize() const>
   1cfd0:	e584001c 	str	r0, [r4, #28]
   1cfd4:	e5940010 	ldr	r0, [r4, #16]
   1cfd8:	eb001623 	bl	2286c <CBcmFrameBuffer::GetPitch() const>
   1cfdc:	e5840020 	str	r0, [r4, #32]
   1cfe0:	e5940010 	ldr	r0, [r4, #16]
   1cfe4:	eb001618 	bl	2284c <CBcmFrameBuffer::GetWidth() const>
   1cfe8:	e5840024 	str	r0, [r4, #36]	; 0x24
   1cfec:	e5940010 	ldr	r0, [r4, #16]
   1cff0:	eb001617 	bl	22854 <CBcmFrameBuffer::GetHeight() const>
   1cff4:	e5943020 	ldr	r3, [r4, #32]
   1cff8:	e1a05000 	mov	r5, r0
   1cffc:	e5840028 	str	r0, [r4, #40]	; 0x28
   1d000:	e3130003 	tst	r3, #3
   1d004:	01a030a3 	lsreq	r3, r3, #1
   1d008:	05843020 	streq	r3, [r4, #32]
   1d00c:	0affffb9 	beq	1cef8 <CScreenDevice::Initialize()+0x4c>
   1d010:	eaffffd1 	b	1cf5c <CScreenDevice::Initialize()+0xb0>

0001d014 <CScreenDevice::GetWidth() const>:
   1d014:	e5900024 	ldr	r0, [r0, #36]	; 0x24
   1d018:	e12fff1e 	bx	lr

0001d01c <CScreenDevice::GetHeight() const>:
   1d01c:	e5900028 	ldr	r0, [r0, #40]	; 0x28
   1d020:	e12fff1e 	bx	lr

0001d024 <CScreenDevice::GetColumns() const>:
   1d024:	e1a03000 	mov	r3, r0
   1d028:	e92d4010 	push	{r4, lr}
   1d02c:	e2800014 	add	r0, r0, #20
   1d030:	e5934024 	ldr	r4, [r3, #36]	; 0x24
   1d034:	eb0016ae 	bl	22af4 <CCharGenerator::GetCharWidth() const>
   1d038:	e730f014 	udiv	r0, r4, r0
   1d03c:	e8bd8010 	pop	{r4, pc}

0001d040 <CScreenDevice::GetRows() const>:
   1d040:	e1a03000 	mov	r3, r0
   1d044:	e92d4010 	push	{r4, lr}
   1d048:	e2800014 	add	r0, r0, #20
   1d04c:	e593402c 	ldr	r4, [r3, #44]	; 0x2c
   1d050:	eb0016a9 	bl	22afc <CCharGenerator::GetCharHeight() const>
   1d054:	e730f014 	udiv	r0, r4, r0
   1d058:	e8bd8010 	pop	{r4, pc}

0001d05c <CScreenDevice::GetStatus()>:
   1d05c:	e92d4010 	push	{r4, lr}
   1d060:	e591c01c 	ldr	ip, [r1, #28]
   1d064:	e591e018 	ldr	lr, [r1, #24]
   1d068:	e5912030 	ldr	r2, [r1, #48]	; 0x30
   1d06c:	e580e000 	str	lr, [r0]
   1d070:	e580c004 	str	ip, [r0, #4]
   1d074:	e591e034 	ldr	lr, [r1, #52]	; 0x34
   1d078:	e591c038 	ldr	ip, [r1, #56]	; 0x38
   1d07c:	e5802008 	str	r2, [r0, #8]
   1d080:	e591203c 	ldr	r2, [r1, #60]	; 0x3c
   1d084:	e580e00c 	str	lr, [r0, #12]
   1d088:	e580c010 	str	ip, [r0, #16]
   1d08c:	e591e040 	ldr	lr, [r1, #64]	; 0x40
   1d090:	e5d1c044 	ldrb	ip, [r1, #68]	; 0x44
   1d094:	e5802014 	str	r2, [r0, #20]
   1d098:	e1d124b6 	ldrh	r2, [r1, #70]	; 0x46
   1d09c:	e580e018 	str	lr, [r0, #24]
   1d0a0:	e5d14048 	ldrb	r4, [r1, #72]	; 0x48
   1d0a4:	e5c0c01c 	strb	ip, [r0, #28]
   1d0a8:	e591e04c 	ldr	lr, [r1, #76]	; 0x4c
   1d0ac:	e1c021be 	strh	r2, [r0, #30]
   1d0b0:	e591c050 	ldr	ip, [r1, #80]	; 0x50
   1d0b4:	e5d12054 	ldrb	r2, [r1, #84]	; 0x54
   1d0b8:	e5c04020 	strb	r4, [r0, #32]
   1d0bc:	e580e024 	str	lr, [r0, #36]	; 0x24
   1d0c0:	e580c028 	str	ip, [r0, #40]	; 0x28
   1d0c4:	e5c0202c 	strb	r2, [r0, #44]	; 0x2c
   1d0c8:	e8bd8010 	pop	{r4, pc}

0001d0cc <CScreenDevice::SetStatus(TScreenStatus const&)>:
   1d0cc:	e590201c 	ldr	r2, [r0, #28]
   1d0d0:	e5913004 	ldr	r3, [r1, #4]
   1d0d4:	e1520003 	cmp	r2, r3
   1d0d8:	0a000001 	beq	1d0e4 <CScreenDevice::SetStatus(TScreenStatus const&)+0x18>
   1d0dc:	e3a00000 	mov	r0, #0
   1d0e0:	e12fff1e 	bx	lr
   1d0e4:	e1c022d0 	ldrd	r2, [r0, #32]
   1d0e8:	e1520003 	cmp	r2, r3
   1d0ec:	1afffffa 	bne	1d0dc <CScreenDevice::SetStatus(TScreenStatus const&)+0x10>
   1d0f0:	e92d4070 	push	{r4, r5, r6, lr}
   1d0f4:	e1a04000 	mov	r4, r0
   1d0f8:	e2806080 	add	r6, r0, #128	; 0x80
   1d0fc:	e1a00006 	mov	r0, r6
   1d100:	e1a05001 	mov	r5, r1
   1d104:	eb000669 	bl	1eab0 <CSpinLock::Acquire()>
   1d108:	e5d43054 	ldrb	r3, [r4, #84]	; 0x54
   1d10c:	e3530000 	cmp	r3, #0
   1d110:	1a000002 	bne	1d120 <CScreenDevice::SetStatus(TScreenStatus const&)+0x54>
   1d114:	e5d5302c 	ldrb	r3, [r5, #44]	; 0x2c
   1d118:	e3530000 	cmp	r3, #0
   1d11c:	0a000003 	beq	1d130 <CScreenDevice::SetStatus(TScreenStatus const&)+0x64>
   1d120:	e1a00006 	mov	r0, r6
   1d124:	eb000678 	bl	1eb0c <CSpinLock::Release()>
   1d128:	e3a00000 	mov	r0, #0
   1d12c:	e8bd8070 	pop	{r4, r5, r6, pc}
   1d130:	e594201c 	ldr	r2, [r4, #28]
   1d134:	e5951000 	ldr	r1, [r5]
   1d138:	e5940018 	ldr	r0, [r4, #24]
   1d13c:	eb000feb 	bl	210f0 <memcpy>
   1d140:	e5953008 	ldr	r3, [r5, #8]
   1d144:	e595c00c 	ldr	ip, [r5, #12]
   1d148:	e1a00006 	mov	r0, r6
   1d14c:	e5951010 	ldr	r1, [r5, #16]
   1d150:	e5952014 	ldr	r2, [r5, #20]
   1d154:	e5843030 	str	r3, [r4, #48]	; 0x30
   1d158:	e5953018 	ldr	r3, [r5, #24]
   1d15c:	e5d5e01c 	ldrb	lr, [r5, #28]
   1d160:	e584c034 	str	ip, [r4, #52]	; 0x34
   1d164:	e5841038 	str	r1, [r4, #56]	; 0x38
   1d168:	e1d5c1be 	ldrh	ip, [r5, #30]
   1d16c:	e5d51020 	ldrb	r1, [r5, #32]
   1d170:	e584203c 	str	r2, [r4, #60]	; 0x3c
   1d174:	e5843040 	str	r3, [r4, #64]	; 0x40
   1d178:	e1c522d4 	ldrd	r2, [r5, #36]	; 0x24
   1d17c:	e1c424fc 	strd	r2, [r4, #76]	; 0x4c
   1d180:	e5c4e044 	strb	lr, [r4, #68]	; 0x44
   1d184:	e1c4c4b6 	strh	ip, [r4, #70]	; 0x46
   1d188:	e5c41048 	strb	r1, [r4, #72]	; 0x48
   1d18c:	eb00065e 	bl	1eb0c <CSpinLock::Release()>
   1d190:	f57ff05f 	dmb	sy
   1d194:	e3a00001 	mov	r0, #1
   1d198:	e8bd8070 	pop	{r4, r5, r6, pc}

0001d19c <CScreenDevice::Write(void const*, unsigned int)>:
   1d19c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   1d1a0:	e1a05000 	mov	r5, r0
   1d1a4:	e2808080 	add	r8, r0, #128	; 0x80
   1d1a8:	e1a00008 	mov	r0, r8
   1d1ac:	e1a07002 	mov	r7, r2
   1d1b0:	e1a04001 	mov	r4, r1
   1d1b4:	eb00063d 	bl	1eab0 <CSpinLock::Acquire()>
   1d1b8:	e5d53044 	ldrb	r3, [r5, #68]	; 0x44
   1d1bc:	e3a02001 	mov	r2, #1
   1d1c0:	e5c52054 	strb	r2, [r5, #84]	; 0x54
   1d1c4:	e3530000 	cmp	r3, #0
   1d1c8:	1a000013 	bne	1d21c <CScreenDevice::Write(void const*, unsigned int)+0x80>
   1d1cc:	e3570000 	cmp	r7, #0
   1d1d0:	0a00000a 	beq	1d200 <CScreenDevice::Write(void const*, unsigned int)+0x64>
   1d1d4:	e0846007 	add	r6, r4, r7
   1d1d8:	e0d410d1 	ldrsb	r1, [r4], #1
   1d1dc:	e1a00005 	mov	r0, r5
   1d1e0:	eb000012 	bl	1d230 <CScreenDevice::Write(char)>
   1d1e4:	e1540006 	cmp	r4, r6
   1d1e8:	1afffffa 	bne	1d1d8 <CScreenDevice::Write(void const*, unsigned int)+0x3c>
   1d1ec:	e5d53044 	ldrb	r3, [r5, #68]	; 0x44
   1d1f0:	e3530000 	cmp	r3, #0
   1d1f4:	0a000001 	beq	1d200 <CScreenDevice::Write(void const*, unsigned int)+0x64>
   1d1f8:	e1a00005 	mov	r0, r5
   1d1fc:	eb000328 	bl	1dea4 <CScreenDevice::InvertCursor() [clone .part.6]>
   1d200:	e3a03000 	mov	r3, #0
   1d204:	e1a00008 	mov	r0, r8
   1d208:	e5c53054 	strb	r3, [r5, #84]	; 0x54
   1d20c:	eb00063e 	bl	1eb0c <CSpinLock::Release()>
   1d210:	f57ff05f 	dmb	sy
   1d214:	e1a00007 	mov	r0, r7
   1d218:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1d21c:	e1a00005 	mov	r0, r5
   1d220:	eb00031f 	bl	1dea4 <CScreenDevice::InvertCursor() [clone .part.6]>
   1d224:	e3570000 	cmp	r7, #0
   1d228:	1affffe9 	bne	1d1d4 <CScreenDevice::Write(void const*, unsigned int)+0x38>
   1d22c:	eaffffee 	b	1d1ec <CScreenDevice::Write(void const*, unsigned int)+0x50>

0001d230 <CScreenDevice::Write(char)>:
   1d230:	e92d4010 	push	{r4, lr}
   1d234:	e1a04000 	mov	r4, r0
   1d238:	e5903030 	ldr	r3, [r0, #48]	; 0x30
   1d23c:	e24dd008 	sub	sp, sp, #8
   1d240:	e3530007 	cmp	r3, #7
   1d244:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   1d248:	ea000010 	b	1d290 <CScreenDevice::Write(char)+0x60>
   1d24c:	0001d2dc 	.word	0x0001d2dc
   1d250:	0001d33c 	.word	0x0001d33c
   1d254:	0001d350 	.word	0x0001d350
   1d258:	0001d3a8 	.word	0x0001d3a8
   1d25c:	0001d484 	.word	0x0001d484
   1d260:	0001d4a4 	.word	0x0001d4a4
   1d264:	0001d4c4 	.word	0x0001d4c4
   1d268:	0001d2a0 	.word	0x0001d2a0
   1d26c:	e5902040 	ldr	r2, [r0, #64]	; 0x40
   1d270:	e5903034 	ldr	r3, [r0, #52]	; 0x34
   1d274:	e1520003 	cmp	r2, r3
   1d278:	9a000004 	bls	1d290 <CScreenDevice::Write(char)+0x60>
   1d27c:	e2800014 	add	r0, r0, #20
   1d280:	eb00161d 	bl	22afc <CCharGenerator::GetCharHeight() const>
   1d284:	e5943040 	ldr	r3, [r4, #64]	; 0x40
   1d288:	e0433000 	sub	r3, r3, r0
   1d28c:	e5843040 	str	r3, [r4, #64]	; 0x40
   1d290:	e3a03000 	mov	r3, #0
   1d294:	e5843030 	str	r3, [r4, #48]	; 0x30
   1d298:	e28dd008 	add	sp, sp, #8
   1d29c:	e8bd8010 	pop	{r4, pc}
   1d2a0:	e3510068 	cmp	r1, #104	; 0x68
   1d2a4:	0a000095 	beq	1d500 <CScreenDevice::Write(char)+0x2d0>
   1d2a8:	e351006c 	cmp	r1, #108	; 0x6c
   1d2ac:	0a000093 	beq	1d500 <CScreenDevice::Write(char)+0x2d0>
   1d2b0:	e2411030 	sub	r1, r1, #48	; 0x30
   1d2b4:	e6ef3071 	uxtb	r3, r1
   1d2b8:	e3530009 	cmp	r3, #9
   1d2bc:	8afffff3 	bhi	1d290 <CScreenDevice::Write(char)+0x60>
   1d2c0:	e594304c 	ldr	r3, [r4, #76]	; 0x4c
   1d2c4:	e3a0200a 	mov	r2, #10
   1d2c8:	e0211392 	mla	r1, r2, r3, r1
   1d2cc:	e584104c 	str	r1, [r4, #76]	; 0x4c
   1d2d0:	e3510063 	cmp	r1, #99	; 0x63
   1d2d4:	8affffed 	bhi	1d290 <CScreenDevice::Write(char)+0x60>
   1d2d8:	eaffffee 	b	1d298 <CScreenDevice::Write(char)+0x68>
   1d2dc:	e2413008 	sub	r3, r1, #8
   1d2e0:	e3530013 	cmp	r3, #19
   1d2e4:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   1d2e8:	ea0000cf 	b	1d62c <CScreenDevice::Write(char)+0x3fc>
   1d2ec:	0001d564 	.word	0x0001d564
   1d2f0:	0001d558 	.word	0x0001d558
   1d2f4:	0001d544 	.word	0x0001d544
   1d2f8:	0001d62c 	.word	0x0001d62c
   1d2fc:	0001d62c 	.word	0x0001d62c
   1d300:	0001d538 	.word	0x0001d538
   1d304:	0001d62c 	.word	0x0001d62c
   1d308:	0001d62c 	.word	0x0001d62c
   1d30c:	0001d62c 	.word	0x0001d62c
   1d310:	0001d62c 	.word	0x0001d62c
   1d314:	0001d62c 	.word	0x0001d62c
   1d318:	0001d62c 	.word	0x0001d62c
   1d31c:	0001d62c 	.word	0x0001d62c
   1d320:	0001d62c 	.word	0x0001d62c
   1d324:	0001d62c 	.word	0x0001d62c
   1d328:	0001d62c 	.word	0x0001d62c
   1d32c:	0001d62c 	.word	0x0001d62c
   1d330:	0001d62c 	.word	0x0001d62c
   1d334:	0001d62c 	.word	0x0001d62c
   1d338:	0001d52c 	.word	0x0001d52c
   1d33c:	e351005b 	cmp	r1, #91	; 0x5b
   1d340:	03a03002 	moveq	r3, #2
   1d344:	05803030 	streq	r3, [r0, #48]	; 0x30
   1d348:	0affffd2 	beq	1d298 <CScreenDevice::Write(char)+0x68>
   1d34c:	eaffffcf 	b	1d290 <CScreenDevice::Write(char)+0x60>
   1d350:	e241303f 	sub	r3, r1, #63	; 0x3f
   1d354:	e3530011 	cmp	r3, #17
   1d358:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   1d35c:	ea0000da 	b	1d6cc <CScreenDevice::Write(char)+0x49c>
   1d360:	0001d680 	.word	0x0001d680
   1d364:	0001d6cc 	.word	0x0001d6cc
   1d368:	0001d26c 	.word	0x0001d26c
   1d36c:	0001d6ac 	.word	0x0001d6ac
   1d370:	0001d69c 	.word	0x0001d69c
   1d374:	0001d68c 	.word	0x0001d68c
   1d378:	0001d6cc 	.word	0x0001d6cc
   1d37c:	0001d6cc 	.word	0x0001d6cc
   1d380:	0001d6cc 	.word	0x0001d6cc
   1d384:	0001d668 	.word	0x0001d668
   1d388:	0001d6cc 	.word	0x0001d6cc
   1d38c:	0001d658 	.word	0x0001d658
   1d390:	0001d6bc 	.word	0x0001d6bc
   1d394:	0001d290 	.word	0x0001d290
   1d398:	0001d290 	.word	0x0001d290
   1d39c:	0001d6cc 	.word	0x0001d6cc
   1d3a0:	0001d6cc 	.word	0x0001d6cc
   1d3a4:	0001d290 	.word	0x0001d290
   1d3a8:	e241303b 	sub	r3, r1, #59	; 0x3b
   1d3ac:	e3530032 	cmp	r3, #50	; 0x32
   1d3b0:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   1d3b4:	eaffffbd 	b	1d2b0 <CScreenDevice::Write(char)+0x80>
   1d3b8:	0001d620 	.word	0x0001d620
   1d3bc:	0001d2b0 	.word	0x0001d2b0
   1d3c0:	0001d2b0 	.word	0x0001d2b0
   1d3c4:	0001d2b0 	.word	0x0001d2b0
   1d3c8:	0001d2b0 	.word	0x0001d2b0
   1d3cc:	0001d2b0 	.word	0x0001d2b0
   1d3d0:	0001d2b0 	.word	0x0001d2b0
   1d3d4:	0001d2b0 	.word	0x0001d2b0
   1d3d8:	0001d2b0 	.word	0x0001d2b0
   1d3dc:	0001d2b0 	.word	0x0001d2b0
   1d3e0:	0001d2b0 	.word	0x0001d2b0
   1d3e4:	0001d2b0 	.word	0x0001d2b0
   1d3e8:	0001d2b0 	.word	0x0001d2b0
   1d3ec:	0001d2b0 	.word	0x0001d2b0
   1d3f0:	0001d2b0 	.word	0x0001d2b0
   1d3f4:	0001d2b0 	.word	0x0001d2b0
   1d3f8:	0001d2b0 	.word	0x0001d2b0
   1d3fc:	0001d290 	.word	0x0001d290
   1d400:	0001d290 	.word	0x0001d290
   1d404:	0001d2b0 	.word	0x0001d2b0
   1d408:	0001d2b0 	.word	0x0001d2b0
   1d40c:	0001d290 	.word	0x0001d290
   1d410:	0001d2b0 	.word	0x0001d2b0
   1d414:	0001d2b0 	.word	0x0001d2b0
   1d418:	0001d2b0 	.word	0x0001d2b0
   1d41c:	0001d2b0 	.word	0x0001d2b0
   1d420:	0001d2b0 	.word	0x0001d2b0
   1d424:	0001d2b0 	.word	0x0001d2b0
   1d428:	0001d2b0 	.word	0x0001d2b0
   1d42c:	0001d570 	.word	0x0001d570
   1d430:	0001d2b0 	.word	0x0001d2b0
   1d434:	0001d2b0 	.word	0x0001d2b0
   1d438:	0001d2b0 	.word	0x0001d2b0
   1d43c:	0001d2b0 	.word	0x0001d2b0
   1d440:	0001d2b0 	.word	0x0001d2b0
   1d444:	0001d2b0 	.word	0x0001d2b0
   1d448:	0001d2b0 	.word	0x0001d2b0
   1d44c:	0001d2b0 	.word	0x0001d2b0
   1d450:	0001d2b0 	.word	0x0001d2b0
   1d454:	0001d2b0 	.word	0x0001d2b0
   1d458:	0001d2b0 	.word	0x0001d2b0
   1d45c:	0001d2b0 	.word	0x0001d2b0
   1d460:	0001d2b0 	.word	0x0001d2b0
   1d464:	0001d2b0 	.word	0x0001d2b0
   1d468:	0001d2b0 	.word	0x0001d2b0
   1d46c:	0001d584 	.word	0x0001d584
   1d470:	0001d2b0 	.word	0x0001d2b0
   1d474:	0001d2b0 	.word	0x0001d2b0
   1d478:	0001d2b0 	.word	0x0001d2b0
   1d47c:	0001d584 	.word	0x0001d584
   1d480:	0001d5a0 	.word	0x0001d5a0
   1d484:	e2411030 	sub	r1, r1, #48	; 0x30
   1d488:	e6ef3071 	uxtb	r3, r1
   1d48c:	e3530009 	cmp	r3, #9
   1d490:	8affff7e 	bhi	1d290 <CScreenDevice::Write(char)+0x60>
   1d494:	e3a03007 	mov	r3, #7
   1d498:	e580104c 	str	r1, [r0, #76]	; 0x4c
   1d49c:	e5803030 	str	r3, [r0, #48]	; 0x30
   1d4a0:	eaffff7c 	b	1d298 <CScreenDevice::Write(char)+0x68>
   1d4a4:	e2411030 	sub	r1, r1, #48	; 0x30
   1d4a8:	e6ef3071 	uxtb	r3, r1
   1d4ac:	e3530009 	cmp	r3, #9
   1d4b0:	8affff76 	bhi	1d290 <CScreenDevice::Write(char)+0x60>
   1d4b4:	e3a03006 	mov	r3, #6
   1d4b8:	e5801050 	str	r1, [r0, #80]	; 0x50
   1d4bc:	e5803030 	str	r3, [r0, #48]	; 0x30
   1d4c0:	eaffff74 	b	1d298 <CScreenDevice::Write(char)+0x68>
   1d4c4:	e3510048 	cmp	r1, #72	; 0x48
   1d4c8:	0a000090 	beq	1d710 <CScreenDevice::Write(char)+0x4e0>
   1d4cc:	e3510072 	cmp	r1, #114	; 0x72
   1d4d0:	0a000011 	beq	1d51c <CScreenDevice::Write(char)+0x2ec>
   1d4d4:	e2411030 	sub	r1, r1, #48	; 0x30
   1d4d8:	e6ef3071 	uxtb	r3, r1
   1d4dc:	e3530009 	cmp	r3, #9
   1d4e0:	8affff6a 	bhi	1d290 <CScreenDevice::Write(char)+0x60>
   1d4e4:	e5903050 	ldr	r3, [r0, #80]	; 0x50
   1d4e8:	e3a0200a 	mov	r2, #10
   1d4ec:	e0211392 	mla	r1, r2, r3, r1
   1d4f0:	e5801050 	str	r1, [r0, #80]	; 0x50
   1d4f4:	e35100c7 	cmp	r1, #199	; 0xc7
   1d4f8:	8affff64 	bhi	1d290 <CScreenDevice::Write(char)+0x60>
   1d4fc:	eaffff65 	b	1d298 <CScreenDevice::Write(char)+0x68>
   1d500:	e594304c 	ldr	r3, [r4, #76]	; 0x4c
   1d504:	e3530019 	cmp	r3, #25
   1d508:	02411068 	subeq	r1, r1, #104	; 0x68
   1d50c:	016f1f11 	clzeq	r1, r1
   1d510:	01a012a1 	lsreq	r1, r1, #5
   1d514:	05c41044 	strbeq	r1, [r4, #68]	; 0x44
   1d518:	eaffff5c 	b	1d290 <CScreenDevice::Write(char)+0x60>
   1d51c:	e5902050 	ldr	r2, [r0, #80]	; 0x50
   1d520:	e590104c 	ldr	r1, [r0, #76]	; 0x4c
   1d524:	eb000135 	bl	1da00 <CScreenDevice::SetScrollRegion(unsigned int, unsigned int)>
   1d528:	eaffff58 	b	1d290 <CScreenDevice::Write(char)+0x60>
   1d52c:	e3a03001 	mov	r3, #1
   1d530:	e5803030 	str	r3, [r0, #48]	; 0x30
   1d534:	eaffff57 	b	1d298 <CScreenDevice::Write(char)+0x68>
   1d538:	e3a03000 	mov	r3, #0
   1d53c:	e580303c 	str	r3, [r0, #60]	; 0x3c
   1d540:	eaffff54 	b	1d298 <CScreenDevice::Write(char)+0x68>
   1d544:	e3a03000 	mov	r3, #0
   1d548:	e580303c 	str	r3, [r0, #60]	; 0x3c
   1d54c:	e28dd008 	add	sp, sp, #8
   1d550:	e8bd4010 	pop	{r4, lr}
   1d554:	ea0000a8 	b	1d7fc <CScreenDevice::CursorDown()>
   1d558:	e28dd008 	add	sp, sp, #8
   1d55c:	e8bd4010 	pop	{r4, lr}
   1d560:	ea00016e 	b	1db20 <CScreenDevice::Tabulator()>
   1d564:	e28dd008 	add	sp, sp, #8
   1d568:	e8bd4010 	pop	{r4, lr}
   1d56c:	ea0000b9 	b	1d858 <CScreenDevice::CursorLeft()>
   1d570:	e590104c 	ldr	r1, [r0, #76]	; 0x4c
   1d574:	e3510000 	cmp	r1, #0
   1d578:	0affff44 	beq	1d290 <CScreenDevice::Write(char)+0x60>
   1d57c:	eb000230 	bl	1de44 <CScreenDevice::EraseChars(unsigned int) [clone .part.4]>
   1d580:	eaffff42 	b	1d290 <CScreenDevice::Write(char)+0x60>
   1d584:	e590304c 	ldr	r3, [r0, #76]	; 0x4c
   1d588:	e3530004 	cmp	r3, #4
   1d58c:	02411068 	subeq	r1, r1, #104	; 0x68
   1d590:	016f1f11 	clzeq	r1, r1
   1d594:	01a012a1 	lsreq	r1, r1, #5
   1d598:	05c01048 	strbeq	r1, [r0, #72]	; 0x48
   1d59c:	eaffff3b 	b	1d290 <CScreenDevice::Write(char)+0x60>
   1d5a0:	e590304c 	ldr	r3, [r0, #76]	; 0x4c
   1d5a4:	e353001b 	cmp	r3, #27
   1d5a8:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   1d5ac:	eaffff37 	b	1d290 <CScreenDevice::Write(char)+0x60>
   1d5b0:	0001d704 	.word	0x0001d704
   1d5b4:	0001d6f8 	.word	0x0001d6f8
   1d5b8:	0001d6ec 	.word	0x0001d6ec
   1d5bc:	0001d290 	.word	0x0001d290
   1d5c0:	0001d290 	.word	0x0001d290
   1d5c4:	0001d290 	.word	0x0001d290
   1d5c8:	0001d290 	.word	0x0001d290
   1d5cc:	0001d290 	.word	0x0001d290
   1d5d0:	0001d290 	.word	0x0001d290
   1d5d4:	0001d290 	.word	0x0001d290
   1d5d8:	0001d290 	.word	0x0001d290
   1d5dc:	0001d290 	.word	0x0001d290
   1d5e0:	0001d290 	.word	0x0001d290
   1d5e4:	0001d290 	.word	0x0001d290
   1d5e8:	0001d290 	.word	0x0001d290
   1d5ec:	0001d290 	.word	0x0001d290
   1d5f0:	0001d290 	.word	0x0001d290
   1d5f4:	0001d290 	.word	0x0001d290
   1d5f8:	0001d290 	.word	0x0001d290
   1d5fc:	0001d290 	.word	0x0001d290
   1d600:	0001d290 	.word	0x0001d290
   1d604:	0001d290 	.word	0x0001d290
   1d608:	0001d290 	.word	0x0001d290
   1d60c:	0001d290 	.word	0x0001d290
   1d610:	0001d290 	.word	0x0001d290
   1d614:	0001d290 	.word	0x0001d290
   1d618:	0001d290 	.word	0x0001d290
   1d61c:	0001d704 	.word	0x0001d704
   1d620:	e3a03005 	mov	r3, #5
   1d624:	e5803030 	str	r3, [r0, #48]	; 0x30
   1d628:	eaffff1a 	b	1d298 <CScreenDevice::Write(char)+0x68>
   1d62c:	e6ef3071 	uxtb	r3, r1
   1d630:	e353001f 	cmp	r3, #31
   1d634:	9affff17 	bls	1d298 <CScreenDevice::Write(char)+0x68>
   1d638:	e1d0c4b6 	ldrh	ip, [r0, #70]	; 0x46
   1d63c:	e1c023dc 	ldrd	r2, [r0, #60]	; 0x3c
   1d640:	e58dc000 	str	ip, [sp]
   1d644:	eb000178 	bl	1dc2c <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)>
   1d648:	e1a00004 	mov	r0, r4
   1d64c:	e28dd008 	add	sp, sp, #8
   1d650:	e8bd4010 	pop	{r4, lr}
   1d654:	ea0000b2 	b	1d924 <CScreenDevice::CursorRight()>
   1d658:	eb000035 	bl	1d734 <CScreenDevice::ClearDisplayEnd()>
   1d65c:	e3a03000 	mov	r3, #0
   1d660:	e5843030 	str	r3, [r4, #48]	; 0x30
   1d664:	eaffff0b 	b	1d298 <CScreenDevice::Write(char)+0x68>
   1d668:	e5902034 	ldr	r2, [r0, #52]	; 0x34
   1d66c:	e3a03000 	mov	r3, #0
   1d670:	e5802040 	str	r2, [r0, #64]	; 0x40
   1d674:	e580303c 	str	r3, [r0, #60]	; 0x3c
   1d678:	e5803030 	str	r3, [r0, #48]	; 0x30
   1d67c:	eaffff05 	b	1d298 <CScreenDevice::Write(char)+0x68>
   1d680:	e3a03004 	mov	r3, #4
   1d684:	e5803030 	str	r3, [r0, #48]	; 0x30
   1d688:	eaffff02 	b	1d298 <CScreenDevice::Write(char)+0x68>
   1d68c:	eb000071 	bl	1d858 <CScreenDevice::CursorLeft()>
   1d690:	e3a03000 	mov	r3, #0
   1d694:	e5843030 	str	r3, [r4, #48]	; 0x30
   1d698:	eafffefe 	b	1d298 <CScreenDevice::Write(char)+0x68>
   1d69c:	eb0000a0 	bl	1d924 <CScreenDevice::CursorRight()>
   1d6a0:	e3a03000 	mov	r3, #0
   1d6a4:	e5843030 	str	r3, [r4, #48]	; 0x30
   1d6a8:	eafffefa 	b	1d298 <CScreenDevice::Write(char)+0x68>
   1d6ac:	eb000052 	bl	1d7fc <CScreenDevice::CursorDown()>
   1d6b0:	e3a03000 	mov	r3, #0
   1d6b4:	e5843030 	str	r3, [r4, #48]	; 0x30
   1d6b8:	eafffef6 	b	1d298 <CScreenDevice::Write(char)+0x68>
   1d6bc:	eb00003c 	bl	1d7b4 <CScreenDevice::ClearLineEnd()>
   1d6c0:	e3a03000 	mov	r3, #0
   1d6c4:	e5843030 	str	r3, [r4, #48]	; 0x30
   1d6c8:	eafffef2 	b	1d298 <CScreenDevice::Write(char)+0x68>
   1d6cc:	e2411030 	sub	r1, r1, #48	; 0x30
   1d6d0:	e6ef3071 	uxtb	r3, r1
   1d6d4:	e3530009 	cmp	r3, #9
   1d6d8:	8afffeec 	bhi	1d290 <CScreenDevice::Write(char)+0x60>
   1d6dc:	e3a03003 	mov	r3, #3
   1d6e0:	e580104c 	str	r1, [r0, #76]	; 0x4c
   1d6e4:	e5803030 	str	r3, [r0, #48]	; 0x30
   1d6e8:	eafffeea 	b	1d298 <CScreenDevice::Write(char)+0x68>
   1d6ec:	e3a0301f 	mov	r3, #31
   1d6f0:	e1c034b6 	strh	r3, [r0, #70]	; 0x46
   1d6f4:	eafffee5 	b	1d290 <CScreenDevice::Write(char)+0x60>
   1d6f8:	e3a03b3e 	mov	r3, #63488	; 0xf800
   1d6fc:	e1c034b6 	strh	r3, [r0, #70]	; 0x46
   1d700:	eafffee2 	b	1d290 <CScreenDevice::Write(char)+0x60>
   1d704:	e3e03020 	mvn	r3, #32
   1d708:	e1c034b6 	strh	r3, [r0, #70]	; 0x46
   1d70c:	eafffedf 	b	1d290 <CScreenDevice::Write(char)+0x60>
   1d710:	e5902050 	ldr	r2, [r0, #80]	; 0x50
   1d714:	e590104c 	ldr	r1, [r0, #76]	; 0x4c
   1d718:	eb000069 	bl	1d8c4 <CScreenDevice::CursorMove(unsigned int, unsigned int)>
   1d71c:	e3a03000 	mov	r3, #0
   1d720:	e5843030 	str	r3, [r4, #48]	; 0x30
   1d724:	eafffedb 	b	1d298 <CScreenDevice::Write(char)+0x68>

0001d728 <CScreenDevice::CarriageReturn()>:
   1d728:	e3a03000 	mov	r3, #0
   1d72c:	e580303c 	str	r3, [r0, #60]	; 0x3c
   1d730:	e12fff1e 	bx	lr

0001d734 <CScreenDevice::ClearDisplayEnd()>:
   1d734:	e92d4070 	push	{r4, r5, r6, lr}
   1d738:	e1a04000 	mov	r4, r0
   1d73c:	e590503c 	ldr	r5, [r0, #60]	; 0x3c
   1d740:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   1d744:	e2806014 	add	r6, r0, #20
   1d748:	e1550003 	cmp	r5, r3
   1d74c:	2a000009 	bcs	1d778 <CScreenDevice::ClearDisplayEnd()+0x44>
   1d750:	e1a01005 	mov	r1, r5
   1d754:	e5942040 	ldr	r2, [r4, #64]	; 0x40
   1d758:	e1a00004 	mov	r0, r4
   1d75c:	eb000163 	bl	1dcf0 <CScreenDevice::EraseChar(unsigned int, unsigned int)>
   1d760:	e1a00006 	mov	r0, r6
   1d764:	eb0014e2 	bl	22af4 <CCharGenerator::GetCharWidth() const>
   1d768:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   1d76c:	e0855000 	add	r5, r5, r0
   1d770:	e1530005 	cmp	r3, r5
   1d774:	8afffff5 	bhi	1d750 <CScreenDevice::ClearDisplayEnd()+0x1c>
   1d778:	e5945040 	ldr	r5, [r4, #64]	; 0x40
   1d77c:	e1a00006 	mov	r0, r6
   1d780:	eb0014dd 	bl	22afc <CCharGenerator::GetCharHeight() const>
   1d784:	e5943020 	ldr	r3, [r4, #32]
   1d788:	e0850000 	add	r0, r5, r0
   1d78c:	e594201c 	ldr	r2, [r4, #28]
   1d790:	e5941018 	ldr	r1, [r4, #24]
   1d794:	e0000093 	mul	r0, r3, r0
   1d798:	e07020a2 	rsbs	r2, r0, r2, lsr #1
   1d79c:	08bd8070 	popeq	{r4, r5, r6, pc}
   1d7a0:	e0810080 	add	r0, r1, r0, lsl #1
   1d7a4:	e1a02082 	lsl	r2, r2, #1
   1d7a8:	e3a01000 	mov	r1, #0
   1d7ac:	e8bd4070 	pop	{r4, r5, r6, lr}
   1d7b0:	ea000ca6 	b	20a50 <memset>

0001d7b4 <CScreenDevice::ClearLineEnd()>:
   1d7b4:	e92d4070 	push	{r4, r5, r6, lr}
   1d7b8:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   1d7bc:	e590403c 	ldr	r4, [r0, #60]	; 0x3c
   1d7c0:	e1540003 	cmp	r4, r3
   1d7c4:	28bd8070 	popcs	{r4, r5, r6, pc}
   1d7c8:	e1a05000 	mov	r5, r0
   1d7cc:	e2806014 	add	r6, r0, #20
   1d7d0:	e1a01004 	mov	r1, r4
   1d7d4:	e5952040 	ldr	r2, [r5, #64]	; 0x40
   1d7d8:	e1a00005 	mov	r0, r5
   1d7dc:	eb000143 	bl	1dcf0 <CScreenDevice::EraseChar(unsigned int, unsigned int)>
   1d7e0:	e1a00006 	mov	r0, r6
   1d7e4:	eb0014c2 	bl	22af4 <CCharGenerator::GetCharWidth() const>
   1d7e8:	e5953024 	ldr	r3, [r5, #36]	; 0x24
   1d7ec:	e0844000 	add	r4, r4, r0
   1d7f0:	e1530004 	cmp	r3, r4
   1d7f4:	8afffff5 	bhi	1d7d0 <CScreenDevice::ClearLineEnd()+0x1c>
   1d7f8:	e8bd8070 	pop	{r4, r5, r6, pc}

0001d7fc <CScreenDevice::CursorDown()>:
   1d7fc:	e92d4070 	push	{r4, r5, r6, lr}
   1d800:	e1a04000 	mov	r4, r0
   1d804:	e2805014 	add	r5, r0, #20
   1d808:	e1a00005 	mov	r0, r5
   1d80c:	eb0014ba 	bl	22afc <CCharGenerator::GetCharHeight() const>
   1d810:	e5943040 	ldr	r3, [r4, #64]	; 0x40
   1d814:	e5942038 	ldr	r2, [r4, #56]	; 0x38
   1d818:	e0800003 	add	r0, r0, r3
   1d81c:	e5840040 	str	r0, [r4, #64]	; 0x40
   1d820:	e1500002 	cmp	r0, r2
   1d824:	38bd8070 	popcc	{r4, r5, r6, pc}
   1d828:	e1a00004 	mov	r0, r4
   1d82c:	eb0000cd 	bl	1db68 <CScreenDevice::Scroll()>
   1d830:	e1a00005 	mov	r0, r5
   1d834:	eb0014b0 	bl	22afc <CCharGenerator::GetCharHeight() const>
   1d838:	e5943040 	ldr	r3, [r4, #64]	; 0x40
   1d83c:	e0430000 	sub	r0, r3, r0
   1d840:	e5840040 	str	r0, [r4, #64]	; 0x40
   1d844:	e8bd8070 	pop	{r4, r5, r6, pc}

0001d848 <CScreenDevice::CursorHome()>:
   1d848:	e5903034 	ldr	r3, [r0, #52]	; 0x34
   1d84c:	e3a02000 	mov	r2, #0
   1d850:	e1c023fc 	strd	r2, [r0, #60]	; 0x3c
   1d854:	e12fff1e 	bx	lr

0001d858 <CScreenDevice::CursorLeft()>:
   1d858:	e590303c 	ldr	r3, [r0, #60]	; 0x3c
   1d85c:	e92d4070 	push	{r4, r5, r6, lr}
   1d860:	e1a04000 	mov	r4, r0
   1d864:	e3530000 	cmp	r3, #0
   1d868:	1a00000f 	bne	1d8ac <CScreenDevice::CursorLeft()+0x54>
   1d86c:	e5902040 	ldr	r2, [r0, #64]	; 0x40
   1d870:	e5903034 	ldr	r3, [r0, #52]	; 0x34
   1d874:	e1520003 	cmp	r2, r3
   1d878:	98bd8070 	popls	{r4, r5, r6, pc}
   1d87c:	e5905024 	ldr	r5, [r0, #36]	; 0x24
   1d880:	e2806014 	add	r6, r0, #20
   1d884:	e1a00006 	mov	r0, r6
   1d888:	eb001499 	bl	22af4 <CCharGenerator::GetCharWidth() const>
   1d88c:	e0455000 	sub	r5, r5, r0
   1d890:	e1a00006 	mov	r0, r6
   1d894:	e584503c 	str	r5, [r4, #60]	; 0x3c
   1d898:	eb001497 	bl	22afc <CCharGenerator::GetCharHeight() const>
   1d89c:	e5943040 	ldr	r3, [r4, #64]	; 0x40
   1d8a0:	e0430000 	sub	r0, r3, r0
   1d8a4:	e5840040 	str	r0, [r4, #64]	; 0x40
   1d8a8:	e8bd8070 	pop	{r4, r5, r6, pc}
   1d8ac:	e2800014 	add	r0, r0, #20
   1d8b0:	eb00148f 	bl	22af4 <CCharGenerator::GetCharWidth() const>
   1d8b4:	e594303c 	ldr	r3, [r4, #60]	; 0x3c
   1d8b8:	e0430000 	sub	r0, r3, r0
   1d8bc:	e584003c 	str	r0, [r4, #60]	; 0x3c
   1d8c0:	e8bd8070 	pop	{r4, r5, r6, pc}

0001d8c4 <CScreenDevice::CursorMove(unsigned int, unsigned int)>:
   1d8c4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   1d8c8:	e1a04002 	mov	r4, r2
   1d8cc:	e2444001 	sub	r4, r4, #1
   1d8d0:	e1a05000 	mov	r5, r0
   1d8d4:	e2806014 	add	r6, r0, #20
   1d8d8:	e1a00006 	mov	r0, r6
   1d8dc:	e1a07001 	mov	r7, r1
   1d8e0:	eb001483 	bl	22af4 <CCharGenerator::GetCharWidth() const>
   1d8e4:	e0040490 	mul	r4, r0, r4
   1d8e8:	e1a00006 	mov	r0, r6
   1d8ec:	eb001482 	bl	22afc <CCharGenerator::GetCharHeight() const>
   1d8f0:	e5953024 	ldr	r3, [r5, #36]	; 0x24
   1d8f4:	e1530004 	cmp	r3, r4
   1d8f8:	98bd81f0 	popls	{r4, r5, r6, r7, r8, pc}
   1d8fc:	e2477001 	sub	r7, r7, #1
   1d900:	e5953034 	ldr	r3, [r5, #52]	; 0x34
   1d904:	e0000790 	mul	r0, r0, r7
   1d908:	e1530000 	cmp	r3, r0
   1d90c:	88bd81f0 	pophi	{r4, r5, r6, r7, r8, pc}
   1d910:	e5953038 	ldr	r3, [r5, #56]	; 0x38
   1d914:	e1530000 	cmp	r3, r0
   1d918:	8585403c 	strhi	r4, [r5, #60]	; 0x3c
   1d91c:	85850040 	strhi	r0, [r5, #64]	; 0x40
   1d920:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0001d924 <CScreenDevice::CursorRight()>:
   1d924:	e92d4010 	push	{r4, lr}
   1d928:	e1a04000 	mov	r4, r0
   1d92c:	e2800014 	add	r0, r0, #20
   1d930:	eb00146f 	bl	22af4 <CCharGenerator::GetCharWidth() const>
   1d934:	e594303c 	ldr	r3, [r4, #60]	; 0x3c
   1d938:	e5942024 	ldr	r2, [r4, #36]	; 0x24
   1d93c:	e0800003 	add	r0, r0, r3
   1d940:	e584003c 	str	r0, [r4, #60]	; 0x3c
   1d944:	e1500002 	cmp	r0, r2
   1d948:	38bd8010 	popcc	{r4, pc}
   1d94c:	e3a03000 	mov	r3, #0
   1d950:	e1a00004 	mov	r0, r4
   1d954:	e584303c 	str	r3, [r4, #60]	; 0x3c
   1d958:	e8bd4010 	pop	{r4, lr}
   1d95c:	eaffffa6 	b	1d7fc <CScreenDevice::CursorDown()>

0001d960 <CScreenDevice::CursorUp()>:
   1d960:	e5902040 	ldr	r2, [r0, #64]	; 0x40
   1d964:	e5903034 	ldr	r3, [r0, #52]	; 0x34
   1d968:	e1520003 	cmp	r2, r3
   1d96c:	912fff1e 	bxls	lr
   1d970:	e92d4010 	push	{r4, lr}
   1d974:	e1a04000 	mov	r4, r0
   1d978:	e2800014 	add	r0, r0, #20
   1d97c:	eb00145e 	bl	22afc <CCharGenerator::GetCharHeight() const>
   1d980:	e5943040 	ldr	r3, [r4, #64]	; 0x40
   1d984:	e0430000 	sub	r0, r3, r0
   1d988:	e5840040 	str	r0, [r4, #64]	; 0x40
   1d98c:	e8bd8010 	pop	{r4, pc}

0001d990 <CScreenDevice::DeleteChars(unsigned int)>:
   1d990:	e12fff1e 	bx	lr

0001d994 <CScreenDevice::DeleteLines(unsigned int)>:
   1d994:	e12fff1e 	bx	lr

0001d998 <CScreenDevice::DisplayChar(char)>:
   1d998:	e6ef3071 	uxtb	r3, r1
   1d99c:	e353001f 	cmp	r3, #31
   1d9a0:	912fff1e 	bxls	lr
   1d9a4:	e92d4010 	push	{r4, lr}
   1d9a8:	e1a04000 	mov	r4, r0
   1d9ac:	e1d0c4b6 	ldrh	ip, [r0, #70]	; 0x46
   1d9b0:	e24dd008 	sub	sp, sp, #8
   1d9b4:	e1c023dc 	ldrd	r2, [r0, #60]	; 0x3c
   1d9b8:	e58dc000 	str	ip, [sp]
   1d9bc:	eb00009a 	bl	1dc2c <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)>
   1d9c0:	e1a00004 	mov	r0, r4
   1d9c4:	e28dd008 	add	sp, sp, #8
   1d9c8:	e8bd4010 	pop	{r4, lr}
   1d9cc:	eaffffd4 	b	1d924 <CScreenDevice::CursorRight()>

0001d9d0 <CScreenDevice::EraseChars(unsigned int)>:
   1d9d0:	e3510000 	cmp	r1, #0
   1d9d4:	012fff1e 	bxeq	lr
   1d9d8:	ea000119 	b	1de44 <CScreenDevice::EraseChars(unsigned int) [clone .part.4]>

0001d9dc <CScreenDevice::InsertLines(unsigned int)>:
   1d9dc:	e12fff1e 	bx	lr

0001d9e0 <CScreenDevice::InsertMode(bool)>:
   1d9e0:	e5c01048 	strb	r1, [r0, #72]	; 0x48
   1d9e4:	e12fff1e 	bx	lr

0001d9e8 <CScreenDevice::NewLine()>:
   1d9e8:	e3a02000 	mov	r2, #0
   1d9ec:	e580203c 	str	r2, [r0, #60]	; 0x3c
   1d9f0:	eaffff81 	b	1d7fc <CScreenDevice::CursorDown()>

0001d9f4 <CScreenDevice::ReverseScroll()>:
   1d9f4:	e12fff1e 	bx	lr

0001d9f8 <CScreenDevice::SetCursorMode(bool)>:
   1d9f8:	e5c01044 	strb	r1, [r0, #68]	; 0x44
   1d9fc:	e12fff1e 	bx	lr

0001da00 <CScreenDevice::SetScrollRegion(unsigned int, unsigned int)>:
   1da00:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   1da04:	e1a04001 	mov	r4, r1
   1da08:	e2444001 	sub	r4, r4, #1
   1da0c:	e1a05000 	mov	r5, r0
   1da10:	e2807014 	add	r7, r0, #20
   1da14:	e1a06002 	mov	r6, r2
   1da18:	e1a00007 	mov	r0, r7
   1da1c:	eb001436 	bl	22afc <CCharGenerator::GetCharHeight() const>
   1da20:	e0040490 	mul	r4, r0, r4
   1da24:	e1a00007 	mov	r0, r7
   1da28:	eb001433 	bl	22afc <CCharGenerator::GetCharHeight() const>
   1da2c:	e595202c 	ldr	r2, [r5, #44]	; 0x2c
   1da30:	e0000096 	mul	r0, r6, r0
   1da34:	e1520004 	cmp	r2, r4
   1da38:	93a03000 	movls	r3, #0
   1da3c:	83a03001 	movhi	r3, #1
   1da40:	e3500000 	cmp	r0, #0
   1da44:	03a03000 	moveq	r3, #0
   1da48:	e1520000 	cmp	r2, r0
   1da4c:	33a03000 	movcc	r3, #0
   1da50:	22033001 	andcs	r3, r3, #1
   1da54:	e1540000 	cmp	r4, r0
   1da58:	23a03000 	movcs	r3, #0
   1da5c:	32033001 	andcc	r3, r3, #1
   1da60:	e3530000 	cmp	r3, #0
   1da64:	e3a03000 	mov	r3, #0
   1da68:	15854034 	strne	r4, [r5, #52]	; 0x34
   1da6c:	15850038 	strne	r0, [r5, #56]	; 0x38
   1da70:	05954034 	ldreq	r4, [r5, #52]	; 0x34
   1da74:	e5854040 	str	r4, [r5, #64]	; 0x40
   1da78:	e585303c 	str	r3, [r5, #60]	; 0x3c
   1da7c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0001da80 <CScreenDevice::SetStandoutMode(unsigned int)>:
   1da80:	e351001b 	cmp	r1, #27
   1da84:	979ff101 	ldrls	pc, [pc, r1, lsl #2]
   1da88:	ea00001d 	b	1db04 <CScreenDevice::SetStandoutMode(unsigned int)+0x84>
   1da8c:	0001db14 	.word	0x0001db14
   1da90:	0001db08 	.word	0x0001db08
   1da94:	0001dafc 	.word	0x0001dafc
   1da98:	0001db04 	.word	0x0001db04
   1da9c:	0001db04 	.word	0x0001db04
   1daa0:	0001db04 	.word	0x0001db04
   1daa4:	0001db04 	.word	0x0001db04
   1daa8:	0001db04 	.word	0x0001db04
   1daac:	0001db04 	.word	0x0001db04
   1dab0:	0001db04 	.word	0x0001db04
   1dab4:	0001db04 	.word	0x0001db04
   1dab8:	0001db04 	.word	0x0001db04
   1dabc:	0001db04 	.word	0x0001db04
   1dac0:	0001db04 	.word	0x0001db04
   1dac4:	0001db04 	.word	0x0001db04
   1dac8:	0001db04 	.word	0x0001db04
   1dacc:	0001db04 	.word	0x0001db04
   1dad0:	0001db04 	.word	0x0001db04
   1dad4:	0001db04 	.word	0x0001db04
   1dad8:	0001db04 	.word	0x0001db04
   1dadc:	0001db04 	.word	0x0001db04
   1dae0:	0001db04 	.word	0x0001db04
   1dae4:	0001db04 	.word	0x0001db04
   1dae8:	0001db04 	.word	0x0001db04
   1daec:	0001db04 	.word	0x0001db04
   1daf0:	0001db04 	.word	0x0001db04
   1daf4:	0001db04 	.word	0x0001db04
   1daf8:	0001db14 	.word	0x0001db14
   1dafc:	e3a0301f 	mov	r3, #31
   1db00:	e1c034b6 	strh	r3, [r0, #70]	; 0x46
   1db04:	e12fff1e 	bx	lr
   1db08:	e3a03b3e 	mov	r3, #63488	; 0xf800
   1db0c:	e1c034b6 	strh	r3, [r0, #70]	; 0x46
   1db10:	e12fff1e 	bx	lr
   1db14:	e3e03020 	mvn	r3, #32
   1db18:	e1c034b6 	strh	r3, [r0, #70]	; 0x46
   1db1c:	e12fff1e 	bx	lr

0001db20 <CScreenDevice::Tabulator()>:
   1db20:	e92d4010 	push	{r4, lr}
   1db24:	e1a04000 	mov	r4, r0
   1db28:	e2800014 	add	r0, r0, #20
   1db2c:	eb0013f0 	bl	22af4 <CCharGenerator::GetCharWidth() const>
   1db30:	e1a00180 	lsl	r0, r0, #3
   1db34:	e594303c 	ldr	r3, [r4, #60]	; 0x3c
   1db38:	e5942024 	ldr	r2, [r4, #36]	; 0x24
   1db3c:	e0803003 	add	r3, r0, r3
   1db40:	e733f013 	udiv	r3, r3, r0
   1db44:	e0000390 	mul	r0, r0, r3
   1db48:	e584003c 	str	r0, [r4, #60]	; 0x3c
   1db4c:	e1500002 	cmp	r0, r2
   1db50:	38bd8010 	popcc	{r4, pc}
   1db54:	e3a03000 	mov	r3, #0
   1db58:	e1a00004 	mov	r0, r4
   1db5c:	e584303c 	str	r3, [r4, #60]	; 0x3c
   1db60:	e8bd4010 	pop	{r4, lr}
   1db64:	eaffff24 	b	1d7fc <CScreenDevice::CursorDown()>

0001db68 <CScreenDevice::Scroll()>:
   1db68:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   1db6c:	e1a05000 	mov	r5, r0
   1db70:	e2800014 	add	r0, r0, #20
   1db74:	e24dd008 	sub	sp, sp, #8
   1db78:	eb0013df 	bl	22afc <CCharGenerator::GetCharHeight() const>
   1db7c:	e5951034 	ldr	r1, [r5, #52]	; 0x34
   1db80:	e1a06000 	mov	r6, r0
   1db84:	e5954038 	ldr	r4, [r5, #56]	; 0x38
   1db88:	e5950020 	ldr	r0, [r5, #32]
   1db8c:	e0444001 	sub	r4, r4, r1
   1db90:	e5952018 	ldr	r2, [r5, #24]
   1db94:	e0444006 	sub	r4, r4, r6
   1db98:	e1a03080 	lsl	r3, r0, #1
   1db9c:	e0000190 	mul	r0, r0, r1
   1dba0:	e0040493 	mul	r4, r3, r4
   1dba4:	e0827080 	add	r7, r2, r0, lsl #1
   1dba8:	e3540000 	cmp	r4, #0
   1dbac:	1a00000a 	bne	1dbdc <CScreenDevice::Scroll()+0x74>
   1dbb0:	e0030693 	mul	r3, r3, r6
   1dbb4:	e1b03123 	lsrs	r3, r3, #2
   1dbb8:	0a000005 	beq	1dbd4 <CScreenDevice::Scroll()+0x6c>
   1dbbc:	e1a02103 	lsl	r2, r3, #2
   1dbc0:	e1a00007 	mov	r0, r7
   1dbc4:	e3a01000 	mov	r1, #0
   1dbc8:	e28dd008 	add	sp, sp, #8
   1dbcc:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   1dbd0:	ea000b9e 	b	20a50 <memset>
   1dbd4:	e28dd008 	add	sp, sp, #8
   1dbd8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1dbdc:	e0811006 	add	r1, r1, r6
   1dbe0:	e2858058 	add	r8, r5, #88	; 0x58
   1dbe4:	e1a00008 	mov	r0, r8
   1dbe8:	e3a0c000 	mov	ip, #0
   1dbec:	e58dc004 	str	ip, [sp, #4]
   1dbf0:	e3a0c002 	mov	ip, #2
   1dbf4:	e0222193 	mla	r2, r3, r1, r2
   1dbf8:	e58dc000 	str	ip, [sp]
   1dbfc:	e1a03004 	mov	r3, r4
   1dc00:	e1a01007 	mov	r1, r7
   1dc04:	eb001467 	bl	22da8 <CDMAChannel::SetupMemCopy(void*, void const*, unsigned int, unsigned int, bool)>
   1dc08:	e1a00008 	mov	r0, r8
   1dc0c:	eb00163e 	bl	2350c <CDMAChannel::Start()>
   1dc10:	e1a00008 	mov	r0, r8
   1dc14:	eb001695 	bl	23670 <CDMAChannel::Wait()>
   1dc18:	e5953020 	ldr	r3, [r5, #32]
   1dc1c:	e3c44003 	bic	r4, r4, #3
   1dc20:	e0877004 	add	r7, r7, r4
   1dc24:	e1a03083 	lsl	r3, r3, #1
   1dc28:	eaffffe0 	b	1dbb0 <CScreenDevice::Scroll()+0x48>

0001dc2c <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)>:
   1dc2c:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1dc30:	e1a07000 	mov	r7, r0
   1dc34:	e2876014 	add	r6, r7, #20
   1dc38:	e24dd00c 	sub	sp, sp, #12
   1dc3c:	e3a08000 	mov	r8, #0
   1dc40:	e1a0a001 	mov	sl, r1
   1dc44:	e1a09002 	mov	r9, r2
   1dc48:	e1a0b003 	mov	fp, r3
   1dc4c:	e1dd03b0 	ldrh	r0, [sp, #48]	; 0x30
   1dc50:	e58d0004 	str	r0, [sp, #4]
   1dc54:	e1a00006 	mov	r0, r6
   1dc58:	eb0013a7 	bl	22afc <CCharGenerator::GetCharHeight() const>
   1dc5c:	e1500008 	cmp	r0, r8
   1dc60:	9a000020 	bls	1dce8 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)+0xbc>
   1dc64:	e3a04000 	mov	r4, #0
   1dc68:	e1a00006 	mov	r0, r6
   1dc6c:	e0845009 	add	r5, r4, r9
   1dc70:	eb00139f 	bl	22af4 <CCharGenerator::GetCharWidth() const>
   1dc74:	e1a02004 	mov	r2, r4
   1dc78:	e1500004 	cmp	r0, r4
   1dc7c:	e1a03008 	mov	r3, r8
   1dc80:	e1a0100a 	mov	r1, sl
   1dc84:	e1a00006 	mov	r0, r6
   1dc88:	9a000010 	bls	1dcd0 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)+0xa4>
   1dc8c:	eb00139e 	bl	22b0c <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const>
   1dc90:	e5973024 	ldr	r3, [r7, #36]	; 0x24
   1dc94:	e3500000 	cmp	r0, #0
   1dc98:	e59d2004 	ldr	r2, [sp, #4]
   1dc9c:	e2844001 	add	r4, r4, #1
   1dca0:	03a02000 	moveq	r2, #0
   1dca4:	e1550003 	cmp	r5, r3
   1dca8:	2affffee 	bcs	1dc68 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)+0x3c>
   1dcac:	e5973028 	ldr	r3, [r7, #40]	; 0x28
   1dcb0:	e153000b 	cmp	r3, fp
   1dcb4:	9affffeb 	bls	1dc68 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)+0x3c>
   1dcb8:	e5973020 	ldr	r3, [r7, #32]
   1dcbc:	e5971018 	ldr	r1, [r7, #24]
   1dcc0:	e0255b93 	mla	r5, r3, fp, r5
   1dcc4:	e1a05085 	lsl	r5, r5, #1
   1dcc8:	e18120b5 	strh	r2, [r1, r5]
   1dccc:	eaffffe5 	b	1dc68 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)+0x3c>
   1dcd0:	e2888001 	add	r8, r8, #1
   1dcd4:	e1a00006 	mov	r0, r6
   1dcd8:	eb001387 	bl	22afc <CCharGenerator::GetCharHeight() const>
   1dcdc:	e28bb001 	add	fp, fp, #1
   1dce0:	e1500008 	cmp	r0, r8
   1dce4:	8affffde 	bhi	1dc64 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)+0x38>
   1dce8:	e28dd00c 	add	sp, sp, #12
   1dcec:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

0001dcf0 <CScreenDevice::EraseChar(unsigned int, unsigned int)>:
   1dcf0:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1dcf4:	e3a08000 	mov	r8, #0
   1dcf8:	e1a0a000 	mov	sl, r0
   1dcfc:	e1a06001 	mov	r6, r1
   1dd00:	e1a07002 	mov	r7, r2
   1dd04:	e2805014 	add	r5, r0, #20
   1dd08:	e1a09008 	mov	r9, r8
   1dd0c:	e1a00005 	mov	r0, r5
   1dd10:	eb001379 	bl	22afc <CCharGenerator::GetCharHeight() const>
   1dd14:	e1500008 	cmp	r0, r8
   1dd18:	98bd87f0 	popls	{r4, r5, r6, r7, r8, r9, sl, pc}
   1dd1c:	e3a04000 	mov	r4, #0
   1dd20:	e1a00005 	mov	r0, r5
   1dd24:	eb001372 	bl	22af4 <CCharGenerator::GetCharWidth() const>
   1dd28:	e0843006 	add	r3, r4, r6
   1dd2c:	e1500004 	cmp	r0, r4
   1dd30:	9a00000c 	bls	1dd68 <CScreenDevice::EraseChar(unsigned int, unsigned int)+0x78>
   1dd34:	e59a2024 	ldr	r2, [sl, #36]	; 0x24
   1dd38:	e2844001 	add	r4, r4, #1
   1dd3c:	e1530002 	cmp	r3, r2
   1dd40:	2afffff6 	bcs	1dd20 <CScreenDevice::EraseChar(unsigned int, unsigned int)+0x30>
   1dd44:	e59a2028 	ldr	r2, [sl, #40]	; 0x28
   1dd48:	e1520007 	cmp	r2, r7
   1dd4c:	9afffff3 	bls	1dd20 <CScreenDevice::EraseChar(unsigned int, unsigned int)+0x30>
   1dd50:	e59a2020 	ldr	r2, [sl, #32]
   1dd54:	e59a1018 	ldr	r1, [sl, #24]
   1dd58:	e0233792 	mla	r3, r2, r7, r3
   1dd5c:	e1a03083 	lsl	r3, r3, #1
   1dd60:	e18190b3 	strh	r9, [r1, r3]
   1dd64:	eaffffed 	b	1dd20 <CScreenDevice::EraseChar(unsigned int, unsigned int)+0x30>
   1dd68:	e2888001 	add	r8, r8, #1
   1dd6c:	e2877001 	add	r7, r7, #1
   1dd70:	eaffffe5 	b	1dd0c <CScreenDevice::EraseChar(unsigned int, unsigned int)+0x1c>

0001dd74 <CScreenDevice::InvertCursor()>:
   1dd74:	e5d03044 	ldrb	r3, [r0, #68]	; 0x44
   1dd78:	e3530000 	cmp	r3, #0
   1dd7c:	012fff1e 	bxeq	lr
   1dd80:	ea000047 	b	1dea4 <CScreenDevice::InvertCursor() [clone .part.6]>

0001dd84 <CScreenDevice::SetPixel(unsigned int, unsigned int, unsigned short)>:
   1dd84:	e590c024 	ldr	ip, [r0, #36]	; 0x24
   1dd88:	e15c0001 	cmp	ip, r1
   1dd8c:	912fff1e 	bxls	lr
   1dd90:	e590c028 	ldr	ip, [r0, #40]	; 0x28
   1dd94:	e15c0002 	cmp	ip, r2
   1dd98:	8590c020 	ldrhi	ip, [r0, #32]
   1dd9c:	85900018 	ldrhi	r0, [r0, #24]
   1dda0:	8022129c 	mlahi	r2, ip, r2, r1
   1dda4:	81a02082 	lslhi	r2, r2, #1
   1dda8:	818030b2 	strhhi	r3, [r0, r2]
   1ddac:	e12fff1e 	bx	lr

0001ddb0 <CScreenDevice::GetPixel(unsigned int, unsigned int)>:
   1ddb0:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   1ddb4:	e1530001 	cmp	r3, r1
   1ddb8:	9a000008 	bls	1dde0 <CScreenDevice::GetPixel(unsigned int, unsigned int)+0x30>
   1ddbc:	e5903028 	ldr	r3, [r0, #40]	; 0x28
   1ddc0:	e1530002 	cmp	r3, r2
   1ddc4:	9a000005 	bls	1dde0 <CScreenDevice::GetPixel(unsigned int, unsigned int)+0x30>
   1ddc8:	e590c020 	ldr	ip, [r0, #32]
   1ddcc:	e5903018 	ldr	r3, [r0, #24]
   1ddd0:	e022129c 	mla	r2, ip, r2, r1
   1ddd4:	e1a02082 	lsl	r2, r2, #1
   1ddd8:	e19300b2 	ldrh	r0, [r3, r2]
   1dddc:	e12fff1e 	bx	lr
   1dde0:	e3a00000 	mov	r0, #0
   1dde4:	e12fff1e 	bx	lr

0001dde8 <CScreenDevice::Rotor(unsigned int, unsigned int)>:
   1dde8:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   1ddec:	e1a05000 	mov	r5, r0
   1ddf0:	e1a04001 	mov	r4, r1
   1ddf4:	e24dd00c 	sub	sp, sp, #12
   1ddf8:	e1a06002 	mov	r6, r2
   1ddfc:	e2800014 	add	r0, r0, #20
   1de00:	e2044003 	and	r4, r4, #3
   1de04:	e5957024 	ldr	r7, [r5, #36]	; 0x24
   1de08:	eb001339 	bl	22af4 <CCharGenerator::GetCharWidth() const>
   1de0c:	e2061003 	and	r1, r6, #3
   1de10:	e309362c 	movw	r3, #38444	; 0x962c
   1de14:	e3403002 	movt	r3, #2
   1de18:	e0831001 	add	r1, r3, r1
   1de1c:	e0240094 	mla	r4, r4, r0, r0
   1de20:	e3a03b3e 	mov	r3, #63488	; 0xf800
   1de24:	e1a00005 	mov	r0, r5
   1de28:	e58d3000 	str	r3, [sp]
   1de2c:	e0472004 	sub	r2, r7, r4
   1de30:	e3a03000 	mov	r3, #0
   1de34:	e1d111dc 	ldrsb	r1, [r1, #28]
   1de38:	ebffff7b 	bl	1dc2c <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)>
   1de3c:	e28dd00c 	add	sp, sp, #12
   1de40:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}

0001de44 <CScreenDevice::EraseChars(unsigned int) [clone .part.4]>:
   1de44:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   1de48:	e1a05000 	mov	r5, r0
   1de4c:	e1a06001 	mov	r6, r1
   1de50:	e2807014 	add	r7, r0, #20
   1de54:	e595803c 	ldr	r8, [r5, #60]	; 0x3c
   1de58:	e1a00007 	mov	r0, r7
   1de5c:	eb001324 	bl	22af4 <CCharGenerator::GetCharWidth() const>
   1de60:	e5953024 	ldr	r3, [r5, #36]	; 0x24
   1de64:	e595403c 	ldr	r4, [r5, #60]	; 0x3c
   1de68:	e0268096 	mla	r6, r6, r0, r8
   1de6c:	e1560003 	cmp	r6, r3
   1de70:	21a06003 	movcs	r6, r3
   1de74:	e1540006 	cmp	r4, r6
   1de78:	28bd81f0 	popcs	{r4, r5, r6, r7, r8, pc}
   1de7c:	e1a01004 	mov	r1, r4
   1de80:	e5952040 	ldr	r2, [r5, #64]	; 0x40
   1de84:	e1a00005 	mov	r0, r5
   1de88:	ebffff98 	bl	1dcf0 <CScreenDevice::EraseChar(unsigned int, unsigned int)>
   1de8c:	e1a00007 	mov	r0, r7
   1de90:	eb001317 	bl	22af4 <CCharGenerator::GetCharWidth() const>
   1de94:	e0844000 	add	r4, r4, r0
   1de98:	e1540006 	cmp	r4, r6
   1de9c:	3afffff6 	bcc	1de7c <CScreenDevice::EraseChars(unsigned int) [clone .part.4]+0x38>
   1dea0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0001dea4 <CScreenDevice::InvertCursor() [clone .part.6]>:
   1dea4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   1dea8:	e2806014 	add	r6, r0, #20
   1deac:	e1a05000 	mov	r5, r0
   1deb0:	e1a00006 	mov	r0, r6
   1deb4:	e3a08000 	mov	r8, #0
   1deb8:	eb001311 	bl	22b04 <CCharGenerator::GetUnderline() const>
   1debc:	e1a07000 	mov	r7, r0
   1dec0:	e1a00006 	mov	r0, r6
   1dec4:	eb00130c 	bl	22afc <CCharGenerator::GetCharHeight() const>
   1dec8:	e1500007 	cmp	r0, r7
   1decc:	98bd81f0 	popls	{r4, r5, r6, r7, r8, pc}
   1ded0:	e3a04000 	mov	r4, #0
   1ded4:	ea000013 	b	1df28 <CScreenDevice::InvertCursor() [clone .part.6]+0x84>
   1ded8:	e595303c 	ldr	r3, [r5, #60]	; 0x3c
   1dedc:	e5952024 	ldr	r2, [r5, #36]	; 0x24
   1dee0:	e0843003 	add	r3, r4, r3
   1dee4:	e1530002 	cmp	r3, r2
   1dee8:	2a00000d 	bcs	1df24 <CScreenDevice::InvertCursor() [clone .part.6]+0x80>
   1deec:	e5952040 	ldr	r2, [r5, #64]	; 0x40
   1def0:	e5951028 	ldr	r1, [r5, #40]	; 0x28
   1def4:	e0872002 	add	r2, r7, r2
   1def8:	e1520001 	cmp	r2, r1
   1defc:	2a000008 	bcs	1df24 <CScreenDevice::InvertCursor() [clone .part.6]+0x80>
   1df00:	e5950020 	ldr	r0, [r5, #32]
   1df04:	e5951018 	ldr	r1, [r5, #24]
   1df08:	e0233290 	mla	r3, r0, r2, r3
   1df0c:	e1a03083 	lsl	r3, r3, #1
   1df10:	e19120b3 	ldrh	r2, [r1, r3]
   1df14:	e3520000 	cmp	r2, #0
   1df18:	118180b3 	strhne	r8, [r1, r3]
   1df1c:	01d524b6 	ldrheq	r2, [r5, #70]	; 0x46
   1df20:	018120b3 	strheq	r2, [r1, r3]
   1df24:	e2844001 	add	r4, r4, #1
   1df28:	e1a00006 	mov	r0, r6
   1df2c:	eb0012f0 	bl	22af4 <CCharGenerator::GetCharWidth() const>
   1df30:	e1500004 	cmp	r0, r4
   1df34:	8affffe7 	bhi	1ded8 <CScreenDevice::InvertCursor() [clone .part.6]+0x34>
   1df38:	e2877001 	add	r7, r7, #1
   1df3c:	eaffffdf 	b	1dec0 <CScreenDevice::InvertCursor() [clone .part.6]+0x1c>

0001df40 <CSerialDevice::CSerialDevice(CInterruptSystem*, bool)>:
   1df40:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   1df44:	e1a04000 	mov	r4, r0
   1df48:	e1a06002 	mov	r6, r2
   1df4c:	e1a07001 	mov	r7, r1
   1df50:	ebffef20 	bl	19bd8 <CDevice::CDevice()>
   1df54:	e1a00004 	mov	r0, r4
   1df58:	e59fc0b0 	ldr	ip, [pc, #176]	; 1e010 <CSerialDevice::CSerialDevice(CInterruptSystem*, bool)+0xd0>
   1df5c:	e3a03000 	mov	r3, #0
   1df60:	e3a01020 	mov	r1, #32
   1df64:	e1a02003 	mov	r2, r3
   1df68:	e3a05001 	mov	r5, #1
   1df6c:	e480c004 	str	ip, [r0], #4
   1df70:	ebfff0a9 	bl	1a21c <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>
   1df74:	e3a03000 	mov	r3, #0
   1df78:	e1a02003 	mov	r2, r3
   1df7c:	e284002c 	add	r0, r4, #44	; 0x2c
   1df80:	e3a01021 	mov	r1, #33	; 0x21
   1df84:	ebfff0a4 	bl	1a21c <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>
   1df88:	e2840054 	add	r0, r4, #84	; 0x54
   1df8c:	e3a03000 	mov	r3, #0
   1df90:	e3a02004 	mov	r2, #4
   1df94:	e3a0100e 	mov	r1, #14
   1df98:	ebfff09f 	bl	1a21c <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>
   1df9c:	e3a0100f 	mov	r1, #15
   1dfa0:	e284007c 	add	r0, r4, #124	; 0x7c
   1dfa4:	e3a03000 	mov	r3, #0
   1dfa8:	e3a02004 	mov	r2, #4
   1dfac:	ebfff09a 	bl	1a21c <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>
   1dfb0:	e2842a01 	add	r2, r4, #4096	; 0x1000
   1dfb4:	e3560000 	cmp	r6, #0
   1dfb8:	e2840d43 	add	r0, r4, #4288	; 0x10c0
   1dfbc:	e3a03000 	mov	r3, #0
   1dfc0:	e58470a4 	str	r7, [r4, #164]	; 0xa4
   1dfc4:	e58438ac 	str	r3, [r4, #2220]	; 0x8ac
   1dfc8:	13a01002 	movne	r1, #2
   1dfcc:	e58438b0 	str	r3, [r4, #2224]	; 0x8b0
   1dfd0:	01a01005 	moveq	r1, r5
   1dfd4:	e5c430a9 	strb	r3, [r4, #169]	; 0xa9
   1dfd8:	e2800010 	add	r0, r0, #16
   1dfdc:	e58438b4 	str	r3, [r4, #2228]	; 0x8b4
   1dfe0:	e5c460a8 	strb	r6, [r4, #168]	; 0xa8
   1dfe4:	e58230b8 	str	r3, [r2, #184]	; 0xb8
   1dfe8:	e58230c4 	str	r3, [r2, #196]	; 0xc4
   1dfec:	e58230bc 	str	r3, [r2, #188]	; 0xbc
   1dff0:	e58250c0 	str	r5, [r2, #192]	; 0xc0
   1dff4:	eb000292 	bl	1ea44 <CSpinLock::CSpinLock(unsigned int)>
   1dff8:	e2840d43 	add	r0, r4, #4288	; 0x10c0
   1dffc:	e1a01005 	mov	r1, r5
   1e000:	e2800018 	add	r0, r0, #24
   1e004:	eb00028e 	bl	1ea44 <CSpinLock::CSpinLock(unsigned int)>
   1e008:	e1a00004 	mov	r0, r4
   1e00c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1e010:	00029658 	.word	0x00029658

0001e014 <CSerialDevice::~CSerialDevice()>:
   1e014:	e3a03a01 	mov	r3, #4096	; 0x1000
   1e018:	e3433f20 	movt	r3, #16160	; 0x3f20
   1e01c:	e59fc0b0 	ldr	ip, [pc, #176]	; 1e0d4 <CSerialDevice::~CSerialDevice()+0xc0>
   1e020:	e3a02000 	mov	r2, #0
   1e024:	e92d4010 	push	{r4, lr}
   1e028:	e1a04000 	mov	r4, r0
   1e02c:	e580c000 	str	ip, [r0]
   1e030:	e5832038 	str	r2, [r3, #56]	; 0x38
   1e034:	e5832030 	str	r2, [r3, #48]	; 0x30
   1e038:	e5d030a9 	ldrb	r3, [r0, #169]	; 0xa9
   1e03c:	e1530002 	cmp	r3, r2
   1e040:	0a000006 	beq	1e060 <CSerialDevice::~CSerialDevice()+0x4c>
   1e044:	e59000a4 	ldr	r0, [r0, #164]	; 0xa4
   1e048:	e1500002 	cmp	r0, r2
   1e04c:	0a00001a 	beq	1e0bc <CSerialDevice::~CSerialDevice()+0xa8>
   1e050:	e5d430a8 	ldrb	r3, [r4, #168]	; 0xa8
   1e054:	e3530000 	cmp	r3, #0
   1e058:	0a000014 	beq	1e0b0 <CSerialDevice::~CSerialDevice()+0x9c>
   1e05c:	ebfff3bb 	bl	1af50 <CInterruptSystem::DisconnectFIQ()>
   1e060:	e2840d43 	add	r0, r4, #4288	; 0x10c0
   1e064:	e3a03000 	mov	r3, #0
   1e068:	e2800018 	add	r0, r0, #24
   1e06c:	e58430a4 	str	r3, [r4, #164]	; 0xa4
   1e070:	eb000281 	bl	1ea7c <CSpinLock::~CSpinLock()>
   1e074:	e2840d43 	add	r0, r4, #4288	; 0x10c0
   1e078:	e2800010 	add	r0, r0, #16
   1e07c:	eb00027e 	bl	1ea7c <CSpinLock::~CSpinLock()>
   1e080:	e284007c 	add	r0, r4, #124	; 0x7c
   1e084:	ebfff07b 	bl	1a278 <CGPIOPin::~CGPIOPin()>
   1e088:	e2840054 	add	r0, r4, #84	; 0x54
   1e08c:	ebfff079 	bl	1a278 <CGPIOPin::~CGPIOPin()>
   1e090:	e284002c 	add	r0, r4, #44	; 0x2c
   1e094:	ebfff077 	bl	1a278 <CGPIOPin::~CGPIOPin()>
   1e098:	e2840004 	add	r0, r4, #4
   1e09c:	ebfff075 	bl	1a278 <CGPIOPin::~CGPIOPin()>
   1e0a0:	e1a00004 	mov	r0, r4
   1e0a4:	ebffeebf 	bl	19ba8 <CDevice::~CDevice()>
   1e0a8:	e1a00004 	mov	r0, r4
   1e0ac:	e8bd8010 	pop	{r4, pc}
   1e0b0:	e3a01039 	mov	r1, #57	; 0x39
   1e0b4:	ebfff42c 	bl	1b16c <CInterruptSystem::DisconnectIRQ(unsigned int)>
   1e0b8:	eaffffe8 	b	1e060 <CSerialDevice::~CSerialDevice()+0x4c>
   1e0bc:	e28c0020 	add	r0, ip, #32
   1e0c0:	e3a02079 	mov	r2, #121	; 0x79
   1e0c4:	e28c1014 	add	r1, ip, #20
   1e0c8:	ebffece1 	bl	19454 <assertion_failed>
   1e0cc:	e59400a4 	ldr	r0, [r4, #164]	; 0xa4
   1e0d0:	eaffffde 	b	1e050 <CSerialDevice::~CSerialDevice()+0x3c>
   1e0d4:	00029658 	.word	0x00029658

0001e0d8 <CSerialDevice::~CSerialDevice()>:
   1e0d8:	e92d4010 	push	{r4, lr}
   1e0dc:	e1a04000 	mov	r4, r0
   1e0e0:	ebffffcb 	bl	1e014 <CSerialDevice::~CSerialDevice()>
   1e0e4:	e1a00004 	mov	r0, r4
   1e0e8:	e30110e0 	movw	r1, #4320	; 0x10e0
   1e0ec:	eb000fe7 	bl	22090 <operator delete(void*, unsigned int)>
   1e0f0:	e1a00004 	mov	r0, r4
   1e0f4:	e8bd8010 	pop	{r4, pc}

0001e0f8 <CSerialDevice::Initialize(unsigned int)>:
   1e0f8:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1e0fc:	e1a07001 	mov	r7, r1
   1e100:	e1a05000 	mov	r5, r0
   1e104:	ebfff9f5 	bl	1c8e0 <CMachineInfo::Get()>
   1e108:	e3a01002 	mov	r1, #2
   1e10c:	ebfff932 	bl	1c5dc <CMachineInfo::GetClockRate(unsigned int) const>
   1e110:	e2474f4b 	sub	r4, r7, #300	; 0x12c
   1e114:	e2508000 	subs	r8, r0, #0
   1e118:	e1a09207 	lsl	r9, r7, #4
   1e11c:	0a000041 	beq	1e228 <CSerialDevice::Initialize(unsigned int)+0x130>
   1e120:	e30037d4 	movw	r3, #2004	; 0x7d4
   1e124:	e340303d 	movt	r3, #61	; 0x3d
   1e128:	e1540003 	cmp	r4, r3
   1e12c:	8a000038 	bhi	1e214 <CSerialDevice::Initialize(unsigned int)+0x11c>
   1e130:	e734f918 	udiv	r4, r8, r9
   1e134:	e30f3ffe 	movw	r3, #65534	; 0xfffe
   1e138:	e2442001 	sub	r2, r4, #1
   1e13c:	e1a06004 	mov	r6, r4
   1e140:	e1520003 	cmp	r2, r3
   1e144:	8a000041 	bhi	1e250 <CSerialDevice::Initialize(unsigned int)+0x158>
   1e148:	e0618499 	mls	r1, r9, r4, r8
   1e14c:	e1a01181 	lsl	r1, r1, #3
   1e150:	e731f711 	udiv	r1, r1, r7
   1e154:	e2014001 	and	r4, r1, #1
   1e158:	e08440a1 	add	r4, r4, r1, lsr #1
   1e15c:	e354003f 	cmp	r4, #63	; 0x3f
   1e160:	8a00003f 	bhi	1e264 <CSerialDevice::Initialize(unsigned int)+0x16c>
   1e164:	e59500a4 	ldr	r0, [r5, #164]	; 0xa4
   1e168:	e3500000 	cmp	r0, #0
   1e16c:	0a000009 	beq	1e198 <CSerialDevice::Initialize(unsigned int)+0xa0>
   1e170:	e5d530a8 	ldrb	r3, [r5, #168]	; 0xa8
   1e174:	e30e2a0c 	movw	r2, #59916	; 0xea0c
   1e178:	e3402001 	movt	r2, #1
   1e17c:	e3530000 	cmp	r3, #0
   1e180:	e3a01039 	mov	r1, #57	; 0x39
   1e184:	e1a03005 	mov	r3, r5
   1e188:	0a00001f 	beq	1e20c <CSerialDevice::Initialize(unsigned int)+0x114>
   1e18c:	ebfff33e 	bl	1ae8c <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)>
   1e190:	e3a03001 	mov	r3, #1
   1e194:	e5c530a9 	strb	r3, [r5, #169]	; 0xa9
   1e198:	e3a03a01 	mov	r3, #4096	; 0x1000
   1e19c:	e3433f20 	movt	r3, #16160	; 0x3f20
   1e1a0:	e3a01000 	mov	r1, #0
   1e1a4:	e30027ff 	movw	r2, #2047	; 0x7ff
   1e1a8:	e5831038 	str	r1, [r3, #56]	; 0x38
   1e1ac:	e5832044 	str	r2, [r3, #68]	; 0x44
   1e1b0:	e5836024 	str	r6, [r3, #36]	; 0x24
   1e1b4:	e5834028 	str	r4, [r3, #40]	; 0x28
   1e1b8:	e59520a4 	ldr	r2, [r5, #164]	; 0xa4
   1e1bc:	e1520001 	cmp	r2, r1
   1e1c0:	13a02009 	movne	r2, #9
   1e1c4:	13a01070 	movne	r1, #112	; 0x70
   1e1c8:	15832034 	strne	r2, [r3, #52]	; 0x34
   1e1cc:	03a02060 	moveq	r2, #96	; 0x60
   1e1d0:	1583102c 	strne	r1, [r3, #44]	; 0x2c
   1e1d4:	13a02e45 	movne	r2, #1104	; 0x450
   1e1d8:	0583202c 	streq	r2, [r3, #44]	; 0x2c
   1e1dc:	15832038 	strne	r2, [r3, #56]	; 0x38
   1e1e0:	e3a03a01 	mov	r3, #4096	; 0x1000
   1e1e4:	e3433f20 	movt	r3, #16160	; 0x3f20
   1e1e8:	e3002301 	movw	r2, #769	; 0x301
   1e1ec:	e5832030 	str	r2, [r3, #48]	; 0x30
   1e1f0:	ebffef56 	bl	19f50 <CDeviceNameService::Get()>
   1e1f4:	e1a02005 	mov	r2, r5
   1e1f8:	e3a03000 	mov	r3, #0
   1e1fc:	e59f1074 	ldr	r1, [pc, #116]	; 1e278 <CSerialDevice::Initialize(unsigned int)+0x180>
   1e200:	ebffeea8 	bl	19ca8 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)>
   1e204:	e3a00001 	mov	r0, #1
   1e208:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1e20c:	ebfff391 	bl	1b058 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)>
   1e210:	eaffffde 	b	1e190 <CSerialDevice::Initialize(unsigned int)+0x98>
   1e214:	e59f1060 	ldr	r1, [pc, #96]	; 1e27c <CSerialDevice::Initialize(unsigned int)+0x184>
   1e218:	e3a0208c 	mov	r2, #140	; 0x8c
   1e21c:	e2810034 	add	r0, r1, #52	; 0x34
   1e220:	ebffec8b 	bl	19454 <assertion_failed>
   1e224:	eaffffc1 	b	1e130 <CSerialDevice::Initialize(unsigned int)+0x38>
   1e228:	e59f104c 	ldr	r1, [pc, #76]	; 1e27c <CSerialDevice::Initialize(unsigned int)+0x184>
   1e22c:	e3a0208a 	mov	r2, #138	; 0x8a
   1e230:	e2810024 	add	r0, r1, #36	; 0x24
   1e234:	ebffec86 	bl	19454 <assertion_failed>
   1e238:	e30037d4 	movw	r3, #2004	; 0x7d4
   1e23c:	e340303d 	movt	r3, #61	; 0x3d
   1e240:	e1540003 	cmp	r4, r3
   1e244:	91a06008 	movls	r6, r8
   1e248:	91a04008 	movls	r4, r8
   1e24c:	8afffff0 	bhi	1e214 <CSerialDevice::Initialize(unsigned int)+0x11c>
   1e250:	e59f1024 	ldr	r1, [pc, #36]	; 1e27c <CSerialDevice::Initialize(unsigned int)+0x184>
   1e254:	e3a0208f 	mov	r2, #143	; 0x8f
   1e258:	e2810060 	add	r0, r1, #96	; 0x60
   1e25c:	ebffec7c 	bl	19454 <assertion_failed>
   1e260:	eaffffb8 	b	1e148 <CSerialDevice::Initialize(unsigned int)+0x50>
   1e264:	e59f1010 	ldr	r1, [pc, #16]	; 1e27c <CSerialDevice::Initialize(unsigned int)+0x184>
   1e268:	e3a02092 	mov	r2, #146	; 0x92
   1e26c:	e2810084 	add	r0, r1, #132	; 0x84
   1e270:	ebffec77 	bl	19454 <assertion_failed>
   1e274:	eaffffba 	b	1e164 <CSerialDevice::Initialize(unsigned int)+0x6c>
   1e278:	00029704 	.word	0x00029704
   1e27c:	0002966c 	.word	0x0002966c

0001e280 <CSerialDevice::Write(void const*, unsigned int)>:
   1e280:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1e284:	e2808d43 	add	r8, r0, #4288	; 0x10c0
   1e288:	e2888018 	add	r8, r8, #24
   1e28c:	e1a04001 	mov	r4, r1
   1e290:	e1a06000 	mov	r6, r0
   1e294:	e1a00008 	mov	r0, r8
   1e298:	e1a07002 	mov	r7, r2
   1e29c:	eb000203 	bl	1eab0 <CSpinLock::Acquire()>
   1e2a0:	e3540000 	cmp	r4, #0
   1e2a4:	0a00004a 	beq	1e3d4 <CSerialDevice::Write(void const*, unsigned int)+0x154>
   1e2a8:	e3570000 	cmp	r7, #0
   1e2ac:	0a00004d 	beq	1e3e8 <CSerialDevice::Write(void const*, unsigned int)+0x168>
   1e2b0:	e2444001 	sub	r4, r4, #1
   1e2b4:	e3a05000 	mov	r5, #0
   1e2b8:	e2869a01 	add	r9, r6, #4096	; 0x1000
   1e2bc:	ea000002 	b	1e2cc <CSerialDevice::Write(void const*, unsigned int)+0x4c>
   1e2c0:	e2855001 	add	r5, r5, #1
   1e2c4:	e1570005 	cmp	r7, r5
   1e2c8:	0a00000f 	beq	1e30c <CSerialDevice::Write(void const*, unsigned int)+0x8c>
   1e2cc:	e5f41001 	ldrb	r1, [r4, #1]!
   1e2d0:	e1a00006 	mov	r0, r6
   1e2d4:	eb000134 	bl	1e7ac <CSerialDevice::Write(unsigned char)>
   1e2d8:	e3500000 	cmp	r0, #0
   1e2dc:	0a00000a 	beq	1e30c <CSerialDevice::Write(void const*, unsigned int)+0x8c>
   1e2e0:	e5d43000 	ldrb	r3, [r4]
   1e2e4:	e353000a 	cmp	r3, #10
   1e2e8:	1afffff4 	bne	1e2c0 <CSerialDevice::Write(void const*, unsigned int)+0x40>
   1e2ec:	e59930c0 	ldr	r3, [r9, #192]	; 0xc0
   1e2f0:	e3130001 	tst	r3, #1
   1e2f4:	0afffff1 	beq	1e2c0 <CSerialDevice::Write(void const*, unsigned int)+0x40>
   1e2f8:	e3a0100d 	mov	r1, #13
   1e2fc:	e1a00006 	mov	r0, r6
   1e300:	eb000129 	bl	1e7ac <CSerialDevice::Write(unsigned char)>
   1e304:	e3500000 	cmp	r0, #0
   1e308:	1affffec 	bne	1e2c0 <CSerialDevice::Write(void const*, unsigned int)+0x40>
   1e30c:	e1a00008 	mov	r0, r8
   1e310:	eb0001fd 	bl	1eb0c <CSpinLock::Release()>
   1e314:	e59630a4 	ldr	r3, [r6, #164]	; 0xa4
   1e318:	e3530000 	cmp	r3, #0
   1e31c:	0a000024 	beq	1e3b4 <CSerialDevice::Write(void const*, unsigned int)+0x134>
   1e320:	e2864d43 	add	r4, r6, #4288	; 0x10c0
   1e324:	e2844010 	add	r4, r4, #16
   1e328:	e1a00004 	mov	r0, r4
   1e32c:	eb0001df 	bl	1eab0 <CSpinLock::Acquire()>
   1e330:	e2863a01 	add	r3, r6, #4096	; 0x1000
   1e334:	e59310b8 	ldr	r1, [r3, #184]	; 0xb8
   1e338:	e59320bc 	ldr	r2, [r3, #188]	; 0xbc
   1e33c:	e1510002 	cmp	r1, r2
   1e340:	0a000019 	beq	1e3ac <CSerialDevice::Write(void const*, unsigned int)+0x12c>
   1e344:	e59320b8 	ldr	r2, [r3, #184]	; 0xb8
   1e348:	e59310bc 	ldr	r1, [r3, #188]	; 0xbc
   1e34c:	e1510002 	cmp	r1, r2
   1e350:	0a000015 	beq	1e3ac <CSerialDevice::Write(void const*, unsigned int)+0x12c>
   1e354:	e3a01a01 	mov	r1, #4096	; 0x1000
   1e358:	e3431f20 	movt	r1, #16160	; 0x3f20
   1e35c:	e5912018 	ldr	r2, [r1, #24]
   1e360:	e3120020 	tst	r2, #32
   1e364:	0a000003 	beq	1e378 <CSerialDevice::Write(void const*, unsigned int)+0xf8>
   1e368:	ea000013 	b	1e3bc <CSerialDevice::Write(void const*, unsigned int)+0x13c>
   1e36c:	e5912018 	ldr	r2, [r1, #24]
   1e370:	e3120020 	tst	r2, #32
   1e374:	1a000010 	bne	1e3bc <CSerialDevice::Write(void const*, unsigned int)+0x13c>
   1e378:	e59320bc 	ldr	r2, [r3, #188]	; 0xbc
   1e37c:	e0860002 	add	r0, r6, r2
   1e380:	e2822001 	add	r2, r2, #1
   1e384:	e58320bc 	str	r2, [r3, #188]	; 0xbc
   1e388:	e5d028b8 	ldrb	r2, [r0, #2232]	; 0x8b8
   1e38c:	e5812000 	str	r2, [r1]
   1e390:	e59320bc 	ldr	r2, [r3, #188]	; 0xbc
   1e394:	e7ea2052 	ubfx	r2, r2, #0, #11
   1e398:	e58320bc 	str	r2, [r3, #188]	; 0xbc
   1e39c:	e59300b8 	ldr	r0, [r3, #184]	; 0xb8
   1e3a0:	e59320bc 	ldr	r2, [r3, #188]	; 0xbc
   1e3a4:	e1500002 	cmp	r0, r2
   1e3a8:	1affffef 	bne	1e36c <CSerialDevice::Write(void const*, unsigned int)+0xec>
   1e3ac:	e1a00004 	mov	r0, r4
   1e3b0:	eb0001d5 	bl	1eb0c <CSpinLock::Release()>
   1e3b4:	e1a00005 	mov	r0, r5
   1e3b8:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1e3bc:	e3a03a01 	mov	r3, #4096	; 0x1000
   1e3c0:	e3433f20 	movt	r3, #16160	; 0x3f20
   1e3c4:	e5932038 	ldr	r2, [r3, #56]	; 0x38
   1e3c8:	e3822020 	orr	r2, r2, #32
   1e3cc:	e5832038 	str	r2, [r3, #56]	; 0x38
   1e3d0:	eafffff5 	b	1e3ac <CSerialDevice::Write(void const*, unsigned int)+0x12c>
   1e3d4:	e59f1014 	ldr	r1, [pc, #20]	; 1e3f0 <CSerialDevice::Write(void const*, unsigned int)+0x170>
   1e3d8:	e3a020c3 	mov	r2, #195	; 0xc3
   1e3dc:	e28100a0 	add	r0, r1, #160	; 0xa0
   1e3e0:	ebffec1b 	bl	19454 <assertion_failed>
   1e3e4:	eaffffaf 	b	1e2a8 <CSerialDevice::Write(void const*, unsigned int)+0x28>
   1e3e8:	e1a05007 	mov	r5, r7
   1e3ec:	eaffffc6 	b	1e30c <CSerialDevice::Write(void const*, unsigned int)+0x8c>
   1e3f0:	0002966c 	.word	0x0002966c

0001e3f4 <CSerialDevice::Read(void*, unsigned int)>:
   1e3f4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   1e3f8:	e1a04000 	mov	r4, r0
   1e3fc:	e1a05002 	mov	r5, r2
   1e400:	e2516000 	subs	r6, r1, #0
   1e404:	0a00004b 	beq	1e538 <CSerialDevice::Read(void*, unsigned int)+0x144>
   1e408:	e59430a4 	ldr	r3, [r4, #164]	; 0xa4
   1e40c:	e3530000 	cmp	r3, #0
   1e410:	0a000023 	beq	1e4a4 <CSerialDevice::Read(void*, unsigned int)+0xb0>
   1e414:	e2847d43 	add	r7, r4, #4288	; 0x10c0
   1e418:	e2877010 	add	r7, r7, #16
   1e41c:	e1a00007 	mov	r0, r7
   1e420:	eb0001a2 	bl	1eab0 <CSpinLock::Acquire()>
   1e424:	e59438b4 	ldr	r3, [r4, #2228]	; 0x8b4
   1e428:	e3530000 	cmp	r3, #0
   1e42c:	ba00003d 	blt	1e528 <CSerialDevice::Read(void*, unsigned int)+0x134>
   1e430:	e3550000 	cmp	r5, #0
   1e434:	0a000016 	beq	1e494 <CSerialDevice::Read(void*, unsigned int)+0xa0>
   1e438:	e59428ac 	ldr	r2, [r4, #2220]	; 0x8ac
   1e43c:	e59438b0 	ldr	r3, [r4, #2224]	; 0x8b0
   1e440:	e1520003 	cmp	r2, r3
   1e444:	0a000044 	beq	1e55c <CSerialDevice::Read(void*, unsigned int)+0x168>
   1e448:	e0862005 	add	r2, r6, r5
   1e44c:	e1a01006 	mov	r1, r6
   1e450:	ea000003 	b	1e464 <CSerialDevice::Read(void*, unsigned int)+0x70>
   1e454:	e59408ac 	ldr	r0, [r4, #2220]	; 0x8ac
   1e458:	e59438b0 	ldr	r3, [r4, #2224]	; 0x8b0
   1e45c:	e1500003 	cmp	r0, r3
   1e460:	0a00000b 	beq	1e494 <CSerialDevice::Read(void*, unsigned int)+0xa0>
   1e464:	e59438b0 	ldr	r3, [r4, #2224]	; 0x8b0
   1e468:	e0840003 	add	r0, r4, r3
   1e46c:	e2833001 	add	r3, r3, #1
   1e470:	e58438b0 	str	r3, [r4, #2224]	; 0x8b0
   1e474:	e5d030aa 	ldrb	r3, [r0, #170]	; 0xaa
   1e478:	e4c13001 	strb	r3, [r1], #1
   1e47c:	e59438b0 	ldr	r3, [r4, #2224]	; 0x8b0
   1e480:	e1520001 	cmp	r2, r1
   1e484:	e0415006 	sub	r5, r1, r6
   1e488:	e7ea3053 	ubfx	r3, r3, #0, #11
   1e48c:	e58438b0 	str	r3, [r4, #2224]	; 0x8b0
   1e490:	1affffef 	bne	1e454 <CSerialDevice::Read(void*, unsigned int)+0x60>
   1e494:	e1a00007 	mov	r0, r7
   1e498:	eb00019b 	bl	1eb0c <CSpinLock::Release()>
   1e49c:	e1a00005 	mov	r0, r5
   1e4a0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1e4a4:	e3550000 	cmp	r5, #0
   1e4a8:	0afffffb 	beq	1e49c <CSerialDevice::Read(void*, unsigned int)+0xa8>
   1e4ac:	e3a00a01 	mov	r0, #4096	; 0x1000
   1e4b0:	e3430f20 	movt	r0, #16160	; 0x3f20
   1e4b4:	e5902018 	ldr	r2, [r0, #24]
   1e4b8:	e3120010 	tst	r2, #16
   1e4bc:	1a000028 	bne	1e564 <CSerialDevice::Read(void*, unsigned int)+0x170>
   1e4c0:	e5903000 	ldr	r3, [r0]
   1e4c4:	e3130b01 	tst	r3, #1024	; 0x400
   1e4c8:	1a000014 	bne	1e520 <CSerialDevice::Read(void*, unsigned int)+0x12c>
   1e4cc:	e3130b02 	tst	r3, #2048	; 0x800
   1e4d0:	1a00001d 	bne	1e54c <CSerialDevice::Read(void*, unsigned int)+0x158>
   1e4d4:	e3130c01 	tst	r3, #256	; 0x100
   1e4d8:	00862005 	addeq	r2, r6, r5
   1e4dc:	01a01006 	moveq	r1, r6
   1e4e0:	0a000004 	beq	1e4f8 <CSerialDevice::Read(void*, unsigned int)+0x104>
   1e4e4:	ea00001a 	b	1e554 <CSerialDevice::Read(void*, unsigned int)+0x160>
   1e4e8:	e3130b02 	tst	r3, #2048	; 0x800
   1e4ec:	1a000016 	bne	1e54c <CSerialDevice::Read(void*, unsigned int)+0x158>
   1e4f0:	e3130c01 	tst	r3, #256	; 0x100
   1e4f4:	1a000016 	bne	1e554 <CSerialDevice::Read(void*, unsigned int)+0x160>
   1e4f8:	e4c13001 	strb	r3, [r1], #1
   1e4fc:	e1510002 	cmp	r1, r2
   1e500:	e0415006 	sub	r5, r1, r6
   1e504:	0affffe4 	beq	1e49c <CSerialDevice::Read(void*, unsigned int)+0xa8>
   1e508:	e5903018 	ldr	r3, [r0, #24]
   1e50c:	e3130010 	tst	r3, #16
   1e510:	1affffe1 	bne	1e49c <CSerialDevice::Read(void*, unsigned int)+0xa8>
   1e514:	e5903000 	ldr	r3, [r0]
   1e518:	e3130b01 	tst	r3, #1024	; 0x400
   1e51c:	0afffff1 	beq	1e4e8 <CSerialDevice::Read(void*, unsigned int)+0xf4>
   1e520:	e3e05000 	mvn	r5, #0
   1e524:	eaffffdc 	b	1e49c <CSerialDevice::Read(void*, unsigned int)+0xa8>
   1e528:	e59458b4 	ldr	r5, [r4, #2228]	; 0x8b4
   1e52c:	e3a03000 	mov	r3, #0
   1e530:	e58438b4 	str	r3, [r4, #2228]	; 0x8b4
   1e534:	eaffffd6 	b	1e494 <CSerialDevice::Read(void*, unsigned int)+0xa0>
   1e538:	e59f102c 	ldr	r1, [pc, #44]	; 1e56c <CSerialDevice::Read(void*, unsigned int)+0x178>
   1e53c:	e3002101 	movw	r2, #257	; 0x101
   1e540:	e28100a0 	add	r0, r1, #160	; 0xa0
   1e544:	ebffebc2 	bl	19454 <assertion_failed>
   1e548:	eaffffae 	b	1e408 <CSerialDevice::Read(void*, unsigned int)+0x14>
   1e54c:	e3e05001 	mvn	r5, #1
   1e550:	eaffffd1 	b	1e49c <CSerialDevice::Read(void*, unsigned int)+0xa8>
   1e554:	e3e05002 	mvn	r5, #2
   1e558:	eaffffcf 	b	1e49c <CSerialDevice::Read(void*, unsigned int)+0xa8>
   1e55c:	e3a05000 	mov	r5, #0
   1e560:	eaffffcb 	b	1e494 <CSerialDevice::Read(void*, unsigned int)+0xa0>
   1e564:	e1a05003 	mov	r5, r3
   1e568:	eaffffcb 	b	1e49c <CSerialDevice::Read(void*, unsigned int)+0xa8>
   1e56c:	0002966c 	.word	0x0002966c

0001e570 <CSerialDevice::GetOptions() const>:
   1e570:	e2800a01 	add	r0, r0, #4096	; 0x1000
   1e574:	e59000c0 	ldr	r0, [r0, #192]	; 0xc0
   1e578:	e12fff1e 	bx	lr

0001e57c <CSerialDevice::SetOptions(unsigned int)>:
   1e57c:	e2800a01 	add	r0, r0, #4096	; 0x1000
   1e580:	e58010c0 	str	r1, [r0, #192]	; 0xc0
   1e584:	e12fff1e 	bx	lr

0001e588 <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())>:
   1e588:	e92d4070 	push	{r4, r5, r6, lr}
   1e58c:	e1a04000 	mov	r4, r0
   1e590:	e1a05001 	mov	r5, r1
   1e594:	e59030a4 	ldr	r3, [r0, #164]	; 0xa4
   1e598:	e1a06002 	mov	r6, r2
   1e59c:	e3530000 	cmp	r3, #0
   1e5a0:	0a00001d 	beq	1e61c <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x94>
   1e5a4:	e2844a01 	add	r4, r4, #4096	; 0x1000
   1e5a8:	e59430c4 	ldr	r3, [r4, #196]	; 0xc4
   1e5ac:	e3530000 	cmp	r3, #0
   1e5b0:	0a000003 	beq	1e5c4 <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x3c>
   1e5b4:	e59f1088 	ldr	r1, [pc, #136]	; 1e644 <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0xbc>
   1e5b8:	e3002159 	movw	r2, #345	; 0x159
   1e5bc:	e28100ac 	add	r0, r1, #172	; 0xac
   1e5c0:	ebffeba3 	bl	19454 <assertion_failed>
   1e5c4:	e3550000 	cmp	r5, #0
   1e5c8:	0a000018 	beq	1e630 <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0xa8>
   1e5cc:	e1d530d0 	ldrsb	r3, [r5]
   1e5d0:	e3530000 	cmp	r3, #0
   1e5d4:	0a000005 	beq	1e5f0 <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x68>
   1e5d8:	e3560000 	cmp	r6, #0
   1e5dc:	0a000009 	beq	1e608 <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x80>
   1e5e0:	e58460cc 	str	r6, [r4, #204]	; 0xcc
   1e5e4:	e58450c8 	str	r5, [r4, #200]	; 0xc8
   1e5e8:	e58450c4 	str	r5, [r4, #196]	; 0xc4
   1e5ec:	e8bd8070 	pop	{r4, r5, r6, pc}
   1e5f0:	e59f104c 	ldr	r1, [pc, #76]	; 1e644 <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0xbc>
   1e5f4:	e3a02f57 	mov	r2, #348	; 0x15c
   1e5f8:	e28100c8 	add	r0, r1, #200	; 0xc8
   1e5fc:	ebffeb94 	bl	19454 <assertion_failed>
   1e600:	e3560000 	cmp	r6, #0
   1e604:	1afffff5 	bne	1e5e0 <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x58>
   1e608:	e59f1034 	ldr	r1, [pc, #52]	; 1e644 <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0xbc>
   1e60c:	e300215d 	movw	r2, #349	; 0x15d
   1e610:	e28100d8 	add	r0, r1, #216	; 0xd8
   1e614:	ebffeb8e 	bl	19454 <assertion_failed>
   1e618:	eafffff0 	b	1e5e0 <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x58>
   1e61c:	e59f1020 	ldr	r1, [pc, #32]	; 1e644 <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0xbc>
   1e620:	e3a02f56 	mov	r2, #344	; 0x158
   1e624:	e281000c 	add	r0, r1, #12
   1e628:	ebffeb89 	bl	19454 <assertion_failed>
   1e62c:	eaffffdc 	b	1e5a4 <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x1c>
   1e630:	e59f100c 	ldr	r1, [pc, #12]	; 1e644 <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0xbc>
   1e634:	e300215b 	movw	r2, #347	; 0x15b
   1e638:	e28100bc 	add	r0, r1, #188	; 0xbc
   1e63c:	ebffeb84 	bl	19454 <assertion_failed>
   1e640:	eaffffe1 	b	1e5cc <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x44>
   1e644:	0002966c 	.word	0x0002966c

0001e648 <CSerialDevice::AvailableForWrite()>:
   1e648:	e92d4070 	push	{r4, r5, r6, lr}
   1e64c:	e1a04000 	mov	r4, r0
   1e650:	e59030a4 	ldr	r3, [r0, #164]	; 0xa4
   1e654:	e3530000 	cmp	r3, #0
   1e658:	0a000011 	beq	1e6a4 <CSerialDevice::AvailableForWrite()+0x5c>
   1e65c:	e2845d43 	add	r5, r4, #4288	; 0x10c0
   1e660:	e2855010 	add	r5, r5, #16
   1e664:	e1a00005 	mov	r0, r5
   1e668:	eb000110 	bl	1eab0 <CSpinLock::Acquire()>
   1e66c:	e2840a01 	add	r0, r4, #4096	; 0x1000
   1e670:	e59020bc 	ldr	r2, [r0, #188]	; 0xbc
   1e674:	e59030b8 	ldr	r3, [r0, #184]	; 0xb8
   1e678:	e59040bc 	ldr	r4, [r0, #188]	; 0xbc
   1e67c:	e1520003 	cmp	r2, r3
   1e680:	e59030b8 	ldr	r3, [r0, #184]	; 0xb8
   1e684:	92844e7f 	addls	r4, r4, #2032	; 0x7f0
   1e688:	82444001 	subhi	r4, r4, #1
   1e68c:	9284400f 	addls	r4, r4, #15
   1e690:	e1a00005 	mov	r0, r5
   1e694:	e0444003 	sub	r4, r4, r3
   1e698:	eb00011b 	bl	1eb0c <CSpinLock::Release()>
   1e69c:	e1a00004 	mov	r0, r4
   1e6a0:	e8bd8070 	pop	{r4, r5, r6, pc}
   1e6a4:	e59f100c 	ldr	r1, [pc, #12]	; 1e6b8 <CSerialDevice::AvailableForWrite()+0x70>
   1e6a8:	e3002167 	movw	r2, #359	; 0x167
   1e6ac:	e281000c 	add	r0, r1, #12
   1e6b0:	ebffeb67 	bl	19454 <assertion_failed>
   1e6b4:	eaffffe8 	b	1e65c <CSerialDevice::AvailableForWrite()+0x14>
   1e6b8:	0002966c 	.word	0x0002966c

0001e6bc <CSerialDevice::AvailableForRead()>:
   1e6bc:	e92d4070 	push	{r4, r5, r6, lr}
   1e6c0:	e1a04000 	mov	r4, r0
   1e6c4:	e59030a4 	ldr	r3, [r0, #164]	; 0xa4
   1e6c8:	e3530000 	cmp	r3, #0
   1e6cc:	0a000010 	beq	1e714 <CSerialDevice::AvailableForRead()+0x58>
   1e6d0:	e2845d43 	add	r5, r4, #4288	; 0x10c0
   1e6d4:	e2855010 	add	r5, r5, #16
   1e6d8:	e1a00005 	mov	r0, r5
   1e6dc:	eb0000f3 	bl	1eab0 <CSpinLock::Acquire()>
   1e6e0:	e59428ac 	ldr	r2, [r4, #2220]	; 0x8ac
   1e6e4:	e59438b0 	ldr	r3, [r4, #2224]	; 0x8b0
   1e6e8:	e1a00005 	mov	r0, r5
   1e6ec:	e1520003 	cmp	r2, r3
   1e6f0:	e59438ac 	ldr	r3, [r4, #2220]	; 0x8ac
   1e6f4:	359428b0 	ldrcc	r2, [r4, #2224]	; 0x8b0
   1e6f8:	32834b02 	addcc	r4, r3, #2048	; 0x800
   1e6fc:	259448b0 	ldrcs	r4, [r4, #2224]	; 0x8b0
   1e700:	30444002 	subcc	r4, r4, r2
   1e704:	20434004 	subcs	r4, r3, r4
   1e708:	eb0000ff 	bl	1eb0c <CSpinLock::Release()>
   1e70c:	e1a00004 	mov	r0, r4
   1e710:	e8bd8070 	pop	{r4, r5, r6, pc}
   1e714:	e59f100c 	ldr	r1, [pc, #12]	; 1e728 <CSerialDevice::AvailableForRead()+0x6c>
   1e718:	e3a02f5f 	mov	r2, #380	; 0x17c
   1e71c:	e281000c 	add	r0, r1, #12
   1e720:	ebffeb4b 	bl	19454 <assertion_failed>
   1e724:	eaffffe9 	b	1e6d0 <CSerialDevice::AvailableForRead()+0x14>
   1e728:	0002966c 	.word	0x0002966c

0001e72c <CSerialDevice::Peek()>:
   1e72c:	e92d4070 	push	{r4, r5, r6, lr}
   1e730:	e1a04000 	mov	r4, r0
   1e734:	e59030a4 	ldr	r3, [r0, #164]	; 0xa4
   1e738:	e3530000 	cmp	r3, #0
   1e73c:	0a00000e 	beq	1e77c <CSerialDevice::Peek()+0x50>
   1e740:	e2845d43 	add	r5, r4, #4288	; 0x10c0
   1e744:	e2855010 	add	r5, r5, #16
   1e748:	e1a00005 	mov	r0, r5
   1e74c:	eb0000d7 	bl	1eab0 <CSpinLock::Acquire()>
   1e750:	e59428ac 	ldr	r2, [r4, #2220]	; 0x8ac
   1e754:	e59438b0 	ldr	r3, [r4, #2224]	; 0x8b0
   1e758:	e1a00005 	mov	r0, r5
   1e75c:	e1520003 	cmp	r2, r3
   1e760:	03e04000 	mvneq	r4, #0
   1e764:	159438b0 	ldrne	r3, [r4, #2224]	; 0x8b0
   1e768:	10844003 	addne	r4, r4, r3
   1e76c:	15d440aa 	ldrbne	r4, [r4, #170]	; 0xaa
   1e770:	eb0000e5 	bl	1eb0c <CSpinLock::Release()>
   1e774:	e1a00004 	mov	r0, r4
   1e778:	e8bd8070 	pop	{r4, r5, r6, pc}
   1e77c:	e59f100c 	ldr	r1, [pc, #12]	; 1e790 <CSerialDevice::Peek()+0x64>
   1e780:	e3002191 	movw	r2, #401	; 0x191
   1e784:	e281000c 	add	r0, r1, #12
   1e788:	ebffeb31 	bl	19454 <assertion_failed>
   1e78c:	eaffffeb 	b	1e740 <CSerialDevice::Peek()+0x14>
   1e790:	0002966c 	.word	0x0002966c

0001e794 <CSerialDevice::Flush()>:
   1e794:	e3a02a01 	mov	r2, #4096	; 0x1000
   1e798:	e3432f20 	movt	r2, #16160	; 0x3f20
   1e79c:	e5923018 	ldr	r3, [r2, #24]
   1e7a0:	e3130008 	tst	r3, #8
   1e7a4:	1afffffc 	bne	1e79c <CSerialDevice::Flush()+0x8>
   1e7a8:	e12fff1e 	bx	lr

0001e7ac <CSerialDevice::Write(unsigned char)>:
   1e7ac:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   1e7b0:	e59030a4 	ldr	r3, [r0, #164]	; 0xa4
   1e7b4:	e3530000 	cmp	r3, #0
   1e7b8:	03a02a01 	moveq	r2, #4096	; 0x1000
   1e7bc:	03432f20 	movteq	r2, #16160	; 0x3f20
   1e7c0:	0a000019 	beq	1e82c <CSerialDevice::Write(unsigned char)+0x80>
   1e7c4:	e2806d43 	add	r6, r0, #4288	; 0x10c0
   1e7c8:	e1a04000 	mov	r4, r0
   1e7cc:	e2866010 	add	r6, r6, #16
   1e7d0:	e1a05001 	mov	r5, r1
   1e7d4:	e1a00006 	mov	r0, r6
   1e7d8:	eb0000b4 	bl	1eab0 <CSpinLock::Acquire()>
   1e7dc:	e2842a01 	add	r2, r4, #4096	; 0x1000
   1e7e0:	e59230b8 	ldr	r3, [r2, #184]	; 0xb8
   1e7e4:	e59210bc 	ldr	r1, [r2, #188]	; 0xbc
   1e7e8:	e2833001 	add	r3, r3, #1
   1e7ec:	e7ea3053 	ubfx	r3, r3, #0, #11
   1e7f0:	e1530001 	cmp	r3, r1
   1e7f4:	13a07001 	movne	r7, #1
   1e7f8:	03a07000 	moveq	r7, #0
   1e7fc:	159230b8 	ldrne	r3, [r2, #184]	; 0xb8
   1e800:	10840003 	addne	r0, r4, r3
   1e804:	10833007 	addne	r3, r3, r7
   1e808:	158230b8 	strne	r3, [r2, #184]	; 0xb8
   1e80c:	15c058b8 	strbne	r5, [r0, #2232]	; 0x8b8
   1e810:	e1a00006 	mov	r0, r6
   1e814:	159230b8 	ldrne	r3, [r2, #184]	; 0xb8
   1e818:	17ea3053 	ubfxne	r3, r3, #0, #11
   1e81c:	158230b8 	strne	r3, [r2, #184]	; 0xb8
   1e820:	eb0000b9 	bl	1eb0c <CSpinLock::Release()>
   1e824:	e1a00007 	mov	r0, r7
   1e828:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1e82c:	e5923018 	ldr	r3, [r2, #24]
   1e830:	e3130020 	tst	r3, #32
   1e834:	1afffffc 	bne	1e82c <CSerialDevice::Write(unsigned char)+0x80>
   1e838:	e3a07001 	mov	r7, #1
   1e83c:	e5821000 	str	r1, [r2]
   1e840:	e1a00007 	mov	r0, r7
   1e844:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0001e848 <CSerialDevice::InterruptHandler()>:
   1e848:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1e84c:	e2805d43 	add	r5, r0, #4288	; 0x10c0
   1e850:	e2855010 	add	r5, r5, #16
   1e854:	e1a04000 	mov	r4, r0
   1e858:	e1a00005 	mov	r0, r5
   1e85c:	eb000093 	bl	1eab0 <CSpinLock::Acquire()>
   1e860:	e3a03a01 	mov	r3, #4096	; 0x1000
   1e864:	e3433f20 	movt	r3, #16160	; 0x3f20
   1e868:	e3a06000 	mov	r6, #0
   1e86c:	e1a00003 	mov	r0, r3
   1e870:	e2841a01 	add	r1, r4, #4096	; 0x1000
   1e874:	e3e07002 	mvn	r7, #2
   1e878:	e5932040 	ldr	r2, [r3, #64]	; 0x40
   1e87c:	e3e0c001 	mvn	ip, #1
   1e880:	e5832044 	str	r2, [r3, #68]	; 0x44
   1e884:	e3e0e000 	mvn	lr, #0
   1e888:	e5903018 	ldr	r3, [r0, #24]
   1e88c:	e3130010 	tst	r3, #16
   1e890:	1a000024 	bne	1e928 <CSerialDevice::InterruptHandler()+0xe0>
   1e894:	e5902000 	ldr	r2, [r0]
   1e898:	e3120b01 	tst	r2, #1024	; 0x400
   1e89c:	0a000044 	beq	1e9b4 <CSerialDevice::InterruptHandler()+0x16c>
   1e8a0:	e59438b4 	ldr	r3, [r4, #2228]	; 0x8b4
   1e8a4:	e3530000 	cmp	r3, #0
   1e8a8:	0584e8b4 	streq	lr, [r4, #2228]	; 0x8b4
   1e8ac:	e59180c4 	ldr	r8, [r1, #196]	; 0xc4
   1e8b0:	e3580000 	cmp	r8, #0
   1e8b4:	0a00000a 	beq	1e8e4 <CSerialDevice::InterruptHandler()+0x9c>
   1e8b8:	e59190c8 	ldr	r9, [r1, #200]	; 0xc8
   1e8bc:	e6af3072 	sxtb	r3, r2
   1e8c0:	e1d9a0d0 	ldrsb	sl, [r9]
   1e8c4:	e15a0003 	cmp	sl, r3
   1e8c8:	158180c8 	strne	r8, [r1, #200]	; 0xc8
   1e8cc:	1a000004 	bne	1e8e4 <CSerialDevice::InterruptHandler()+0x9c>
   1e8d0:	e2893001 	add	r3, r9, #1
   1e8d4:	e58130c8 	str	r3, [r1, #200]	; 0xc8
   1e8d8:	e1d930d1 	ldrsb	r3, [r9, #1]
   1e8dc:	e3530000 	cmp	r3, #0
   1e8e0:	03a06001 	moveq	r6, #1
   1e8e4:	e59438ac 	ldr	r3, [r4, #2220]	; 0x8ac
   1e8e8:	e59488b0 	ldr	r8, [r4, #2224]	; 0x8b0
   1e8ec:	e2833001 	add	r3, r3, #1
   1e8f0:	e7ea3053 	ubfx	r3, r3, #0, #11
   1e8f4:	e1530008 	cmp	r3, r8
   1e8f8:	0a000033 	beq	1e9cc <CSerialDevice::InterruptHandler()+0x184>
   1e8fc:	e59438ac 	ldr	r3, [r4, #2220]	; 0x8ac
   1e900:	e0848003 	add	r8, r4, r3
   1e904:	e2833001 	add	r3, r3, #1
   1e908:	e58438ac 	str	r3, [r4, #2220]	; 0x8ac
   1e90c:	e5c820aa 	strb	r2, [r8, #170]	; 0xaa
   1e910:	e59438ac 	ldr	r3, [r4, #2220]	; 0x8ac
   1e914:	e7ea3053 	ubfx	r3, r3, #0, #11
   1e918:	e58438ac 	str	r3, [r4, #2220]	; 0x8ac
   1e91c:	e5903018 	ldr	r3, [r0, #24]
   1e920:	e3130010 	tst	r3, #16
   1e924:	0affffda 	beq	1e894 <CSerialDevice::InterruptHandler()+0x4c>
   1e928:	e5903018 	ldr	r3, [r0, #24]
   1e92c:	e3130020 	tst	r3, #32
   1e930:	1a000017 	bne	1e994 <CSerialDevice::InterruptHandler()+0x14c>
   1e934:	e2843a01 	add	r3, r4, #4096	; 0x1000
   1e938:	e59320b8 	ldr	r2, [r3, #184]	; 0xb8
   1e93c:	e59310bc 	ldr	r1, [r3, #188]	; 0xbc
   1e940:	e1510002 	cmp	r1, r2
   1e944:	0a00002a 	beq	1e9f4 <CSerialDevice::InterruptHandler()+0x1ac>
   1e948:	e3a01a01 	mov	r1, #4096	; 0x1000
   1e94c:	e3431f20 	movt	r1, #16160	; 0x3f20
   1e950:	ea000003 	b	1e964 <CSerialDevice::InterruptHandler()+0x11c>
   1e954:	e59300b8 	ldr	r0, [r3, #184]	; 0xb8
   1e958:	e59320bc 	ldr	r2, [r3, #188]	; 0xbc
   1e95c:	e1500002 	cmp	r0, r2
   1e960:	0a000023 	beq	1e9f4 <CSerialDevice::InterruptHandler()+0x1ac>
   1e964:	e59320bc 	ldr	r2, [r3, #188]	; 0xbc
   1e968:	e0840002 	add	r0, r4, r2
   1e96c:	e2822001 	add	r2, r2, #1
   1e970:	e58320bc 	str	r2, [r3, #188]	; 0xbc
   1e974:	e5d028b8 	ldrb	r2, [r0, #2232]	; 0x8b8
   1e978:	e5812000 	str	r2, [r1]
   1e97c:	e59320bc 	ldr	r2, [r3, #188]	; 0xbc
   1e980:	e7ea2052 	ubfx	r2, r2, #0, #11
   1e984:	e58320bc 	str	r2, [r3, #188]	; 0xbc
   1e988:	e5912018 	ldr	r2, [r1, #24]
   1e98c:	e3120020 	tst	r2, #32
   1e990:	0affffef 	beq	1e954 <CSerialDevice::InterruptHandler()+0x10c>
   1e994:	e1a00005 	mov	r0, r5
   1e998:	eb00005b 	bl	1eb0c <CSpinLock::Release()>
   1e99c:	e3560000 	cmp	r6, #0
   1e9a0:	08bd87f0 	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1e9a4:	e2844a01 	add	r4, r4, #4096	; 0x1000
   1e9a8:	e59430cc 	ldr	r3, [r4, #204]	; 0xcc
   1e9ac:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   1e9b0:	e12fff13 	bx	r3
   1e9b4:	e3120b02 	tst	r2, #2048	; 0x800
   1e9b8:	0a000007 	beq	1e9dc <CSerialDevice::InterruptHandler()+0x194>
   1e9bc:	e59438b4 	ldr	r3, [r4, #2228]	; 0x8b4
   1e9c0:	e3530000 	cmp	r3, #0
   1e9c4:	0584c8b4 	streq	ip, [r4, #2228]	; 0x8b4
   1e9c8:	eaffffb7 	b	1e8ac <CSerialDevice::InterruptHandler()+0x64>
   1e9cc:	e59438b4 	ldr	r3, [r4, #2228]	; 0x8b4
   1e9d0:	e3530000 	cmp	r3, #0
   1e9d4:	0584c8b4 	streq	ip, [r4, #2228]	; 0x8b4
   1e9d8:	eaffffaa 	b	1e888 <CSerialDevice::InterruptHandler()+0x40>
   1e9dc:	e3120c01 	tst	r2, #256	; 0x100
   1e9e0:	0affffb1 	beq	1e8ac <CSerialDevice::InterruptHandler()+0x64>
   1e9e4:	e59438b4 	ldr	r3, [r4, #2228]	; 0x8b4
   1e9e8:	e3530000 	cmp	r3, #0
   1e9ec:	058478b4 	streq	r7, [r4, #2228]	; 0x8b4
   1e9f0:	eaffffad 	b	1e8ac <CSerialDevice::InterruptHandler()+0x64>
   1e9f4:	e3a03a01 	mov	r3, #4096	; 0x1000
   1e9f8:	e3433f20 	movt	r3, #16160	; 0x3f20
   1e9fc:	e5932038 	ldr	r2, [r3, #56]	; 0x38
   1ea00:	e3c22020 	bic	r2, r2, #32
   1ea04:	e5832038 	str	r2, [r3, #56]	; 0x38
   1ea08:	eaffffe1 	b	1e994 <CSerialDevice::InterruptHandler()+0x14c>

0001ea0c <CSerialDevice::InterruptStub(void*)>:
   1ea0c:	e92d4010 	push	{r4, lr}
   1ea10:	e2504000 	subs	r4, r0, #0
   1ea14:	0a000002 	beq	1ea24 <CSerialDevice::InterruptStub(void*)+0x18>
   1ea18:	e1a00004 	mov	r0, r4
   1ea1c:	e8bd4010 	pop	{r4, lr}
   1ea20:	eaffff88 	b	1e848 <CSerialDevice::InterruptHandler()>
   1ea24:	e59f1014 	ldr	r1, [pc, #20]	; 1ea40 <CSerialDevice::InterruptStub(void*)+0x34>
   1ea28:	e300222e 	movw	r2, #558	; 0x22e
   1ea2c:	e28100e8 	add	r0, r1, #232	; 0xe8
   1ea30:	ebffea87 	bl	19454 <assertion_failed>
   1ea34:	e1a00004 	mov	r0, r4
   1ea38:	e8bd4010 	pop	{r4, lr}
   1ea3c:	eaffff81 	b	1e848 <CSerialDevice::InterruptHandler()>
   1ea40:	0002966c 	.word	0x0002966c

0001ea44 <CSpinLock::CSpinLock(unsigned int)>:
   1ea44:	e92d4010 	push	{r4, lr}
   1ea48:	e3a03000 	mov	r3, #0
   1ea4c:	e1a04000 	mov	r4, r0
   1ea50:	e3510002 	cmp	r1, #2
   1ea54:	e880000a 	stm	r0, {r1, r3}
   1ea58:	9a000005 	bls	1ea74 <CSpinLock::CSpinLock(unsigned int)+0x30>
   1ea5c:	e3091760 	movw	r1, #38752	; 0x9760
   1ea60:	e3401002 	movt	r1, #2
   1ea64:	e3090770 	movw	r0, #38768	; 0x9770
   1ea68:	e3400002 	movt	r0, #2
   1ea6c:	e3a02023 	mov	r2, #35	; 0x23
   1ea70:	ebffea77 	bl	19454 <assertion_failed>
   1ea74:	e1a00004 	mov	r0, r4
   1ea78:	e8bd8010 	pop	{r4, pc}

0001ea7c <CSpinLock::~CSpinLock()>:
   1ea7c:	e5903004 	ldr	r3, [r0, #4]
   1ea80:	e92d4010 	push	{r4, lr}
   1ea84:	e1a04000 	mov	r4, r0
   1ea88:	e3530000 	cmp	r3, #0
   1ea8c:	0a000005 	beq	1eaa8 <CSpinLock::~CSpinLock()+0x2c>
   1ea90:	e3091760 	movw	r1, #38752	; 0x9760
   1ea94:	e3401002 	movt	r1, #2
   1ea98:	e309078c 	movw	r0, #38796	; 0x978c
   1ea9c:	e3400002 	movt	r0, #2
   1eaa0:	e3a02028 	mov	r2, #40	; 0x28
   1eaa4:	ebffea6a 	bl	19454 <assertion_failed>
   1eaa8:	e1a00004 	mov	r0, r4
   1eaac:	e8bd8010 	pop	{r4, pc}

0001eab0 <CSpinLock::Acquire()>:
   1eab0:	e92d4010 	push	{r4, lr}
   1eab4:	e1a04000 	mov	r4, r0
   1eab8:	e5900000 	ldr	r0, [r0]
   1eabc:	e3500000 	cmp	r0, #0
   1eac0:	1a00000f 	bne	1eb04 <CSpinLock::Acquire()+0x54>
   1eac4:	e30b34cc 	movw	r3, #46284	; 0xb4cc
   1eac8:	e3403002 	movt	r3, #2
   1eacc:	e5d33000 	ldrb	r3, [r3]
   1ead0:	e3530000 	cmp	r3, #0
   1ead4:	08bd8010 	popeq	{r4, pc}
   1ead8:	e2844004 	add	r4, r4, #4
   1eadc:	e1a01004 	mov	r1, r4
   1eae0:	e3a02001 	mov	r2, #1
   1eae4:	e1913f9f 	ldrex	r3, [r1]
   1eae8:	e3530000 	cmp	r3, #0
   1eaec:	1320f002 	wfene
   1eaf0:	01813f92 	strexeq	r3, r2, [r1]
   1eaf4:	03530000 	cmpeq	r3, #0
   1eaf8:	1afffff9 	bne	1eae4 <CSpinLock::Acquire()+0x34>
   1eafc:	f57ff05f 	dmb	sy
   1eb00:	e8bd8010 	pop	{r4, pc}
   1eb04:	eb000d0a 	bl	21f34 <EnterCritical>
   1eb08:	eaffffed 	b	1eac4 <CSpinLock::Acquire()+0x14>

0001eb0c <CSpinLock::Release()>:
   1eb0c:	e30b34cc 	movw	r3, #46284	; 0xb4cc
   1eb10:	e3403002 	movt	r3, #2
   1eb14:	e5d33000 	ldrb	r3, [r3]
   1eb18:	e3530000 	cmp	r3, #0
   1eb1c:	0a000006 	beq	1eb3c <CSpinLock::Release()+0x30>
   1eb20:	e2803004 	add	r3, r0, #4
   1eb24:	e1a01003 	mov	r1, r3
   1eb28:	e3a02000 	mov	r2, #0
   1eb2c:	f57ff05f 	dmb	sy
   1eb30:	e5812000 	str	r2, [r1]
   1eb34:	f57ff04f 	dsb	sy
   1eb38:	e320f004 	sev
   1eb3c:	e5903000 	ldr	r3, [r0]
   1eb40:	e3530000 	cmp	r3, #0
   1eb44:	012fff1e 	bxeq	lr
   1eb48:	ea000d2b 	b	21ffc <LeaveCritical>

0001eb4c <CSpinLock::Enable()>:
   1eb4c:	e92d4010 	push	{r4, lr}
   1eb50:	e30b44cc 	movw	r4, #46284	; 0xb4cc
   1eb54:	e3404002 	movt	r4, #2
   1eb58:	e5d43000 	ldrb	r3, [r4]
   1eb5c:	e3530000 	cmp	r3, #0
   1eb60:	0a000005 	beq	1eb7c <CSpinLock::Enable()+0x30>
   1eb64:	e3091760 	movw	r1, #38752	; 0x9760
   1eb68:	e3401002 	movt	r1, #2
   1eb6c:	e309079c 	movw	r0, #38812	; 0x979c
   1eb70:	e3400002 	movt	r0, #2
   1eb74:	e3a0207f 	mov	r2, #127	; 0x7f
   1eb78:	ebffea35 	bl	19454 <assertion_failed>
   1eb7c:	e3a03001 	mov	r3, #1
   1eb80:	e5c43000 	strb	r3, [r4]
   1eb84:	e8bd8010 	pop	{r4, pc}

0001eb88 <CString::~CString()>:
   1eb88:	e92d4010 	push	{r4, lr}
   1eb8c:	e1a04000 	mov	r4, r0
   1eb90:	e5900004 	ldr	r0, [r0, #4]
   1eb94:	e59f3014 	ldr	r3, [pc, #20]	; 1ebb0 <CString::~CString()+0x28>
   1eb98:	e5843000 	str	r3, [r4]
   1eb9c:	e3500000 	cmp	r0, #0
   1eba0:	0a000000 	beq	1eba8 <CString::~CString()+0x20>
   1eba4:	eb000d38 	bl	2208c <operator delete[](void*)>
   1eba8:	e1a00004 	mov	r0, r4
   1ebac:	e8bd8010 	pop	{r4, pc}
   1ebb0:	000297b0 	.word	0x000297b0

0001ebb4 <CString::~CString()>:
   1ebb4:	e92d4010 	push	{r4, lr}
   1ebb8:	e1a04000 	mov	r4, r0
   1ebbc:	e5900004 	ldr	r0, [r0, #4]
   1ebc0:	e59f3020 	ldr	r3, [pc, #32]	; 1ebe8 <CString::~CString()+0x34>
   1ebc4:	e5843000 	str	r3, [r4]
   1ebc8:	e3500000 	cmp	r0, #0
   1ebcc:	0a000000 	beq	1ebd4 <CString::~CString()+0x20>
   1ebd0:	eb000d2d 	bl	2208c <operator delete[](void*)>
   1ebd4:	e1a00004 	mov	r0, r4
   1ebd8:	e3a01010 	mov	r1, #16
   1ebdc:	eb000d2b 	bl	22090 <operator delete(void*, unsigned int)>
   1ebe0:	e1a00004 	mov	r0, r4
   1ebe4:	e8bd8010 	pop	{r4, pc}
   1ebe8:	000297b0 	.word	0x000297b0

0001ebec <CString::ReserveSpace(unsigned int) [clone .part.0]>:
   1ebec:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   1ebf0:	e990002c 	ldmib	r0, {r2, r3, r5}
   1ebf4:	e0455002 	sub	r5, r5, r2
   1ebf8:	e0851001 	add	r1, r5, r1
   1ebfc:	e2812001 	add	r2, r1, #1
   1ec00:	e1520003 	cmp	r2, r3
   1ec04:	98bd81f0 	popls	{r4, r5, r6, r7, r8, pc}
   1ec08:	e1a04000 	mov	r4, r0
   1ec0c:	e2816041 	add	r6, r1, #65	; 0x41
   1ec10:	e1a00006 	mov	r0, r6
   1ec14:	eb000d1a 	bl	22084 <operator new[](unsigned int)>
   1ec18:	e3a02000 	mov	r2, #0
   1ec1c:	e594300c 	ldr	r3, [r4, #12]
   1ec20:	e1a07000 	mov	r7, r0
   1ec24:	e0875005 	add	r5, r7, r5
   1ec28:	e5c32000 	strb	r2, [r3]
   1ec2c:	e5948004 	ldr	r8, [r4, #4]
   1ec30:	e1a01008 	mov	r1, r8
   1ec34:	eb00083f 	bl	20d38 <strcpy>
   1ec38:	e1a00008 	mov	r0, r8
   1ec3c:	eb000d12 	bl	2208c <operator delete[](void*)>
   1ec40:	e5847004 	str	r7, [r4, #4]
   1ec44:	e584500c 	str	r5, [r4, #12]
   1ec48:	e5846008 	str	r6, [r4, #8]
   1ec4c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0001ec50 <CString::CString()>:
   1ec50:	e59f100c 	ldr	r1, [pc, #12]	; 1ec64 <CString::CString()+0x14>
   1ec54:	e3a02000 	mov	r2, #0
   1ec58:	e8800006 	stm	r0, {r1, r2}
   1ec5c:	e5802008 	str	r2, [r0, #8]
   1ec60:	e12fff1e 	bx	lr
   1ec64:	000297b0 	.word	0x000297b0

0001ec68 <CString::CString(char const*)>:
   1ec68:	e92d4070 	push	{r4, r5, r6, lr}
   1ec6c:	e1a04000 	mov	r4, r0
   1ec70:	e59f3030 	ldr	r3, [pc, #48]	; 1eca8 <CString::CString(char const*)+0x40>
   1ec74:	e1a00001 	mov	r0, r1
   1ec78:	e1a05001 	mov	r5, r1
   1ec7c:	e5843000 	str	r3, [r4]
   1ec80:	eb0007c2 	bl	20b90 <strlen>
   1ec84:	e2803001 	add	r3, r0, #1
   1ec88:	e1a00003 	mov	r0, r3
   1ec8c:	e5843008 	str	r3, [r4, #8]
   1ec90:	eb000cfb 	bl	22084 <operator new[](unsigned int)>
   1ec94:	e1a01005 	mov	r1, r5
   1ec98:	e5840004 	str	r0, [r4, #4]
   1ec9c:	eb000825 	bl	20d38 <strcpy>
   1eca0:	e1a00004 	mov	r0, r4
   1eca4:	e8bd8070 	pop	{r4, r5, r6, pc}
   1eca8:	000297b0 	.word	0x000297b0

0001ecac <CString::operator char const*() const>:
   1ecac:	e5900004 	ldr	r0, [r0, #4]
   1ecb0:	e3053e40 	movw	r3, #24128	; 0x5e40
   1ecb4:	e3403002 	movt	r3, #2
   1ecb8:	e3500000 	cmp	r0, #0
   1ecbc:	01a00003 	moveq	r0, r3
   1ecc0:	e12fff1e 	bx	lr

0001ecc4 <CString::operator=(char const*)>:
   1ecc4:	e92d4070 	push	{r4, r5, r6, lr}
   1ecc8:	e1a04000 	mov	r4, r0
   1eccc:	e5900004 	ldr	r0, [r0, #4]
   1ecd0:	e1a05001 	mov	r5, r1
   1ecd4:	e3500000 	cmp	r0, #0
   1ecd8:	0a000000 	beq	1ece0 <CString::operator=(char const*)+0x1c>
   1ecdc:	eb000cea 	bl	2208c <operator delete[](void*)>
   1ece0:	e1a00005 	mov	r0, r5
   1ece4:	eb0007a9 	bl	20b90 <strlen>
   1ece8:	e2803001 	add	r3, r0, #1
   1ecec:	e1a00003 	mov	r0, r3
   1ecf0:	e5843008 	str	r3, [r4, #8]
   1ecf4:	eb000ce2 	bl	22084 <operator new[](unsigned int)>
   1ecf8:	e1a01005 	mov	r1, r5
   1ecfc:	e5840004 	str	r0, [r4, #4]
   1ed00:	eb00080c 	bl	20d38 <strcpy>
   1ed04:	e8bd8070 	pop	{r4, r5, r6, pc}

0001ed08 <CString::operator=(CString const&)>:
   1ed08:	e92d4070 	push	{r4, r5, r6, lr}
   1ed0c:	e1a04000 	mov	r4, r0
   1ed10:	e5900004 	ldr	r0, [r0, #4]
   1ed14:	e1a05001 	mov	r5, r1
   1ed18:	e3500000 	cmp	r0, #0
   1ed1c:	0a000000 	beq	1ed24 <CString::operator=(CString const&)+0x1c>
   1ed20:	eb000cd9 	bl	2208c <operator delete[](void*)>
   1ed24:	e5950004 	ldr	r0, [r5, #4]
   1ed28:	e3500000 	cmp	r0, #0
   1ed2c:	03a00001 	moveq	r0, #1
   1ed30:	0a000001 	beq	1ed3c <CString::operator=(CString const&)+0x34>
   1ed34:	eb000795 	bl	20b90 <strlen>
   1ed38:	e2800001 	add	r0, r0, #1
   1ed3c:	e5840008 	str	r0, [r4, #8]
   1ed40:	eb000ccf 	bl	22084 <operator new[](unsigned int)>
   1ed44:	e5840004 	str	r0, [r4, #4]
   1ed48:	e3053e40 	movw	r3, #24128	; 0x5e40
   1ed4c:	e3403002 	movt	r3, #2
   1ed50:	e5951004 	ldr	r1, [r5, #4]
   1ed54:	e3510000 	cmp	r1, #0
   1ed58:	01a01003 	moveq	r1, r3
   1ed5c:	eb0007f5 	bl	20d38 <strcpy>
   1ed60:	e1a00004 	mov	r0, r4
   1ed64:	e8bd8070 	pop	{r4, r5, r6, pc}

0001ed68 <CString::GetLength() const>:
   1ed68:	e5900004 	ldr	r0, [r0, #4]
   1ed6c:	e3500000 	cmp	r0, #0
   1ed70:	012fff1e 	bxeq	lr
   1ed74:	ea000785 	b	20b90 <strlen>

0001ed78 <CString::Append(char const*)>:
   1ed78:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   1ed7c:	e1a05000 	mov	r5, r0
   1ed80:	e5900004 	ldr	r0, [r0, #4]
   1ed84:	e3a03001 	mov	r3, #1
   1ed88:	e1a07001 	mov	r7, r1
   1ed8c:	e3500000 	cmp	r0, #0
   1ed90:	e5853008 	str	r3, [r5, #8]
   1ed94:	01a04003 	moveq	r4, r3
   1ed98:	0a000002 	beq	1eda8 <CString::Append(char const*)+0x30>
   1ed9c:	eb00077b 	bl	20b90 <strlen>
   1eda0:	e2804001 	add	r4, r0, #1
   1eda4:	e5854008 	str	r4, [r5, #8]
   1eda8:	e1a00007 	mov	r0, r7
   1edac:	eb000777 	bl	20b90 <strlen>
   1edb0:	e0804004 	add	r4, r0, r4
   1edb4:	e1a00004 	mov	r0, r4
   1edb8:	e5854008 	str	r4, [r5, #8]
   1edbc:	eb000cb0 	bl	22084 <operator new[](unsigned int)>
   1edc0:	e5956004 	ldr	r6, [r5, #4]
   1edc4:	e1a04000 	mov	r4, r0
   1edc8:	e3560000 	cmp	r6, #0
   1edcc:	05c06000 	strbeq	r6, [r0]
   1edd0:	0a000003 	beq	1ede4 <CString::Append(char const*)+0x6c>
   1edd4:	e1a01006 	mov	r1, r6
   1edd8:	eb0007d6 	bl	20d38 <strcpy>
   1eddc:	e1a00006 	mov	r0, r6
   1ede0:	eb000ca9 	bl	2208c <operator delete[](void*)>
   1ede4:	e1a01007 	mov	r1, r7
   1ede8:	e1a00004 	mov	r0, r4
   1edec:	eb0007ee 	bl	20dac <strcat>
   1edf0:	e5854004 	str	r4, [r5, #4]
   1edf4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0001edf8 <CString::Compare(char const*) const>:
   1edf8:	e5900004 	ldr	r0, [r0, #4]
   1edfc:	ea00076d 	b	20bb8 <strcmp>

0001ee00 <CString::Find(char) const>:
   1ee00:	e5902004 	ldr	r2, [r0, #4]
   1ee04:	e1d230d0 	ldrsb	r3, [r2]
   1ee08:	e3530000 	cmp	r3, #0
   1ee0c:	0a000009 	beq	1ee38 <CString::Find(char) const+0x38>
   1ee10:	e1510003 	cmp	r1, r3
   1ee14:	e3a00000 	mov	r0, #0
   1ee18:	1a000002 	bne	1ee28 <CString::Find(char) const+0x28>
   1ee1c:	e12fff1e 	bx	lr
   1ee20:	e1530001 	cmp	r3, r1
   1ee24:	012fff1e 	bxeq	lr
   1ee28:	e1f230d1 	ldrsb	r3, [r2, #1]!
   1ee2c:	e2800001 	add	r0, r0, #1
   1ee30:	e3530000 	cmp	r3, #0
   1ee34:	1afffff9 	bne	1ee20 <CString::Find(char) const+0x20>
   1ee38:	e3e00000 	mvn	r0, #0
   1ee3c:	e12fff1e 	bx	lr

0001ee40 <CString::PutChar(char, unsigned int)>:
   1ee40:	e92d4070 	push	{r4, r5, r6, lr}
   1ee44:	e2524000 	subs	r4, r2, #0
   1ee48:	08bd8070 	popeq	{r4, r5, r6, pc}
   1ee4c:	e1a06001 	mov	r6, r1
   1ee50:	e1a01004 	mov	r1, r4
   1ee54:	e1a05000 	mov	r5, r0
   1ee58:	ebffff63 	bl	1ebec <CString::ReserveSpace(unsigned int) [clone .part.0]>
   1ee5c:	e2443001 	sub	r3, r4, #1
   1ee60:	e595200c 	ldr	r2, [r5, #12]
   1ee64:	e2433001 	sub	r3, r3, #1
   1ee68:	e3730001 	cmn	r3, #1
   1ee6c:	e2820001 	add	r0, r2, #1
   1ee70:	e585000c 	str	r0, [r5, #12]
   1ee74:	e5c26000 	strb	r6, [r2]
   1ee78:	1afffff8 	bne	1ee60 <CString::PutChar(char, unsigned int)+0x20>
   1ee7c:	e8bd8070 	pop	{r4, r5, r6, pc}

0001ee80 <CString::PutString(char const*)>:
   1ee80:	e92d4070 	push	{r4, r5, r6, lr}
   1ee84:	e1a04000 	mov	r4, r0
   1ee88:	e1a00001 	mov	r0, r1
   1ee8c:	e1a05001 	mov	r5, r1
   1ee90:	eb00073e 	bl	20b90 <strlen>
   1ee94:	e2506000 	subs	r6, r0, #0
   1ee98:	0a000002 	beq	1eea8 <CString::PutString(char const*)+0x28>
   1ee9c:	e1a01006 	mov	r1, r6
   1eea0:	e1a00004 	mov	r0, r4
   1eea4:	ebffff50 	bl	1ebec <CString::ReserveSpace(unsigned int) [clone .part.0]>
   1eea8:	e1a01005 	mov	r1, r5
   1eeac:	e594000c 	ldr	r0, [r4, #12]
   1eeb0:	eb0007a0 	bl	20d38 <strcpy>
   1eeb4:	e594100c 	ldr	r1, [r4, #12]
   1eeb8:	e0811006 	add	r1, r1, r6
   1eebc:	e584100c 	str	r1, [r4, #12]
   1eec0:	e8bd8070 	pop	{r4, r5, r6, pc}

0001eec4 <CString::Replace(char const*, char const*)>:
   1eec4:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1eec8:	e1d180d0 	ldrsb	r8, [r1]
   1eecc:	e24dd010 	sub	sp, sp, #16
   1eed0:	e3580000 	cmp	r8, #0
   1eed4:	1a000002 	bne	1eee4 <CString::Replace(char const*, char const*)+0x20>
   1eed8:	e1a00008 	mov	r0, r8
   1eedc:	e28dd010 	add	sp, sp, #16
   1eee0:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1eee4:	e1a06000 	mov	r6, r0
   1eee8:	e1a07001 	mov	r7, r1
   1eeec:	e5901004 	ldr	r1, [r0, #4]
   1eef0:	e1a0000d 	mov	r0, sp
   1eef4:	e1a09002 	mov	r9, r2
   1eef8:	ebffff5a 	bl	1ec68 <CString::CString(char const*)>
   1eefc:	e5960004 	ldr	r0, [r6, #4]
   1ef00:	e3500000 	cmp	r0, #0
   1ef04:	0a000000 	beq	1ef0c <CString::Replace(char const*, char const*)+0x48>
   1ef08:	eb000c5f 	bl	2208c <operator delete[](void*)>
   1ef0c:	e3a00040 	mov	r0, #64	; 0x40
   1ef10:	e5860008 	str	r0, [r6, #8]
   1ef14:	eb000c5a 	bl	22084 <operator new[](unsigned int)>
   1ef18:	e59d4004 	ldr	r4, [sp, #4]
   1ef1c:	e3a08000 	mov	r8, #0
   1ef20:	e5860004 	str	r0, [r6, #4]
   1ef24:	e586000c 	str	r0, [r6, #12]
   1ef28:	e1d710d0 	ldrsb	r1, [r7]
   1ef2c:	e1a00004 	mov	r0, r4
   1ef30:	eb0007ae 	bl	20df0 <strchr>
   1ef34:	e2505000 	subs	r5, r0, #0
   1ef38:	0a00002d 	beq	1eff4 <CString::Replace(char const*, char const*)+0x130>
   1ef3c:	e1540005 	cmp	r4, r5
   1ef40:	2a000039 	bcs	1f02c <CString::Replace(char const*, char const*)+0x168>
   1ef44:	e3a01001 	mov	r1, #1
   1ef48:	e1a00006 	mov	r0, r6
   1ef4c:	e0d4a0d1 	ldrsb	sl, [r4], #1
   1ef50:	ebffff25 	bl	1ebec <CString::ReserveSpace(unsigned int) [clone .part.0]>
   1ef54:	e596300c 	ldr	r3, [r6, #12]
   1ef58:	e1550004 	cmp	r5, r4
   1ef5c:	e2832001 	add	r2, r3, #1
   1ef60:	e586200c 	str	r2, [r6, #12]
   1ef64:	e5c3a000 	strb	sl, [r3]
   1ef68:	1afffff5 	bne	1ef44 <CString::Replace(char const*, char const*)+0x80>
   1ef6c:	e2854001 	add	r4, r5, #1
   1ef70:	e1a0c005 	mov	ip, r5
   1ef74:	e1d730d1 	ldrsb	r3, [r7, #1]
   1ef78:	e2871001 	add	r1, r7, #1
   1ef7c:	e3530000 	cmp	r3, #0
   1ef80:	0a00000c 	beq	1efb8 <CString::Replace(char const*, char const*)+0xf4>
   1ef84:	e1d520d1 	ldrsb	r2, [r5, #1]
   1ef88:	e1520003 	cmp	r2, r3
   1ef8c:	1a00000e 	bne	1efcc <CString::Replace(char const*, char const*)+0x108>
   1ef90:	e2853002 	add	r3, r5, #2
   1ef94:	ea000002 	b	1efa4 <CString::Replace(char const*, char const*)+0xe0>
   1ef98:	e1d400d0 	ldrsb	r0, [r4]
   1ef9c:	e1500002 	cmp	r0, r2
   1efa0:	1a000009 	bne	1efcc <CString::Replace(char const*, char const*)+0x108>
   1efa4:	e1f120d1 	ldrsb	r2, [r1, #1]!
   1efa8:	e1a04003 	mov	r4, r3
   1efac:	e2833001 	add	r3, r3, #1
   1efb0:	e3520000 	cmp	r2, #0
   1efb4:	1afffff7 	bne	1ef98 <CString::Replace(char const*, char const*)+0xd4>
   1efb8:	e1a01009 	mov	r1, r9
   1efbc:	e1a00006 	mov	r0, r6
   1efc0:	e2888001 	add	r8, r8, #1
   1efc4:	ebffffad 	bl	1ee80 <CString::PutString(char const*)>
   1efc8:	eaffffd6 	b	1ef28 <CString::Replace(char const*, char const*)+0x64>
   1efcc:	e3a01001 	mov	r1, #1
   1efd0:	e1a00006 	mov	r0, r6
   1efd4:	e1dc50d0 	ldrsb	r5, [ip]
   1efd8:	e08c4001 	add	r4, ip, r1
   1efdc:	ebffff02 	bl	1ebec <CString::ReserveSpace(unsigned int) [clone .part.0]>
   1efe0:	e596300c 	ldr	r3, [r6, #12]
   1efe4:	e2832001 	add	r2, r3, #1
   1efe8:	e586200c 	str	r2, [r6, #12]
   1efec:	e5c35000 	strb	r5, [r3]
   1eff0:	eaffffcc 	b	1ef28 <CString::Replace(char const*, char const*)+0x64>
   1eff4:	e1a00006 	mov	r0, r6
   1eff8:	e1a01004 	mov	r1, r4
   1effc:	ebffff9f 	bl	1ee80 <CString::PutString(char const*)>
   1f000:	e596200c 	ldr	r2, [r6, #12]
   1f004:	e59f302c 	ldr	r3, [pc, #44]	; 1f038 <CString::Replace(char const*, char const*)+0x174>
   1f008:	e5c25000 	strb	r5, [r2]
   1f00c:	e59d0004 	ldr	r0, [sp, #4]
   1f010:	e58d3000 	str	r3, [sp]
   1f014:	e3500000 	cmp	r0, #0
   1f018:	0affffae 	beq	1eed8 <CString::Replace(char const*, char const*)+0x14>
   1f01c:	eb000c1a 	bl	2208c <operator delete[](void*)>
   1f020:	e1a00008 	mov	r0, r8
   1f024:	e28dd010 	add	sp, sp, #16
   1f028:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1f02c:	e1a0c004 	mov	ip, r4
   1f030:	e2854001 	add	r4, r5, #1
   1f034:	eaffffce 	b	1ef74 <CString::Replace(char const*, char const*)+0xb0>
   1f038:	000297b0 	.word	0x000297b0

0001f03c <CString::ReserveSpace(unsigned int)>:
   1f03c:	e3510000 	cmp	r1, #0
   1f040:	012fff1e 	bxeq	lr
   1f044:	eafffee8 	b	1ebec <CString::ReserveSpace(unsigned int) [clone .part.0]>

0001f048 <CString::ntoa(char*, unsigned long, unsigned int, bool)>:
   1f048:	e1510002 	cmp	r1, r2
   1f04c:	e92d4070 	push	{r4, r5, r6, lr}
   1f050:	23a0e001 	movcs	lr, #1
   1f054:	3a000019 	bcc	1f0c0 <CString::ntoa(char*, unsigned long, unsigned int, bool)+0x78>
   1f058:	e00e0e92 	mul	lr, r2, lr
   1f05c:	e734fe11 	udiv	r4, r1, lr
   1f060:	e1540002 	cmp	r4, r2
   1f064:	e1a0c004 	mov	ip, r4
   1f068:	2afffffa 	bcs	1f058 <CString::ntoa(char*, unsigned long, unsigned int, bool)+0x10>
   1f06c:	e3530000 	cmp	r3, #0
   1f070:	e1a05000 	mov	r5, r0
   1f074:	13a06037 	movne	r6, #55	; 0x37
   1f078:	03a06057 	moveq	r6, #87	; 0x57
   1f07c:	ea000002 	b	1f08c <CString::ntoa(char*, unsigned long, unsigned int, bool)+0x44>
   1f080:	e734fe11 	udiv	r4, r1, lr
   1f084:	e1a05003 	mov	r5, r3
   1f088:	e1a0c004 	mov	ip, r4
   1f08c:	e061149e 	mls	r1, lr, r4, r1
   1f090:	e1a03005 	mov	r3, r5
   1f094:	e73ef21e 	udiv	lr, lr, r2
   1f098:	e35c0009 	cmp	ip, #9
   1f09c:	e6efc07c 	uxtb	ip, ip
   1f0a0:	928cc030 	addls	ip, ip, #48	; 0x30
   1f0a4:	808cc006 	addhi	ip, ip, r6
   1f0a8:	e6afc07c 	sxtb	ip, ip
   1f0ac:	e4c3c001 	strb	ip, [r3], #1
   1f0b0:	e35e0000 	cmp	lr, #0
   1f0b4:	1afffff1 	bne	1f080 <CString::ntoa(char*, unsigned long, unsigned int, bool)+0x38>
   1f0b8:	e5c5e001 	strb	lr, [r5, #1]
   1f0bc:	e8bd8070 	pop	{r4, r5, r6, pc}
   1f0c0:	e1a0c001 	mov	ip, r1
   1f0c4:	e3a0e001 	mov	lr, #1
   1f0c8:	e1a04001 	mov	r4, r1
   1f0cc:	eaffffe6 	b	1f06c <CString::ntoa(char*, unsigned long, unsigned int, bool)+0x24>

0001f0d0 <CString::ftoa(char*, double, unsigned int)>:
   1f0d0:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   1f0d4:	e1a04000 	mov	r4, r0
   1f0d8:	eddf0b8c 	vldr	d16, [pc, #560]	; 1f310 <CString::ftoa(char*, double, unsigned int)+0x240>
   1f0dc:	ed2d8b02 	vpush	{d8}
   1f0e0:	ec432b18 	vmov	d8, r2, r3
   1f0e4:	e24dd014 	sub	sp, sp, #20
   1f0e8:	eeb58bc0 	vcmpe.f64	d8, #0.0
   1f0ec:	e59d7038 	ldr	r7, [sp, #56]	; 0x38
   1f0f0:	eef1fa10 	vmrs	APSR_nzcv, fpscr
   1f0f4:	4eb18b48 	vnegmi.f64	d8, d8
   1f0f8:	43a0302d 	movmi	r3, #45	; 0x2d
   1f0fc:	42806001 	addmi	r6, r0, #1
   1f100:	45c03000 	strbmi	r3, [r0]
   1f104:	51a06000 	movpl	r6, r0
   1f108:	eeb48be0 	vcmpe.f64	d8, d16
   1f10c:	eef1fa10 	vmrs	APSR_nzcv, fpscr
   1f110:	ca00006b 	bgt	1f2c4 <CString::ftoa(char*, double, unsigned int)+0x1f4>
   1f114:	eefc7bc8 	vcvt.u32.f64	s15, d8
   1f118:	ee175a90 	vmov	r5, s15
   1f11c:	e3550009 	cmp	r5, #9
   1f120:	83a02001 	movhi	r2, #1
   1f124:	83a0100a 	movhi	r1, #10
   1f128:	9a000070 	bls	1f2f0 <CString::ftoa(char*, double, unsigned int)+0x220>
   1f12c:	e0020291 	mul	r2, r1, r2
   1f130:	e733f215 	udiv	r3, r5, r2
   1f134:	e3530009 	cmp	r3, #9
   1f138:	8afffffb 	bhi	1f12c <CString::ftoa(char*, double, unsigned int)+0x5c>
   1f13c:	e30ceccd 	movw	lr, #52429	; 0xcccd
   1f140:	e34ceccc 	movt	lr, #52428	; 0xcccc
   1f144:	e1a0c006 	mov	ip, r6
   1f148:	e1a00005 	mov	r0, r5
   1f14c:	e731f215 	udiv	r1, r5, r2
   1f150:	ea000002 	b	1f160 <CString::ftoa(char*, double, unsigned int)+0x90>
   1f154:	e1a0c001 	mov	ip, r1
   1f158:	e731f210 	udiv	r1, r0, r2
   1f15c:	e1a03001 	mov	r3, r1
   1f160:	e0600192 	mls	r0, r2, r1, r0
   1f164:	e3530009 	cmp	r3, #9
   1f168:	e082129e 	umull	r1, r2, lr, r2
   1f16c:	e1a0100c 	mov	r1, ip
   1f170:	e6ef3073 	uxtb	r3, r3
   1f174:	92833030 	addls	r3, r3, #48	; 0x30
   1f178:	82833057 	addhi	r3, r3, #87	; 0x57
   1f17c:	e6af3073 	sxtb	r3, r3
   1f180:	e1b021a2 	lsrs	r2, r2, #3
   1f184:	e4c13001 	strb	r3, [r1], #1
   1f188:	1afffff1 	bne	1f154 <CString::ftoa(char*, double, unsigned int)+0x84>
   1f18c:	e5cc2001 	strb	r2, [ip, #1]
   1f190:	e3570000 	cmp	r7, #0
   1f194:	0a000046 	beq	1f2b4 <CString::ftoa(char*, double, unsigned int)+0x1e4>
   1f198:	e1a00006 	mov	r0, r6
   1f19c:	eb00067b 	bl	20b90 <strlen>
   1f1a0:	e3570009 	cmp	r7, #9
   1f1a4:	31a09007 	movcc	r9, r7
   1f1a8:	23a09009 	movcs	r9, #9
   1f1ac:	e3570001 	cmp	r7, #1
   1f1b0:	e0868000 	add	r8, r6, r0
   1f1b4:	e3a0302e 	mov	r3, #46	; 0x2e
   1f1b8:	e7c63000 	strb	r3, [r6, r0]
   1f1bc:	e2886001 	add	r6, r8, #1
   1f1c0:	9ef21b04 	vmovls.f64	d17, #36	; 0x41200000  10.0
   1f1c4:	9a000008 	bls	1f1ec <CString::ftoa(char*, double, unsigned int)+0x11c>
   1f1c8:	e3a0200a 	mov	r2, #10
   1f1cc:	e3a03002 	mov	r3, #2
   1f1d0:	e1a01002 	mov	r1, r2
   1f1d4:	e2833001 	add	r3, r3, #1
   1f1d8:	e0020291 	mul	r2, r1, r2
   1f1dc:	e1530009 	cmp	r3, r9
   1f1e0:	9afffffb 	bls	1f1d4 <CString::ftoa(char*, double, unsigned int)+0x104>
   1f1e4:	ee072a90 	vmov	s15, r2
   1f1e8:	eef81b67 	vcvt.f64.u32	d17, s15
   1f1ec:	ee075a90 	vmov	s15, r5
   1f1f0:	eef80b67 	vcvt.f64.u32	d16, s15
   1f1f4:	ee388b60 	vsub.f64	d8, d8, d16
   1f1f8:	ee288b21 	vmul.f64	d8, d8, d17
   1f1fc:	eefc7bc8 	vcvt.u32.f64	s15, d8
   1f200:	ee171a90 	vmov	r1, s15
   1f204:	e3510009 	cmp	r1, #9
   1f208:	83a02001 	movhi	r2, #1
   1f20c:	83a0c00a 	movhi	ip, #10
   1f210:	9a000039 	bls	1f2fc <CString::ftoa(char*, double, unsigned int)+0x22c>
   1f214:	e002029c 	mul	r2, ip, r2
   1f218:	e730f211 	udiv	r0, r1, r2
   1f21c:	e3500009 	cmp	r0, #9
   1f220:	e1a03000 	mov	r3, r0
   1f224:	8afffffa 	bhi	1f214 <CString::ftoa(char*, double, unsigned int)+0x144>
   1f228:	e30ceccd 	movw	lr, #52429	; 0xcccd
   1f22c:	e34ceccc 	movt	lr, #52428	; 0xcccc
   1f230:	e28dc004 	add	ip, sp, #4
   1f234:	ea000002 	b	1f244 <CString::ftoa(char*, double, unsigned int)+0x174>
   1f238:	e1a0c000 	mov	ip, r0
   1f23c:	e730f211 	udiv	r0, r1, r2
   1f240:	e1a03000 	mov	r3, r0
   1f244:	e0611092 	mls	r1, r2, r0, r1
   1f248:	e3530009 	cmp	r3, #9
   1f24c:	e082029e 	umull	r0, r2, lr, r2
   1f250:	e1a0000c 	mov	r0, ip
   1f254:	e6ef3073 	uxtb	r3, r3
   1f258:	92833030 	addls	r3, r3, #48	; 0x30
   1f25c:	82833057 	addhi	r3, r3, #87	; 0x57
   1f260:	e6af3073 	sxtb	r3, r3
   1f264:	e1b021a2 	lsrs	r2, r2, #3
   1f268:	e4c03001 	strb	r3, [r0], #1
   1f26c:	1afffff1 	bne	1f238 <CString::ftoa(char*, double, unsigned int)+0x168>
   1f270:	e5cc2001 	strb	r2, [ip, #1]
   1f274:	e28d0004 	add	r0, sp, #4
   1f278:	eb000644 	bl	20b90 <strlen>
   1f27c:	e0599000 	subs	r9, r9, r0
   1f280:	0a000007 	beq	1f2a4 <CString::ftoa(char*, double, unsigned int)+0x1d4>
   1f284:	e2892001 	add	r2, r9, #1
   1f288:	e1a03006 	mov	r3, r6
   1f28c:	e0888002 	add	r8, r8, r2
   1f290:	e3a01030 	mov	r1, #48	; 0x30
   1f294:	e4c31001 	strb	r1, [r3], #1
   1f298:	e1530008 	cmp	r3, r8
   1f29c:	1afffffc 	bne	1f294 <CString::ftoa(char*, double, unsigned int)+0x1c4>
   1f2a0:	e0866009 	add	r6, r6, r9
   1f2a4:	e2802001 	add	r2, r0, #1
   1f2a8:	e28d1004 	add	r1, sp, #4
   1f2ac:	e1a00006 	mov	r0, r6
   1f2b0:	eb00078e 	bl	210f0 <memcpy>
   1f2b4:	e1a00004 	mov	r0, r4
   1f2b8:	e28dd014 	add	sp, sp, #20
   1f2bc:	ecbd8b02 	vpop	{d8}
   1f2c0:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   1f2c4:	e30937b8 	movw	r3, #38840	; 0x97b8
   1f2c8:	e3403002 	movt	r3, #2
   1f2cc:	e8b30003 	ldm	r3!, {r0, r1}
   1f2d0:	e5860000 	str	r0, [r6]
   1f2d4:	e5861004 	str	r1, [r6, #4]
   1f2d8:	e1a00004 	mov	r0, r4
   1f2dc:	e5d33000 	ldrb	r3, [r3]
   1f2e0:	e5c63008 	strb	r3, [r6, #8]
   1f2e4:	e28dd014 	add	sp, sp, #20
   1f2e8:	ecbd8b02 	vpop	{d8}
   1f2ec:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   1f2f0:	ee173a90 	vmov	r3, s15
   1f2f4:	e3a02001 	mov	r2, #1
   1f2f8:	eaffff8f 	b	1f13c <CString::ftoa(char*, double, unsigned int)+0x6c>
   1f2fc:	ee173a90 	vmov	r3, s15
   1f300:	e3a02001 	mov	r2, #1
   1f304:	ee170a90 	vmov	r0, s15
   1f308:	eaffffc6 	b	1f228 <CString::ftoa(char*, double, unsigned int)+0x158>
   1f30c:	e320f000 	nop	{0}
   1f310:	ffe00000 	.word	0xffe00000
   1f314:	41efffff 	.word	0x41efffff

0001f318 <CString::FormatV(char const*, std::__va_list)>:
   1f318:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f31c:	e1a08000 	mov	r8, r0
   1f320:	e5900004 	ldr	r0, [r0, #4]
   1f324:	e24dd02c 	sub	sp, sp, #44	; 0x2c
   1f328:	e1a07001 	mov	r7, r1
   1f32c:	e1a09002 	mov	r9, r2
   1f330:	e3500000 	cmp	r0, #0
   1f334:	0a000000 	beq	1f33c <CString::FormatV(char const*, std::__va_list)+0x24>
   1f338:	eb000b53 	bl	2208c <operator delete[](void*)>
   1f33c:	e3a00040 	mov	r0, #64	; 0x40
   1f340:	e30caccd 	movw	sl, #52429	; 0xcccd
   1f344:	e34caccc 	movt	sl, #52428	; 0xcccc
   1f348:	e5880008 	str	r0, [r8, #8]
   1f34c:	eb000b4c 	bl	22084 <operator new[](unsigned int)>
   1f350:	e5880004 	str	r0, [r8, #4]
   1f354:	e588000c 	str	r0, [r8, #12]
   1f358:	e1d740d0 	ldrsb	r4, [r7]
   1f35c:	e3540000 	cmp	r4, #0
   1f360:	0a00005b 	beq	1f4d4 <CString::FormatV(char const*, std::__va_list)+0x1bc>
   1f364:	e3540025 	cmp	r4, #37	; 0x25
   1f368:	e2876001 	add	r6, r7, #1
   1f36c:	1a00004d 	bne	1f4a8 <CString::FormatV(char const*, std::__va_list)+0x190>
   1f370:	e1d750d1 	ldrsb	r5, [r7, #1]
   1f374:	e3550025 	cmp	r5, #37	; 0x25
   1f378:	0a000127 	beq	1f81c <CString::FormatV(char const*, std::__va_list)+0x504>
   1f37c:	e355002d 	cmp	r5, #45	; 0x2d
   1f380:	02876002 	addeq	r6, r7, #2
   1f384:	03a0b001 	moveq	fp, #1
   1f388:	13a0b000 	movne	fp, #0
   1f38c:	01d750d2 	ldrsbeq	r5, [r7, #2]
   1f390:	e2867001 	add	r7, r6, #1
   1f394:	e3550030 	cmp	r5, #48	; 0x30
   1f398:	02863002 	addeq	r3, r6, #2
   1f39c:	03a02001 	moveq	r2, #1
   1f3a0:	13a02000 	movne	r2, #0
   1f3a4:	01d650d1 	ldrsbeq	r5, [r6, #1]
   1f3a8:	01a06007 	moveq	r6, r7
   1f3ac:	01a07003 	moveq	r7, r3
   1f3b0:	e2453030 	sub	r3, r5, #48	; 0x30
   1f3b4:	e6ef3073 	uxtb	r3, r3
   1f3b8:	e3530009 	cmp	r3, #9
   1f3bc:	8a00005b 	bhi	1f530 <CString::FormatV(char const*, std::__va_list)+0x218>
   1f3c0:	e3a04000 	mov	r4, #0
   1f3c4:	e3a0000a 	mov	r0, #10
   1f3c8:	ea000000 	b	1f3d0 <CString::FormatV(char const*, std::__va_list)+0xb8>
   1f3cc:	e1a06003 	mov	r6, r3
   1f3d0:	e0245490 	mla	r4, r0, r4, r5
   1f3d4:	e1d650d1 	ldrsb	r5, [r6, #1]
   1f3d8:	e2863001 	add	r3, r6, #1
   1f3dc:	e2451030 	sub	r1, r5, #48	; 0x30
   1f3e0:	e2444030 	sub	r4, r4, #48	; 0x30
   1f3e4:	e6ef1071 	uxtb	r1, r1
   1f3e8:	e3510009 	cmp	r1, #9
   1f3ec:	9afffff6 	bls	1f3cc <CString::FormatV(char const*, std::__va_list)+0xb4>
   1f3f0:	e2867002 	add	r7, r6, #2
   1f3f4:	e355002e 	cmp	r5, #46	; 0x2e
   1f3f8:	0a000039 	beq	1f4e4 <CString::FormatV(char const*, std::__va_list)+0x1cc>
   1f3fc:	e1d3e0d0 	ldrsb	lr, [r3]
   1f400:	e3a01006 	mov	r1, #6
   1f404:	e35e006c 	cmp	lr, #108	; 0x6c
   1f408:	01d3e0d1 	ldrsbeq	lr, [r3, #1]
   1f40c:	01a03007 	moveq	r3, r7
   1f410:	02877001 	addeq	r7, r7, #1
   1f414:	e24e0058 	sub	r0, lr, #88	; 0x58
   1f418:	e3500020 	cmp	r0, #32
   1f41c:	979ff100 	ldrls	pc, [pc, r0, lsl #2]
   1f420:	ea0000ea 	b	1f7d0 <CString::FormatV(char const*, std::__va_list)+0x4b8>
   1f424:	0001f78c 	.word	0x0001f78c
   1f428:	0001f7d0 	.word	0x0001f7d0
   1f42c:	0001f7d0 	.word	0x0001f7d0
   1f430:	0001f7d0 	.word	0x0001f7d0
   1f434:	0001f7d0 	.word	0x0001f7d0
   1f438:	0001f7d0 	.word	0x0001f7d0
   1f43c:	0001f7d0 	.word	0x0001f7d0
   1f440:	0001f7d0 	.word	0x0001f7d0
   1f444:	0001f7d0 	.word	0x0001f7d0
   1f448:	0001f7d0 	.word	0x0001f7d0
   1f44c:	0001f7d0 	.word	0x0001f7d0
   1f450:	0001f794 	.word	0x0001f794
   1f454:	0001f698 	.word	0x0001f698
   1f458:	0001f7d0 	.word	0x0001f7d0
   1f45c:	0001f5f4 	.word	0x0001f5f4
   1f460:	0001f7d0 	.word	0x0001f7d0
   1f464:	0001f7d0 	.word	0x0001f7d0
   1f468:	0001f698 	.word	0x0001f698
   1f46c:	0001f7d0 	.word	0x0001f7d0
   1f470:	0001f7d0 	.word	0x0001f7d0
   1f474:	0001f7d0 	.word	0x0001f7d0
   1f478:	0001f7d0 	.word	0x0001f7d0
   1f47c:	0001f7d0 	.word	0x0001f7d0
   1f480:	0001f53c 	.word	0x0001f53c
   1f484:	0001f78c 	.word	0x0001f78c
   1f488:	0001f7d0 	.word	0x0001f7d0
   1f48c:	0001f7d0 	.word	0x0001f7d0
   1f490:	0001f664 	.word	0x0001f664
   1f494:	0001f7d0 	.word	0x0001f7d0
   1f498:	0001f5ec 	.word	0x0001f5ec
   1f49c:	0001f7d0 	.word	0x0001f7d0
   1f4a0:	0001f7d0 	.word	0x0001f7d0
   1f4a4:	0001f78c 	.word	0x0001f78c
   1f4a8:	e3a01001 	mov	r1, #1
   1f4ac:	e1a00008 	mov	r0, r8
   1f4b0:	ebfffdcd 	bl	1ebec <CString::ReserveSpace(unsigned int) [clone .part.0]>
   1f4b4:	e598300c 	ldr	r3, [r8, #12]
   1f4b8:	e1a07006 	mov	r7, r6
   1f4bc:	e2832001 	add	r2, r3, #1
   1f4c0:	e588200c 	str	r2, [r8, #12]
   1f4c4:	e5c34000 	strb	r4, [r3]
   1f4c8:	e1d740d0 	ldrsb	r4, [r7]
   1f4cc:	e3540000 	cmp	r4, #0
   1f4d0:	1affffa3 	bne	1f364 <CString::FormatV(char const*, std::__va_list)+0x4c>
   1f4d4:	e598300c 	ldr	r3, [r8, #12]
   1f4d8:	e5c34000 	strb	r4, [r3]
   1f4dc:	e28dd02c 	add	sp, sp, #44	; 0x2c
   1f4e0:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f4e4:	e1d3e0d1 	ldrsb	lr, [r3, #1]
   1f4e8:	e24e3030 	sub	r3, lr, #48	; 0x30
   1f4ec:	e6ef3073 	uxtb	r3, r3
   1f4f0:	e3530009 	cmp	r3, #9
   1f4f4:	8a000163 	bhi	1fa88 <CString::FormatV(char const*, std::__va_list)+0x770>
   1f4f8:	e3a01000 	mov	r1, #0
   1f4fc:	e3a0c00a 	mov	ip, #10
   1f500:	ea000000 	b	1f508 <CString::FormatV(char const*, std::__va_list)+0x1f0>
   1f504:	e1a07003 	mov	r7, r3
   1f508:	e021e19c 	mla	r1, ip, r1, lr
   1f50c:	e1d7e0d1 	ldrsb	lr, [r7, #1]
   1f510:	e2873001 	add	r3, r7, #1
   1f514:	e24e0030 	sub	r0, lr, #48	; 0x30
   1f518:	e2411030 	sub	r1, r1, #48	; 0x30
   1f51c:	e6ef0070 	uxtb	r0, r0
   1f520:	e3500009 	cmp	r0, #9
   1f524:	9afffff6 	bls	1f504 <CString::FormatV(char const*, std::__va_list)+0x1ec>
   1f528:	e2877002 	add	r7, r7, #2
   1f52c:	eaffffb4 	b	1f404 <CString::FormatV(char const*, std::__va_list)+0xec>
   1f530:	e1a03006 	mov	r3, r6
   1f534:	e3a04000 	mov	r4, #0
   1f538:	eaffffad 	b	1f3f4 <CString::FormatV(char const*, std::__va_list)+0xdc>
   1f53c:	e3a05008 	mov	r5, #8
   1f540:	e599c000 	ldr	ip, [r9]
   1f544:	e2899004 	add	r9, r9, #4
   1f548:	e15c0005 	cmp	ip, r5
   1f54c:	23a01001 	movcs	r1, #1
   1f550:	3a000117 	bcc	1f9b4 <CString::FormatV(char const*, std::__va_list)+0x69c>
   1f554:	e0010195 	mul	r1, r5, r1
   1f558:	e730f11c 	udiv	r0, ip, r1
   1f55c:	e1550000 	cmp	r5, r0
   1f560:	e1a03000 	mov	r3, r0
   1f564:	9afffffa 	bls	1f554 <CString::FormatV(char const*, std::__va_list)+0x23c>
   1f568:	e35e0058 	cmp	lr, #88	; 0x58
   1f56c:	e28de010 	add	lr, sp, #16
   1f570:	13a06057 	movne	r6, #87	; 0x57
   1f574:	03a06037 	moveq	r6, #55	; 0x37
   1f578:	ea000002 	b	1f588 <CString::FormatV(char const*, std::__va_list)+0x270>
   1f57c:	e1a0e000 	mov	lr, r0
   1f580:	e730f11c 	udiv	r0, ip, r1
   1f584:	e1a03000 	mov	r3, r0
   1f588:	e06cc091 	mls	ip, r1, r0, ip
   1f58c:	e1a0000e 	mov	r0, lr
   1f590:	e731f511 	udiv	r1, r1, r5
   1f594:	e3530009 	cmp	r3, #9
   1f598:	e6ef3073 	uxtb	r3, r3
   1f59c:	92833030 	addls	r3, r3, #48	; 0x30
   1f5a0:	80833006 	addhi	r3, r3, r6
   1f5a4:	e6af3073 	sxtb	r3, r3
   1f5a8:	e4c03001 	strb	r3, [r0], #1
   1f5ac:	e3510000 	cmp	r1, #0
   1f5b0:	1afffff1 	bne	1f57c <CString::FormatV(char const*, std::__va_list)+0x264>
   1f5b4:	e5ce1001 	strb	r1, [lr, #1]
   1f5b8:	e28d0010 	add	r0, sp, #16
   1f5bc:	e58d200c 	str	r2, [sp, #12]
   1f5c0:	eb000572 	bl	20b90 <strlen>
   1f5c4:	e35b0000 	cmp	fp, #0
   1f5c8:	e1a05000 	mov	r5, r0
   1f5cc:	e59d200c 	ldr	r2, [sp, #12]
   1f5d0:	1a00009a 	bne	1f840 <CString::FormatV(char const*, std::__va_list)+0x528>
   1f5d4:	e1500004 	cmp	r0, r4
   1f5d8:	3a0000ab 	bcc	1f88c <CString::FormatV(char const*, std::__va_list)+0x574>
   1f5dc:	e28d1010 	add	r1, sp, #16
   1f5e0:	e1a00008 	mov	r0, r8
   1f5e4:	ebfffe25 	bl	1ee80 <CString::PutString(char const*)>
   1f5e8:	eaffff5a 	b	1f358 <CString::FormatV(char const*, std::__va_list)+0x40>
   1f5ec:	e3a0500a 	mov	r5, #10
   1f5f0:	eaffffd2 	b	1f540 <CString::FormatV(char const*, std::__va_list)+0x228>
   1f5f4:	e2899007 	add	r9, r9, #7
   1f5f8:	e28d0010 	add	r0, sp, #16
   1f5fc:	e3c93007 	bic	r3, r9, #7
   1f600:	e2839008 	add	r9, r3, #8
   1f604:	e1c320d0 	ldrd	r2, [r3]
   1f608:	e58d1000 	str	r1, [sp]
   1f60c:	ebfffeaf 	bl	1f0d0 <CString::ftoa(char*, double, unsigned int)>
   1f610:	e28d0010 	add	r0, sp, #16
   1f614:	eb00055d 	bl	20b90 <strlen>
   1f618:	e35b0000 	cmp	fp, #0
   1f61c:	e1a05000 	mov	r5, r0
   1f620:	1a0000e7 	bne	1f9c4 <CString::FormatV(char const*, std::__va_list)+0x6ac>
   1f624:	e1500004 	cmp	r0, r4
   1f628:	2affffeb 	bcs	1f5dc <CString::FormatV(char const*, std::__va_list)+0x2c4>
   1f62c:	e0444000 	sub	r4, r4, r0
   1f630:	e1a00008 	mov	r0, r8
   1f634:	e1a01004 	mov	r1, r4
   1f638:	ebfffd6b 	bl	1ebec <CString::ReserveSpace(unsigned int) [clone .part.0]>
   1f63c:	e2443001 	sub	r3, r4, #1
   1f640:	e3a00020 	mov	r0, #32
   1f644:	e598200c 	ldr	r2, [r8, #12]
   1f648:	e2433001 	sub	r3, r3, #1
   1f64c:	e3730001 	cmn	r3, #1
   1f650:	e2821001 	add	r1, r2, #1
   1f654:	e588100c 	str	r1, [r8, #12]
   1f658:	e5c20000 	strb	r0, [r2]
   1f65c:	1afffff8 	bne	1f644 <CString::FormatV(char const*, std::__va_list)+0x32c>
   1f660:	eaffffdd 	b	1f5dc <CString::FormatV(char const*, std::__va_list)+0x2c4>
   1f664:	e5996000 	ldr	r6, [r9]
   1f668:	e2899004 	add	r9, r9, #4
   1f66c:	e1a00006 	mov	r0, r6
   1f670:	eb000546 	bl	20b90 <strlen>
   1f674:	e35b0000 	cmp	fp, #0
   1f678:	e1a05000 	mov	r5, r0
   1f67c:	1a0000e3 	bne	1fa10 <CString::FormatV(char const*, std::__va_list)+0x6f8>
   1f680:	e1500004 	cmp	r0, r4
   1f684:	3a0000af 	bcc	1f948 <CString::FormatV(char const*, std::__va_list)+0x630>
   1f688:	e1a01006 	mov	r1, r6
   1f68c:	e1a00008 	mov	r0, r8
   1f690:	ebfffdfa 	bl	1ee80 <CString::PutString(char const*)>
   1f694:	eaffff2f 	b	1f358 <CString::FormatV(char const*, std::__va_list)+0x40>
   1f698:	e599e000 	ldr	lr, [r9]
   1f69c:	e2899004 	add	r9, r9, #4
   1f6a0:	e35e0000 	cmp	lr, #0
   1f6a4:	b26ee000 	rsblt	lr, lr, #0
   1f6a8:	b3a05001 	movlt	r5, #1
   1f6ac:	a3a05000 	movge	r5, #0
   1f6b0:	e35e0009 	cmp	lr, #9
   1f6b4:	e1a0000e 	mov	r0, lr
   1f6b8:	c3a01001 	movgt	r1, #1
   1f6bc:	c3a0c00a 	movgt	ip, #10
   1f6c0:	da0000f4 	ble	1fa98 <CString::FormatV(char const*, std::__va_list)+0x780>
   1f6c4:	e001019c 	mul	r1, ip, r1
   1f6c8:	e733f11e 	udiv	r3, lr, r1
   1f6cc:	e3530009 	cmp	r3, #9
   1f6d0:	8afffffb 	bhi	1f6c4 <CString::FormatV(char const*, std::__va_list)+0x3ac>
   1f6d4:	e73ef11e 	udiv	lr, lr, r1
   1f6d8:	e28dc010 	add	ip, sp, #16
   1f6dc:	ea000002 	b	1f6ec <CString::FormatV(char const*, std::__va_list)+0x3d4>
   1f6e0:	e1a0c00e 	mov	ip, lr
   1f6e4:	e73ef110 	udiv	lr, r0, r1
   1f6e8:	e1a0300e 	mov	r3, lr
   1f6ec:	e0600e91 	mls	r0, r1, lr, r0
   1f6f0:	e3530009 	cmp	r3, #9
   1f6f4:	e081e19a 	umull	lr, r1, sl, r1
   1f6f8:	e1a0e00c 	mov	lr, ip
   1f6fc:	e6ef3073 	uxtb	r3, r3
   1f700:	92833030 	addls	r3, r3, #48	; 0x30
   1f704:	82833057 	addhi	r3, r3, #87	; 0x57
   1f708:	e6af3073 	sxtb	r3, r3
   1f70c:	e1b011a1 	lsrs	r1, r1, #3
   1f710:	e4ce3001 	strb	r3, [lr], #1
   1f714:	1afffff1 	bne	1f6e0 <CString::FormatV(char const*, std::__va_list)+0x3c8>
   1f718:	e5cc1001 	strb	r1, [ip, #1]
   1f71c:	e28d0010 	add	r0, sp, #16
   1f720:	e58d200c 	str	r2, [sp, #12]
   1f724:	eb000519 	bl	20b90 <strlen>
   1f728:	e3550000 	cmp	r5, #0
   1f72c:	e1a06000 	mov	r6, r0
   1f730:	e59d200c 	ldr	r2, [sp, #12]
   1f734:	1a000064 	bne	1f8cc <CString::FormatV(char const*, std::__va_list)+0x5b4>
   1f738:	e35b0000 	cmp	fp, #0
   1f73c:	0a0000e1 	beq	1fac8 <CString::FormatV(char const*, std::__va_list)+0x7b0>
   1f740:	e28d1010 	add	r1, sp, #16
   1f744:	e1a00008 	mov	r0, r8
   1f748:	ebfffdcc 	bl	1ee80 <CString::PutString(char const*)>
   1f74c:	e1560004 	cmp	r6, r4
   1f750:	2affff00 	bcs	1f358 <CString::FormatV(char const*, std::__va_list)+0x40>
   1f754:	e0444006 	sub	r4, r4, r6
   1f758:	e1a00008 	mov	r0, r8
   1f75c:	e1a01004 	mov	r1, r4
   1f760:	ebfffd21 	bl	1ebec <CString::ReserveSpace(unsigned int) [clone .part.0]>
   1f764:	e2443001 	sub	r3, r4, #1
   1f768:	e3a00020 	mov	r0, #32
   1f76c:	e598200c 	ldr	r2, [r8, #12]
   1f770:	e2433001 	sub	r3, r3, #1
   1f774:	e3730001 	cmn	r3, #1
   1f778:	e2821001 	add	r1, r2, #1
   1f77c:	e588100c 	str	r1, [r8, #12]
   1f780:	e5c20000 	strb	r0, [r2]
   1f784:	1afffff8 	bne	1f76c <CString::FormatV(char const*, std::__va_list)+0x454>
   1f788:	eafffef2 	b	1f358 <CString::FormatV(char const*, std::__va_list)+0x40>
   1f78c:	e3a05010 	mov	r5, #16
   1f790:	eaffff6a 	b	1f540 <CString::FormatV(char const*, std::__va_list)+0x228>
   1f794:	e35b0000 	cmp	fp, #0
   1f798:	e2896004 	add	r6, r9, #4
   1f79c:	e1d950d0 	ldrsb	r5, [r9]
   1f7a0:	1a0000ad 	bne	1fa5c <CString::FormatV(char const*, std::__va_list)+0x744>
   1f7a4:	e3540001 	cmp	r4, #1
   1f7a8:	8a000074 	bhi	1f980 <CString::FormatV(char const*, std::__va_list)+0x668>
   1f7ac:	e3a01001 	mov	r1, #1
   1f7b0:	e1a00008 	mov	r0, r8
   1f7b4:	ebfffd0c 	bl	1ebec <CString::ReserveSpace(unsigned int) [clone .part.0]>
   1f7b8:	e598300c 	ldr	r3, [r8, #12]
   1f7bc:	e1a09006 	mov	r9, r6
   1f7c0:	e2832001 	add	r2, r3, #1
   1f7c4:	e588200c 	str	r2, [r8, #12]
   1f7c8:	e5c35000 	strb	r5, [r3]
   1f7cc:	eafffee1 	b	1f358 <CString::FormatV(char const*, std::__va_list)+0x40>
   1f7d0:	e3a01001 	mov	r1, #1
   1f7d4:	e1a00008 	mov	r0, r8
   1f7d8:	e58d300c 	str	r3, [sp, #12]
   1f7dc:	ebfffd02 	bl	1ebec <CString::ReserveSpace(unsigned int) [clone .part.0]>
   1f7e0:	e598200c 	ldr	r2, [r8, #12]
   1f7e4:	e3a00025 	mov	r0, #37	; 0x25
   1f7e8:	e59d300c 	ldr	r3, [sp, #12]
   1f7ec:	e2821001 	add	r1, r2, #1
   1f7f0:	e588100c 	str	r1, [r8, #12]
   1f7f4:	e3a01001 	mov	r1, #1
   1f7f8:	e5c20000 	strb	r0, [r2]
   1f7fc:	e1a00008 	mov	r0, r8
   1f800:	e1d340d0 	ldrsb	r4, [r3]
   1f804:	ebfffcf8 	bl	1ebec <CString::ReserveSpace(unsigned int) [clone .part.0]>
   1f808:	e598300c 	ldr	r3, [r8, #12]
   1f80c:	e2832001 	add	r2, r3, #1
   1f810:	e588200c 	str	r2, [r8, #12]
   1f814:	e5c34000 	strb	r4, [r3]
   1f818:	eafffece 	b	1f358 <CString::FormatV(char const*, std::__va_list)+0x40>
   1f81c:	e3a01001 	mov	r1, #1
   1f820:	e1a00008 	mov	r0, r8
   1f824:	ebfffcf0 	bl	1ebec <CString::ReserveSpace(unsigned int) [clone .part.0]>
   1f828:	e598300c 	ldr	r3, [r8, #12]
   1f82c:	e2877002 	add	r7, r7, #2
   1f830:	e2832001 	add	r2, r3, #1
   1f834:	e588200c 	str	r2, [r8, #12]
   1f838:	e5c35000 	strb	r5, [r3]
   1f83c:	eafffec5 	b	1f358 <CString::FormatV(char const*, std::__va_list)+0x40>
   1f840:	e28d1010 	add	r1, sp, #16
   1f844:	e1a00008 	mov	r0, r8
   1f848:	ebfffd8c 	bl	1ee80 <CString::PutString(char const*)>
   1f84c:	e1550004 	cmp	r5, r4
   1f850:	2afffec0 	bcs	1f358 <CString::FormatV(char const*, std::__va_list)+0x40>
   1f854:	e0444005 	sub	r4, r4, r5
   1f858:	e1a00008 	mov	r0, r8
   1f85c:	e1a01004 	mov	r1, r4
   1f860:	ebfffce1 	bl	1ebec <CString::ReserveSpace(unsigned int) [clone .part.0]>
   1f864:	e2443001 	sub	r3, r4, #1
   1f868:	e3a00020 	mov	r0, #32
   1f86c:	e598200c 	ldr	r2, [r8, #12]
   1f870:	e2433001 	sub	r3, r3, #1
   1f874:	e3730001 	cmn	r3, #1
   1f878:	e2821001 	add	r1, r2, #1
   1f87c:	e588100c 	str	r1, [r8, #12]
   1f880:	e5c20000 	strb	r0, [r2]
   1f884:	1afffff8 	bne	1f86c <CString::FormatV(char const*, std::__va_list)+0x554>
   1f888:	eafffeb2 	b	1f358 <CString::FormatV(char const*, std::__va_list)+0x40>
   1f88c:	e0444000 	sub	r4, r4, r0
   1f890:	e3520000 	cmp	r2, #0
   1f894:	e1a01004 	mov	r1, r4
   1f898:	e1a00008 	mov	r0, r8
   1f89c:	13a05030 	movne	r5, #48	; 0x30
   1f8a0:	03a05020 	moveq	r5, #32
   1f8a4:	ebfffcd0 	bl	1ebec <CString::ReserveSpace(unsigned int) [clone .part.0]>
   1f8a8:	e2443001 	sub	r3, r4, #1
   1f8ac:	e598200c 	ldr	r2, [r8, #12]
   1f8b0:	e2433001 	sub	r3, r3, #1
   1f8b4:	e3730001 	cmn	r3, #1
   1f8b8:	e2821001 	add	r1, r2, #1
   1f8bc:	e588100c 	str	r1, [r8, #12]
   1f8c0:	e5c25000 	strb	r5, [r2]
   1f8c4:	1afffff8 	bne	1f8ac <CString::FormatV(char const*, std::__va_list)+0x594>
   1f8c8:	eaffff43 	b	1f5dc <CString::FormatV(char const*, std::__va_list)+0x2c4>
   1f8cc:	e2806001 	add	r6, r0, #1
   1f8d0:	e35b0000 	cmp	fp, #0
   1f8d4:	1a000072 	bne	1faa4 <CString::FormatV(char const*, std::__va_list)+0x78c>
   1f8d8:	e3520000 	cmp	r2, #0
   1f8dc:	1a000098 	bne	1fb44 <CString::FormatV(char const*, std::__va_list)+0x82c>
   1f8e0:	e1560004 	cmp	r6, r4
   1f8e4:	2a00000e 	bcs	1f924 <CString::FormatV(char const*, std::__va_list)+0x60c>
   1f8e8:	e0444006 	sub	r4, r4, r6
   1f8ec:	e1a00008 	mov	r0, r8
   1f8f0:	e1a01004 	mov	r1, r4
   1f8f4:	ebfffcbc 	bl	1ebec <CString::ReserveSpace(unsigned int) [clone .part.0]>
   1f8f8:	e2443001 	sub	r3, r4, #1
   1f8fc:	e3a00020 	mov	r0, #32
   1f900:	e598200c 	ldr	r2, [r8, #12]
   1f904:	e2433001 	sub	r3, r3, #1
   1f908:	e3730001 	cmn	r3, #1
   1f90c:	e2821001 	add	r1, r2, #1
   1f910:	e588100c 	str	r1, [r8, #12]
   1f914:	e5c20000 	strb	r0, [r2]
   1f918:	1afffff8 	bne	1f900 <CString::FormatV(char const*, std::__va_list)+0x5e8>
   1f91c:	e3550000 	cmp	r5, #0
   1f920:	0affff2d 	beq	1f5dc <CString::FormatV(char const*, std::__va_list)+0x2c4>
   1f924:	e3a01001 	mov	r1, #1
   1f928:	e1a00008 	mov	r0, r8
   1f92c:	ebfffcae 	bl	1ebec <CString::ReserveSpace(unsigned int) [clone .part.0]>
   1f930:	e598300c 	ldr	r3, [r8, #12]
   1f934:	e3a0202d 	mov	r2, #45	; 0x2d
   1f938:	e2831001 	add	r1, r3, #1
   1f93c:	e588100c 	str	r1, [r8, #12]
   1f940:	e5c32000 	strb	r2, [r3]
   1f944:	eaffff24 	b	1f5dc <CString::FormatV(char const*, std::__va_list)+0x2c4>
   1f948:	e0444000 	sub	r4, r4, r0
   1f94c:	e1a00008 	mov	r0, r8
   1f950:	e1a01004 	mov	r1, r4
   1f954:	ebfffca4 	bl	1ebec <CString::ReserveSpace(unsigned int) [clone .part.0]>
   1f958:	e2443001 	sub	r3, r4, #1
   1f95c:	e3a00020 	mov	r0, #32
   1f960:	e598200c 	ldr	r2, [r8, #12]
   1f964:	e2433001 	sub	r3, r3, #1
   1f968:	e3730001 	cmn	r3, #1
   1f96c:	e2821001 	add	r1, r2, #1
   1f970:	e588100c 	str	r1, [r8, #12]
   1f974:	e5c20000 	strb	r0, [r2]
   1f978:	1afffff8 	bne	1f960 <CString::FormatV(char const*, std::__va_list)+0x648>
   1f97c:	eaffff41 	b	1f688 <CString::FormatV(char const*, std::__va_list)+0x370>
   1f980:	e2441001 	sub	r1, r4, #1
   1f984:	e1a00008 	mov	r0, r8
   1f988:	ebfffc97 	bl	1ebec <CString::ReserveSpace(unsigned int) [clone .part.0]>
   1f98c:	e2444002 	sub	r4, r4, #2
   1f990:	e3a01020 	mov	r1, #32
   1f994:	e598300c 	ldr	r3, [r8, #12]
   1f998:	e2444001 	sub	r4, r4, #1
   1f99c:	e3740001 	cmn	r4, #1
   1f9a0:	e2832001 	add	r2, r3, #1
   1f9a4:	e588200c 	str	r2, [r8, #12]
   1f9a8:	e5c31000 	strb	r1, [r3]
   1f9ac:	1afffff8 	bne	1f994 <CString::FormatV(char const*, std::__va_list)+0x67c>
   1f9b0:	eaffff7d 	b	1f7ac <CString::FormatV(char const*, std::__va_list)+0x494>
   1f9b4:	e1a0300c 	mov	r3, ip
   1f9b8:	e3a01001 	mov	r1, #1
   1f9bc:	e1a0000c 	mov	r0, ip
   1f9c0:	eafffee8 	b	1f568 <CString::FormatV(char const*, std::__va_list)+0x250>
   1f9c4:	e28d1010 	add	r1, sp, #16
   1f9c8:	e1a00008 	mov	r0, r8
   1f9cc:	ebfffd2b 	bl	1ee80 <CString::PutString(char const*)>
   1f9d0:	e1550004 	cmp	r5, r4
   1f9d4:	2afffe5f 	bcs	1f358 <CString::FormatV(char const*, std::__va_list)+0x40>
   1f9d8:	e0444005 	sub	r4, r4, r5
   1f9dc:	e1a00008 	mov	r0, r8
   1f9e0:	e1a01004 	mov	r1, r4
   1f9e4:	ebfffc80 	bl	1ebec <CString::ReserveSpace(unsigned int) [clone .part.0]>
   1f9e8:	e2443001 	sub	r3, r4, #1
   1f9ec:	e3a00020 	mov	r0, #32
   1f9f0:	e598200c 	ldr	r2, [r8, #12]
   1f9f4:	e2433001 	sub	r3, r3, #1
   1f9f8:	e3730001 	cmn	r3, #1
   1f9fc:	e2821001 	add	r1, r2, #1
   1fa00:	e588100c 	str	r1, [r8, #12]
   1fa04:	e5c20000 	strb	r0, [r2]
   1fa08:	1afffff8 	bne	1f9f0 <CString::FormatV(char const*, std::__va_list)+0x6d8>
   1fa0c:	eafffe51 	b	1f358 <CString::FormatV(char const*, std::__va_list)+0x40>
   1fa10:	e1a01006 	mov	r1, r6
   1fa14:	e1a00008 	mov	r0, r8
   1fa18:	ebfffd18 	bl	1ee80 <CString::PutString(char const*)>
   1fa1c:	e1550004 	cmp	r5, r4
   1fa20:	2afffe4c 	bcs	1f358 <CString::FormatV(char const*, std::__va_list)+0x40>
   1fa24:	e0444005 	sub	r4, r4, r5
   1fa28:	e1a00008 	mov	r0, r8
   1fa2c:	e1a01004 	mov	r1, r4
   1fa30:	ebfffc6d 	bl	1ebec <CString::ReserveSpace(unsigned int) [clone .part.0]>
   1fa34:	e2443001 	sub	r3, r4, #1
   1fa38:	e3a00020 	mov	r0, #32
   1fa3c:	e598200c 	ldr	r2, [r8, #12]
   1fa40:	e2433001 	sub	r3, r3, #1
   1fa44:	e3730001 	cmn	r3, #1
   1fa48:	e2821001 	add	r1, r2, #1
   1fa4c:	e588100c 	str	r1, [r8, #12]
   1fa50:	e5c20000 	strb	r0, [r2]
   1fa54:	1afffff8 	bne	1fa3c <CString::FormatV(char const*, std::__va_list)+0x724>
   1fa58:	eafffe3e 	b	1f358 <CString::FormatV(char const*, std::__va_list)+0x40>
   1fa5c:	e3a01001 	mov	r1, #1
   1fa60:	e1a00008 	mov	r0, r8
   1fa64:	ebfffc60 	bl	1ebec <CString::ReserveSpace(unsigned int) [clone .part.0]>
   1fa68:	e598300c 	ldr	r3, [r8, #12]
   1fa6c:	e3540001 	cmp	r4, #1
   1fa70:	e2832001 	add	r2, r3, #1
   1fa74:	e588200c 	str	r2, [r8, #12]
   1fa78:	e5c35000 	strb	r5, [r3]
   1fa7c:	8a000023 	bhi	1fb10 <CString::FormatV(char const*, std::__va_list)+0x7f8>
   1fa80:	e1a09006 	mov	r9, r6
   1fa84:	eafffe33 	b	1f358 <CString::FormatV(char const*, std::__va_list)+0x40>
   1fa88:	e1a03007 	mov	r3, r7
   1fa8c:	e3a01000 	mov	r1, #0
   1fa90:	e2877001 	add	r7, r7, #1
   1fa94:	eafffe5a 	b	1f404 <CString::FormatV(char const*, std::__va_list)+0xec>
   1fa98:	e1a0300e 	mov	r3, lr
   1fa9c:	e3a01001 	mov	r1, #1
   1faa0:	eaffff0b 	b	1f6d4 <CString::FormatV(char const*, std::__va_list)+0x3bc>
   1faa4:	e3a01001 	mov	r1, #1
   1faa8:	e1a00008 	mov	r0, r8
   1faac:	ebfffc4e 	bl	1ebec <CString::ReserveSpace(unsigned int) [clone .part.0]>
   1fab0:	e598300c 	ldr	r3, [r8, #12]
   1fab4:	e3a0202d 	mov	r2, #45	; 0x2d
   1fab8:	e2831001 	add	r1, r3, #1
   1fabc:	e588100c 	str	r1, [r8, #12]
   1fac0:	e5c32000 	strb	r2, [r3]
   1fac4:	eaffff1d 	b	1f740 <CString::FormatV(char const*, std::__va_list)+0x428>
   1fac8:	e3520000 	cmp	r2, #0
   1facc:	0a000025 	beq	1fb68 <CString::FormatV(char const*, std::__va_list)+0x850>
   1fad0:	e1540006 	cmp	r4, r6
   1fad4:	9afffec0 	bls	1f5dc <CString::FormatV(char const*, std::__va_list)+0x2c4>
   1fad8:	e0444006 	sub	r4, r4, r6
   1fadc:	e1a00008 	mov	r0, r8
   1fae0:	e1a01004 	mov	r1, r4
   1fae4:	ebfffc40 	bl	1ebec <CString::ReserveSpace(unsigned int) [clone .part.0]>
   1fae8:	e2443001 	sub	r3, r4, #1
   1faec:	e3a00030 	mov	r0, #48	; 0x30
   1faf0:	e598200c 	ldr	r2, [r8, #12]
   1faf4:	e2433001 	sub	r3, r3, #1
   1faf8:	e3730001 	cmn	r3, #1
   1fafc:	e2821001 	add	r1, r2, #1
   1fb00:	e588100c 	str	r1, [r8, #12]
   1fb04:	e5c20000 	strb	r0, [r2]
   1fb08:	1afffff8 	bne	1faf0 <CString::FormatV(char const*, std::__va_list)+0x7d8>
   1fb0c:	eafffeb2 	b	1f5dc <CString::FormatV(char const*, std::__va_list)+0x2c4>
   1fb10:	e2441001 	sub	r1, r4, #1
   1fb14:	e1a00008 	mov	r0, r8
   1fb18:	ebfffc33 	bl	1ebec <CString::ReserveSpace(unsigned int) [clone .part.0]>
   1fb1c:	e2444002 	sub	r4, r4, #2
   1fb20:	e3a01020 	mov	r1, #32
   1fb24:	e598300c 	ldr	r3, [r8, #12]
   1fb28:	e2444001 	sub	r4, r4, #1
   1fb2c:	e3740001 	cmn	r4, #1
   1fb30:	e2832001 	add	r2, r3, #1
   1fb34:	e588200c 	str	r2, [r8, #12]
   1fb38:	e5c31000 	strb	r1, [r3]
   1fb3c:	1afffff8 	bne	1fb24 <CString::FormatV(char const*, std::__va_list)+0x80c>
   1fb40:	eaffffce 	b	1fa80 <CString::FormatV(char const*, std::__va_list)+0x768>
   1fb44:	e3a01001 	mov	r1, #1
   1fb48:	e1a00008 	mov	r0, r8
   1fb4c:	ebfffc26 	bl	1ebec <CString::ReserveSpace(unsigned int) [clone .part.0]>
   1fb50:	e598300c 	ldr	r3, [r8, #12]
   1fb54:	e3a0202d 	mov	r2, #45	; 0x2d
   1fb58:	e2831001 	add	r1, r3, #1
   1fb5c:	e588100c 	str	r1, [r8, #12]
   1fb60:	e5c32000 	strb	r2, [r3]
   1fb64:	eaffffd9 	b	1fad0 <CString::FormatV(char const*, std::__va_list)+0x7b8>
   1fb68:	e1500004 	cmp	r0, r4
   1fb6c:	2afffe9a 	bcs	1f5dc <CString::FormatV(char const*, std::__va_list)+0x2c4>
   1fb70:	eaffff5c 	b	1f8e8 <CString::FormatV(char const*, std::__va_list)+0x5d0>

0001fb74 <CString::Format(char const*, ...)>:
   1fb74:	e92d000e 	push	{r1, r2, r3}
   1fb78:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   1fb7c:	e24dd008 	sub	sp, sp, #8
   1fb80:	e28d3010 	add	r3, sp, #16
   1fb84:	e1a02003 	mov	r2, r3
   1fb88:	e59d100c 	ldr	r1, [sp, #12]
   1fb8c:	e58d3004 	str	r3, [sp, #4]
   1fb90:	ebfffde0 	bl	1f318 <CString::FormatV(char const*, std::__va_list)>
   1fb94:	e28dd008 	add	sp, sp, #8
   1fb98:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
   1fb9c:	e28dd00c 	add	sp, sp, #12
   1fba0:	e12fff1e 	bx	lr

0001fba4 <__aeabi_atexit>:
   1fba4:	e12fff1e 	bx	lr

0001fba8 <__errno>:
   1fba8:	e59f0000 	ldr	r0, [pc]	; 1fbb0 <__errno+0x8>
   1fbac:	e12fff1e 	bx	lr
   1fbb0:	0002b4d4 	.word	0x0002b4d4

0001fbb4 <halt>:
   1fbb4:	ee103fb0 	mrc	15, 0, r3, cr0, cr0, {5}
   1fbb8:	e2131003 	ands	r1, r3, #3
   1fbbc:	e30b34d0 	movw	r3, #46288	; 0xb4d0
   1fbc0:	e3403002 	movt	r3, #2
   1fbc4:	1a000010 	bne	1fc0c <halt+0x58>
   1fbc8:	e3a02001 	mov	r2, #1
   1fbcc:	f57ff05f 	dmb	sy
   1fbd0:	e0830002 	add	r0, r3, r2
   1fbd4:	e5d00008 	ldrb	r0, [r0, #8]
   1fbd8:	e3500000 	cmp	r0, #0
   1fbdc:	1a000007 	bne	1fc00 <halt+0x4c>
   1fbe0:	f57ff04f 	dsb	sy
   1fbe4:	e320f003 	wfi
   1fbe8:	f57ff05f 	dmb	sy
   1fbec:	e5d32009 	ldrb	r2, [r3, #9]
   1fbf0:	e3520000 	cmp	r2, #0
   1fbf4:	0afffff9 	beq	1fbe0 <halt+0x2c>
   1fbf8:	e3a02002 	mov	r2, #2
   1fbfc:	eafffff2 	b	1fbcc <halt+0x18>
   1fc00:	e2822001 	add	r2, r2, #1
   1fc04:	e3520004 	cmp	r2, #4
   1fc08:	1affffef 	bne	1fbcc <halt+0x18>
   1fc0c:	e0833001 	add	r3, r3, r1
   1fc10:	e3a02001 	mov	r2, #1
   1fc14:	e5c32008 	strb	r2, [r3, #8]
   1fc18:	f57ff05f 	dmb	sy
   1fc1c:	f10c0080 	cpsid	i
   1fc20:	f10c0040 	cpsid	f
   1fc24:	f57ff04f 	dsb	sy
   1fc28:	e320f003 	wfi
   1fc2c:	eafffffc 	b	1fc24 <halt+0x70>

0001fc30 <reboot>:
   1fc30:	e3a03000 	mov	r3, #0
   1fc34:	e3433f10 	movt	r3, #16144	; 0x3f10
   1fc38:	e3a01001 	mov	r1, #1
   1fc3c:	e3451a00 	movt	r1, #23040	; 0x5a00
   1fc40:	e3a02020 	mov	r2, #32
   1fc44:	e3452a00 	movt	r2, #23040	; 0x5a00
   1fc48:	e5831024 	str	r1, [r3, #36]	; 0x24
   1fc4c:	e583201c 	str	r2, [r3, #28]
   1fc50:	eafffffe 	b	1fc50 <reboot+0x20>

0001fc54 <sysinit>:
   1fc54:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   1fc58:	e24dd024 	sub	sp, sp, #36	; 0x24
   1fc5c:	f1080040 	cpsie	f
   1fc60:	eb000611 	bl	214ac <InvalidateDataCacheL1Only>
   1fc64:	ee113f50 	mrc	15, 0, r3, cr1, cr0, {2}
   1fc68:	e383360f 	orr	r3, r3, #15728640	; 0xf00000
   1fc6c:	ee013f50 	mcr	15, 0, r3, cr1, cr0, {2}
   1fc70:	f57ff06f 	isb	sy
   1fc74:	e3a03101 	mov	r3, #1073741824	; 0x40000000
   1fc78:	eee83a10 	vmsr	fpexc, r3
   1fc7c:	e3a03402 	mov	r3, #33554432	; 0x2000000
   1fc80:	eee13a10 	vmsr	fpscr, r3
   1fc84:	e30b348c 	movw	r3, #46220	; 0xb48c
   1fc88:	e3403002 	movt	r3, #2
   1fc8c:	e30b2678 	movw	r2, #46712	; 0xb678
   1fc90:	e3402002 	movt	r2, #2
   1fc94:	e1530002 	cmp	r3, r2
   1fc98:	2a000003 	bcs	1fcac <sysinit+0x58>
   1fc9c:	e3a01000 	mov	r1, #0
   1fca0:	e4c31001 	strb	r1, [r3], #1
   1fca4:	e1530002 	cmp	r3, r2
   1fca8:	1afffffc 	bne	1fca0 <sysinit+0x4c>
   1fcac:	e28d0004 	add	r0, sp, #4
   1fcb0:	e30b4018 	movw	r4, #45080	; 0xb018
   1fcb4:	e3404002 	movt	r4, #2
   1fcb8:	ebfff10e 	bl	1c0f8 <CMachineInfo::CMachineInfo()>
   1fcbc:	e30b3018 	movw	r3, #45080	; 0xb018
   1fcc0:	e3403002 	movt	r3, #2
   1fcc4:	e1540003 	cmp	r4, r3
   1fcc8:	2a000008 	bcs	1fcf0 <sysinit+0x9c>
   1fccc:	e2835003 	add	r5, r3, #3
   1fcd0:	e2843004 	add	r3, r4, #4
   1fcd4:	e0455003 	sub	r5, r5, r3
   1fcd8:	e3c55003 	bic	r5, r5, #3
   1fcdc:	e0855003 	add	r5, r5, r3
   1fce0:	e4943004 	ldr	r3, [r4], #4
   1fce4:	e12fff33 	blx	r3
   1fce8:	e1540005 	cmp	r4, r5
   1fcec:	1afffffb 	bne	1fce0 <sysinit+0x8c>
   1fcf0:	ebffa1ad 	bl	83ac <main>
   1fcf4:	e3500001 	cmp	r0, #1
   1fcf8:	0a000000 	beq	1fd00 <sysinit+0xac>
   1fcfc:	ebffffac 	bl	1fbb4 <halt>
   1fd00:	eb0005de 	bl	21480 <IsChainBootEnabled>
   1fd04:	e3500000 	cmp	r0, #0
   1fd08:	1a000000 	bne	1fd10 <sysinit+0xbc>
   1fd0c:	ebffffc7 	bl	1fc30 <reboot>
   1fd10:	f10c0040 	cpsid	f
   1fd14:	eb0005df 	bl	21498 <DoChainBoot>
   1fd18:	eafffffb 	b	1fd0c <sysinit+0xb8>

0001fd1c <sysinit_secondary>:
   1fd1c:	e92d4010 	push	{r4, lr}
   1fd20:	f1080040 	cpsie	f
   1fd24:	eb0005e0 	bl	214ac <InvalidateDataCacheL1Only>
   1fd28:	ee113f50 	mrc	15, 0, r3, cr1, cr0, {2}
   1fd2c:	e383360f 	orr	r3, r3, #15728640	; 0xf00000
   1fd30:	ee013f50 	mcr	15, 0, r3, cr1, cr0, {2}
   1fd34:	f57ff06f 	isb	sy
   1fd38:	e3a03101 	mov	r3, #1073741824	; 0x40000000
   1fd3c:	eee83a10 	vmsr	fpexc, r3
   1fd40:	e3a03402 	mov	r3, #33554432	; 0x2000000
   1fd44:	eee13a10 	vmsr	fpscr, r3
   1fd48:	ebfff408 	bl	1cd70 <main_secondary>
   1fd4c:	ebffff98 	bl	1fbb4 <halt>

0001fd50 <CTimer::SimpleusDelay(unsigned int) [clone .part.0]>:
   1fd50:	e2800001 	add	r0, r0, #1
   1fd54:	f57ff06f 	isb	sy
   1fd58:	ec532f0e 	mrrc	15, 0, r2, r3, cr14
   1fd5c:	f57ff06f 	isb	sy
   1fd60:	ec513f0e 	mrrc	15, 0, r3, r1, cr14
   1fd64:	e0433002 	sub	r3, r3, r2
   1fd68:	e1500003 	cmp	r0, r3
   1fd6c:	8afffffa 	bhi	1fd5c <CTimer::SimpleusDelay(unsigned int) [clone .part.0]+0xc>
   1fd70:	e12fff1e 	bx	lr

0001fd74 <CTimer::CTimer(CInterruptSystem*)>:
   1fd74:	e92d4070 	push	{r4, r5, r6, lr}
   1fd78:	e1a04000 	mov	r4, r0
   1fd7c:	e3a05000 	mov	r5, #0
   1fd80:	e2800010 	add	r0, r0, #16
   1fd84:	e30b64dc 	movw	r6, #46300	; 0xb4dc
   1fd88:	e3406002 	movt	r6, #2
   1fd8c:	e5845004 	str	r5, [r4, #4]
   1fd90:	e5841000 	str	r1, [r4]
   1fd94:	e3a01001 	mov	r1, #1
   1fd98:	e5845008 	str	r5, [r4, #8]
   1fd9c:	e584500c 	str	r5, [r4, #12]
   1fda0:	ebfffb27 	bl	1ea44 <CSpinLock::CSpinLock(unsigned int)>
   1fda4:	e5845018 	str	r5, [r4, #24]
   1fda8:	e284001c 	add	r0, r4, #28
   1fdac:	eb000fba 	bl	23c9c <CPtrList::CPtrList()>
   1fdb0:	e2840020 	add	r0, r4, #32
   1fdb4:	e3a01001 	mov	r1, #1
   1fdb8:	ebfffb21 	bl	1ea44 <CSpinLock::CSpinLock(unsigned int)>
   1fdbc:	e5962000 	ldr	r2, [r6]
   1fdc0:	e3053730 	movw	r3, #22320	; 0x5730
   1fdc4:	e3403005 	movt	r3, #5
   1fdc8:	e5845030 	str	r5, [r4, #48]	; 0x30
   1fdcc:	e1520005 	cmp	r2, r5
   1fdd0:	e5843028 	str	r3, [r4, #40]	; 0x28
   1fdd4:	e300315e 	movw	r3, #350	; 0x15e
   1fdd8:	e584302c 	str	r3, [r4, #44]	; 0x2c
   1fddc:	0a000005 	beq	1fdf8 <CTimer::CTimer(CInterruptSystem*)+0x84>
   1fde0:	e30917fc 	movw	r1, #38908	; 0x97fc
   1fde4:	e3401002 	movt	r1, #2
   1fde8:	e30809ec 	movw	r0, #35308	; 0x89ec
   1fdec:	e3400002 	movt	r0, #2
   1fdf0:	e3a0203d 	mov	r2, #61	; 0x3d
   1fdf4:	ebffe596 	bl	19454 <assertion_failed>
   1fdf8:	e5864000 	str	r4, [r6]
   1fdfc:	e1a00004 	mov	r0, r4
   1fe00:	e8bd8070 	pop	{r4, r5, r6, pc}

0001fe04 <CTimer::~CTimer()>:
   1fe04:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1fe08:	e1a09000 	mov	r9, r0
   1fe0c:	e5900000 	ldr	r0, [r0]
   1fe10:	e3500000 	cmp	r0, #0
   1fe14:	0a000032 	beq	1fee4 <CTimer::~CTimer()+0xe0>
   1fe18:	e3a03000 	mov	r3, #0
   1fe1c:	ee0e3f32 	mcr	15, 0, r3, cr14, cr2, {1}
   1fe20:	e3a01049 	mov	r1, #73	; 0x49
   1fe24:	e30977fc 	movw	r7, #38908	; 0x97fc
   1fe28:	e3407002 	movt	r7, #2
   1fe2c:	e289401c 	add	r4, r9, #28
   1fe30:	e306a690 	movw	sl, #26256	; 0x6690
   1fe34:	e340a002 	movt	sl, #2
   1fe38:	e3048d43 	movw	r8, #19779	; 0x4d43
   1fe3c:	e3448b54 	movt	r8, #19284	; 0x4b54
   1fe40:	ebffecc9 	bl	1b16c <CInterruptSystem::DisconnectIRQ(unsigned int)>
   1fe44:	ea000010 	b	1fe8c <CTimer::~CTimer()+0x88>
   1fe48:	eb000fbc 	bl	23d40 <CPtrList::GetPtr(TPtrListElement*)>
   1fe4c:	e2506000 	subs	r6, r0, #0
   1fe50:	0a00001e 	beq	1fed0 <CTimer::~CTimer()+0xcc>
   1fe54:	e5963000 	ldr	r3, [r6]
   1fe58:	e3090808 	movw	r0, #38920	; 0x9808
   1fe5c:	e3400002 	movt	r0, #2
   1fe60:	e3a02055 	mov	r2, #85	; 0x55
   1fe64:	e1a01007 	mov	r1, r7
   1fe68:	e1530008 	cmp	r3, r8
   1fe6c:	0a000000 	beq	1fe74 <CTimer::~CTimer()+0x70>
   1fe70:	ebffe577 	bl	19454 <assertion_failed>
   1fe74:	e1a01005 	mov	r1, r5
   1fe78:	e1a00004 	mov	r0, r4
   1fe7c:	eb001050 	bl	23fc4 <CPtrList::Remove(TPtrListElement*)>
   1fe80:	e1a00006 	mov	r0, r6
   1fe84:	e3a01014 	mov	r1, #20
   1fe88:	eb000880 	bl	22090 <operator delete(void*, unsigned int)>
   1fe8c:	e1a00004 	mov	r0, r4
   1fe90:	eb000f91 	bl	23cdc <CPtrList::GetFirst()>
   1fe94:	e2505000 	subs	r5, r0, #0
   1fe98:	e1a01005 	mov	r1, r5
   1fe9c:	e1a00004 	mov	r0, r4
   1fea0:	1affffe8 	bne	1fe48 <CTimer::~CTimer()+0x44>
   1fea4:	e30b34dc 	movw	r3, #46300	; 0xb4dc
   1fea8:	e3403002 	movt	r3, #2
   1feac:	e2890020 	add	r0, r9, #32
   1feb0:	e5835000 	str	r5, [r3]
   1feb4:	ebfffaf0 	bl	1ea7c <CSpinLock::~CSpinLock()>
   1feb8:	e1a00004 	mov	r0, r4
   1febc:	eb000f79 	bl	23ca8 <CPtrList::~CPtrList()>
   1fec0:	e2890010 	add	r0, r9, #16
   1fec4:	ebfffaec 	bl	1ea7c <CSpinLock::~CSpinLock()>
   1fec8:	e1a00009 	mov	r0, r9
   1fecc:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1fed0:	e3a02054 	mov	r2, #84	; 0x54
   1fed4:	e1a01007 	mov	r1, r7
   1fed8:	e1a0000a 	mov	r0, sl
   1fedc:	ebffe55c 	bl	19454 <assertion_failed>
   1fee0:	eaffffdb 	b	1fe54 <CTimer::~CTimer()+0x50>
   1fee4:	e30917fc 	movw	r1, #38908	; 0x97fc
   1fee8:	e3401002 	movt	r1, #2
   1feec:	e3040258 	movw	r0, #16984	; 0x4258
   1fef0:	e3400002 	movt	r0, #2
   1fef4:	e3a02043 	mov	r2, #67	; 0x43
   1fef8:	ebffe555 	bl	19454 <assertion_failed>
   1fefc:	e5990000 	ldr	r0, [r9]
   1ff00:	eaffffc4 	b	1fe18 <CTimer::~CTimer()+0x14>

0001ff04 <CTimer::SetTimeZone(int)>:
   1ff04:	e2813e59 	add	r3, r1, #1424	; 0x590
   1ff08:	e3002b3e 	movw	r2, #2878	; 0xb3e
   1ff0c:	e283300f 	add	r3, r3, #15
   1ff10:	e1530002 	cmp	r3, r2
   1ff14:	95801018 	strls	r1, [r0, #24]
   1ff18:	93a00001 	movls	r0, #1
   1ff1c:	83a00000 	movhi	r0, #0
   1ff20:	e12fff1e 	bx	lr

0001ff24 <CTimer::GetTimeZone() const>:
   1ff24:	e5900018 	ldr	r0, [r0, #24]
   1ff28:	e12fff1e 	bx	lr

0001ff2c <CTimer::SetTime(unsigned int, bool)>:
   1ff2c:	e92d4070 	push	{r4, r5, r6, lr}
   1ff30:	e3520000 	cmp	r2, #0
   1ff34:	e1a04000 	mov	r4, r0
   1ff38:	e1a05001 	mov	r5, r1
   1ff3c:	1a000005 	bne	1ff58 <CTimer::SetTime(unsigned int, bool)+0x2c>
   1ff40:	e5901018 	ldr	r1, [r0, #24]
   1ff44:	e3a0303c 	mov	r3, #60	; 0x3c
   1ff48:	e0030193 	mul	r3, r3, r1
   1ff4c:	e3530000 	cmp	r3, #0
   1ff50:	ba000008 	blt	1ff78 <CTimer::SetTime(unsigned int, bool)+0x4c>
   1ff54:	e0855003 	add	r5, r5, r3
   1ff58:	e2846010 	add	r6, r4, #16
   1ff5c:	e1a00006 	mov	r0, r6
   1ff60:	ebfffad2 	bl	1eab0 <CSpinLock::Acquire()>
   1ff64:	e1a00006 	mov	r0, r6
   1ff68:	e584500c 	str	r5, [r4, #12]
   1ff6c:	ebfffae6 	bl	1eb0c <CSpinLock::Release()>
   1ff70:	e3a00001 	mov	r0, #1
   1ff74:	e8bd8070 	pop	{r4, r5, r6, pc}
   1ff78:	e2631000 	rsb	r1, r3, #0
   1ff7c:	e1510005 	cmp	r1, r5
   1ff80:	dafffff3 	ble	1ff54 <CTimer::SetTime(unsigned int, bool)+0x28>
   1ff84:	e1a00002 	mov	r0, r2
   1ff88:	e8bd8070 	pop	{r4, r5, r6, pc}

0001ff8c <CTimer::GetClockTicks()>:
   1ff8c:	f57ff06f 	isb	sy
   1ff90:	ec530f0e 	mrrc	15, 0, r0, r3, cr14
   1ff94:	e12fff1e 	bx	lr

0001ff98 <CTimer::GetTicks() const>:
   1ff98:	e5900004 	ldr	r0, [r0, #4]
   1ff9c:	e12fff1e 	bx	lr

0001ffa0 <CTimer::GetUptime() const>:
   1ffa0:	e5900008 	ldr	r0, [r0, #8]
   1ffa4:	e12fff1e 	bx	lr

0001ffa8 <CTimer::GetTime() const>:
   1ffa8:	e590000c 	ldr	r0, [r0, #12]
   1ffac:	e12fff1e 	bx	lr

0001ffb0 <CTimer::GetLocalTime(unsigned int*, unsigned int*)>:
   1ffb0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   1ffb4:	e1a04000 	mov	r4, r0
   1ffb8:	e2807010 	add	r7, r0, #16
   1ffbc:	e1a00007 	mov	r0, r7
   1ffc0:	e1a06001 	mov	r6, r1
   1ffc4:	e1a05002 	mov	r5, r2
   1ffc8:	ebfffab8 	bl	1eab0 <CSpinLock::Acquire()>
   1ffcc:	e1a00007 	mov	r0, r7
   1ffd0:	e594700c 	ldr	r7, [r4, #12]
   1ffd4:	e5944004 	ldr	r4, [r4, #4]
   1ffd8:	ebfffacb 	bl	1eb0c <CSpinLock::Release()>
   1ffdc:	e3560000 	cmp	r6, #0
   1ffe0:	0a000014 	beq	20038 <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0x88>
   1ffe4:	e5867000 	str	r7, [r6]
   1ffe8:	e3550000 	cmp	r5, #0
   1ffec:	0a00000a 	beq	2001c <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0x6c>
   1fff0:	e308251f 	movw	r2, #34079	; 0x851f
   1fff4:	e34521eb 	movt	r2, #20971	; 0x51eb
   1fff8:	e3a0c064 	mov	ip, #100	; 0x64
   1fffc:	e3021710 	movw	r1, #10000	; 0x2710
   20000:	e3a00001 	mov	r0, #1
   20004:	e0832294 	umull	r2, r3, r4, r2
   20008:	e1a032a3 	lsr	r3, r3, #5
   2000c:	e063439c 	mls	r3, ip, r3, r4
   20010:	e0030391 	mul	r3, r1, r3
   20014:	e5853000 	str	r3, [r5]
   20018:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   2001c:	e30917fc 	movw	r1, #38908	; 0x97fc
   20020:	e3401002 	movt	r1, #2
   20024:	e3090840 	movw	r0, #38976	; 0x9840
   20028:	e3400002 	movt	r0, #2
   2002c:	e3a020fe 	mov	r2, #254	; 0xfe
   20030:	ebffe507 	bl	19454 <assertion_failed>
   20034:	eaffffed 	b	1fff0 <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0x40>
   20038:	e30917fc 	movw	r1, #38908	; 0x97fc
   2003c:	e3401002 	movt	r1, #2
   20040:	e3090830 	movw	r0, #38960	; 0x9830
   20044:	e3400002 	movt	r0, #2
   20048:	e3a020fb 	mov	r2, #251	; 0xfb
   2004c:	ebffe500 	bl	19454 <assertion_failed>
   20050:	eaffffe3 	b	1ffe4 <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0x34>

00020054 <CTimer::GetUniversalTime() const>:
   20054:	e5902018 	ldr	r2, [r0, #24]
   20058:	e3a0303c 	mov	r3, #60	; 0x3c
   2005c:	e590000c 	ldr	r0, [r0, #12]
   20060:	e0030293 	mul	r3, r3, r2
   20064:	e1500003 	cmp	r0, r3
   20068:	a0400003 	subge	r0, r0, r3
   2006c:	b3a00000 	movlt	r0, #0
   20070:	e12fff1e 	bx	lr

00020074 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)>:
   20074:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   20078:	e1a04000 	mov	r4, r0
   2007c:	e2805010 	add	r5, r0, #16
   20080:	e1a00005 	mov	r0, r5
   20084:	e1a07001 	mov	r7, r1
   20088:	e1a06002 	mov	r6, r2
   2008c:	ebfffa87 	bl	1eab0 <CSpinLock::Acquire()>
   20090:	e1a00005 	mov	r0, r5
   20094:	e594500c 	ldr	r5, [r4, #12]
   20098:	e5948004 	ldr	r8, [r4, #4]
   2009c:	ebfffa9a 	bl	1eb0c <CSpinLock::Release()>
   200a0:	e5943018 	ldr	r3, [r4, #24]
   200a4:	e3a0403c 	mov	r4, #60	; 0x3c
   200a8:	e0040394 	mul	r4, r4, r3
   200ac:	e1550004 	cmp	r5, r4
   200b0:	ba000010 	blt	200f8 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0x84>
   200b4:	e3570000 	cmp	r7, #0
   200b8:	0a000017 	beq	2011c <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0xa8>
   200bc:	e0454004 	sub	r4, r5, r4
   200c0:	e3560000 	cmp	r6, #0
   200c4:	e5874000 	str	r4, [r7]
   200c8:	0a00000c 	beq	20100 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0x8c>
   200cc:	e308251f 	movw	r2, #34079	; 0x851f
   200d0:	e34521eb 	movt	r2, #20971	; 0x51eb
   200d4:	e3a0c064 	mov	ip, #100	; 0x64
   200d8:	e3021710 	movw	r1, #10000	; 0x2710
   200dc:	e3a00001 	mov	r0, #1
   200e0:	e0832298 	umull	r2, r3, r8, r2
   200e4:	e1a032a3 	lsr	r3, r3, #5
   200e8:	e068839c 	mls	r8, ip, r3, r8
   200ec:	e0080891 	mul	r8, r1, r8
   200f0:	e5868000 	str	r8, [r6]
   200f4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   200f8:	e3a00000 	mov	r0, #0
   200fc:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   20100:	e30917fc 	movw	r1, #38908	; 0x97fc
   20104:	e3401002 	movt	r1, #2
   20108:	e3090840 	movw	r0, #38976	; 0x9840
   2010c:	e3400002 	movt	r0, #2
   20110:	e3002123 	movw	r2, #291	; 0x123
   20114:	ebffe4ce 	bl	19454 <assertion_failed>
   20118:	eaffffeb 	b	200cc <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0x58>
   2011c:	e30917fc 	movw	r1, #38908	; 0x97fc
   20120:	e3401002 	movt	r1, #2
   20124:	e3090830 	movw	r0, #38960	; 0x9830
   20128:	e3400002 	movt	r0, #2
   2012c:	e3a02e12 	mov	r2, #288	; 0x120
   20130:	ebffe4c7 	bl	19454 <assertion_failed>
   20134:	eaffffe0 	b	200bc <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0x48>

00020138 <CTimer::GetTimeString()>:
   20138:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2013c:	e1a04000 	mov	r4, r0
   20140:	e2805010 	add	r5, r0, #16
   20144:	e24dd024 	sub	sp, sp, #36	; 0x24
   20148:	e1a00005 	mov	r0, r5
   2014c:	ebfffa57 	bl	1eab0 <CSpinLock::Acquire()>
   20150:	e594700c 	ldr	r7, [r4, #12]
   20154:	e5949004 	ldr	r9, [r4, #4]
   20158:	e1a00005 	mov	r0, r5
   2015c:	ebfffa6a 	bl	1eb0c <CSpinLock::Release()>
   20160:	e1973009 	orrs	r3, r7, r9
   20164:	0a000072 	beq	20334 <CTimer::GetTimeString()+0x1fc>
   20168:	e3080889 	movw	r0, #34953	; 0x8889
   2016c:	e3480888 	movt	r0, #34952	; 0x8888
   20170:	e3a0b03c 	mov	fp, #60	; 0x3c
   20174:	e30b63c5 	movw	r6, #46021	; 0xb3c5
   20178:	e34961a2 	movt	r6, #37282	; 0x91a2
   2017c:	e0821790 	umull	r1, r2, r0, r7
   20180:	e3043507 	movw	r3, #17671	; 0x4507
   20184:	e34c322e 	movt	r3, #49710	; 0xc22e
   20188:	e0854097 	umull	r4, r5, r7, r0
   2018c:	e308151f 	movw	r1, #34079	; 0x851f
   20190:	e34511eb 	movt	r1, #20971	; 0x51eb
   20194:	e1a022a2 	lsr	r2, r2, #5
   20198:	e086c796 	umull	ip, r6, r6, r7
   2019c:	e1a082a5 	lsr	r8, r5, #5
   201a0:	e083c793 	umull	ip, r3, r3, r7
   201a4:	e3a0a064 	mov	sl, #100	; 0x64
   201a8:	e3a0ee19 	mov	lr, #400	; 0x190
   201ac:	e0c54092 	smull	r4, r5, r2, r0
   201b0:	e1a065a6 	lsr	r6, r6, #11
   201b4:	e068789b 	mls	r8, fp, r8, r7
   201b8:	e1a03823 	lsr	r3, r3, #16
   201bc:	e0827005 	add	r7, r2, r5
   201c0:	e58d3014 	str	r3, [sp, #20]
   201c4:	e1a072c7 	asr	r7, r7, #5
   201c8:	e30057b2 	movw	r5, #1970	; 0x7b2
   201cc:	e300c16d 	movw	ip, #365	; 0x16d
   201d0:	e300016e 	movw	r0, #366	; 0x16e
   201d4:	e067279b 	mls	r7, fp, r7, r2
   201d8:	ea000003 	b	201ec <CTimer::GetTimeString()+0xb4>
   201dc:	e59d3014 	ldr	r3, [sp, #20]
   201e0:	e2855001 	add	r5, r5, #1
   201e4:	e0433002 	sub	r3, r3, r2
   201e8:	e58d3014 	str	r3, [sp, #20]
   201ec:	e0832195 	umull	r2, r3, r5, r1
   201f0:	e1cd21f8 	strd	r2, [sp, #24]
   201f4:	e1a023a3 	lsr	r2, r3, #7
   201f8:	e59d301c 	ldr	r3, [sp, #28]
   201fc:	e1a0b2a3 	lsr	fp, r3, #5
   20200:	e063529e 	mls	r3, lr, r2, r5
   20204:	e16f3f13 	clz	r3, r3
   20208:	e0625b9a 	mls	r2, sl, fp, r5
   2020c:	e3520000 	cmp	r2, #0
   20210:	01a032a3 	lsreq	r3, r3, #5
   20214:	0a000002 	beq	20224 <CTimer::GetTimeString()+0xec>
   20218:	e3150003 	tst	r5, #3
   2021c:	03a03001 	moveq	r3, #1
   20220:	13a03000 	movne	r3, #0
   20224:	e3530000 	cmp	r3, #0
   20228:	e59d4014 	ldr	r4, [sp, #20]
   2022c:	01a0200c 	moveq	r2, ip
   20230:	11a02000 	movne	r2, r0
   20234:	e1540002 	cmp	r4, r2
   20238:	2affffe7 	bcs	201dc <CTimer::GetTimeString()+0xa4>
   2023c:	e30917c4 	movw	r1, #38852	; 0x97c4
   20240:	e3401002 	movt	r1, #2
   20244:	e3a0a000 	mov	sl, #0
   20248:	ea000002 	b	20258 <CTimer::GetTimeString()+0x120>
   2024c:	e28aa001 	add	sl, sl, #1
   20250:	e0402002 	sub	r2, r0, r2
   20254:	e58d2014 	str	r2, [sp, #20]
   20258:	e35a0001 	cmp	sl, #1
   2025c:	13a02000 	movne	r2, #0
   20260:	02032001 	andeq	r2, r3, #1
   20264:	e59d0014 	ldr	r0, [sp, #20]
   20268:	e3520000 	cmp	r2, #0
   2026c:	13a0201d 	movne	r2, #29
   20270:	0791210a 	ldreq	r2, [r1, sl, lsl #2]
   20274:	e1500002 	cmp	r0, r2
   20278:	2afffff3 	bcs	2024c <CTimer::GetTimeString()+0x114>
   2027c:	e308251f 	movw	r2, #34079	; 0x851f
   20280:	e34521eb 	movt	r2, #20971	; 0x51eb
   20284:	e3a01064 	mov	r1, #100	; 0x64
   20288:	e3a00010 	mov	r0, #16
   2028c:	e0832299 	umull	r2, r3, r9, r2
   20290:	e1a0b2a3 	lsr	fp, r3, #5
   20294:	e06b9b91 	mls	fp, r1, fp, r9
   20298:	eb000778 	bl	22080 <operator new(unsigned int)>
   2029c:	e1a09000 	mov	r9, r0
   202a0:	ebfffa6a 	bl	1ec50 <CString::CString()>
   202a4:	e30037b7 	movw	r3, #1975	; 0x7b7
   202a8:	e1550003 	cmp	r5, r3
   202ac:	8a00000a 	bhi	202dc <CTimer::GetTimeString()+0x1a4>
   202b0:	e3091870 	movw	r1, #39024	; 0x9870
   202b4:	e3401002 	movt	r1, #2
   202b8:	e58db004 	str	fp, [sp, #4]
   202bc:	e1a03007 	mov	r3, r7
   202c0:	e58d8000 	str	r8, [sp]
   202c4:	e1a02006 	mov	r2, r6
   202c8:	e1a00009 	mov	r0, r9
   202cc:	ebfffe28 	bl	1fb74 <CString::Format(char const*, ...)>
   202d0:	e1a00009 	mov	r0, r9
   202d4:	e28dd024 	add	sp, sp, #36	; 0x24
   202d8:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   202dc:	e30a2aab 	movw	r2, #43691	; 0xaaab
   202e0:	e34a2aaa 	movt	r2, #43690	; 0xaaaa
   202e4:	e30b338c 	movw	r3, #45964	; 0xb38c
   202e8:	e3403002 	movt	r3, #2
   202ec:	e3a0c018 	mov	ip, #24
   202f0:	e58db00c 	str	fp, [sp, #12]
   202f4:	e0854296 	umull	r4, r5, r6, r2
   202f8:	e58d8008 	str	r8, [sp, #8]
   202fc:	e1a00009 	mov	r0, r9
   20300:	e3091854 	movw	r1, #38996	; 0x9854
   20304:	e3401002 	movt	r1, #2
   20308:	e1a0e225 	lsr	lr, r5, #4
   2030c:	e793210a 	ldr	r2, [r3, sl, lsl #2]
   20310:	e59d3014 	ldr	r3, [sp, #20]
   20314:	e58d7004 	str	r7, [sp, #4]
   20318:	e0666e9c 	mls	r6, ip, lr, r6
   2031c:	e2833001 	add	r3, r3, #1
   20320:	e58d6000 	str	r6, [sp]
   20324:	ebfffe12 	bl	1fb74 <CString::Format(char const*, ...)>
   20328:	e1a00009 	mov	r0, r9
   2032c:	e28dd024 	add	sp, sp, #36	; 0x24
   20330:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20334:	e1a09003 	mov	r9, r3
   20338:	eaffffe4 	b	202d0 <CTimer::GetTimeString()+0x198>

0002033c <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)>:
   2033c:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20340:	e1a05000 	mov	r5, r0
   20344:	e3a00014 	mov	r0, #20
   20348:	e24dd00c 	sub	sp, sp, #12
   2034c:	e1a07001 	mov	r7, r1
   20350:	e1a04002 	mov	r4, r2
   20354:	e1a06003 	mov	r6, r3
   20358:	e59d8030 	ldr	r8, [sp, #48]	; 0x30
   2035c:	eb000747 	bl	22080 <operator new(unsigned int)>
   20360:	e5951004 	ldr	r1, [r5, #4]
   20364:	e1a09000 	mov	r9, r0
   20368:	e3540000 	cmp	r4, #0
   2036c:	e0817007 	add	r7, r1, r7
   20370:	0a00003a 	beq	20460 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x124>
   20374:	e2850020 	add	r0, r5, #32
   20378:	e285501c 	add	r5, r5, #28
   2037c:	e58d0004 	str	r0, [sp, #4]
   20380:	e9890090 	stmib	r9, {r4, r7}
   20384:	e589600c 	str	r6, [r9, #12]
   20388:	e3046d43 	movw	r6, #19779	; 0x4d43
   2038c:	e3446b54 	movt	r6, #19284	; 0x4b54
   20390:	e5896000 	str	r6, [r9]
   20394:	e5898010 	str	r8, [r9, #16]
   20398:	ebfff9c4 	bl	1eab0 <CSpinLock::Acquire()>
   2039c:	e1a00005 	mov	r0, r5
   203a0:	eb000e4d 	bl	23cdc <CPtrList::GetFirst()>
   203a4:	e2504000 	subs	r4, r0, #0
   203a8:	0a000027 	beq	2044c <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x110>
   203ac:	e30987fc 	movw	r8, #38908	; 0x97fc
   203b0:	e3408002 	movt	r8, #2
   203b4:	e309a884 	movw	sl, #39044	; 0x9884
   203b8:	e340a002 	movt	sl, #2
   203bc:	ea000011 	b	20408 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0xcc>
   203c0:	e59bc000 	ldr	ip, [fp]
   203c4:	e3090894 	movw	r0, #39060	; 0x9894
   203c8:	e3400002 	movt	r0, #2
   203cc:	e300218b 	movw	r2, #395	; 0x18b
   203d0:	e1a01008 	mov	r1, r8
   203d4:	e15c0006 	cmp	ip, r6
   203d8:	0a000000 	beq	203e0 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0xa4>
   203dc:	ebffe41c 	bl	19454 <assertion_failed>
   203e0:	e59b3008 	ldr	r3, [fp, #8]
   203e4:	e1a01004 	mov	r1, r4
   203e8:	e1a00005 	mov	r0, r5
   203ec:	e0433007 	sub	r3, r3, r7
   203f0:	e3530000 	cmp	r3, #0
   203f4:	ca00000d 	bgt	20430 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0xf4>
   203f8:	eb000e39 	bl	23ce4 <CPtrList::GetNext(TPtrListElement*)>
   203fc:	e3500000 	cmp	r0, #0
   20400:	0a000011 	beq	2044c <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x110>
   20404:	e1a04000 	mov	r4, r0
   20408:	e1a01004 	mov	r1, r4
   2040c:	e1a00005 	mov	r0, r5
   20410:	eb000e4a 	bl	23d40 <CPtrList::GetPtr(TPtrListElement*)>
   20414:	e250b000 	subs	fp, r0, #0
   20418:	1affffe8 	bne	203c0 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x84>
   2041c:	e300218a 	movw	r2, #394	; 0x18a
   20420:	e1a01008 	mov	r1, r8
   20424:	e1a0000a 	mov	r0, sl
   20428:	ebffe409 	bl	19454 <assertion_failed>
   2042c:	eaffffe3 	b	203c0 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x84>
   20430:	e1a02009 	mov	r2, r9
   20434:	eb000e58 	bl	23d9c <CPtrList::InsertBefore(TPtrListElement*, void*)>
   20438:	e59d0004 	ldr	r0, [sp, #4]
   2043c:	ebfff9b2 	bl	1eb0c <CSpinLock::Release()>
   20440:	e1a00009 	mov	r0, r9
   20444:	e28dd00c 	add	sp, sp, #12
   20448:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2044c:	e1a01004 	mov	r1, r4
   20450:	e1a00005 	mov	r0, r5
   20454:	e1a02009 	mov	r2, r9
   20458:	eb000e95 	bl	23eb4 <CPtrList::InsertAfter(TPtrListElement*, void*)>
   2045c:	eafffff5 	b	20438 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0xfc>
   20460:	e30917fc 	movw	r1, #38908	; 0x97fc
   20464:	e3401002 	movt	r1, #2
   20468:	e3090238 	movw	r0, #37432	; 0x9238
   2046c:	e3400002 	movt	r0, #2
   20470:	e300217a 	movw	r2, #378	; 0x17a
   20474:	ebffe3f6 	bl	19454 <assertion_failed>
   20478:	eaffffbd 	b	20374 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x38>

0002047c <CTimer::CancelKernelTimer(unsigned int)>:
   2047c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   20480:	e1a04000 	mov	r4, r0
   20484:	e2515000 	subs	r5, r1, #0
   20488:	0a00001f 	beq	2050c <CTimer::CancelKernelTimer(unsigned int)+0x90>
   2048c:	e2846020 	add	r6, r4, #32
   20490:	e284401c 	add	r4, r4, #28
   20494:	e1a00006 	mov	r0, r6
   20498:	ebfff984 	bl	1eab0 <CSpinLock::Acquire()>
   2049c:	e1a00004 	mov	r0, r4
   204a0:	e1a01005 	mov	r1, r5
   204a4:	eb000f24 	bl	2413c <CPtrList::Find(void*)>
   204a8:	e2507000 	subs	r7, r0, #0
   204ac:	0a00000c 	beq	204e4 <CTimer::CancelKernelTimer(unsigned int)+0x68>
   204b0:	e5952000 	ldr	r2, [r5]
   204b4:	e3043d43 	movw	r3, #19779	; 0x4d43
   204b8:	e3443b54 	movt	r3, #19284	; 0x4b54
   204bc:	e1520003 	cmp	r2, r3
   204c0:	1a00000a 	bne	204f0 <CTimer::CancelKernelTimer(unsigned int)+0x74>
   204c4:	e1a01007 	mov	r1, r7
   204c8:	e1a00004 	mov	r0, r4
   204cc:	eb000ebc 	bl	23fc4 <CPtrList::Remove(TPtrListElement*)>
   204d0:	e3a03000 	mov	r3, #0
   204d4:	e1a00005 	mov	r0, r5
   204d8:	e5853000 	str	r3, [r5]
   204dc:	e3a01014 	mov	r1, #20
   204e0:	eb0006ea 	bl	22090 <operator delete(void*, unsigned int)>
   204e4:	e1a00006 	mov	r0, r6
   204e8:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   204ec:	eafff986 	b	1eb0c <CSpinLock::Release()>
   204f0:	e30917fc 	movw	r1, #38908	; 0x97fc
   204f4:	e3401002 	movt	r1, #2
   204f8:	e3090808 	movw	r0, #38920	; 0x9808
   204fc:	e3400002 	movt	r0, #2
   20500:	e30021ae 	movw	r2, #430	; 0x1ae
   20504:	ebffe3d2 	bl	19454 <assertion_failed>
   20508:	eaffffed 	b	204c4 <CTimer::CancelKernelTimer(unsigned int)+0x48>
   2050c:	e30917fc 	movw	r1, #38908	; 0x97fc
   20510:	e3401002 	movt	r1, #2
   20514:	e3060690 	movw	r0, #26256	; 0x6690
   20518:	e3400002 	movt	r0, #2
   2051c:	e30021a7 	movw	r2, #423	; 0x1a7
   20520:	ebffe3cb 	bl	19454 <assertion_failed>
   20524:	eaffffd8 	b	2048c <CTimer::CancelKernelTimer(unsigned int)+0x10>

00020528 <CTimer::PollKernelTimers()>:
   20528:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2052c:	e2807020 	add	r7, r0, #32
   20530:	e280501c 	add	r5, r0, #28
   20534:	e24dd00c 	sub	sp, sp, #12
   20538:	e1a09000 	mov	r9, r0
   2053c:	e1a00007 	mov	r0, r7
   20540:	ebfff95a 	bl	1eab0 <CSpinLock::Acquire()>
   20544:	e1a00005 	mov	r0, r5
   20548:	eb000de3 	bl	23cdc <CPtrList::GetFirst()>
   2054c:	e2504000 	subs	r4, r0, #0
   20550:	0a00003d 	beq	2064c <CTimer::PollKernelTimers()+0x124>
   20554:	e30987fc 	movw	r8, #38908	; 0x97fc
   20558:	e3408002 	movt	r8, #2
   2055c:	e3063690 	movw	r3, #26256	; 0x6690
   20560:	e3403002 	movt	r3, #2
   20564:	e304ad43 	movw	sl, #19779	; 0x4d43
   20568:	e344ab54 	movt	sl, #19284	; 0x4b54
   2056c:	e58d3004 	str	r3, [sp, #4]
   20570:	ea000025 	b	2060c <CTimer::PollKernelTimers()+0xe4>
   20574:	e59bc000 	ldr	ip, [fp]
   20578:	e3090808 	movw	r0, #38920	; 0x9808
   2057c:	e3400002 	movt	r0, #2
   20580:	e3a02f71 	mov	r2, #452	; 0x1c4
   20584:	e1a01008 	mov	r1, r8
   20588:	e15c000a 	cmp	ip, sl
   2058c:	0a000000 	beq	20594 <CTimer::PollKernelTimers()+0x6c>
   20590:	ebffe3af 	bl	19454 <assertion_failed>
   20594:	e599c004 	ldr	ip, [r9, #4]
   20598:	e1a01004 	mov	r1, r4
   2059c:	e59b2008 	ldr	r2, [fp, #8]
   205a0:	e1a00005 	mov	r0, r5
   205a4:	e042200c 	sub	r2, r2, ip
   205a8:	e3520000 	cmp	r2, #0
   205ac:	ca000026 	bgt	2064c <CTimer::PollKernelTimers()+0x124>
   205b0:	eb000dcb 	bl	23ce4 <CPtrList::GetNext(TPtrListElement*)>
   205b4:	e1a01004 	mov	r1, r4
   205b8:	e1a06000 	mov	r6, r0
   205bc:	e1a00005 	mov	r0, r5
   205c0:	eb000e7f 	bl	23fc4 <CPtrList::Remove(TPtrListElement*)>
   205c4:	e1a00007 	mov	r0, r7
   205c8:	ebfff94f 	bl	1eb0c <CSpinLock::Release()>
   205cc:	e59b4004 	ldr	r4, [fp, #4]
   205d0:	e3540000 	cmp	r4, #0
   205d4:	0a000016 	beq	20634 <CTimer::PollKernelTimers()+0x10c>
   205d8:	e1a0000b 	mov	r0, fp
   205dc:	e59b2010 	ldr	r2, [fp, #16]
   205e0:	e59b100c 	ldr	r1, [fp, #12]
   205e4:	e12fff34 	blx	r4
   205e8:	e3a02000 	mov	r2, #0
   205ec:	e1a0000b 	mov	r0, fp
   205f0:	e58b2000 	str	r2, [fp]
   205f4:	e3a01014 	mov	r1, #20
   205f8:	eb0006a4 	bl	22090 <operator delete(void*, unsigned int)>
   205fc:	e1a00007 	mov	r0, r7
   20600:	ebfff92a 	bl	1eab0 <CSpinLock::Acquire()>
   20604:	e2564000 	subs	r4, r6, #0
   20608:	0a00000f 	beq	2064c <CTimer::PollKernelTimers()+0x124>
   2060c:	e1a01004 	mov	r1, r4
   20610:	e1a00005 	mov	r0, r5
   20614:	eb000dc9 	bl	23d40 <CPtrList::GetPtr(TPtrListElement*)>
   20618:	e250b000 	subs	fp, r0, #0
   2061c:	1affffd4 	bne	20574 <CTimer::PollKernelTimers()+0x4c>
   20620:	e30021c3 	movw	r2, #451	; 0x1c3
   20624:	e1a01008 	mov	r1, r8
   20628:	e59d0004 	ldr	r0, [sp, #4]
   2062c:	ebffe388 	bl	19454 <assertion_failed>
   20630:	eaffffcf 	b	20574 <CTimer::PollKernelTimers()+0x4c>
   20634:	e3090238 	movw	r0, #37432	; 0x9238
   20638:	e3400002 	movt	r0, #2
   2063c:	e30021d2 	movw	r2, #466	; 0x1d2
   20640:	e1a01008 	mov	r1, r8
   20644:	ebffe382 	bl	19454 <assertion_failed>
   20648:	eaffffe2 	b	205d8 <CTimer::PollKernelTimers()+0xb0>
   2064c:	e1a00007 	mov	r0, r7
   20650:	e28dd00c 	add	sp, sp, #12
   20654:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20658:	eafff92b 	b	1eb0c <CSpinLock::Release()>

0002065c <CTimer::InterruptHandler()>:
   2065c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   20660:	e1a04000 	mov	r4, r0
   20664:	ec5ecf2e 	mrrc	15, 2, ip, lr, cr14
   20668:	e3a06000 	mov	r6, #0
   2066c:	e3020710 	movw	r0, #10000	; 0x2710
   20670:	e186200c 	orr	r2, r6, ip
   20674:	e3a01000 	mov	r1, #0
   20678:	e0926000 	adds	r6, r2, r0
   2067c:	e3a03000 	mov	r3, #0
   20680:	e0ae7001 	adc	r7, lr, r1
   20684:	e1a00006 	mov	r0, r6
   20688:	e3a01000 	mov	r1, #0
   2068c:	e1a02007 	mov	r2, r7
   20690:	ec420f2e 	mcrr	15, 2, r0, r2, cr14
   20694:	e2845010 	add	r5, r4, #16
   20698:	e1a00005 	mov	r0, r5
   2069c:	ebfff903 	bl	1eab0 <CSpinLock::Acquire()>
   206a0:	e5943004 	ldr	r3, [r4, #4]
   206a4:	e308051f 	movw	r0, #34079	; 0x851f
   206a8:	e34501eb 	movt	r0, #20971	; 0x51eb
   206ac:	e2833001 	add	r3, r3, #1
   206b0:	e3a0c064 	mov	ip, #100	; 0x64
   206b4:	e5843004 	str	r3, [r4, #4]
   206b8:	e0810093 	umull	r0, r1, r3, r0
   206bc:	e1a022a1 	lsr	r2, r1, #5
   206c0:	e063329c 	mls	r3, ip, r2, r3
   206c4:	e3530000 	cmp	r3, #0
   206c8:	1a000005 	bne	206e4 <CTimer::InterruptHandler()+0x88>
   206cc:	e5943008 	ldr	r3, [r4, #8]
   206d0:	e2833001 	add	r3, r3, #1
   206d4:	e5843008 	str	r3, [r4, #8]
   206d8:	e594300c 	ldr	r3, [r4, #12]
   206dc:	e2833001 	add	r3, r3, #1
   206e0:	e584300c 	str	r3, [r4, #12]
   206e4:	e1a00005 	mov	r0, r5
   206e8:	ebfff907 	bl	1eb0c <CSpinLock::Release()>
   206ec:	e1a00004 	mov	r0, r4
   206f0:	ebffff8c 	bl	20528 <CTimer::PollKernelTimers()>
   206f4:	e5943030 	ldr	r3, [r4, #48]	; 0x30
   206f8:	e3530000 	cmp	r3, #0
   206fc:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
   20700:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   20704:	e12fff13 	bx	r3

00020708 <CTimer::InterruptHandler(void*)>:
   20708:	e92d4010 	push	{r4, lr}
   2070c:	e2504000 	subs	r4, r0, #0
   20710:	0a000002 	beq	20720 <CTimer::InterruptHandler(void*)+0x18>
   20714:	e1a00004 	mov	r0, r4
   20718:	e8bd4010 	pop	{r4, lr}
   2071c:	eaffffce 	b	2065c <CTimer::InterruptHandler()>
   20720:	e30917fc 	movw	r1, #38908	; 0x97fc
   20724:	e3401002 	movt	r1, #2
   20728:	e3040220 	movw	r0, #16928	; 0x4220
   2072c:	e3400002 	movt	r0, #2
   20730:	e300221a 	movw	r2, #538	; 0x21a
   20734:	ebffe346 	bl	19454 <assertion_failed>
   20738:	e1a00004 	mov	r0, r4
   2073c:	e8bd4010 	pop	{r4, lr}
   20740:	eaffffc5 	b	2065c <CTimer::InterruptHandler()>

00020744 <CTimer::TuneMsDelay()>:
   20744:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   20748:	e1a06000 	mov	r6, r0
   2074c:	e3a00ffa 	mov	r0, #1000	; 0x3e8
   20750:	e24dd00c 	sub	sp, sp, #12
   20754:	e3024710 	movw	r4, #10000	; 0x2710
   20758:	e5963028 	ldr	r3, [r6, #40]	; 0x28
   2075c:	e308551f 	movw	r5, #34079	; 0x851f
   20760:	e34551eb 	movt	r5, #20971	; 0x51eb
   20764:	e5967004 	ldr	r7, [r6, #4]
   20768:	e0000390 	mul	r0, r0, r3
   2076c:	eb000907 	bl	22b90 <DelayLoop>
   20770:	e5963004 	ldr	r3, [r6, #4]
   20774:	e5962028 	ldr	r2, [r6, #40]	; 0x28
   20778:	e3041dd3 	movw	r1, #19923	; 0x4dd3
   2077c:	e3411062 	movt	r1, #4194	; 0x1062
   20780:	e0433007 	sub	r3, r3, r7
   20784:	e734f314 	udiv	r4, r4, r3
   20788:	e0020492 	mul	r2, r2, r4
   2078c:	e0823295 	umull	r3, r2, r5, r2
   20790:	e1a022a2 	lsr	r2, r2, #5
   20794:	e5862028 	str	r2, [r6, #40]	; 0x28
   20798:	e2822f7d 	add	r2, r2, #500	; 0x1f4
   2079c:	e0c32192 	smull	r2, r3, r2, r1
   207a0:	e1a03343 	asr	r3, r3, #6
   207a4:	e586302c 	str	r3, [r6, #44]	; 0x2c
   207a8:	e0876594 	umull	r6, r7, r4, r5
   207ac:	ebffed86 	bl	1bdcc <CLogger::Get()>
   207b0:	e3a01064 	mov	r1, #100	; 0x64
   207b4:	e0c32594 	smull	r2, r3, r4, r5
   207b8:	e3a02003 	mov	r2, #3
   207bc:	e1a0c2a7 	lsr	ip, r7, #5
   207c0:	e1a032c3 	asr	r3, r3, #5
   207c4:	e58d3000 	str	r3, [sp]
   207c8:	e30938bc 	movw	r3, #39100	; 0x98bc
   207cc:	e3403002 	movt	r3, #2
   207d0:	e0644c91 	mls	r4, r1, ip, r4
   207d4:	e59f100c 	ldr	r1, [pc, #12]	; 207e8 <CTimer::TuneMsDelay()+0xa4>
   207d8:	e58d4004 	str	r4, [sp, #4]
   207dc:	ebffecb1 	bl	1baa8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   207e0:	e28dd00c 	add	sp, sp, #12
   207e4:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   207e8:	000297f4 	.word	0x000297f4

000207ec <CTimer::Initialize()>:
   207ec:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   207f0:	e1a06000 	mov	r6, r0
   207f4:	e5900000 	ldr	r0, [r0]
   207f8:	e24dd00c 	sub	sp, sp, #12
   207fc:	e3500000 	cmp	r0, #0
   20800:	0a000028 	beq	208a8 <CTimer::Initialize()+0xbc>
   20804:	e1a03006 	mov	r3, r6
   20808:	e3a01049 	mov	r1, #73	; 0x49
   2080c:	e3002708 	movw	r2, #1800	; 0x708
   20810:	e3402002 	movt	r2, #2
   20814:	ebffea0f 	bl	1b058 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)>
   20818:	ec51cf0e 	mrrc	15, 0, ip, r1, cr14
   2081c:	e3a04000 	mov	r4, #0
   20820:	e3022710 	movw	r2, #10000	; 0x2710
   20824:	e184000c 	orr	r0, r4, ip
   20828:	e3a03000 	mov	r3, #0
   2082c:	e0908002 	adds	r8, r0, r2
   20830:	e0a19003 	adc	r9, r1, r3
   20834:	e1a02008 	mov	r2, r8
   20838:	e3a03000 	mov	r3, #0
   2083c:	e1a00009 	mov	r0, r9
   20840:	e3a01000 	mov	r1, #0
   20844:	ec402f2e 	mcrr	15, 2, r2, r0, cr14
   20848:	e3a03001 	mov	r3, #1
   2084c:	ee0e3f32 	mcr	15, 0, r3, cr14, cr2, {1}
   20850:	e1a00006 	mov	r0, r6
   20854:	ebffffba 	bl	20744 <CTimer::TuneMsDelay()>
   20858:	ee1e6f10 	mrc	15, 0, r6, cr14, cr0, {0}
   2085c:	e3a01101 	mov	r1, #1073741824	; 0x40000000
   20860:	e3a02b3e 	mov	r2, #63488	; 0xf800
   20864:	e3402124 	movt	r2, #292	; 0x124
   20868:	e30a3aab 	movw	r3, #43691	; 0xaaab
   2086c:	e34036aa 	movt	r3, #1706	; 0x6aa
   20870:	e5917008 	ldr	r7, [r1, #8]
   20874:	e1570003 	cmp	r7, r3
   20878:	01560002 	cmpeq	r6, r2
   2087c:	0a000006 	beq	2089c <CTimer::Initialize()+0xb0>
   20880:	ebffed51 	bl	1bdcc <CLogger::Get()>
   20884:	e30938d4 	movw	r3, #39124	; 0x98d4
   20888:	e3403002 	movt	r3, #2
   2088c:	e1cd60f0 	strd	r6, [sp]
   20890:	e1a02004 	mov	r2, r4
   20894:	e59f102c 	ldr	r1, [pc, #44]	; 208c8 <CTimer::Initialize()+0xdc>
   20898:	ebffec82 	bl	1baa8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   2089c:	e3a00001 	mov	r0, #1
   208a0:	e28dd00c 	add	sp, sp, #12
   208a4:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   208a8:	e30917fc 	movw	r1, #38908	; 0x97fc
   208ac:	e3401002 	movt	r1, #2
   208b0:	e3040258 	movw	r0, #16984	; 0x4258
   208b4:	e3400002 	movt	r0, #2
   208b8:	e3a02061 	mov	r2, #97	; 0x61
   208bc:	ebffe2e4 	bl	19454 <assertion_failed>
   208c0:	e5960000 	ldr	r0, [r6]
   208c4:	eaffffce 	b	20804 <CTimer::Initialize()+0x18>
   208c8:	000297f4 	.word	0x000297f4

000208cc <CTimer::RegisterPeriodicHandler(void (*)())>:
   208cc:	e5903030 	ldr	r3, [r0, #48]	; 0x30
   208d0:	e92d4070 	push	{r4, r5, r6, lr}
   208d4:	e1a05000 	mov	r5, r0
   208d8:	e1a04001 	mov	r4, r1
   208dc:	e3530000 	cmp	r3, #0
   208e0:	0a000005 	beq	208fc <CTimer::RegisterPeriodicHandler(void (*)())+0x30>
   208e4:	e30917fc 	movw	r1, #38908	; 0x97fc
   208e8:	e3401002 	movt	r1, #2
   208ec:	e3090910 	movw	r0, #39184	; 0x9910
   208f0:	e3400002 	movt	r0, #2
   208f4:	e3a02e23 	mov	r2, #560	; 0x230
   208f8:	ebffe2d5 	bl	19454 <assertion_failed>
   208fc:	e3540000 	cmp	r4, #0
   20900:	e5854030 	str	r4, [r5, #48]	; 0x30
   20904:	18bd8070 	popne	{r4, r5, r6, pc}
   20908:	e30917fc 	movw	r1, #38908	; 0x97fc
   2090c:	e3401002 	movt	r1, #2
   20910:	e3090928 	movw	r0, #39208	; 0x9928
   20914:	e3400002 	movt	r0, #2
   20918:	e3002232 	movw	r2, #562	; 0x232
   2091c:	e8bd4070 	pop	{r4, r5, r6, lr}
   20920:	eaffe2cb 	b	19454 <assertion_failed>

00020924 <CTimer::SimpleMsDelay(unsigned int)>:
   20924:	e3500000 	cmp	r0, #0
   20928:	012fff1e 	bxeq	lr
   2092c:	e3a03ffa 	mov	r3, #1000	; 0x3e8
   20930:	e0000093 	mul	r0, r3, r0
   20934:	e3500000 	cmp	r0, #0
   20938:	012fff1e 	bxeq	lr
   2093c:	eafffd03 	b	1fd50 <CTimer::SimpleusDelay(unsigned int) [clone .part.0]>

00020940 <CTimer::SimpleusDelay(unsigned int)>:
   20940:	e3500000 	cmp	r0, #0
   20944:	012fff1e 	bxeq	lr
   20948:	eafffd00 	b	1fd50 <CTimer::SimpleusDelay(unsigned int) [clone .part.0]>

0002094c <CTimer::IsLeapYear(unsigned int)>:
   2094c:	e308251f 	movw	r2, #34079	; 0x851f
   20950:	e34521eb 	movt	r2, #20971	; 0x51eb
   20954:	e3a01064 	mov	r1, #100	; 0x64
   20958:	e083c092 	umull	ip, r3, r2, r0
   2095c:	e1a032a3 	lsr	r3, r3, #5
   20960:	e0630391 	mls	r3, r1, r3, r0
   20964:	e3530000 	cmp	r3, #0
   20968:	0a000003 	beq	2097c <CTimer::IsLeapYear(unsigned int)+0x30>
   2096c:	e3100003 	tst	r0, #3
   20970:	03a00001 	moveq	r0, #1
   20974:	13a00000 	movne	r0, #0
   20978:	e12fff1e 	bx	lr
   2097c:	e92d0030 	push	{r4, r5}
   20980:	e0854290 	umull	r4, r5, r0, r2
   20984:	e3a02e19 	mov	r2, #400	; 0x190
   20988:	e1a033a5 	lsr	r3, r5, #7
   2098c:	e8bd0030 	pop	{r4, r5}
   20990:	e0600392 	mls	r0, r2, r3, r0
   20994:	e16f0f10 	clz	r0, r0
   20998:	e1a002a0 	lsr	r0, r0, #5
   2099c:	e12fff1e 	bx	lr

000209a0 <CTimer::GetDaysOfMonth(unsigned int, unsigned int)>:
   209a0:	e3500001 	cmp	r0, #1
   209a4:	0a000003 	beq	209b8 <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0x18>
   209a8:	e30937c4 	movw	r3, #38852	; 0x97c4
   209ac:	e3403002 	movt	r3, #2
   209b0:	e7930100 	ldr	r0, [r3, r0, lsl #2]
   209b4:	e12fff1e 	bx	lr
   209b8:	e308251f 	movw	r2, #34079	; 0x851f
   209bc:	e34521eb 	movt	r2, #20971	; 0x51eb
   209c0:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   209c4:	e3a0e064 	mov	lr, #100	; 0x64
   209c8:	e0832291 	umull	r2, r3, r1, r2
   209cc:	e1a0c2a3 	lsr	ip, r3, #5
   209d0:	e06c1c9e 	mls	ip, lr, ip, r1
   209d4:	e35c0000 	cmp	ip, #0
   209d8:	0a000008 	beq	20a00 <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0x60>
   209dc:	e3110003 	tst	r1, #3
   209e0:	03a01001 	moveq	r1, #1
   209e4:	13a01000 	movne	r1, #0
   209e8:	e3510000 	cmp	r1, #0
   209ec:	030937c4 	movweq	r3, #38852	; 0x97c4
   209f0:	03403002 	movteq	r3, #2
   209f4:	07930100 	ldreq	r0, [r3, r0, lsl #2]
   209f8:	13a0001d 	movne	r0, #29
   209fc:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   20a00:	e1a033a3 	lsr	r3, r3, #7
   20a04:	e3a02e19 	mov	r2, #400	; 0x190
   20a08:	e0611392 	mls	r1, r2, r3, r1
   20a0c:	e16f1f11 	clz	r1, r1
   20a10:	e1a012a1 	lsr	r1, r1, #5
   20a14:	eafffff3 	b	209e8 <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0x48>

00020a18 <CTimer::Get()>:
   20a18:	e92d4010 	push	{r4, lr}
   20a1c:	e30b44dc 	movw	r4, #46300	; 0xb4dc
   20a20:	e3404002 	movt	r4, #2
   20a24:	e5940000 	ldr	r0, [r4]
   20a28:	e3500000 	cmp	r0, #0
   20a2c:	18bd8010 	popne	{r4, pc}
   20a30:	e300226e 	movw	r2, #622	; 0x26e
   20a34:	e30917fc 	movw	r1, #38908	; 0x97fc
   20a38:	e3401002 	movt	r1, #2
   20a3c:	e3080b64 	movw	r0, #35684	; 0x8b64
   20a40:	e3400002 	movt	r0, #2
   20a44:	ebffe282 	bl	19454 <assertion_failed>
   20a48:	e5940000 	ldr	r0, [r4]
   20a4c:	e8bd8010 	pop	{r4, pc}

00020a50 <memset>:
   20a50:	e352000f 	cmp	r2, #15
   20a54:	e7e1c050 	ubfx	ip, r0, #0, #2
   20a58:	93a03000 	movls	r3, #0
   20a5c:	83a03001 	movhi	r3, #1
   20a60:	e35c0000 	cmp	ip, #0
   20a64:	13a03000 	movne	r3, #0
   20a68:	e3530000 	cmp	r3, #0
   20a6c:	1a000008 	bne	20a94 <memset+0x44>
   20a70:	e3520000 	cmp	r2, #0
   20a74:	e1a03000 	mov	r3, r0
   20a78:	012fff1e 	bxeq	lr
   20a7c:	e6af1071 	sxtb	r1, r1
   20a80:	e0802002 	add	r2, r0, r2
   20a84:	e4c31001 	strb	r1, [r3], #1
   20a88:	e1530002 	cmp	r3, r2
   20a8c:	1afffffc 	bne	20a84 <memset+0x34>
   20a90:	e12fff1e 	bx	lr
   20a94:	e2423010 	sub	r3, r2, #16
   20a98:	e92d4010 	push	{r4, lr}
   20a9c:	e1a03223 	lsr	r3, r3, #4
   20aa0:	e2804020 	add	r4, r0, #32
   20aa4:	e181e401 	orr	lr, r1, r1, lsl #8
   20aa8:	e0844203 	add	r4, r4, r3, lsl #4
   20aac:	e18ee80e 	orr	lr, lr, lr, lsl #16
   20ab0:	e280c010 	add	ip, r0, #16
   20ab4:	e50ce010 	str	lr, [ip, #-16]
   20ab8:	e28cc010 	add	ip, ip, #16
   20abc:	e50ce01c 	str	lr, [ip, #-28]	; 0xffffffe4
   20ac0:	e50ce018 	str	lr, [ip, #-24]	; 0xffffffe8
   20ac4:	e50ce014 	str	lr, [ip, #-20]	; 0xffffffec
   20ac8:	e15c0004 	cmp	ip, r4
   20acc:	1afffff8 	bne	20ab4 <memset+0x64>
   20ad0:	e202200f 	and	r2, r2, #15
   20ad4:	e2833001 	add	r3, r3, #1
   20ad8:	e3520000 	cmp	r2, #0
   20adc:	e0803203 	add	r3, r0, r3, lsl #4
   20ae0:	08bd8010 	popeq	{r4, pc}
   20ae4:	e6af1071 	sxtb	r1, r1
   20ae8:	e0832002 	add	r2, r3, r2
   20aec:	e4c31001 	strb	r1, [r3], #1
   20af0:	e1530002 	cmp	r3, r2
   20af4:	1afffffc 	bne	20aec <memset+0x9c>
   20af8:	e8bd8010 	pop	{r4, pc}

00020afc <memmove>:
   20afc:	e1500001 	cmp	r0, r1
   20b00:	9a00000a 	bls	20b30 <memmove+0x34>
   20b04:	e0813002 	add	r3, r1, r2
   20b08:	e1530000 	cmp	r3, r0
   20b0c:	9a000007 	bls	20b30 <memmove+0x34>
   20b10:	e3520000 	cmp	r2, #0
   20b14:	e0802002 	add	r2, r0, r2
   20b18:	012fff1e 	bxeq	lr
   20b1c:	e173c0d1 	ldrsb	ip, [r3, #-1]!
   20b20:	e562c001 	strb	ip, [r2, #-1]!
   20b24:	e1510003 	cmp	r1, r3
   20b28:	1afffffb 	bne	20b1c <memmove+0x20>
   20b2c:	e12fff1e 	bx	lr
   20b30:	ea00016e 	b	210f0 <memcpy>

00020b34 <memcmp>:
   20b34:	e3520000 	cmp	r2, #0
   20b38:	e242c001 	sub	ip, r2, #1
   20b3c:	0a00000d 	beq	20b78 <memcmp+0x44>
   20b40:	e5d02000 	ldrb	r2, [r0]
   20b44:	e5d13000 	ldrb	r3, [r1]
   20b48:	e1520003 	cmp	r2, r3
   20b4c:	8a00000b 	bhi	20b80 <memcmp+0x4c>
   20b50:	3a00000c 	bcc	20b88 <memcmp+0x54>
   20b54:	e081c00c 	add	ip, r1, ip
   20b58:	ea000004 	b	20b70 <memcmp+0x3c>
   20b5c:	e5f02001 	ldrb	r2, [r0, #1]!
   20b60:	e5f13001 	ldrb	r3, [r1, #1]!
   20b64:	e1520003 	cmp	r2, r3
   20b68:	8a000004 	bhi	20b80 <memcmp+0x4c>
   20b6c:	3a000005 	bcc	20b88 <memcmp+0x54>
   20b70:	e151000c 	cmp	r1, ip
   20b74:	1afffff8 	bne	20b5c <memcmp+0x28>
   20b78:	e3a00000 	mov	r0, #0
   20b7c:	e12fff1e 	bx	lr
   20b80:	e3a00001 	mov	r0, #1
   20b84:	e12fff1e 	bx	lr
   20b88:	e3e00000 	mvn	r0, #0
   20b8c:	e12fff1e 	bx	lr

00020b90 <strlen>:
   20b90:	e1d010d0 	ldrsb	r1, [r0]
   20b94:	e2803001 	add	r3, r0, #1
   20b98:	e3510000 	cmp	r1, #0
   20b9c:	0a000003 	beq	20bb0 <strlen+0x20>
   20ba0:	e0431000 	sub	r1, r3, r0
   20ba4:	e0d320d1 	ldrsb	r2, [r3], #1
   20ba8:	e3520000 	cmp	r2, #0
   20bac:	1afffffb 	bne	20ba0 <strlen+0x10>
   20bb0:	e1a00001 	mov	r0, r1
   20bb4:	e12fff1e 	bx	lr

00020bb8 <strcmp>:
   20bb8:	e1d030d0 	ldrsb	r3, [r0]
   20bbc:	e1d120d0 	ldrsb	r2, [r1]
   20bc0:	e3530000 	cmp	r3, #0
   20bc4:	0a00000e 	beq	20c04 <strcmp+0x4c>
   20bc8:	e3520000 	cmp	r2, #0
   20bcc:	0a00000c 	beq	20c04 <strcmp+0x4c>
   20bd0:	e1520003 	cmp	r2, r3
   20bd4:	ba00000f 	blt	20c18 <strcmp+0x60>
   20bd8:	da000005 	ble	20bf4 <strcmp+0x3c>
   20bdc:	ea00000f 	b	20c20 <strcmp+0x68>
   20be0:	e3520000 	cmp	r2, #0
   20be4:	0a000006 	beq	20c04 <strcmp+0x4c>
   20be8:	e1530002 	cmp	r3, r2
   20bec:	ca000009 	bgt	20c18 <strcmp+0x60>
   20bf0:	ba00000a 	blt	20c20 <strcmp+0x68>
   20bf4:	e1f030d1 	ldrsb	r3, [r0, #1]!
   20bf8:	e1f120d1 	ldrsb	r2, [r1, #1]!
   20bfc:	e3530000 	cmp	r3, #0
   20c00:	1afffff6 	bne	20be0 <strcmp+0x28>
   20c04:	e1530002 	cmp	r3, r2
   20c08:	ca000002 	bgt	20c18 <strcmp+0x60>
   20c0c:	b3e00000 	mvnlt	r0, #0
   20c10:	a3a00000 	movge	r0, #0
   20c14:	e12fff1e 	bx	lr
   20c18:	e3a00001 	mov	r0, #1
   20c1c:	e12fff1e 	bx	lr
   20c20:	e3e00000 	mvn	r0, #0
   20c24:	e12fff1e 	bx	lr

00020c28 <strcasecmp>:
   20c28:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   20c2c:	e2400001 	sub	r0, r0, #1
   20c30:	e2411001 	sub	r1, r1, #1
   20c34:	ea000006 	b	20c54 <strcasecmp+0x2c>
   20c38:	e35e0019 	cmp	lr, #25
   20c3c:	9242c020 	subls	ip, r2, #32
   20c40:	e35c0000 	cmp	ip, #0
   20c44:	0a00000b 	beq	20c78 <strcasecmp+0x50>
   20c48:	e153000c 	cmp	r3, ip
   20c4c:	ca000010 	bgt	20c94 <strcasecmp+0x6c>
   20c50:	ba000011 	blt	20c9c <strcasecmp+0x74>
   20c54:	e1f030d1 	ldrsb	r3, [r0, #1]!
   20c58:	e2432061 	sub	r2, r3, #97	; 0x61
   20c5c:	e3520019 	cmp	r2, #25
   20c60:	e1f120d1 	ldrsb	r2, [r1, #1]!
   20c64:	92433020 	subls	r3, r3, #32
   20c68:	e3530000 	cmp	r3, #0
   20c6c:	e1a0c002 	mov	ip, r2
   20c70:	e242e061 	sub	lr, r2, #97	; 0x61
   20c74:	1affffef 	bne	20c38 <strcasecmp+0x10>
   20c78:	e35e0019 	cmp	lr, #25
   20c7c:	92422020 	subls	r2, r2, #32
   20c80:	e1520003 	cmp	r2, r3
   20c84:	ba000002 	blt	20c94 <strcasecmp+0x6c>
   20c88:	c3e00000 	mvngt	r0, #0
   20c8c:	d3a00000 	movle	r0, #0
   20c90:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   20c94:	e3a00001 	mov	r0, #1
   20c98:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   20c9c:	e3e00000 	mvn	r0, #0
   20ca0:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

00020ca4 <strncmp>:
   20ca4:	e3520000 	cmp	r2, #0
   20ca8:	0a000016 	beq	20d08 <strncmp+0x64>
   20cac:	e1d030d0 	ldrsb	r3, [r0]
   20cb0:	e1d1c0d0 	ldrsb	ip, [r1]
   20cb4:	e3530000 	cmp	r3, #0
   20cb8:	0a000015 	beq	20d14 <strncmp+0x70>
   20cbc:	e35c0000 	cmp	ip, #0
   20cc0:	0a000013 	beq	20d14 <strncmp+0x70>
   20cc4:	e153000c 	cmp	r3, ip
   20cc8:	ca000016 	bgt	20d28 <strncmp+0x84>
   20ccc:	ba000017 	blt	20d30 <strncmp+0x8c>
   20cd0:	e2422001 	sub	r2, r2, #1
   20cd4:	e0812002 	add	r2, r1, r2
   20cd8:	ea000008 	b	20d00 <strncmp+0x5c>
   20cdc:	e1f030d1 	ldrsb	r3, [r0, #1]!
   20ce0:	e3530000 	cmp	r3, #0
   20ce4:	0a000009 	beq	20d10 <strncmp+0x6c>
   20ce8:	e1f1c0d1 	ldrsb	ip, [r1, #1]!
   20cec:	e35c0000 	cmp	ip, #0
   20cf0:	0a000007 	beq	20d14 <strncmp+0x70>
   20cf4:	e153000c 	cmp	r3, ip
   20cf8:	ca00000a 	bgt	20d28 <strncmp+0x84>
   20cfc:	ba00000b 	blt	20d30 <strncmp+0x8c>
   20d00:	e1510002 	cmp	r1, r2
   20d04:	1afffff4 	bne	20cdc <strncmp+0x38>
   20d08:	e3a00000 	mov	r0, #0
   20d0c:	e12fff1e 	bx	lr
   20d10:	e1d1c0d1 	ldrsb	ip, [r1, #1]
   20d14:	e153000c 	cmp	r3, ip
   20d18:	ca000002 	bgt	20d28 <strncmp+0x84>
   20d1c:	b3e00000 	mvnlt	r0, #0
   20d20:	a3a00000 	movge	r0, #0
   20d24:	e12fff1e 	bx	lr
   20d28:	e3a00001 	mov	r0, #1
   20d2c:	e12fff1e 	bx	lr
   20d30:	e3e00000 	mvn	r0, #0
   20d34:	e12fff1e 	bx	lr

00020d38 <strcpy>:
   20d38:	e1d130d0 	ldrsb	r3, [r1]
   20d3c:	e1a02000 	mov	r2, r0
   20d40:	e3530000 	cmp	r3, #0
   20d44:	0a000003 	beq	20d58 <strcpy+0x20>
   20d48:	e4c23001 	strb	r3, [r2], #1
   20d4c:	e1f130d1 	ldrsb	r3, [r1, #1]!
   20d50:	e3530000 	cmp	r3, #0
   20d54:	1afffffb 	bne	20d48 <strcpy+0x10>
   20d58:	e3a03000 	mov	r3, #0
   20d5c:	e5c23000 	strb	r3, [r2]
   20d60:	e12fff1e 	bx	lr

00020d64 <strncpy>:
   20d64:	e3520000 	cmp	r2, #0
   20d68:	012fff1e 	bxeq	lr
   20d6c:	e1d1c0d0 	ldrsb	ip, [r1]
   20d70:	e35c0000 	cmp	ip, #0
   20d74:	0a00000a 	beq	20da4 <strncpy+0x40>
   20d78:	e0802002 	add	r2, r0, r2
   20d7c:	e1a03000 	mov	r3, r0
   20d80:	e4c3c001 	strb	ip, [r3], #1
   20d84:	e1530002 	cmp	r3, r2
   20d88:	012fff1e 	bxeq	lr
   20d8c:	e1f1c0d1 	ldrsb	ip, [r1, #1]!
   20d90:	e35c0000 	cmp	ip, #0
   20d94:	1afffff9 	bne	20d80 <strncpy+0x1c>
   20d98:	e3a02000 	mov	r2, #0
   20d9c:	e5c32000 	strb	r2, [r3]
   20da0:	e12fff1e 	bx	lr
   20da4:	e1a03000 	mov	r3, r0
   20da8:	eafffffa 	b	20d98 <strncpy+0x34>

00020dac <strcat>:
   20dac:	e1d030d0 	ldrsb	r3, [r0]
   20db0:	e3530000 	cmp	r3, #0
   20db4:	e1a03000 	mov	r3, r0
   20db8:	0a000002 	beq	20dc8 <strcat+0x1c>
   20dbc:	e1f320d1 	ldrsb	r2, [r3, #1]!
   20dc0:	e3520000 	cmp	r2, #0
   20dc4:	1afffffc 	bne	20dbc <strcat+0x10>
   20dc8:	e1d120d0 	ldrsb	r2, [r1]
   20dcc:	e3520000 	cmp	r2, #0
   20dd0:	0a000003 	beq	20de4 <strcat+0x38>
   20dd4:	e4c32001 	strb	r2, [r3], #1
   20dd8:	e1f120d1 	ldrsb	r2, [r1, #1]!
   20ddc:	e3520000 	cmp	r2, #0
   20de0:	1afffffb 	bne	20dd4 <strcat+0x28>
   20de4:	e3a02000 	mov	r2, #0
   20de8:	e5c32000 	strb	r2, [r3]
   20dec:	e12fff1e 	bx	lr

00020df0 <strchr>:
   20df0:	e1d020d0 	ldrsb	r2, [r0]
   20df4:	e3520000 	cmp	r2, #0
   20df8:	0a000009 	beq	20e24 <strchr+0x34>
   20dfc:	e1510002 	cmp	r1, r2
   20e00:	1a000002 	bne	20e10 <strchr+0x20>
   20e04:	e12fff1e 	bx	lr
   20e08:	e1530001 	cmp	r3, r1
   20e0c:	012fff1e 	bxeq	lr
   20e10:	e1f030d1 	ldrsb	r3, [r0, #1]!
   20e14:	e3530000 	cmp	r3, #0
   20e18:	1afffffa 	bne	20e08 <strchr+0x18>
   20e1c:	e1a00003 	mov	r0, r3
   20e20:	e12fff1e 	bx	lr
   20e24:	e1a00002 	mov	r0, r2
   20e28:	e12fff1e 	bx	lr

00020e2c <strstr>:
   20e2c:	e92d4010 	push	{r4, lr}
   20e30:	e1d140d0 	ldrsb	r4, [r1]
   20e34:	e1d030d0 	ldrsb	r3, [r0]
   20e38:	e3530000 	cmp	r3, #0
   20e3c:	1a000005 	bne	20e58 <strstr+0x2c>
   20e40:	e3540000 	cmp	r4, #0
   20e44:	13a00000 	movne	r0, #0
   20e48:	e8bd8010 	pop	{r4, pc}
   20e4c:	e1f030d1 	ldrsb	r3, [r0, #1]!
   20e50:	e3530000 	cmp	r3, #0
   20e54:	0a00000d 	beq	20e90 <strstr+0x64>
   20e58:	e3540000 	cmp	r4, #0
   20e5c:	08bd8010 	popeq	{r4, pc}
   20e60:	e1d030d0 	ldrsb	r3, [r0]
   20e64:	e1530004 	cmp	r3, r4
   20e68:	1afffff7 	bne	20e4c <strstr+0x20>
   20e6c:	e1a02001 	mov	r2, r1
   20e70:	e1a0c000 	mov	ip, r0
   20e74:	e1f230d1 	ldrsb	r3, [r2, #1]!
   20e78:	e3530000 	cmp	r3, #0
   20e7c:	08bd8010 	popeq	{r4, pc}
   20e80:	e1fce0d1 	ldrsb	lr, [ip, #1]!
   20e84:	e15e0003 	cmp	lr, r3
   20e88:	0afffff9 	beq	20e74 <strstr+0x48>
   20e8c:	eaffffee 	b	20e4c <strstr+0x20>
   20e90:	e1a00003 	mov	r0, r3
   20e94:	e8bd8010 	pop	{r4, pc}

00020e98 <strtok_r>:
   20e98:	e3500000 	cmp	r0, #0
   20e9c:	0a000029 	beq	20f48 <strtok_r+0xb0>
   20ea0:	e1d0c0d0 	ldrsb	ip, [r0]
   20ea4:	e35c0000 	cmp	ip, #0
   20ea8:	0a00002d 	beq	20f64 <strtok_r+0xcc>
   20eac:	e92d4030 	push	{r4, r5, lr}
   20eb0:	e1d140d0 	ldrsb	r4, [r1]
   20eb4:	e3540000 	cmp	r4, #0
   20eb8:	0a000008 	beq	20ee0 <strtok_r+0x48>
   20ebc:	e154000c 	cmp	r4, ip
   20ec0:	0a000019 	beq	20f2c <strtok_r+0x94>
   20ec4:	e1a0e001 	mov	lr, r1
   20ec8:	ea000001 	b	20ed4 <strtok_r+0x3c>
   20ecc:	e153000c 	cmp	r3, ip
   20ed0:	0a000015 	beq	20f2c <strtok_r+0x94>
   20ed4:	e1fe30d1 	ldrsb	r3, [lr, #1]!
   20ed8:	e3530000 	cmp	r3, #0
   20edc:	1afffffa 	bne	20ecc <strtok_r+0x34>
   20ee0:	e35c0000 	cmp	ip, #0
   20ee4:	0a00001b 	beq	20f58 <strtok_r+0xc0>
   20ee8:	e1a05000 	mov	r5, r0
   20eec:	e3540000 	cmp	r4, #0
   20ef0:	0a000008 	beq	20f18 <strtok_r+0x80>
   20ef4:	e15c0004 	cmp	ip, r4
   20ef8:	0a00000d 	beq	20f34 <strtok_r+0x9c>
   20efc:	e1a0e001 	mov	lr, r1
   20f00:	ea000001 	b	20f0c <strtok_r+0x74>
   20f04:	e153000c 	cmp	r3, ip
   20f08:	0a000009 	beq	20f34 <strtok_r+0x9c>
   20f0c:	e1fe30d1 	ldrsb	r3, [lr, #1]!
   20f10:	e3530000 	cmp	r3, #0
   20f14:	1afffffa 	bne	20f04 <strtok_r+0x6c>
   20f18:	e1f5c0d1 	ldrsb	ip, [r5, #1]!
   20f1c:	e35c0000 	cmp	ip, #0
   20f20:	1afffff1 	bne	20eec <strtok_r+0x54>
   20f24:	e5825000 	str	r5, [r2]
   20f28:	e8bd8030 	pop	{r4, r5, pc}
   20f2c:	e1f0c0d1 	ldrsb	ip, [r0, #1]!
   20f30:	eaffffdf 	b	20eb4 <strtok_r+0x1c>
   20f34:	e3a03000 	mov	r3, #0
   20f38:	e2855001 	add	r5, r5, #1
   20f3c:	e5453001 	strb	r3, [r5, #-1]
   20f40:	e5825000 	str	r5, [r2]
   20f44:	e8bd8030 	pop	{r4, r5, pc}
   20f48:	e5920000 	ldr	r0, [r2]
   20f4c:	e3500000 	cmp	r0, #0
   20f50:	1affffd2 	bne	20ea0 <strtok_r+0x8>
   20f54:	e12fff1e 	bx	lr
   20f58:	e3a00000 	mov	r0, #0
   20f5c:	e5820000 	str	r0, [r2]
   20f60:	e8bd8030 	pop	{r4, r5, pc}
   20f64:	e3a00000 	mov	r0, #0
   20f68:	e5820000 	str	r0, [r2]
   20f6c:	e12fff1e 	bx	lr

00020f70 <strtoul>:
   20f70:	e3510000 	cmp	r1, #0
   20f74:	e2423002 	sub	r3, r2, #2
   20f78:	e92d4070 	push	{r4, r5, r6, lr}
   20f7c:	e3c2e010 	bic	lr, r2, #16
   20f80:	15810000 	strne	r0, [r1]
   20f84:	e3520000 	cmp	r2, #0
   20f88:	13530022 	cmpne	r3, #34	; 0x22
   20f8c:	8a000032 	bhi	2105c <strtoul+0xec>
   20f90:	e1d030d0 	ldrsb	r3, [r0]
   20f94:	e1a04000 	mov	r4, r0
   20f98:	e2800001 	add	r0, r0, #1
   20f9c:	e243c009 	sub	ip, r3, #9
   20fa0:	e3530020 	cmp	r3, #32
   20fa4:	e6efc07c 	uxtb	ip, ip
   20fa8:	0afffff8 	beq	20f90 <strtoul+0x20>
   20fac:	e35c0004 	cmp	ip, #4
   20fb0:	9afffff6 	bls	20f90 <strtoul+0x20>
   20fb4:	e353002b 	cmp	r3, #43	; 0x2b
   20fb8:	0a000029 	beq	21064 <strtoul+0xf4>
   20fbc:	e353002d 	cmp	r3, #45	; 0x2d
   20fc0:	03a06001 	moveq	r6, #1
   20fc4:	13a06000 	movne	r6, #0
   20fc8:	01d430d1 	ldrsbeq	r3, [r4, #1]
   20fcc:	01a04000 	moveq	r4, r0
   20fd0:	e3530030 	cmp	r3, #48	; 0x30
   20fd4:	0a000027 	beq	21078 <strtoul+0x108>
   20fd8:	e3520000 	cmp	r2, #0
   20fdc:	03a0200a 	moveq	r2, #10
   20fe0:	e353002f 	cmp	r3, #47	; 0x2f
   20fe4:	e1a0c003 	mov	ip, r3
   20fe8:	da00003a 	ble	210d8 <strtoul+0x168>
   20fec:	e3a05001 	mov	r5, #1
   20ff0:	e3a0e000 	mov	lr, #0
   20ff4:	ea000008 	b	2101c <strtoul+0xac>
   20ff8:	e020c29e 	mla	r0, lr, r2, ip
   20ffc:	e3a05000 	mov	r5, #0
   21000:	e150000e 	cmp	r0, lr
   21004:	3a000026 	bcc	210a4 <strtoul+0x134>
   21008:	e1f4c0d1 	ldrsb	ip, [r4, #1]!
   2100c:	e1a0e000 	mov	lr, r0
   21010:	e35c002f 	cmp	ip, #47	; 0x2f
   21014:	e1a0300c 	mov	r3, ip
   21018:	da000026 	ble	210b8 <strtoul+0x148>
   2101c:	e2433061 	sub	r3, r3, #97	; 0x61
   21020:	e3530019 	cmp	r3, #25
   21024:	924cc020 	subls	ip, ip, #32
   21028:	e35c0040 	cmp	ip, #64	; 0x40
   2102c:	c24cc007 	subgt	ip, ip, #7
   21030:	e24cc030 	sub	ip, ip, #48	; 0x30
   21034:	e15c0002 	cmp	ip, r2
   21038:	baffffee 	blt	20ff8 <strtoul+0x88>
   2103c:	e2253001 	eor	r3, r5, #1
   21040:	e1a0000e 	mov	r0, lr
   21044:	e0033006 	and	r3, r3, r6
   21048:	e3510000 	cmp	r1, #0
   2104c:	15814000 	strne	r4, [r1]
   21050:	e3530000 	cmp	r3, #0
   21054:	12600000 	rsbne	r0, r0, #0
   21058:	e8bd8070 	pop	{r4, r5, r6, pc}
   2105c:	e3a00000 	mov	r0, #0
   21060:	e8bd8070 	pop	{r4, r5, r6, pc}
   21064:	e1d430d1 	ldrsb	r3, [r4, #1]
   21068:	e3a06000 	mov	r6, #0
   2106c:	e1a04000 	mov	r4, r0
   21070:	e3530030 	cmp	r3, #48	; 0x30
   21074:	1affffd7 	bne	20fd8 <strtoul+0x68>
   21078:	e1d430d1 	ldrsb	r3, [r4, #1]
   2107c:	e284c001 	add	ip, r4, #1
   21080:	e3c30020 	bic	r0, r3, #32
   21084:	e3500058 	cmp	r0, #88	; 0x58
   21088:	1a00000c 	bne	210c0 <strtoul+0x150>
   2108c:	e35e0000 	cmp	lr, #0
   21090:	1afffff1 	bne	2105c <strtoul+0xec>
   21094:	e1d430d2 	ldrsb	r3, [r4, #2]
   21098:	e3a02010 	mov	r2, #16
   2109c:	e2844002 	add	r4, r4, #2
   210a0:	eaffffce 	b	20fe0 <strtoul+0x70>
   210a4:	e1510005 	cmp	r1, r5
   210a8:	0a000008 	beq	210d0 <strtoul+0x160>
   210ac:	e5814000 	str	r4, [r1]
   210b0:	e3e00000 	mvn	r0, #0
   210b4:	e8bd8070 	pop	{r4, r5, r6, pc}
   210b8:	e3a03001 	mov	r3, #1
   210bc:	eaffffe0 	b	21044 <strtoul+0xd4>
   210c0:	e3520000 	cmp	r2, #0
   210c4:	e1a0400c 	mov	r4, ip
   210c8:	03a02008 	moveq	r2, #8
   210cc:	eaffffc3 	b	20fe0 <strtoul+0x70>
   210d0:	e3e00000 	mvn	r0, #0
   210d4:	e8bd8070 	pop	{r4, r5, r6, pc}
   210d8:	e3510000 	cmp	r1, #0
   210dc:	0affffde 	beq	2105c <strtoul+0xec>
   210e0:	e3a00000 	mov	r0, #0
   210e4:	e5814000 	str	r4, [r1]
   210e8:	e8bd8070 	pop	{r4, r5, r6, pc}

000210ec <char2int>:
   210ec:	e12fff1e 	bx	lr

000210f0 <memcpy>:
   210f0:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
   210f4:	e352007f 	cmp	r2, #127	; 0x7f
   210f8:	9a00000b 	bls	2112c <memcpy+0x3c>
   210fc:	e3110003 	tst	r1, #3
   21100:	1a000009 	bne	2112c <memcpy+0x3c>
   21104:	e3100003 	tst	r0, #3
   21108:	1a000007 	bne	2112c <memcpy+0x3c>
   2110c:	e92d07f0 	push	{r4, r5, r6, r7, r8, r9, sl}
   21110:	e8b107f8 	ldm	r1!, {r3, r4, r5, r6, r7, r8, r9, sl}
   21114:	e2422020 	sub	r2, r2, #32
   21118:	e8a007f8 	stmia	r0!, {r3, r4, r5, r6, r7, r8, r9, sl}
   2111c:	f5d1f040 	pld	[r1, #64]	; 0x40
   21120:	e352001f 	cmp	r2, #31
   21124:	8afffff9 	bhi	21110 <memcpy+0x20>
   21128:	e8bd07f0 	pop	{r4, r5, r6, r7, r8, r9, sl}
   2112c:	e3520000 	cmp	r2, #0
   21130:	0a000003 	beq	21144 <memcpy+0x54>
   21134:	e4d13001 	ldrb	r3, [r1], #1
   21138:	e2522001 	subs	r2, r2, #1
   2113c:	e4c03001 	strb	r3, [r0], #1
   21140:	1afffffb 	bne	21134 <memcpy+0x44>
   21144:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
   21148:	e12fff1e 	bx	lr

0002114c <CVirtualGPIOPin::~CVirtualGPIOPin()>:
   2114c:	e12fff1e 	bx	lr

00021150 <CVirtualGPIOPin::~CVirtualGPIOPin()>:
   21150:	e92d4010 	push	{r4, lr}
   21154:	e3a01014 	mov	r1, #20
   21158:	e1a04000 	mov	r4, r0
   2115c:	eb0003cb 	bl	22090 <operator delete(void*, unsigned int)>
   21160:	e1a00004 	mov	r0, r4
   21164:	e8bd8010 	pop	{r4, pc}

00021168 <CVirtualGPIOPin::Write(unsigned int)>:
   21168:	e92d4070 	push	{r4, r5, r6, lr}
   2116c:	e1a05001 	mov	r5, r1
   21170:	e5d02004 	ldrb	r2, [r0, #4]
   21174:	e24dd028 	sub	sp, sp, #40	; 0x28
   21178:	e5903008 	ldr	r3, [r0, #8]
   2117c:	e3520000 	cmp	r2, #0
   21180:	0a000013 	beq	211d4 <CVirtualGPIOPin::Write(unsigned int)+0x6c>
   21184:	e3530000 	cmp	r3, #0
   21188:	1a000033 	bne	2125c <CVirtualGPIOPin::Write(unsigned int)+0xf4>
   2118c:	e3a01000 	mov	r1, #0
   21190:	e28d000c 	add	r0, sp, #12
   21194:	ebffe0d2 	bl	194e4 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   21198:	e3a03008 	mov	r3, #8
   2119c:	e58d3000 	str	r3, [sp]
   211a0:	e3a03014 	mov	r3, #20
   211a4:	e28d000c 	add	r0, sp, #12
   211a8:	e3081041 	movw	r1, #32833	; 0x8041
   211ac:	e3401003 	movt	r1, #3
   211b0:	e08d2003 	add	r2, sp, r3
   211b4:	e3a0c082 	mov	ip, #130	; 0x82
   211b8:	e58d5024 	str	r5, [sp, #36]	; 0x24
   211bc:	e58dc020 	str	ip, [sp, #32]
   211c0:	ebffe114 	bl	19618 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   211c4:	e28d000c 	add	r0, sp, #12
   211c8:	ebffe0cc 	bl	19500 <CBcmPropertyTags::~CBcmPropertyTags()>
   211cc:	e28dd028 	add	sp, sp, #40	; 0x28
   211d0:	e8bd8070 	pop	{r4, r5, r6, pc}
   211d4:	e3530001 	cmp	r3, #1
   211d8:	8afffffb 	bhi	211cc <CVirtualGPIOPin::Write(unsigned int)+0x64>
   211dc:	e30b64e0 	movw	r6, #46304	; 0xb4e0
   211e0:	e3406002 	movt	r6, #2
   211e4:	e3510001 	cmp	r1, #1
   211e8:	93a03000 	movls	r3, #0
   211ec:	83a03001 	movhi	r3, #1
   211f0:	e5962000 	ldr	r2, [r6]
   211f4:	e3520000 	cmp	r2, #0
   211f8:	03a03001 	moveq	r3, #1
   211fc:	e3530000 	cmp	r3, #0
   21200:	1afffff1 	bne	211cc <CVirtualGPIOPin::Write(unsigned int)+0x64>
   21204:	e1a04000 	mov	r4, r0
   21208:	e2860004 	add	r0, r6, #4
   2120c:	ebfff627 	bl	1eab0 <CSpinLock::Acquire()>
   21210:	e1d421b0 	ldrh	r2, [r4, #16]
   21214:	e1d431b2 	ldrh	r3, [r4, #18]
   21218:	e584500c 	str	r5, [r4, #12]
   2121c:	e0421003 	sub	r1, r2, r3
   21220:	e6bf1071 	sxth	r1, r1
   21224:	e3510000 	cmp	r1, #0
   21228:	da000012 	ble	21278 <CVirtualGPIOPin::Write(unsigned int)+0x110>
   2122c:	e3550000 	cmp	r5, #0
   21230:	1a000015 	bne	2128c <CVirtualGPIOPin::Write(unsigned int)+0x124>
   21234:	e2833001 	add	r3, r3, #1
   21238:	e6ff3073 	uxth	r3, r3
   2123c:	e1c431b2 	strh	r3, [r4, #18]
   21240:	e1833802 	orr	r3, r3, r2, lsl #16
   21244:	e5941008 	ldr	r1, [r4, #8]
   21248:	e5962000 	ldr	r2, [r6]
   2124c:	e59f0044 	ldr	r0, [pc, #68]	; 21298 <CVirtualGPIOPin::Write(unsigned int)+0x130>
   21250:	e7823101 	str	r3, [r2, r1, lsl #2]
   21254:	ebfff62c 	bl	1eb0c <CSpinLock::Release()>
   21258:	eaffffdb 	b	211cc <CVirtualGPIOPin::Write(unsigned int)+0x64>
   2125c:	e3091980 	movw	r1, #39296	; 0x9980
   21260:	e3401002 	movt	r1, #2
   21264:	e3090994 	movw	r0, #39316	; 0x9994
   21268:	e3400002 	movt	r0, #2
   2126c:	e3a0205b 	mov	r2, #91	; 0x5b
   21270:	ebffe077 	bl	19454 <assertion_failed>
   21274:	eaffffc4 	b	2118c <CVirtualGPIOPin::Write(unsigned int)+0x24>
   21278:	e3550000 	cmp	r5, #0
   2127c:	12822001 	addne	r2, r2, #1
   21280:	16ff2072 	uxthne	r2, r2
   21284:	11c421b0 	strhne	r2, [r4, #16]
   21288:	1affffec 	bne	21240 <CVirtualGPIOPin::Write(unsigned int)+0xd8>
   2128c:	e59f0004 	ldr	r0, [pc, #4]	; 21298 <CVirtualGPIOPin::Write(unsigned int)+0x130>
   21290:	ebfff61d 	bl	1eb0c <CSpinLock::Release()>
   21294:	eaffffcc 	b	211cc <CVirtualGPIOPin::Write(unsigned int)+0x64>
   21298:	0002b4e4 	.word	0x0002b4e4

0002129c <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)>:
   2129c:	e92d4070 	push	{r4, r5, r6, lr}
   212a0:	e1a04000 	mov	r4, r0
   212a4:	e3a03000 	mov	r3, #0
   212a8:	e59f0110 	ldr	r0, [pc, #272]	; 213c0 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0x124>
   212ac:	e3510001 	cmp	r1, #1
   212b0:	91a0c002 	movls	ip, r2
   212b4:	8382c001 	orrhi	ip, r2, #1
   212b8:	e24dd020 	sub	sp, sp, #32
   212bc:	e5c42004 	strb	r2, [r4, #4]
   212c0:	e15c0003 	cmp	ip, r3
   212c4:	e5841008 	str	r1, [r4, #8]
   212c8:	e5840000 	str	r0, [r4]
   212cc:	e5843010 	str	r3, [r4, #16]
   212d0:	0a000002 	beq	212e0 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0x44>
   212d4:	e1a00004 	mov	r0, r4
   212d8:	e28dd020 	add	sp, sp, #32
   212dc:	e8bd8070 	pop	{r4, r5, r6, pc}
   212e0:	e30b54e0 	movw	r5, #46304	; 0xb4e0
   212e4:	e3405002 	movt	r5, #2
   212e8:	e2850004 	add	r0, r5, #4
   212ec:	ebfff5ef 	bl	1eab0 <CSpinLock::Acquire()>
   212f0:	e5956000 	ldr	r6, [r5]
   212f4:	e3560000 	cmp	r6, #0
   212f8:	0a00000a 	beq	21328 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0x8c>
   212fc:	e5943008 	ldr	r3, [r4, #8]
   21300:	e3a02000 	mov	r2, #0
   21304:	e7862103 	str	r2, [r6, r3, lsl #2]
   21308:	e59f00b4 	ldr	r0, [pc, #180]	; 213c4 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0x128>
   2130c:	ebfff5fe 	bl	1eb0c <CSpinLock::Release()>
   21310:	e1a00004 	mov	r0, r4
   21314:	e3a01000 	mov	r1, #0
   21318:	ebffff92 	bl	21168 <CVirtualGPIOPin::Write(unsigned int)>
   2131c:	e1a00004 	mov	r0, r4
   21320:	e28dd020 	add	sp, sp, #32
   21324:	e8bd8070 	pop	{r4, r5, r6, pc}
   21328:	e3a00001 	mov	r0, #1
   2132c:	eb0002ce 	bl	21e6c <CMemorySystem::GetCoherentPage(unsigned int)>
   21330:	e1a01006 	mov	r1, r6
   21334:	e5850000 	str	r0, [r5]
   21338:	e28d0008 	add	r0, sp, #8
   2133c:	ebffe068 	bl	194e4 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   21340:	e595c000 	ldr	ip, [r5]
   21344:	e3a03004 	mov	r3, #4
   21348:	e28d0008 	add	r0, sp, #8
   2134c:	e58d3000 	str	r3, [sp]
   21350:	e28d2010 	add	r2, sp, #16
   21354:	e3081020 	movw	r1, #32800	; 0x8020
   21358:	e3401004 	movt	r1, #4
   2135c:	e3a03010 	mov	r3, #16
   21360:	e38cc103 	orr	ip, ip, #-1073741824	; 0xc0000000
   21364:	e58dc01c 	str	ip, [sp, #28]
   21368:	ebffe0aa 	bl	19618 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   2136c:	e3500000 	cmp	r0, #0
   21370:	0a000005 	beq	2138c <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0xf0>
   21374:	e28d0008 	add	r0, sp, #8
   21378:	ebffe060 	bl	19500 <CBcmPropertyTags::~CBcmPropertyTags()>
   2137c:	e5956000 	ldr	r6, [r5]
   21380:	e3560000 	cmp	r6, #0
   21384:	0affffdf 	beq	21308 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0x6c>
   21388:	eaffffdb 	b	212fc <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0x60>
   2138c:	e3a03010 	mov	r3, #16
   21390:	e58d0000 	str	r0, [sp]
   21394:	e28d2010 	add	r2, sp, #16
   21398:	e3a01010 	mov	r1, #16
   2139c:	e3401004 	movt	r1, #4
   213a0:	e28d0008 	add	r0, sp, #8
   213a4:	ebffe09b 	bl	19618 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   213a8:	e3500000 	cmp	r0, #0
   213ac:	05850000 	streq	r0, [r5]
   213b0:	159d301c 	ldrne	r3, [sp, #28]
   213b4:	13c33103 	bicne	r3, r3, #-1073741824	; 0xc0000000
   213b8:	15853000 	strne	r3, [r5]
   213bc:	eaffffec 	b	21374 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0xd8>
   213c0:	00029978 	.word	0x00029978
   213c4:	0002b4e4 	.word	0x0002b4e4

000213c8 <CVirtualGPIOPin::Invert()>:
   213c8:	e590100c 	ldr	r1, [r0, #12]
   213cc:	e2211001 	eor	r1, r1, #1
   213d0:	eaffff64 	b	21168 <CVirtualGPIOPin::Write(unsigned int)>

000213d4 <ChainBootStub(void const*, unsigned int)>:
   213d4:	e2811003 	add	r1, r1, #3
   213d8:	e1b01121 	lsrs	r1, r1, #2
   213dc:	0a000008 	beq	21404 <ChainBootStub(void const*, unsigned int)+0x30>
   213e0:	e2811a02 	add	r1, r1, #8192	; 0x2000
   213e4:	e2400004 	sub	r0, r0, #4
   213e8:	e1a02101 	lsl	r2, r1, #2
   213ec:	e3a03902 	mov	r3, #32768	; 0x8000
   213f0:	e5b01004 	ldr	r1, [r0, #4]!
   213f4:	e2833004 	add	r3, r3, #4
   213f8:	e5031004 	str	r1, [r3, #-4]
   213fc:	e1530002 	cmp	r3, r2
   21400:	1afffffa 	bne	213f0 <ChainBootStub(void const*, unsigned int)+0x1c>
   21404:	e3a03000 	mov	r3, #0
   21408:	ee073f15 	mcr	15, 0, r3, cr7, cr5, {0}
   2140c:	ee073fd5 	mcr	15, 0, r3, cr7, cr5, {6}
   21410:	f57ff04f 	dsb	sy
   21414:	f57ff06f 	isb	sy
   21418:	e3a03902 	mov	r3, #32768	; 0x8000
   2141c:	e12fff13 	bx	r3

00021420 <EnableChainBoot>:
   21420:	e92d4070 	push	{r4, r5, r6, lr}
   21424:	e3a02040 	mov	r2, #64	; 0x40
   21428:	e1a05000 	mov	r5, r0
   2142c:	e1a04001 	mov	r4, r1
   21430:	e3040ad8 	movw	r0, #19160	; 0x4ad8
   21434:	e3400002 	movt	r0, #2
   21438:	e30919a0 	movw	r1, #39328	; 0x99a0
   2143c:	e3401002 	movt	r1, #2
   21440:	ebffe003 	bl	19454 <assertion_failed>
   21444:	e30b34ec 	movw	r3, #46316	; 0xb4ec
   21448:	e3403002 	movt	r3, #2
   2144c:	e3a02b01 	mov	r2, #1024	; 0x400
   21450:	e30113d4 	movw	r1, #5076	; 0x13d4
   21454:	e3401002 	movt	r1, #2
   21458:	e3a00b1f 	mov	r0, #31744	; 0x7c00
   2145c:	e5835000 	str	r5, [r3]
   21460:	e5834004 	str	r4, [r3, #4]
   21464:	ebffff21 	bl	210f0 <memcpy>
   21468:	e3a03000 	mov	r3, #0
   2146c:	ee073f15 	mcr	15, 0, r3, cr7, cr5, {0}
   21470:	ee073fd5 	mcr	15, 0, r3, cr7, cr5, {6}
   21474:	f57ff04f 	dsb	sy
   21478:	f57ff06f 	isb	sy
   2147c:	e8bd8070 	pop	{r4, r5, r6, pc}

00021480 <IsChainBootEnabled>:
   21480:	e30b34ec 	movw	r3, #46316	; 0xb4ec
   21484:	e3403002 	movt	r3, #2
   21488:	e5930000 	ldr	r0, [r3]
   2148c:	e2900000 	adds	r0, r0, #0
   21490:	13a00001 	movne	r0, #1
   21494:	e12fff1e 	bx	lr

00021498 <DoChainBoot>:
   21498:	e30b34ec 	movw	r3, #46316	; 0xb4ec
   2149c:	e3403002 	movt	r3, #2
   214a0:	e3a02b1f 	mov	r2, #31744	; 0x7c00
   214a4:	e1c300d0 	ldrd	r0, [r3]
   214a8:	e12fff12 	bx	r2

000214ac <InvalidateDataCacheL1Only>:
   214ac:	e92d0070 	push	{r4, r5, r6}
   214b0:	e3a00000 	mov	r0, #0
   214b4:	ee400f10 	mcr	15, 2, r0, cr0, cr0, {0}
   214b8:	ee300f10 	mrc	15, 1, r0, cr0, cr0, {0}
   214bc:	e3071fff 	movw	r1, #32767	; 0x7fff
   214c0:	e00126a0 	and	r2, r1, r0, lsr #13
   214c4:	e30013ff 	movw	r1, #1023	; 0x3ff
   214c8:	e00131a0 	and	r3, r1, r0, lsr #3
   214cc:	e2822001 	add	r2, r2, #1
   214d0:	e2000007 	and	r0, r0, #7
   214d4:	e2800004 	add	r0, r0, #4
   214d8:	e16f1f13 	clz	r1, r3
   214dc:	e2834001 	add	r4, r3, #1
   214e0:	e2422001 	sub	r2, r2, #1
   214e4:	e1a03004 	mov	r3, r4
   214e8:	e2533001 	subs	r3, r3, #1
   214ec:	e1a05113 	lsl	r5, r3, r1
   214f0:	e1a06012 	lsl	r6, r2, r0
   214f4:	e1855006 	orr	r5, r5, r6
   214f8:	ee075f56 	mcr	15, 0, r5, cr7, cr6, {2}
   214fc:	cafffff9 	bgt	214e8 <InvalidateDataCacheL1Only+0x3c>
   21500:	e3520000 	cmp	r2, #0
   21504:	cafffff5 	bgt	214e0 <InvalidateDataCacheL1Only+0x34>
   21508:	f57ff04e 	dsb	st
   2150c:	f57ff06f 	isb	sy
   21510:	e8bd0070 	pop	{r4, r5, r6}
   21514:	e12fff1e 	bx	lr

00021518 <InvalidateDataCache>:
   21518:	e92d0eb0 	push	{r4, r5, r7, r9, sl, fp}
   2151c:	f57ff05f 	dmb	sy
   21520:	ee300f30 	mrc	15, 1, r0, cr0, cr0, {1}
   21524:	e1a03ba0 	lsr	r3, r0, #23
   21528:	e213300e 	ands	r3, r3, #14
   2152c:	0a00001d 	beq	215a8 <InvalidateDataCache+0x90>
   21530:	e3a0a000 	mov	sl, #0
   21534:	e08a20aa 	add	r2, sl, sl, lsr #1
   21538:	e1a01230 	lsr	r1, r0, r2
   2153c:	e2011007 	and	r1, r1, #7
   21540:	e3510002 	cmp	r1, #2
   21544:	ba000014 	blt	2159c <InvalidateDataCache+0x84>
   21548:	e10f9000 	mrs	r9, CPSR
   2154c:	f10c0080 	cpsid	i
   21550:	ee40af10 	mcr	15, 2, sl, cr0, cr0, {0}
   21554:	f57ff06f 	isb	sy
   21558:	ee301f10 	mrc	15, 1, r1, cr0, cr0, {0}
   2155c:	e121f009 	msr	CPSR_c, r9
   21560:	e2012007 	and	r2, r1, #7
   21564:	e2822004 	add	r2, r2, #4
   21568:	e30043ff 	movw	r4, #1023	; 0x3ff
   2156c:	e01441a1 	ands	r4, r4, r1, lsr #3
   21570:	e16f5f14 	clz	r5, r4
   21574:	e3077fff 	movw	r7, #32767	; 0x7fff
   21578:	e01776a1 	ands	r7, r7, r1, lsr #13
   2157c:	e1a09007 	mov	r9, r7
   21580:	e18ab514 	orr	fp, sl, r4, lsl r5
   21584:	e18bb219 	orr	fp, fp, r9, lsl r2
   21588:	ee07bf56 	mcr	15, 0, fp, cr7, cr6, {2}
   2158c:	e2599001 	subs	r9, r9, #1
   21590:	aafffffa 	bge	21580 <InvalidateDataCache+0x68>
   21594:	e2544001 	subs	r4, r4, #1
   21598:	aafffff7 	bge	2157c <InvalidateDataCache+0x64>
   2159c:	e28aa002 	add	sl, sl, #2
   215a0:	e153000a 	cmp	r3, sl
   215a4:	caffffe2 	bgt	21534 <InvalidateDataCache+0x1c>
   215a8:	e3a0a000 	mov	sl, #0
   215ac:	ee40af10 	mcr	15, 2, sl, cr0, cr0, {0}
   215b0:	f57ff04e 	dsb	st
   215b4:	f57ff06f 	isb	sy
   215b8:	e8bd0eb0 	pop	{r4, r5, r7, r9, sl, fp}
   215bc:	e12fff1e 	bx	lr

000215c0 <CleanDataCache>:
   215c0:	e92d0eb0 	push	{r4, r5, r7, r9, sl, fp}
   215c4:	f57ff05f 	dmb	sy
   215c8:	ee300f30 	mrc	15, 1, r0, cr0, cr0, {1}
   215cc:	e1a03ba0 	lsr	r3, r0, #23
   215d0:	e213300e 	ands	r3, r3, #14
   215d4:	0a00001d 	beq	21650 <CleanDataCache+0x90>
   215d8:	e3a0a000 	mov	sl, #0
   215dc:	e08a20aa 	add	r2, sl, sl, lsr #1
   215e0:	e1a01230 	lsr	r1, r0, r2
   215e4:	e2011007 	and	r1, r1, #7
   215e8:	e3510002 	cmp	r1, #2
   215ec:	ba000014 	blt	21644 <CleanDataCache+0x84>
   215f0:	e10f9000 	mrs	r9, CPSR
   215f4:	f10c0080 	cpsid	i
   215f8:	ee40af10 	mcr	15, 2, sl, cr0, cr0, {0}
   215fc:	f57ff06f 	isb	sy
   21600:	ee301f10 	mrc	15, 1, r1, cr0, cr0, {0}
   21604:	e121f009 	msr	CPSR_c, r9
   21608:	e2012007 	and	r2, r1, #7
   2160c:	e2822004 	add	r2, r2, #4
   21610:	e30043ff 	movw	r4, #1023	; 0x3ff
   21614:	e01441a1 	ands	r4, r4, r1, lsr #3
   21618:	e16f5f14 	clz	r5, r4
   2161c:	e3077fff 	movw	r7, #32767	; 0x7fff
   21620:	e01776a1 	ands	r7, r7, r1, lsr #13
   21624:	e1a09007 	mov	r9, r7
   21628:	e18ab514 	orr	fp, sl, r4, lsl r5
   2162c:	e18bb219 	orr	fp, fp, r9, lsl r2
   21630:	ee07bf5a 	mcr	15, 0, fp, cr7, cr10, {2}
   21634:	e2599001 	subs	r9, r9, #1
   21638:	aafffffa 	bge	21628 <CleanDataCache+0x68>
   2163c:	e2544001 	subs	r4, r4, #1
   21640:	aafffff7 	bge	21624 <CleanDataCache+0x64>
   21644:	e28aa002 	add	sl, sl, #2
   21648:	e153000a 	cmp	r3, sl
   2164c:	caffffe2 	bgt	215dc <CleanDataCache+0x1c>
   21650:	e3a0a000 	mov	sl, #0
   21654:	ee40af10 	mcr	15, 2, sl, cr0, cr0, {0}
   21658:	f57ff04e 	dsb	st
   2165c:	f57ff06f 	isb	sy
   21660:	e8bd0eb0 	pop	{r4, r5, r7, r9, sl, fp}
   21664:	e12fff1e 	bx	lr

00021668 <CleanAndInvalidateDataCacheRange>:
   21668:	ee103f30 	mrc	15, 0, r3, cr0, cr0, {1}
   2166c:	e1a03823 	lsr	r3, r3, #16
   21670:	e203300f 	and	r3, r3, #15
   21674:	e3a02004 	mov	r2, #4
   21678:	e1a02312 	lsl	r2, r2, r3
   2167c:	e0801001 	add	r1, r0, r1
   21680:	e2423001 	sub	r3, r2, #1
   21684:	e1c00003 	bic	r0, r0, r3
   21688:	ee070f3e 	mcr	15, 0, r0, cr7, cr14, {1}
   2168c:	e0800002 	add	r0, r0, r2
   21690:	e1500001 	cmp	r0, r1
   21694:	3afffffb 	bcc	21688 <CleanAndInvalidateDataCacheRange+0x20>
   21698:	f57ff04e 	dsb	st
   2169c:	e12fff1e 	bx	lr

000216a0 <CExceptionHandler::CExceptionHandler()>:
   216a0:	e92d4070 	push	{r4, r5, r6, lr}
   216a4:	e30b54f4 	movw	r5, #46324	; 0xb4f4
   216a8:	e3405002 	movt	r5, #2
   216ac:	e1a04000 	mov	r4, r0
   216b0:	e5953000 	ldr	r3, [r5]
   216b4:	e3530000 	cmp	r3, #0
   216b8:	0a000005 	beq	216d4 <CExceptionHandler::CExceptionHandler()+0x34>
   216bc:	e30919b0 	movw	r1, #39344	; 0x99b0
   216c0:	e3401002 	movt	r1, #2
   216c4:	e30809ec 	movw	r0, #35308	; 0x89ec
   216c8:	e3400002 	movt	r0, #2
   216cc:	e3a02030 	mov	r2, #48	; 0x30
   216d0:	ebffdf5f 	bl	19454 <assertion_failed>
   216d4:	e59f1048 	ldr	r1, [pc, #72]	; 21724 <CExceptionHandler::CExceptionHandler()+0x84>
   216d8:	e3a00000 	mov	r0, #0
   216dc:	e59f2044 	ldr	r2, [pc, #68]	; 21728 <CExceptionHandler::CExceptionHandler()+0x88>
   216e0:	e59f3044 	ldr	r3, [pc, #68]	; 2172c <CExceptionHandler::CExceptionHandler()+0x8c>
   216e4:	e1a01141 	asr	r1, r1, #2
   216e8:	e5854000 	str	r4, [r5]
   216ec:	e1a02142 	asr	r2, r2, #2
   216f0:	e2411002 	sub	r1, r1, #2
   216f4:	e1a03143 	asr	r3, r3, #2
   216f8:	e2422002 	sub	r2, r2, #2
   216fc:	e2433002 	sub	r3, r3, #2
   21700:	e38114ea 	orr	r1, r1, #-369098752	; 0xea000000
   21704:	e38224ea 	orr	r2, r2, #-369098752	; 0xea000000
   21708:	e5801004 	str	r1, [r0, #4]
   2170c:	e580200c 	str	r2, [r0, #12]
   21710:	e38334ea 	orr	r3, r3, #-369098752	; 0xea000000
   21714:	e5803010 	str	r3, [r0, #16]
   21718:	eb000250 	bl	22060 <SyncDataAndInstructionCache>
   2171c:	e1a00004 	mov	r0, r4
   21720:	e8bd8070 	pop	{r4, r5, r6, pc}
   21724:	00021ab8 	.word	0x00021ab8
   21728:	00021a10 	.word	0x00021a10
   2172c:	00021a5c 	.word	0x00021a5c

00021730 <CExceptionHandler::~CExceptionHandler()>:
   21730:	e30b34f4 	movw	r3, #46324	; 0xb4f4
   21734:	e3403002 	movt	r3, #2
   21738:	e3a02000 	mov	r2, #0
   2173c:	e5832000 	str	r2, [r3]
   21740:	e12fff1e 	bx	lr

00021744 <CExceptionHandler::Get()>:
   21744:	e92d4010 	push	{r4, lr}
   21748:	e30b44f4 	movw	r4, #46324	; 0xb4f4
   2174c:	e3404002 	movt	r4, #2
   21750:	e5940000 	ldr	r0, [r4]
   21754:	e3500000 	cmp	r0, #0
   21758:	18bd8010 	popne	{r4, pc}
   2175c:	e3a02087 	mov	r2, #135	; 0x87
   21760:	e30919b0 	movw	r1, #39344	; 0x99b0
   21764:	e3401002 	movt	r1, #2
   21768:	e3080b64 	movw	r0, #35684	; 0x8b64
   2176c:	e3400002 	movt	r0, #2
   21770:	ebffdf37 	bl	19454 <assertion_failed>
   21774:	e5940000 	ldr	r0, [r4]
   21778:	e8bd8010 	pop	{r4, pc}

0002177c <CExceptionHandler::Throw(unsigned int)>:
   2177c:	e92d4030 	push	{r4, r5, lr}
   21780:	e1a04001 	mov	r4, r1
   21784:	e24dd01c 	sub	sp, sp, #28
   21788:	e28d0008 	add	r0, sp, #8
   2178c:	ebfff52f 	bl	1ec50 <CString::CString()>
   21790:	ee102fb0 	mrc	15, 0, r2, cr0, cr0, {5}
   21794:	e30919c8 	movw	r1, #39368	; 0x99c8
   21798:	e3401002 	movt	r1, #2
   2179c:	e2022003 	and	r2, r2, #3
   217a0:	e28d0008 	add	r0, sp, #8
   217a4:	ebfff8f2 	bl	1fb74 <CString::Format(char const*, ...)>
   217a8:	ebffe987 	bl	1bdcc <CLogger::Get()>
   217ac:	e1a05000 	mov	r5, r0
   217b0:	e28d0008 	add	r0, sp, #8
   217b4:	ebfff53c 	bl	1ecac <CString::operator char const*() const>
   217b8:	e30b23bc 	movw	r2, #46012	; 0xb3bc
   217bc:	e3402002 	movt	r2, #2
   217c0:	e1a01000 	mov	r1, r0
   217c4:	e30939d0 	movw	r3, #39376	; 0x99d0
   217c8:	e3403002 	movt	r3, #2
   217cc:	e792c104 	ldr	ip, [r2, r4, lsl #2]
   217d0:	e1a00005 	mov	r0, r5
   217d4:	e3a02000 	mov	r2, #0
   217d8:	e58dc000 	str	ip, [sp]
   217dc:	ebffe8b1 	bl	1baa8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   217e0:	e28d0008 	add	r0, sp, #8
   217e4:	ebfff4e7 	bl	1eb88 <CString::~CString()>
   217e8:	e28dd01c 	add	sp, sp, #28
   217ec:	e8bd8030 	pop	{r4, r5, pc}

000217f0 <raise>:
   217f0:	e92d4010 	push	{r4, lr}
   217f4:	e30b44f4 	movw	r4, #46324	; 0xb4f4
   217f8:	e3404002 	movt	r4, #2
   217fc:	e5940000 	ldr	r0, [r4]
   21800:	e3500000 	cmp	r0, #0
   21804:	0a000003 	beq	21818 <raise+0x28>
   21808:	e3a01004 	mov	r1, #4
   2180c:	ebffffda 	bl	2177c <CExceptionHandler::Throw(unsigned int)>
   21810:	e3a00000 	mov	r0, #0
   21814:	e8bd8010 	pop	{r4, pc}
   21818:	e30919b0 	movw	r1, #39344	; 0x99b0
   2181c:	e3401002 	movt	r1, #2
   21820:	e3080b64 	movw	r0, #35684	; 0x8b64
   21824:	e3400002 	movt	r0, #2
   21828:	e3a02087 	mov	r2, #135	; 0x87
   2182c:	ebffdf08 	bl	19454 <assertion_failed>
   21830:	e5940000 	ldr	r0, [r4]
   21834:	eafffff3 	b	21808 <raise+0x18>

00021838 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)>:
   21838:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   2183c:	e1a05001 	mov	r5, r1
   21840:	e1a04002 	mov	r4, r2
   21844:	e24dd030 	sub	sp, sp, #48	; 0x30
   21848:	e28d0020 	add	r0, sp, #32
   2184c:	ebfff4ff 	bl	1ec50 <CString::CString()>
   21850:	ee102fb0 	mrc	15, 0, r2, cr0, cr0, {5}
   21854:	e30919c8 	movw	r1, #39368	; 0x99c8
   21858:	e3401002 	movt	r1, #2
   2185c:	e2022003 	and	r2, r2, #3
   21860:	e28d0020 	add	r0, sp, #32
   21864:	ebfff8c2 	bl	1fb74 <CString::Format(char const*, ...)>
   21868:	e3550002 	cmp	r5, #2
   2186c:	0a00003a 	beq	2195c <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0x124>
   21870:	e3550003 	cmp	r5, #3
   21874:	0a00002a 	beq	21924 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xec>
   21878:	e3a07000 	mov	r7, #0
   2187c:	e1a08007 	mov	r8, r7
   21880:	e3540000 	cmp	r4, #0
   21884:	0a00002a 	beq	21934 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xfc>
   21888:	e594304c 	ldr	r3, [r4, #76]	; 0x4c
   2188c:	e5949048 	ldr	r9, [r4, #72]	; 0x48
   21890:	e203301f 	and	r3, r3, #31
   21894:	e5946044 	ldr	r6, [r4, #68]	; 0x44
   21898:	e3530011 	cmp	r3, #17
   2189c:	0a00002b 	beq	21950 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0x118>
   218a0:	e3530012 	cmp	r3, #18
   218a4:	08940240 	ldmeq	r4, {r6, r9}
   218a8:	e28d0020 	add	r0, sp, #32
   218ac:	ebfff4fe 	bl	1ecac <CString::operator char const*() const>
   218b0:	e1a01000 	mov	r1, r0
   218b4:	e1a00006 	mov	r0, r6
   218b8:	ebffe096 	bl	19b18 <debug_stacktrace(unsigned int const*, char const*)>
   218bc:	ebffe942 	bl	1bdcc <CLogger::Get()>
   218c0:	e1a0a000 	mov	sl, r0
   218c4:	e28d0020 	add	r0, sp, #32
   218c8:	ebfff4f7 	bl	1ecac <CString::operator char const*() const>
   218cc:	e30b33bc 	movw	r3, #46012	; 0xb3bc
   218d0:	e3403002 	movt	r3, #2
   218d4:	e58d9014 	str	r9, [sp, #20]
   218d8:	e1a01000 	mov	r1, r0
   218dc:	e3a02000 	mov	r2, #0
   218e0:	e1a0000a 	mov	r0, sl
   218e4:	e594e04c 	ldr	lr, [r4, #76]	; 0x4c
   218e8:	e7935105 	ldr	r5, [r3, r5, lsl #2]
   218ec:	e30939ec 	movw	r3, #39404	; 0x99ec
   218f0:	e3403002 	movt	r3, #2
   218f4:	e594c050 	ldr	ip, [r4, #80]	; 0x50
   218f8:	e58dc004 	str	ip, [sp, #4]
   218fc:	e58de018 	str	lr, [sp, #24]
   21900:	e58d6010 	str	r6, [sp, #16]
   21904:	e58d700c 	str	r7, [sp, #12]
   21908:	e58d8008 	str	r8, [sp, #8]
   2190c:	e58d5000 	str	r5, [sp]
   21910:	ebffe864 	bl	1baa8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   21914:	e28d0020 	add	r0, sp, #32
   21918:	ebfff49a 	bl	1eb88 <CString::~CString()>
   2191c:	e28dd030 	add	sp, sp, #48	; 0x30
   21920:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   21924:	ee158f10 	mrc	15, 0, r8, cr5, cr0, {0}
   21928:	ee167f10 	mrc	15, 0, r7, cr6, cr0, {0}
   2192c:	e3540000 	cmp	r4, #0
   21930:	1affffd4 	bne	21888 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0x50>
   21934:	e30919b0 	movw	r1, #39344	; 0x99b0
   21938:	e3401002 	movt	r1, #2
   2193c:	e30909e0 	movw	r0, #39392	; 0x99e0
   21940:	e3400002 	movt	r0, #2
   21944:	e3a02069 	mov	r2, #105	; 0x69
   21948:	ebffdec1 	bl	19454 <assertion_failed>
   2194c:	eaffffcd 	b	21888 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0x50>
   21950:	e594900c 	ldr	r9, [r4, #12]
   21954:	e5946008 	ldr	r6, [r4, #8]
   21958:	eaffffd2 	b	218a8 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0x70>
   2195c:	ee158f30 	mrc	15, 0, r8, cr5, cr0, {1}
   21960:	ee167f50 	mrc	15, 0, r7, cr6, cr0, {2}
   21964:	eaffffc5 	b	21880 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0x48>

00021968 <ExceptionHandler>:
   21968:	e92d4070 	push	{r4, r5, r6, lr}
   2196c:	e1a05000 	mov	r5, r0
   21970:	e1a06001 	mov	r6, r1
   21974:	ebffe62b 	bl	1b228 <CInterruptSystem::DisableFIQ()>
   21978:	f1080040 	cpsie	f
   2197c:	e30b44f4 	movw	r4, #46324	; 0xb4f4
   21980:	e3404002 	movt	r4, #2
   21984:	e5940000 	ldr	r0, [r4]
   21988:	e3500000 	cmp	r0, #0
   2198c:	0a000003 	beq	219a0 <ExceptionHandler+0x38>
   21990:	e1a02006 	mov	r2, r6
   21994:	e1a01005 	mov	r1, r5
   21998:	e8bd4070 	pop	{r4, r5, r6, lr}
   2199c:	eaffffa5 	b	21838 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)>
   219a0:	e3a02087 	mov	r2, #135	; 0x87
   219a4:	e30919b0 	movw	r1, #39344	; 0x99b0
   219a8:	e3401002 	movt	r1, #2
   219ac:	e3080b64 	movw	r0, #35684	; 0x8b64
   219b0:	e3400002 	movt	r0, #2
   219b4:	ebffdea6 	bl	19454 <assertion_failed>
   219b8:	e5940000 	ldr	r0, [r4]
   219bc:	e1a02006 	mov	r2, r6
   219c0:	e1a01005 	mov	r1, r5
   219c4:	e8bd4070 	pop	{r4, r5, r6, lr}
   219c8:	eaffff9a 	b	21838 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)>

000219cc <UndefinedInstructionInternal>:
   219cc:	e24dd004 	sub	sp, sp, #4
   219d0:	e24ee004 	sub	lr, lr, #4
   219d4:	e92d4000 	stmfd	sp!, {lr}
   219d8:	e14fe000 	mrs	lr, SPSR
   219dc:	e92d4000 	stmfd	sp!, {lr}
   219e0:	e94d7fff 	stmdb	sp, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}^
   219e4:	e24dd03c 	sub	sp, sp, #60	; 0x3c
   219e8:	e1a0100d 	mov	r1, sp
   219ec:	f1020012 	cps	#18
   219f0:	e1a0200d 	mov	r2, sp
   219f4:	e1a0300e 	mov	r3, lr
   219f8:	f1020011 	cps	#17
   219fc:	e1a0400d 	mov	r4, sp
   21a00:	e1a0500e 	mov	r5, lr
   21a04:	f102001f 	cps	#31
   21a08:	e1a0d001 	mov	sp, r1
   21a0c:	e92d003c 	push	{r2, r3, r4, r5}
   21a10:	e1a0100d 	mov	r1, sp
   21a14:	e3a00001 	mov	r0, #1
   21a18:	eaffffd2 	b	21968 <ExceptionHandler>

00021a1c <PrefetchAbortStub>:
   21a1c:	e24dd004 	sub	sp, sp, #4
   21a20:	e24ee004 	sub	lr, lr, #4
   21a24:	e92d4000 	stmfd	sp!, {lr}
   21a28:	e14fe000 	mrs	lr, SPSR
   21a2c:	e92d4000 	stmfd	sp!, {lr}
   21a30:	e94d7fff 	stmdb	sp, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}^
   21a34:	e24dd03c 	sub	sp, sp, #60	; 0x3c
   21a38:	e1a0100d 	mov	r1, sp
   21a3c:	f1020012 	cps	#18
   21a40:	e1a0200d 	mov	r2, sp
   21a44:	e1a0300e 	mov	r3, lr
   21a48:	f1020011 	cps	#17
   21a4c:	e1a0400d 	mov	r4, sp
   21a50:	e1a0500e 	mov	r5, lr
   21a54:	f102001f 	cps	#31
   21a58:	e1a0d001 	mov	sp, r1
   21a5c:	e92d003c 	push	{r2, r3, r4, r5}
   21a60:	e1a0100d 	mov	r1, sp
   21a64:	e3a00002 	mov	r0, #2
   21a68:	eaffffbe 	b	21968 <ExceptionHandler>

00021a6c <DataAbortStub>:
   21a6c:	e24dd004 	sub	sp, sp, #4
   21a70:	e24ee008 	sub	lr, lr, #8
   21a74:	e92d4000 	stmfd	sp!, {lr}
   21a78:	e14fe000 	mrs	lr, SPSR
   21a7c:	e92d4000 	stmfd	sp!, {lr}
   21a80:	e94d7fff 	stmdb	sp, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}^
   21a84:	e24dd03c 	sub	sp, sp, #60	; 0x3c
   21a88:	e1a0100d 	mov	r1, sp
   21a8c:	f1020012 	cps	#18
   21a90:	e1a0200d 	mov	r2, sp
   21a94:	e1a0300e 	mov	r3, lr
   21a98:	f1020011 	cps	#17
   21a9c:	e1a0400d 	mov	r4, sp
   21aa0:	e1a0500e 	mov	r5, lr
   21aa4:	f102001f 	cps	#31
   21aa8:	e1a0d001 	mov	sp, r1
   21aac:	e92d003c 	push	{r2, r3, r4, r5}
   21ab0:	e1a0100d 	mov	r1, sp
   21ab4:	e3a00003 	mov	r0, #3
   21ab8:	eaffffaa 	b	21968 <ExceptionHandler>

00021abc <UndefinedInstructionStub>:
   21abc:	e92d4001 	push	{r0, lr}
   21ac0:	eef80a10 	vmrs	r0, fpexc
   21ac4:	e3100102 	tst	r0, #-2147483648	; 0x80000000
   21ac8:	0affffbf 	beq	219cc <UndefinedInstructionInternal>
   21acc:	e3c00102 	bic	r0, r0, #-2147483648	; 0x80000000
   21ad0:	eee80a10 	vmsr	fpexc, r0
   21ad4:	e8fd8001 	ldm	sp!, {r0, pc}^

00021ad8 <IRQStub>:
   21ad8:	e24ee004 	sub	lr, lr, #4
   21adc:	e92d500f 	push	{r0, r1, r2, r3, ip, lr}
   21ae0:	ebffe640 	bl	1b3e8 <InterruptHandler>
   21ae4:	e8fd900f 	ldm	sp!, {r0, r1, r2, r3, ip, pc}^

00021ae8 <FIQStub>:
   21ae8:	e24ee004 	sub	lr, lr, #4
   21aec:	e92d500f 	push	{r0, r1, r2, r3, ip, lr}
   21af0:	e59f2024 	ldr	r2, [pc, #36]	; 21b1c <FIQStub+0x34>
   21af4:	e5921000 	ldr	r1, [r2]
   21af8:	e3510000 	cmp	r1, #0
   21afc:	0a000002 	beq	21b0c <FIQStub+0x24>
   21b00:	e5920004 	ldr	r0, [r2, #4]
   21b04:	e12fff31 	blx	r1
   21b08:	e8fd900f 	ldm	sp!, {r0, r1, r2, r3, ip, pc}^
   21b0c:	e59f100c 	ldr	r1, [pc, #12]	; 21b20 <FIQStub+0x38>
   21b10:	e3a00000 	mov	r0, #0
   21b14:	e5810000 	str	r0, [r1]
   21b18:	e8fd900f 	ldm	sp!, {r0, r1, r2, r3, ip, pc}^
   21b1c:	0002b3d0 	.word	0x0002b3d0
   21b20:	3f00b20c 	.word	0x3f00b20c

00021b24 <CMemorySystem::Destructor() [clone .part.0]>:
   21b24:	e92d4010 	push	{r4, lr}
   21b28:	ee113f10 	mrc	15, 0, r3, cr1, cr0, {0}
   21b2c:	e3c33005 	bic	r3, r3, #5
   21b30:	ee013f10 	mcr	15, 0, r3, cr1, cr0, {0}
   21b34:	ebfffea1 	bl	215c0 <CleanDataCache>
   21b38:	ebfffe76 	bl	21518 <InvalidateDataCache>
   21b3c:	e3a03000 	mov	r3, #0
   21b40:	ee083f17 	mcr	15, 0, r3, cr8, cr7, {0}
   21b44:	f57ff04f 	dsb	sy
   21b48:	e8bd8010 	pop	{r4, pc}

00021b4c <CMemorySystem::~CMemorySystem()>:
   21b4c:	e30b34f8 	movw	r3, #46328	; 0xb4f8
   21b50:	e3403002 	movt	r3, #2
   21b54:	e5932000 	ldr	r2, [r3]
   21b58:	e1500002 	cmp	r0, r2
   21b5c:	112fff1e 	bxne	lr
   21b60:	e5d02000 	ldrb	r2, [r0]
   21b64:	e3a01000 	mov	r1, #0
   21b68:	e5831000 	str	r1, [r3]
   21b6c:	e1520001 	cmp	r2, r1
   21b70:	012fff1e 	bxeq	lr
   21b74:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   21b78:	e24dd00c 	sub	sp, sp, #12
   21b7c:	e58d0004 	str	r0, [sp, #4]
   21b80:	ebffffe7 	bl	21b24 <CMemorySystem::Destructor() [clone .part.0]>
   21b84:	e59d0004 	ldr	r0, [sp, #4]
   21b88:	e28dd00c 	add	sp, sp, #12
   21b8c:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

00021b90 <CMemorySystem::Destructor()>:
   21b90:	e30b34f8 	movw	r3, #46328	; 0xb4f8
   21b94:	e3403002 	movt	r3, #2
   21b98:	e5932000 	ldr	r2, [r3]
   21b9c:	e1520000 	cmp	r2, r0
   21ba0:	112fff1e 	bxne	lr
   21ba4:	e5d22000 	ldrb	r2, [r2]
   21ba8:	e3a01000 	mov	r1, #0
   21bac:	e5831000 	str	r1, [r3]
   21bb0:	e1520001 	cmp	r2, r1
   21bb4:	012fff1e 	bxeq	lr
   21bb8:	eaffffd9 	b	21b24 <CMemorySystem::Destructor() [clone .part.0]>

00021bbc <CMemorySystem::GetMemSize() const>:
   21bbc:	e92d4010 	push	{r4, lr}
   21bc0:	e30b44f8 	movw	r4, #46328	; 0xb4f8
   21bc4:	e3404002 	movt	r4, #2
   21bc8:	e5943000 	ldr	r3, [r4]
   21bcc:	e3530000 	cmp	r3, #0
   21bd0:	0a000001 	beq	21bdc <CMemorySystem::GetMemSize() const+0x20>
   21bd4:	e5930004 	ldr	r0, [r3, #4]
   21bd8:	e8bd8010 	pop	{r4, pc}
   21bdc:	e3a02088 	mov	r2, #136	; 0x88
   21be0:	e3091a74 	movw	r1, #39540	; 0x9a74
   21be4:	e3401002 	movt	r1, #2
   21be8:	e3080b64 	movw	r0, #35684	; 0x8b64
   21bec:	e3400002 	movt	r0, #2
   21bf0:	ebffde17 	bl	19454 <assertion_failed>
   21bf4:	e5943000 	ldr	r3, [r4]
   21bf8:	e5930004 	ldr	r0, [r3, #4]
   21bfc:	e8bd8010 	pop	{r4, pc}

00021c00 <CMemorySystem::Get()>:
   21c00:	e92d4010 	push	{r4, lr}
   21c04:	e30b44f8 	movw	r4, #46328	; 0xb4f8
   21c08:	e3404002 	movt	r4, #2
   21c0c:	e5940000 	ldr	r0, [r4]
   21c10:	e3500000 	cmp	r0, #0
   21c14:	18bd8010 	popne	{r4, pc}
   21c18:	e3a0208e 	mov	r2, #142	; 0x8e
   21c1c:	e3091a74 	movw	r1, #39540	; 0x9a74
   21c20:	e3401002 	movt	r1, #2
   21c24:	e3080b64 	movw	r0, #35684	; 0x8b64
   21c28:	e3400002 	movt	r0, #2
   21c2c:	ebffde08 	bl	19454 <assertion_failed>
   21c30:	e5940000 	ldr	r0, [r4]
   21c34:	e8bd8010 	pop	{r4, pc}

00021c38 <CMemorySystem::EnableMMU()>:
   21c38:	e5d03000 	ldrb	r3, [r0]
   21c3c:	e92d4010 	push	{r4, lr}
   21c40:	e1a04000 	mov	r4, r0
   21c44:	e3530000 	cmp	r3, #0
   21c48:	0a00001a 	beq	21cb8 <CMemorySystem::EnableMMU()+0x80>
   21c4c:	ee113f30 	mrc	15, 0, r3, cr1, cr0, {1}
   21c50:	e3833040 	orr	r3, r3, #64	; 0x40
   21c54:	ee013f30 	mcr	15, 0, r3, cr1, cr0, {1}
   21c58:	ee103f70 	mrc	15, 0, r3, cr0, cr0, {3}
   21c5c:	e3130001 	tst	r3, #1
   21c60:	1a00001b 	bne	21cd4 <CMemorySystem::EnableMMU()+0x9c>
   21c64:	e3a03000 	mov	r3, #0
   21c68:	ee023f50 	mcr	15, 0, r3, cr2, cr0, {2}
   21c6c:	e5940008 	ldr	r0, [r4, #8]
   21c70:	e1500003 	cmp	r0, r3
   21c74:	0a00001d 	beq	21cf0 <CMemorySystem::EnableMMU()+0xb8>
   21c78:	eb0000a5 	bl	21f14 <CPageTable::GetBaseAddress() const>
   21c7c:	ee020f10 	mcr	15, 0, r0, cr2, cr0, {0}
   21c80:	e3a03001 	mov	r3, #1
   21c84:	ee033f10 	mcr	15, 0, r3, cr3, cr0, {0}
   21c88:	ebfffe07 	bl	214ac <InvalidateDataCacheL1Only>
   21c8c:	e3a03000 	mov	r3, #0
   21c90:	ee073f15 	mcr	15, 0, r3, cr7, cr5, {0}
   21c94:	ee073fd5 	mcr	15, 0, r3, cr7, cr5, {6}
   21c98:	ee083f17 	mcr	15, 0, r3, cr8, cr7, {0}
   21c9c:	f57ff04f 	dsb	sy
   21ca0:	f57ff06f 	isb	sy
   21ca4:	ee113f10 	mrc	15, 0, r3, cr1, cr0, {0}
   21ca8:	e3833b06 	orr	r3, r3, #6144	; 0x1800
   21cac:	e3833005 	orr	r3, r3, #5
   21cb0:	ee013f10 	mcr	15, 0, r3, cr1, cr0, {0}
   21cb4:	e8bd8010 	pop	{r4, pc}
   21cb8:	e3091a74 	movw	r1, #39540	; 0x9a74
   21cbc:	e3401002 	movt	r1, #2
   21cc0:	e3090a80 	movw	r0, #39552	; 0x9a80
   21cc4:	e3400002 	movt	r0, #2
   21cc8:	e3a02094 	mov	r2, #148	; 0x94
   21ccc:	ebffdde0 	bl	19454 <assertion_failed>
   21cd0:	eaffffdd 	b	21c4c <CMemorySystem::EnableMMU()+0x14>
   21cd4:	e3091a74 	movw	r1, #39540	; 0x9a74
   21cd8:	e3401002 	movt	r1, #2
   21cdc:	e3090a90 	movw	r0, #39568	; 0x9a90
   21ce0:	e3400002 	movt	r0, #2
   21ce4:	e3a020a1 	mov	r2, #161	; 0xa1
   21ce8:	ebffddd9 	bl	19454 <assertion_failed>
   21cec:	eaffffdc 	b	21c64 <CMemorySystem::EnableMMU()+0x2c>
   21cf0:	e3091a74 	movw	r1, #39540	; 0x9a74
   21cf4:	e3401002 	movt	r1, #2
   21cf8:	e3090abc 	movw	r0, #39612	; 0x9abc
   21cfc:	e3400002 	movt	r0, #2
   21d00:	e3a020a7 	mov	r2, #167	; 0xa7
   21d04:	ebffddd2 	bl	19454 <assertion_failed>
   21d08:	e5940008 	ldr	r0, [r4, #8]
   21d0c:	eaffffd9 	b	21c78 <CMemorySystem::EnableMMU()+0x40>

00021d10 <CMemorySystem::CMemorySystem(bool)>:
   21d10:	e30b34f8 	movw	r3, #46328	; 0xb4f8
   21d14:	e3403002 	movt	r3, #2
   21d18:	e92d4030 	push	{r4, r5, lr}
   21d1c:	e3a02000 	mov	r2, #0
   21d20:	e1a04000 	mov	r4, r0
   21d24:	e5935000 	ldr	r5, [r3]
   21d28:	e24dd02c 	sub	sp, sp, #44	; 0x2c
   21d2c:	e5c01000 	strb	r1, [r0]
   21d30:	e1550002 	cmp	r5, r2
   21d34:	e5802004 	str	r2, [r0, #4]
   21d38:	e5802008 	str	r2, [r0, #8]
   21d3c:	0a000002 	beq	21d4c <CMemorySystem::CMemorySystem(bool)+0x3c>
   21d40:	e1a00004 	mov	r0, r4
   21d44:	e28dd02c 	add	sp, sp, #44	; 0x2c
   21d48:	e8bd8030 	pop	{r4, r5, pc}
   21d4c:	e3a01001 	mov	r1, #1
   21d50:	e28d000c 	add	r0, sp, #12
   21d54:	e5834000 	str	r4, [r3]
   21d58:	ebffdde1 	bl	194e4 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   21d5c:	e3a03014 	mov	r3, #20
   21d60:	e58d5000 	str	r5, [sp]
   21d64:	e28d000c 	add	r0, sp, #12
   21d68:	e3a01005 	mov	r1, #5
   21d6c:	e3401001 	movt	r1, #1
   21d70:	e08d2003 	add	r2, sp, r3
   21d74:	ebffde27 	bl	19618 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   21d78:	e3500000 	cmp	r0, #0
   21d7c:	1a000014 	bne	21dd4 <CMemorySystem::CMemorySystem(bool)+0xc4>
   21d80:	e3a01303 	mov	r1, #201326592	; 0xc000000
   21d84:	e1cd02f0 	strd	r0, [sp, #32]
   21d88:	e5841004 	str	r1, [r4, #4]
   21d8c:	eb0000c7 	bl	220b0 <mem_init>
   21d90:	e5d43000 	ldrb	r3, [r4]
   21d94:	e3530000 	cmp	r3, #0
   21d98:	0a000008 	beq	21dc0 <CMemorySystem::CMemorySystem(bool)+0xb0>
   21d9c:	e3a00004 	mov	r0, #4
   21da0:	eb0000b6 	bl	22080 <operator new(unsigned int)>
   21da4:	e5941004 	ldr	r1, [r4, #4]
   21da8:	e1a05000 	mov	r5, r0
   21dac:	eb000031 	bl	21e78 <CPageTable::CPageTable(unsigned int)>
   21db0:	e1a00004 	mov	r0, r4
   21db4:	e5845008 	str	r5, [r4, #8]
   21db8:	ebffff9e 	bl	21c38 <CMemorySystem::EnableMMU()>
   21dbc:	ebfff362 	bl	1eb4c <CSpinLock::Enable()>
   21dc0:	e28d000c 	add	r0, sp, #12
   21dc4:	ebffddcd 	bl	19500 <CBcmPropertyTags::~CBcmPropertyTags()>
   21dc8:	e1a00004 	mov	r0, r4
   21dcc:	e28dd02c 	add	sp, sp, #44	; 0x2c
   21dd0:	e8bd8030 	pop	{r4, r5, pc}
   21dd4:	e59d0020 	ldr	r0, [sp, #32]
   21dd8:	e3500000 	cmp	r0, #0
   21ddc:	059d1024 	ldreq	r1, [sp, #36]	; 0x24
   21de0:	0affffe8 	beq	21d88 <CMemorySystem::CMemorySystem(bool)+0x78>
   21de4:	e3091a74 	movw	r1, #39540	; 0x9a74
   21de8:	e3401002 	movt	r1, #2
   21dec:	e3090ad0 	movw	r0, #39632	; 0x9ad0
   21df0:	e3400002 	movt	r0, #2
   21df4:	e3a02047 	mov	r2, #71	; 0x47
   21df8:	ebffdd95 	bl	19454 <assertion_failed>
   21dfc:	e1cd02d0 	ldrd	r0, [sp, #32]
   21e00:	eaffffe0 	b	21d88 <CMemorySystem::CMemorySystem(bool)+0x78>

00021e04 <CMemorySystem::InitializeSecondary()>:
   21e04:	e92d4010 	push	{r4, lr}
   21e08:	e30b44f8 	movw	r4, #46328	; 0xb4f8
   21e0c:	e3404002 	movt	r4, #2
   21e10:	e5940000 	ldr	r0, [r4]
   21e14:	e3500000 	cmp	r0, #0
   21e18:	0a00000b 	beq	21e4c <CMemorySystem::InitializeSecondary()+0x48>
   21e1c:	e5d03000 	ldrb	r3, [r0]
   21e20:	e3530000 	cmp	r3, #0
   21e24:	1a000006 	bne	21e44 <CMemorySystem::InitializeSecondary()+0x40>
   21e28:	e3091a74 	movw	r1, #39540	; 0x9a74
   21e2c:	e3401002 	movt	r1, #2
   21e30:	e3090aec 	movw	r0, #39660	; 0x9aec
   21e34:	e3400002 	movt	r0, #2
   21e38:	e3a0207f 	mov	r2, #127	; 0x7f
   21e3c:	ebffdd84 	bl	19454 <assertion_failed>
   21e40:	e5940000 	ldr	r0, [r4]
   21e44:	e8bd4010 	pop	{r4, lr}
   21e48:	eaffff7a 	b	21c38 <CMemorySystem::EnableMMU()>
   21e4c:	e3091a74 	movw	r1, #39540	; 0x9a74
   21e50:	e3401002 	movt	r1, #2
   21e54:	e3080b64 	movw	r0, #35684	; 0x8b64
   21e58:	e3400002 	movt	r0, #2
   21e5c:	e3a0207e 	mov	r2, #126	; 0x7e
   21e60:	ebffdd7b 	bl	19454 <assertion_failed>
   21e64:	e5940000 	ldr	r0, [r4]
   21e68:	eaffffeb 	b	21e1c <CMemorySystem::InitializeSecondary()+0x18>

00021e6c <CMemorySystem::GetCoherentPage(unsigned int)>:
   21e6c:	e1a00600 	lsl	r0, r0, #12
   21e70:	e2800501 	add	r0, r0, #4194304	; 0x400000
   21e74:	e12fff1e 	bx	lr

00021e78 <CPageTable::CPageTable(unsigned int)>:
   21e78:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   21e7c:	e1a07000 	mov	r7, r0
   21e80:	e3a009ba 	mov	r0, #3047424	; 0x2e8000
   21e84:	e304e1b4 	movw	lr, #16820	; 0x41b4
   21e88:	e340e002 	movt	lr, #2
   21e8c:	e3008412 	movw	r8, #1042	; 0x412
   21e90:	e3408041 	movt	r8, #65	; 0x41
   21e94:	e30f6ffe 	movw	r6, #65534	; 0xfffe
   21e98:	e3446003 	movt	r6, #16387	; 0x4003
   21e9c:	e3009416 	movw	r9, #1046	; 0x416
   21ea0:	e3409001 	movt	r9, #1
   21ea4:	e300541e 	movw	r5, #1054	; 0x41e
   21ea8:	e3405001 	movt	r5, #1
   21eac:	e300440e 	movw	r4, #1038	; 0x40e
   21eb0:	e3404001 	movt	r4, #1
   21eb4:	e1a02000 	mov	r2, r0
   21eb8:	e3a03000 	mov	r3, #0
   21ebc:	e5870000 	str	r0, [r7]
   21ec0:	e15e0003 	cmp	lr, r3
   21ec4:	8183c004 	orrhi	ip, r3, r4
   21ec8:	8a000007 	bhi	21eec <CPageTable::CPageTable(unsigned int)+0x74>
   21ecc:	e1a0c003 	mov	ip, r3
   21ed0:	e3530501 	cmp	r3, #4194304	; 0x400000
   21ed4:	0a00000b 	beq	21f08 <CPageTable::CPageTable(unsigned int)+0x90>
   21ed8:	e1510003 	cmp	r1, r3
   21edc:	8183c005 	orrhi	ip, r3, r5
   21ee0:	8a000001 	bhi	21eec <CPageTable::CPageTable(unsigned int)+0x74>
   21ee4:	e1530006 	cmp	r3, r6
   21ee8:	9183c009 	orrls	ip, r3, r9
   21eec:	e482c004 	str	ip, [r2], #4
   21ef0:	e2833601 	add	r3, r3, #1048576	; 0x100000
   21ef4:	e35209bb 	cmp	r2, #3063808	; 0x2ec000
   21ef8:	1afffff0 	bne	21ec0 <CPageTable::CPageTable(unsigned int)+0x48>
   21efc:	ebfffdaf 	bl	215c0 <CleanDataCache>
   21f00:	e1a00007 	mov	r0, r7
   21f04:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   21f08:	e1a0c008 	mov	ip, r8
   21f0c:	eafffff6 	b	21eec <CPageTable::CPageTable(unsigned int)+0x74>

00021f10 <CPageTable::~CPageTable()>:
   21f10:	e12fff1e 	bx	lr

00021f14 <CPageTable::GetBaseAddress() const>:
   21f14:	e5900000 	ldr	r0, [r0]
   21f18:	e3800059 	orr	r0, r0, #89	; 0x59
   21f1c:	e12fff1e 	bx	lr

00021f20 <CurrentExecutionLevel>:
   21f20:	e10f0000 	mrs	r0, CPSR
   21f24:	e3100040 	tst	r0, #64	; 0x40
   21f28:	07e003d0 	ubfxeq	r0, r0, #7, #1
   21f2c:	13a00002 	movne	r0, #2
   21f30:	e12fff1e 	bx	lr

00021f34 <EnterCritical>:
   21f34:	e2403001 	sub	r3, r0, #1
   21f38:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   21f3c:	e3530001 	cmp	r3, #1
   21f40:	e1a06000 	mov	r6, r0
   21f44:	9a000005 	bls	21f60 <EnterCritical+0x2c>
   21f48:	e3091b04 	movw	r1, #39684	; 0x9b04
   21f4c:	e3401002 	movt	r1, #2
   21f50:	e3090b14 	movw	r0, #39700	; 0x9b14
   21f54:	e3400002 	movt	r0, #2
   21f58:	e3a02034 	mov	r2, #52	; 0x34
   21f5c:	ebffdd3c 	bl	19454 <assertion_failed>
   21f60:	ee105fb0 	mrc	15, 0, r5, cr0, cr0, {5}
   21f64:	e2055003 	and	r5, r5, #3
   21f68:	e10f7000 	mrs	r7, CPSR
   21f6c:	e3560002 	cmp	r6, #2
   21f70:	0a000001 	beq	21f7c <EnterCritical+0x48>
   21f74:	e3170040 	tst	r7, #64	; 0x40
   21f78:	1a000011 	bne	21fc4 <EnterCritical+0x90>
   21f7c:	f10c00c0 	cpsid	if
   21f80:	e30b44fc 	movw	r4, #46332	; 0xb4fc
   21f84:	e3404002 	movt	r4, #2
   21f88:	e7943105 	ldr	r3, [r4, r5, lsl #2]
   21f8c:	e3530013 	cmp	r3, #19
   21f90:	8a000012 	bhi	21fe0 <EnterCritical+0xac>
   21f94:	e7943105 	ldr	r3, [r4, r5, lsl #2]
   21f98:	e3a02014 	mov	r2, #20
   21f9c:	e3560001 	cmp	r6, #1
   21fa0:	e2831001 	add	r1, r3, #1
   21fa4:	e7841105 	str	r1, [r4, r5, lsl #2]
   21fa8:	e0253592 	mla	r5, r2, r5, r3
   21fac:	e0844105 	add	r4, r4, r5, lsl #2
   21fb0:	e5847010 	str	r7, [r4, #16]
   21fb4:	1a000000 	bne	21fbc <EnterCritical+0x88>
   21fb8:	f1080040 	cpsie	f
   21fbc:	f57ff05f 	dmb	sy
   21fc0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   21fc4:	e3091b04 	movw	r1, #39684	; 0x9b04
   21fc8:	e3401002 	movt	r1, #2
   21fcc:	e3090b4c 	movw	r0, #39756	; 0x9b4c
   21fd0:	e3400002 	movt	r0, #2
   21fd4:	e3a0203e 	mov	r2, #62	; 0x3e
   21fd8:	ebffdd1d 	bl	19454 <assertion_failed>
   21fdc:	eaffffe6 	b	21f7c <EnterCritical+0x48>
   21fe0:	e3091b04 	movw	r1, #39684	; 0x9b04
   21fe4:	e3401002 	movt	r1, #2
   21fe8:	e3090b7c 	movw	r0, #39804	; 0x9b7c
   21fec:	e3400002 	movt	r0, #2
   21ff0:	e3a02042 	mov	r2, #66	; 0x42
   21ff4:	ebffdd16 	bl	19454 <assertion_failed>
   21ff8:	eaffffe5 	b	21f94 <EnterCritical+0x60>

00021ffc <LeaveCritical>:
   21ffc:	e92d4070 	push	{r4, r5, r6, lr}
   22000:	ee105fb0 	mrc	15, 0, r5, cr0, cr0, {5}
   22004:	e2055003 	and	r5, r5, #3
   22008:	f57ff05f 	dmb	sy
   2200c:	f10c0040 	cpsid	f
   22010:	e30b44fc 	movw	r4, #46332	; 0xb4fc
   22014:	e3404002 	movt	r4, #2
   22018:	e7943105 	ldr	r3, [r4, r5, lsl #2]
   2201c:	e3530000 	cmp	r3, #0
   22020:	1a000005 	bne	2203c <LeaveCritical+0x40>
   22024:	e3091b04 	movw	r1, #39684	; 0x9b04
   22028:	e3401002 	movt	r1, #2
   2202c:	e3090bac 	movw	r0, #39852	; 0x9bac
   22030:	e3400002 	movt	r0, #2
   22034:	e3a02057 	mov	r2, #87	; 0x57
   22038:	ebffdd05 	bl	19454 <assertion_failed>
   2203c:	e7943105 	ldr	r3, [r4, r5, lsl #2]
   22040:	e3a02014 	mov	r2, #20
   22044:	e2433001 	sub	r3, r3, #1
   22048:	e7843105 	str	r3, [r4, r5, lsl #2]
   2204c:	e0253592 	mla	r5, r2, r5, r3
   22050:	e0844105 	add	r4, r4, r5, lsl #2
   22054:	e5943010 	ldr	r3, [r4, #16]
   22058:	e121f003 	msr	CPSR_c, r3
   2205c:	e8bd8070 	pop	{r4, r5, r6, pc}

00022060 <SyncDataAndInstructionCache>:
   22060:	e92d4010 	push	{r4, lr}
   22064:	ebfffd55 	bl	215c0 <CleanDataCache>
   22068:	e3a03000 	mov	r3, #0
   2206c:	ee073f15 	mcr	15, 0, r3, cr7, cr5, {0}
   22070:	ee073fd5 	mcr	15, 0, r3, cr7, cr5, {6}
   22074:	f57ff04f 	dsb	sy
   22078:	f57ff06f 	isb	sy
   2207c:	e8bd8010 	pop	{r4, pc}

00022080 <operator new(unsigned int)>:
   22080:	ea000022 	b	22110 <malloc>

00022084 <operator new[](unsigned int)>:
   22084:	ea000021 	b	22110 <malloc>

00022088 <operator delete(void*)>:
   22088:	ea000086 	b	222a8 <free>

0002208c <operator delete[](void*)>:
   2208c:	ea000085 	b	222a8 <free>

00022090 <operator delete(void*, unsigned int)>:
   22090:	ea000084 	b	222a8 <free>

00022094 <operator delete[](void*, unsigned int)>:
   22094:	ea000083 	b	222a8 <free>

00022098 <__cxa_pure_virtual>:
   22098:	e3091bc8 	movw	r1, #39880	; 0x9bc8
   2209c:	e3401002 	movt	r1, #2
   220a0:	e3040ad8 	movw	r0, #19160	; 0x4ad8
   220a4:	e3400002 	movt	r0, #2
   220a8:	e3a02018 	mov	r2, #24
   220ac:	eaffdce8 	b	19454 <assertion_failed>

000220b0 <mem_init>:
   220b0:	e0801001 	add	r1, r0, r1
   220b4:	e30b264c 	movw	r2, #46668	; 0xb64c
   220b8:	e3402002 	movt	r2, #2
   220bc:	e24139ff 	sub	r3, r1, #4177920	; 0x3fc000
   220c0:	e3500605 	cmp	r0, #5242880	; 0x500000
   220c4:	e2433a03 	sub	r3, r3, #12288	; 0x3000
   220c8:	33a00605 	movcc	r0, #5242880	; 0x500000
   220cc:	e3c33eff 	bic	r3, r3, #4080	; 0xff0
   220d0:	e582100c 	str	r1, [r2, #12]
   220d4:	e3c3300f 	bic	r3, r3, #15
   220d8:	e2411501 	sub	r1, r1, #4194304	; 0x400000
   220dc:	e5820000 	str	r0, [r2]
   220e0:	e982000a 	stmib	r2, {r1, r3}
   220e4:	e12fff1e 	bx	lr

000220e8 <mem_get_size>:
   220e8:	e30b364c 	movw	r3, #46668	; 0xb64c
   220ec:	e3403002 	movt	r3, #2
   220f0:	e5930004 	ldr	r0, [r3, #4]
   220f4:	e5931000 	ldr	r1, [r3]
   220f8:	e593200c 	ldr	r2, [r3, #12]
   220fc:	e5933008 	ldr	r3, [r3, #8]
   22100:	e0400001 	sub	r0, r0, r1
   22104:	e0423003 	sub	r3, r2, r3
   22108:	e0800003 	add	r0, r0, r3
   2210c:	e12fff1e 	bx	lr

00022110 <malloc>:
   22110:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   22114:	e30b764c 	movw	r7, #46668	; 0xb64c
   22118:	e3407002 	movt	r7, #2
   2211c:	e1a06000 	mov	r6, r0
   22120:	e5973000 	ldr	r3, [r7]
   22124:	e3530000 	cmp	r3, #0
   22128:	0a00004a 	beq	22258 <malloc+0x148>
   2212c:	e59f0170 	ldr	r0, [pc, #368]	; 222a4 <malloc+0x194>
   22130:	ebfff25e 	bl	1eab0 <CSpinLock::Acquire()>
   22134:	e30b13d8 	movw	r1, #46040	; 0xb3d8
   22138:	e3401002 	movt	r1, #2
   2213c:	e5913000 	ldr	r3, [r1]
   22140:	e3530000 	cmp	r3, #0
   22144:	0a000008 	beq	2216c <malloc+0x5c>
   22148:	e1a04001 	mov	r4, r1
   2214c:	e1560003 	cmp	r6, r3
   22150:	8a000002 	bhi	22160 <malloc+0x50>
   22154:	ea00002b 	b	22208 <malloc+0xf8>
   22158:	e1530006 	cmp	r3, r6
   2215c:	2a000029 	bcs	22208 <malloc+0xf8>
   22160:	e5b43008 	ldr	r3, [r4, #8]!
   22164:	e3530000 	cmp	r3, #0
   22168:	1afffffa 	bne	22158 <malloc+0x48>
   2216c:	e5975000 	ldr	r5, [r7]
   22170:	e286301f 	add	r3, r6, #31
   22174:	e3c3300f 	bic	r3, r3, #15
   22178:	e0853003 	add	r3, r5, r3
   2217c:	e1550003 	cmp	r5, r3
   22180:	2a00003b 	bcs	22274 <malloc+0x164>
   22184:	e5972004 	ldr	r2, [r7, #4]
   22188:	e5910040 	ldr	r0, [r1, #64]	; 0x40
   2218c:	e0422000 	sub	r2, r2, r0
   22190:	e1530002 	cmp	r3, r2
   22194:	8a000036 	bhi	22274 <malloc+0x164>
   22198:	e3a02043 	mov	r2, #67	; 0x43
   2219c:	e5873000 	str	r3, [r7]
   221a0:	e5c52000 	strb	r2, [r5]
   221a4:	e3a0304d 	mov	r3, #77	; 0x4d
   221a8:	e3a0204c 	mov	r2, #76	; 0x4c
   221ac:	e5c53001 	strb	r3, [r5, #1]
   221b0:	e5856004 	str	r6, [r5, #4]
   221b4:	e3a03042 	mov	r3, #66	; 0x42
   221b8:	e5c52002 	strb	r2, [r5, #2]
   221bc:	e5c53003 	strb	r3, [r5, #3]
   221c0:	e59f00dc 	ldr	r0, [pc, #220]	; 222a4 <malloc+0x194>
   221c4:	e2854010 	add	r4, r5, #16
   221c8:	ebfff24f 	bl	1eb0c <CSpinLock::Release()>
   221cc:	e3a03000 	mov	r3, #0
   221d0:	e314000f 	tst	r4, #15
   221d4:	e5c53008 	strb	r3, [r5, #8]
   221d8:	e5c53009 	strb	r3, [r5, #9]
   221dc:	e5c5300a 	strb	r3, [r5, #10]
   221e0:	e5c5300b 	strb	r3, [r5, #11]
   221e4:	0a000005 	beq	22200 <malloc+0xf0>
   221e8:	e3091bd8 	movw	r1, #39896	; 0x9bd8
   221ec:	e3401002 	movt	r1, #2
   221f0:	e3090c34 	movw	r0, #39988	; 0x9c34
   221f4:	e3400002 	movt	r0, #2
   221f8:	e3a020b3 	mov	r2, #179	; 0xb3
   221fc:	ebffdc94 	bl	19454 <assertion_failed>
   22200:	e1a00004 	mov	r0, r4
   22204:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   22208:	e5945004 	ldr	r5, [r4, #4]
   2220c:	e3550000 	cmp	r5, #0
   22210:	01a06003 	moveq	r6, r3
   22214:	0affffd4 	beq	2216c <malloc+0x5c>
   22218:	e5952000 	ldr	r2, [r5]
   2221c:	e3043d43 	movw	r3, #19779	; 0x4d43
   22220:	e344324c 	movt	r3, #16972	; 0x424c
   22224:	e1520003 	cmp	r2, r3
   22228:	05953008 	ldreq	r3, [r5, #8]
   2222c:	05843004 	streq	r3, [r4, #4]
   22230:	0affffe2 	beq	221c0 <malloc+0xb0>
   22234:	e3091bd8 	movw	r1, #39896	; 0x9bd8
   22238:	e3401002 	movt	r1, #2
   2223c:	e3090bf8 	movw	r0, #39928	; 0x9bf8
   22240:	e3400002 	movt	r0, #2
   22244:	e3a0208a 	mov	r2, #138	; 0x8a
   22248:	ebffdc81 	bl	19454 <assertion_failed>
   2224c:	e5953008 	ldr	r3, [r5, #8]
   22250:	e5843004 	str	r3, [r4, #4]
   22254:	eaffffd9 	b	221c0 <malloc+0xb0>
   22258:	e3091bd8 	movw	r1, #39896	; 0x9bd8
   2225c:	e3401002 	movt	r1, #2
   22260:	e3090be4 	movw	r0, #39908	; 0x9be4
   22264:	e3400002 	movt	r0, #2
   22268:	e3a02070 	mov	r2, #112	; 0x70
   2226c:	ebffdc78 	bl	19454 <assertion_failed>
   22270:	eaffffad 	b	2212c <malloc+0x1c>
   22274:	e3a04000 	mov	r4, #0
   22278:	e59f0024 	ldr	r0, [pc, #36]	; 222a4 <malloc+0x194>
   2227c:	e5814040 	str	r4, [r1, #64]	; 0x40
   22280:	ebfff221 	bl	1eb0c <CSpinLock::Release()>
   22284:	ebffe6d0 	bl	1bdcc <CLogger::Get()>
   22288:	e1a02004 	mov	r2, r4
   2228c:	e3093c1c 	movw	r3, #39964	; 0x9c1c
   22290:	e3403002 	movt	r3, #2
   22294:	e3091c2c 	movw	r1, #39980	; 0x9c2c
   22298:	e3401002 	movt	r1, #2
   2229c:	ebffe601 	bl	1baa8 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   222a0:	eaffffd6 	b	22200 <malloc+0xf0>
   222a4:	0002b65c 	.word	0x0002b65c

000222a8 <free>:
   222a8:	e92d4070 	push	{r4, r5, r6, lr}
   222ac:	e2505000 	subs	r5, r0, #0
   222b0:	08bd8070 	popeq	{r4, r5, r6, pc}
   222b4:	e5352010 	ldr	r2, [r5, #-16]!
   222b8:	e3043d43 	movw	r3, #19779	; 0x4d43
   222bc:	e344324c 	movt	r3, #16972	; 0x424c
   222c0:	e1520003 	cmp	r2, r3
   222c4:	1a000014 	bne	2231c <free+0x74>
   222c8:	e30b43d8 	movw	r4, #46040	; 0xb3d8
   222cc:	e3404002 	movt	r4, #2
   222d0:	e5943000 	ldr	r3, [r4]
   222d4:	e3530000 	cmp	r3, #0
   222d8:	08bd8070 	popeq	{r4, r5, r6, pc}
   222dc:	e5952004 	ldr	r2, [r5, #4]
   222e0:	e1520003 	cmp	r2, r3
   222e4:	0a000004 	beq	222fc <free+0x54>
   222e8:	e5b43008 	ldr	r3, [r4, #8]!
   222ec:	e3530000 	cmp	r3, #0
   222f0:	08bd8070 	popeq	{r4, r5, r6, pc}
   222f4:	e1530002 	cmp	r3, r2
   222f8:	1afffffa 	bne	222e8 <free+0x40>
   222fc:	e59f0034 	ldr	r0, [pc, #52]	; 22338 <free+0x90>
   22300:	ebfff1ea 	bl	1eab0 <CSpinLock::Acquire()>
   22304:	e5943004 	ldr	r3, [r4, #4]
   22308:	e5853008 	str	r3, [r5, #8]
   2230c:	e59f0024 	ldr	r0, [pc, #36]	; 22338 <free+0x90>
   22310:	e5845004 	str	r5, [r4, #4]
   22314:	e8bd4070 	pop	{r4, r5, r6, lr}
   22318:	eafff1fb 	b	1eb0c <CSpinLock::Release()>
   2231c:	e3091bd8 	movw	r1, #39896	; 0x9bd8
   22320:	e3401002 	movt	r1, #2
   22324:	e3090bf8 	movw	r0, #39928	; 0x9bf8
   22328:	e3400002 	movt	r0, #2
   2232c:	e3a020c0 	mov	r2, #192	; 0xc0
   22330:	ebffdc47 	bl	19454 <assertion_failed>
   22334:	eaffffe3 	b	222c8 <free+0x20>
   22338:	0002b65c 	.word	0x0002b65c

0002233c <calloc>:
   2233c:	e92d4070 	push	{r4, r5, r6, lr}
   22340:	e0040190 	mul	r4, r0, r1
   22344:	e3540000 	cmp	r4, #0
   22348:	03a04001 	moveq	r4, #1
   2234c:	e1540000 	cmp	r4, r0
   22350:	3a000008 	bcc	22378 <calloc+0x3c>
   22354:	e1a00004 	mov	r0, r4
   22358:	ebffff6c 	bl	22110 <malloc>
   2235c:	e2505000 	subs	r5, r0, #0
   22360:	0a000002 	beq	22370 <calloc+0x34>
   22364:	e1a02004 	mov	r2, r4
   22368:	e3a01000 	mov	r1, #0
   2236c:	ebfff9b7 	bl	20a50 <memset>
   22370:	e1a00005 	mov	r0, r5
   22374:	e8bd8070 	pop	{r4, r5, r6, pc}
   22378:	e3091bd8 	movw	r1, #39896	; 0x9bd8
   2237c:	e3401002 	movt	r1, #2
   22380:	e3090c60 	movw	r0, #40032	; 0x9c60
   22384:	e3400002 	movt	r0, #2
   22388:	e3a020e2 	mov	r2, #226	; 0xe2
   2238c:	ebffdc30 	bl	19454 <assertion_failed>
   22390:	eaffffef 	b	22354 <calloc+0x18>

00022394 <realloc>:
   22394:	e92d4070 	push	{r4, r5, r6, lr}
   22398:	e1a06001 	mov	r6, r1
   2239c:	e2504000 	subs	r4, r0, #0
   223a0:	0a000021 	beq	2242c <realloc+0x98>
   223a4:	e3510000 	cmp	r1, #0
   223a8:	0a00001b 	beq	2241c <realloc+0x88>
   223ac:	e1a05004 	mov	r5, r4
   223b0:	e3043d43 	movw	r3, #19779	; 0x4d43
   223b4:	e344324c 	movt	r3, #16972	; 0x424c
   223b8:	e5352010 	ldr	r2, [r5, #-16]!
   223bc:	e1520003 	cmp	r2, r3
   223c0:	1a000004 	bne	223d8 <realloc+0x44>
   223c4:	e5953004 	ldr	r3, [r5, #4]
   223c8:	e1530006 	cmp	r3, r6
   223cc:	3a00000a 	bcc	223fc <realloc+0x68>
   223d0:	e1a00004 	mov	r0, r4
   223d4:	e8bd8070 	pop	{r4, r5, r6, pc}
   223d8:	e3091bd8 	movw	r1, #39896	; 0x9bd8
   223dc:	e3401002 	movt	r1, #2
   223e0:	e3090bf8 	movw	r0, #39928	; 0x9bf8
   223e4:	e3400002 	movt	r0, #2
   223e8:	e3a020fc 	mov	r2, #252	; 0xfc
   223ec:	ebffdc18 	bl	19454 <assertion_failed>
   223f0:	e5953004 	ldr	r3, [r5, #4]
   223f4:	e1530006 	cmp	r3, r6
   223f8:	2afffff4 	bcs	223d0 <realloc+0x3c>
   223fc:	e1a00006 	mov	r0, r6
   22400:	ebffff42 	bl	22110 <malloc>
   22404:	e2506000 	subs	r6, r0, #0
   22408:	0a00000a 	beq	22438 <realloc+0xa4>
   2240c:	e5952004 	ldr	r2, [r5, #4]
   22410:	e1a01004 	mov	r1, r4
   22414:	ebfffb35 	bl	210f0 <memcpy>
   22418:	e1a00004 	mov	r0, r4
   2241c:	e1a04006 	mov	r4, r6
   22420:	ebffffa0 	bl	222a8 <free>
   22424:	e1a00004 	mov	r0, r4
   22428:	e8bd8070 	pop	{r4, r5, r6, pc}
   2242c:	e1a00001 	mov	r0, r1
   22430:	e8bd4070 	pop	{r4, r5, r6, lr}
   22434:	eaffff35 	b	22110 <malloc>
   22438:	e1a04006 	mov	r4, r6
   2243c:	eaffffe3 	b	223d0 <realloc+0x3c>

00022440 <palloc>:
   22440:	e92d4070 	push	{r4, r5, r6, lr}
   22444:	e30b464c 	movw	r4, #46668	; 0xb64c
   22448:	e3404002 	movt	r4, #2
   2244c:	e5943008 	ldr	r3, [r4, #8]
   22450:	e3530000 	cmp	r3, #0
   22454:	0a000022 	beq	224e4 <palloc+0xa4>
   22458:	e59f00a0 	ldr	r0, [pc, #160]	; 22500 <palloc+0xc0>
   2245c:	ebfff193 	bl	1eab0 <CSpinLock::Acquire()>
   22460:	e5945020 	ldr	r5, [r4, #32]
   22464:	e3550000 	cmp	r5, #0
   22468:	0a000013 	beq	224bc <palloc+0x7c>
   2246c:	e5952000 	ldr	r2, [r5]
   22470:	e3043d43 	movw	r3, #19779	; 0x4d43
   22474:	e3453047 	movt	r3, #20551	; 0x5047
   22478:	e1520003 	cmp	r2, r3
   2247c:	1a000007 	bne	224a0 <palloc+0x60>
   22480:	e5952004 	ldr	r2, [r5, #4]
   22484:	e3a03000 	mov	r3, #0
   22488:	e5842020 	str	r2, [r4, #32]
   2248c:	e5853000 	str	r3, [r5]
   22490:	e59f0068 	ldr	r0, [pc, #104]	; 22500 <palloc+0xc0>
   22494:	ebfff19c 	bl	1eb0c <CSpinLock::Release()>
   22498:	e1a00005 	mov	r0, r5
   2249c:	e8bd8070 	pop	{r4, r5, r6, pc}
   224a0:	e3091bd8 	movw	r1, #39896	; 0x9bd8
   224a4:	e3401002 	movt	r1, #2
   224a8:	e3090c88 	movw	r0, #40072	; 0x9c88
   224ac:	e3400002 	movt	r0, #2
   224b0:	e300211f 	movw	r2, #287	; 0x11f
   224b4:	ebffdbe6 	bl	19454 <assertion_failed>
   224b8:	eafffff0 	b	22480 <palloc+0x40>
   224bc:	e5945008 	ldr	r5, [r4, #8]
   224c0:	e594200c 	ldr	r2, [r4, #12]
   224c4:	e2853a01 	add	r3, r5, #4096	; 0x1000
   224c8:	e5843008 	str	r3, [r4, #8]
   224cc:	e1530002 	cmp	r3, r2
   224d0:	9affffee 	bls	22490 <palloc+0x50>
   224d4:	e59f0024 	ldr	r0, [pc, #36]	; 22500 <palloc+0xc0>
   224d8:	e3a05000 	mov	r5, #0
   224dc:	ebfff18a 	bl	1eb0c <CSpinLock::Release()>
   224e0:	eaffffec 	b	22498 <palloc+0x58>
   224e4:	e3091bd8 	movw	r1, #39896	; 0x9bd8
   224e8:	e3401002 	movt	r1, #2
   224ec:	e3090c74 	movw	r0, #40052	; 0x9c74
   224f0:	e3400002 	movt	r0, #2
   224f4:	e3002111 	movw	r2, #273	; 0x111
   224f8:	ebffdbd5 	bl	19454 <assertion_failed>
   224fc:	eaffffd5 	b	22458 <palloc+0x18>
   22500:	0002b664 	.word	0x0002b664

00022504 <pfree>:
   22504:	e92d4070 	push	{r4, r5, r6, lr}
   22508:	e2505000 	subs	r5, r0, #0
   2250c:	08bd8070 	popeq	{r4, r5, r6, pc}
   22510:	e30b464c 	movw	r4, #46668	; 0xb64c
   22514:	e3404002 	movt	r4, #2
   22518:	e2840018 	add	r0, r4, #24
   2251c:	ebfff163 	bl	1eab0 <CSpinLock::Acquire()>
   22520:	e2840018 	add	r0, r4, #24
   22524:	e5942020 	ldr	r2, [r4, #32]
   22528:	e3043d43 	movw	r3, #19779	; 0x4d43
   2252c:	e3453047 	movt	r3, #20551	; 0x5047
   22530:	e5853000 	str	r3, [r5]
   22534:	e5852004 	str	r2, [r5, #4]
   22538:	e5845020 	str	r5, [r4, #32]
   2253c:	e8bd4070 	pop	{r4, r5, r6, lr}
   22540:	eafff171 	b	1eb0c <CSpinLock::Release()>

00022544 <CBcmFrameBuffer::UpdatePalette() [clone .part.0]>:
   22544:	e92d4030 	push	{r4, r5, lr}
   22548:	e1a04000 	mov	r4, r0
   2254c:	e3a02000 	mov	r2, #0
   22550:	e24dd014 	sub	sp, sp, #20
   22554:	e3a0c001 	mov	ip, #1
   22558:	e5943020 	ldr	r3, [r4, #32]
   2255c:	e1a01002 	mov	r1, r2
   22560:	e28d0008 	add	r0, sp, #8
   22564:	e5c3c011 	strb	ip, [r3, #17]
   22568:	e5c3200c 	strb	r2, [r3, #12]
   2256c:	e5c3200d 	strb	r2, [r3, #13]
   22570:	e5c3200e 	strb	r2, [r3, #14]
   22574:	e5c3200f 	strb	r2, [r3, #15]
   22578:	e5c32010 	strb	r2, [r3, #16]
   2257c:	e5c32012 	strb	r2, [r3, #18]
   22580:	e5c32013 	strb	r2, [r3, #19]
   22584:	ebffdbd6 	bl	194e4 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   22588:	e5942020 	ldr	r2, [r4, #32]
   2258c:	e3003408 	movw	r3, #1032	; 0x408
   22590:	e28d0008 	add	r0, sp, #8
   22594:	e58d3000 	str	r3, [sp]
   22598:	e308100b 	movw	r1, #32779	; 0x800b
   2259c:	e3401004 	movt	r1, #4
   225a0:	e3003414 	movw	r3, #1044	; 0x414
   225a4:	ebffdc1b 	bl	19618 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   225a8:	e2505000 	subs	r5, r0, #0
   225ac:	0a000003 	beq	225c0 <CBcmFrameBuffer::UpdatePalette() [clone .part.0]+0x7c>
   225b0:	e5943020 	ldr	r3, [r4, #32]
   225b4:	e593300c 	ldr	r3, [r3, #12]
   225b8:	e3530000 	cmp	r3, #0
   225bc:	0a000000 	beq	225c4 <CBcmFrameBuffer::UpdatePalette() [clone .part.0]+0x80>
   225c0:	e3a05000 	mov	r5, #0
   225c4:	e28d0008 	add	r0, sp, #8
   225c8:	ebffdbcc 	bl	19500 <CBcmPropertyTags::~CBcmPropertyTags()>
   225cc:	e1a00005 	mov	r0, r5
   225d0:	e28dd014 	add	sp, sp, #20
   225d4:	e8bd8030 	pop	{r4, r5, pc}

000225d8 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>:
   225d8:	e92d4070 	push	{r4, r5, r6, lr}
   225dc:	e1a04000 	mov	r4, r0
   225e0:	e3520000 	cmp	r2, #0
   225e4:	13510000 	cmpne	r1, #0
   225e8:	e24dd028 	sub	sp, sp, #40	; 0x28
   225ec:	e3a05000 	mov	r5, #0
   225f0:	e8840006 	stm	r4, {r1, r2}
   225f4:	11a06003 	movne	r6, r3
   225f8:	e5843010 	str	r3, [r4, #16]
   225fc:	e59dc03c 	ldr	ip, [sp, #60]	; 0x3c
   22600:	e59d0038 	ldr	r0, [sp, #56]	; 0x38
   22604:	e584c00c 	str	ip, [r4, #12]
   22608:	e5840008 	str	r0, [r4, #8]
   2260c:	e5845014 	str	r5, [r4, #20]
   22610:	e5845018 	str	r5, [r4, #24]
   22614:	e584501c 	str	r5, [r4, #28]
   22618:	e5845020 	str	r5, [r4, #32]
   2261c:	1a000012 	bne	2266c <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x94>
   22620:	e1a01005 	mov	r1, r5
   22624:	e28d000c 	add	r0, sp, #12
   22628:	ebffdbad 	bl	194e4 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   2262c:	e3a03014 	mov	r3, #20
   22630:	e58d5000 	str	r5, [sp]
   22634:	e28d000c 	add	r0, sp, #12
   22638:	e3a01003 	mov	r1, #3
   2263c:	e3401004 	movt	r1, #4
   22640:	e08d2003 	add	r2, sp, r3
   22644:	ebffdbf3 	bl	19618 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   22648:	e1500005 	cmp	r0, r5
   2264c:	1a000029 	bne	226f8 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x120>
   22650:	e3a02d0a 	mov	r2, #640	; 0x280
   22654:	e3a03e1e 	mov	r3, #480	; 0x1e0
   22658:	e1c420f0 	strd	r2, [r4]
   2265c:	e28d000c 	add	r0, sp, #12
   22660:	ebffdba6 	bl	19500 <CBcmPropertyTags::~CBcmPropertyTags()>
   22664:	e5940008 	ldr	r0, [r4, #8]
   22668:	e5946010 	ldr	r6, [r4, #16]
   2266c:	e3500000 	cmp	r0, #0
   22670:	0a00001d 	beq	226ec <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x114>
   22674:	e594300c 	ldr	r3, [r4, #12]
   22678:	e3530000 	cmp	r3, #0
   2267c:	0a00001a 	beq	226ec <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x114>
   22680:	e3560008 	cmp	r6, #8
   22684:	8a000008 	bhi	226ac <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0xd4>
   22688:	e3000414 	movw	r0, #1044	; 0x414
   2268c:	ebfffe7c 	bl	22084 <operator new[](unsigned int)>
   22690:	e3a02b01 	mov	r2, #1024	; 0x400
   22694:	e1a03000 	mov	r3, r0
   22698:	e3a01000 	mov	r1, #0
   2269c:	e2800014 	add	r0, r0, #20
   226a0:	e5843020 	str	r3, [r4, #32]
   226a4:	ebfff8e9 	bl	20a50 <memset>
   226a8:	e5946010 	ldr	r6, [r4, #16]
   226ac:	e3a02070 	mov	r2, #112	; 0x70
   226b0:	e2840024 	add	r0, r4, #36	; 0x24
   226b4:	e30b141c 	movw	r1, #46108	; 0xb41c
   226b8:	e3401002 	movt	r1, #2
   226bc:	ebfffa8b 	bl	210f0 <memcpy>
   226c0:	e594c000 	ldr	ip, [r4]
   226c4:	e5941004 	ldr	r1, [r4, #4]
   226c8:	e1a00004 	mov	r0, r4
   226cc:	e5942008 	ldr	r2, [r4, #8]
   226d0:	e594300c 	ldr	r3, [r4, #12]
   226d4:	e5846058 	str	r6, [r4, #88]	; 0x58
   226d8:	e584c030 	str	ip, [r4, #48]	; 0x30
   226dc:	e5841034 	str	r1, [r4, #52]	; 0x34
   226e0:	e1c424f4 	strd	r2, [r4, #68]	; 0x44
   226e4:	e28dd028 	add	sp, sp, #40	; 0x28
   226e8:	e8bd8070 	pop	{r4, r5, r6, pc}
   226ec:	e1c420d0 	ldrd	r2, [r4]
   226f0:	e1c420f8 	strd	r2, [r4, #8]
   226f4:	eaffffe1 	b	22680 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0xa8>
   226f8:	e1cd22d0 	ldrd	r2, [sp, #32]
   226fc:	e5842000 	str	r2, [r4]
   22700:	e5843004 	str	r3, [r4, #4]
   22704:	e2421d0a 	sub	r1, r2, #640	; 0x280
   22708:	e2432e1e 	sub	r2, r3, #480	; 0x1e0
   2270c:	e3520f96 	cmp	r2, #600	; 0x258
   22710:	93510c05 	cmpls	r1, #1280	; 0x500
   22714:	8affffcd 	bhi	22650 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x78>
   22718:	eaffffcf 	b	2265c <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x84>

0002271c <CBcmFrameBuffer::~CBcmFrameBuffer()>:
   2271c:	e92d4010 	push	{r4, lr}
   22720:	e3a01014 	mov	r1, #20
   22724:	e1a04000 	mov	r4, r0
   22728:	e5900020 	ldr	r0, [r0, #32]
   2272c:	ebfffe57 	bl	22090 <operator delete(void*, unsigned int)>
   22730:	e1a00004 	mov	r0, r4
   22734:	e8bd8010 	pop	{r4, pc}

00022738 <CBcmFrameBuffer::SetPalette(unsigned char, unsigned short)>:
   22738:	e5903010 	ldr	r3, [r0, #16]
   2273c:	e3530008 	cmp	r3, #8
   22740:	812fff1e 	bxhi	lr
   22744:	e5900020 	ldr	r0, [r0, #32]
   22748:	e1a03982 	lsl	r3, r2, #19
   2274c:	e1a0c5a2 	lsr	ip, r2, #11
   22750:	e203373e 	and	r3, r3, #16252928	; 0xf80000
   22754:	e183318c 	orr	r3, r3, ip, lsl #3
   22758:	e1a02282 	lsl	r2, r2, #5
   2275c:	e0801101 	add	r1, r0, r1, lsl #2
   22760:	e38334ff 	orr	r3, r3, #-16777216	; 0xff000000
   22764:	e2022b3f 	and	r2, r2, #64512	; 0xfc00
   22768:	e1822003 	orr	r2, r2, r3
   2276c:	e5812014 	str	r2, [r1, #20]
   22770:	e12fff1e 	bx	lr

00022774 <CBcmFrameBuffer::SetPalette32(unsigned char, unsigned int)>:
   22774:	e5903010 	ldr	r3, [r0, #16]
   22778:	e3530008 	cmp	r3, #8
   2277c:	95903020 	ldrls	r3, [r0, #32]
   22780:	90831101 	addls	r1, r3, r1, lsl #2
   22784:	95812014 	strls	r2, [r1, #20]
   22788:	e12fff1e 	bx	lr

0002278c <CBcmFrameBuffer::Initialize()>:
   2278c:	e92d4030 	push	{r4, r5, lr}
   22790:	e3a01000 	mov	r1, #0
   22794:	e1a04000 	mov	r4, r0
   22798:	e24dd00c 	sub	sp, sp, #12
   2279c:	e1a0000d 	mov	r0, sp
   227a0:	ebffdb4f 	bl	194e4 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   227a4:	e2841024 	add	r1, r4, #36	; 0x24
   227a8:	e1a0000d 	mov	r0, sp
   227ac:	e3a02070 	mov	r2, #112	; 0x70
   227b0:	ebffdb57 	bl	19514 <CBcmPropertyTags::GetTags(void*, unsigned int)>
   227b4:	e2505000 	subs	r5, r0, #0
   227b8:	0a00001e 	beq	22838 <CBcmFrameBuffer::Initialize()+0xac>
   227bc:	e5943030 	ldr	r3, [r4, #48]	; 0x30
   227c0:	e3530000 	cmp	r3, #0
   227c4:	0a00001a 	beq	22834 <CBcmFrameBuffer::Initialize()+0xa8>
   227c8:	e5943034 	ldr	r3, [r4, #52]	; 0x34
   227cc:	e3530000 	cmp	r3, #0
   227d0:	0a000017 	beq	22834 <CBcmFrameBuffer::Initialize()+0xa8>
   227d4:	e5943044 	ldr	r3, [r4, #68]	; 0x44
   227d8:	e3530000 	cmp	r3, #0
   227dc:	0a000014 	beq	22834 <CBcmFrameBuffer::Initialize()+0xa8>
   227e0:	e5943048 	ldr	r3, [r4, #72]	; 0x48
   227e4:	e3530000 	cmp	r3, #0
   227e8:	0a000011 	beq	22834 <CBcmFrameBuffer::Initialize()+0xa8>
   227ec:	e5943058 	ldr	r3, [r4, #88]	; 0x58
   227f0:	e3530000 	cmp	r3, #0
   227f4:	0a00000e 	beq	22834 <CBcmFrameBuffer::Initialize()+0xa8>
   227f8:	e594307c 	ldr	r3, [r4, #124]	; 0x7c
   227fc:	e3530000 	cmp	r3, #0
   22800:	0a00000b 	beq	22834 <CBcmFrameBuffer::Initialize()+0xa8>
   22804:	e5941010 	ldr	r1, [r4, #16]
   22808:	e3c33103 	bic	r3, r3, #-1073741824	; 0xc0000000
   2280c:	e5942080 	ldr	r2, [r4, #128]	; 0x80
   22810:	e5843014 	str	r3, [r4, #20]
   22814:	e3510008 	cmp	r1, #8
   22818:	e5943090 	ldr	r3, [r4, #144]	; 0x90
   2281c:	e1c421f8 	strd	r2, [r4, #24]
   22820:	8a000004 	bhi	22838 <CBcmFrameBuffer::Initialize()+0xac>
   22824:	e1a00004 	mov	r0, r4
   22828:	ebffff45 	bl	22544 <CBcmFrameBuffer::UpdatePalette() [clone .part.0]>
   2282c:	e1a05000 	mov	r5, r0
   22830:	ea000000 	b	22838 <CBcmFrameBuffer::Initialize()+0xac>
   22834:	e1a05003 	mov	r5, r3
   22838:	e1a0000d 	mov	r0, sp
   2283c:	ebffdb2f 	bl	19500 <CBcmPropertyTags::~CBcmPropertyTags()>
   22840:	e1a00005 	mov	r0, r5
   22844:	e28dd00c 	add	sp, sp, #12
   22848:	e8bd8030 	pop	{r4, r5, pc}

0002284c <CBcmFrameBuffer::GetWidth() const>:
   2284c:	e5900000 	ldr	r0, [r0]
   22850:	e12fff1e 	bx	lr

00022854 <CBcmFrameBuffer::GetHeight() const>:
   22854:	e5900004 	ldr	r0, [r0, #4]
   22858:	e12fff1e 	bx	lr

0002285c <CBcmFrameBuffer::GetVirtWidth() const>:
   2285c:	e5900008 	ldr	r0, [r0, #8]
   22860:	e12fff1e 	bx	lr

00022864 <CBcmFrameBuffer::GetVirtHeight() const>:
   22864:	e590000c 	ldr	r0, [r0, #12]
   22868:	e12fff1e 	bx	lr

0002286c <CBcmFrameBuffer::GetPitch() const>:
   2286c:	e590001c 	ldr	r0, [r0, #28]
   22870:	e12fff1e 	bx	lr

00022874 <CBcmFrameBuffer::GetDepth() const>:
   22874:	e5900010 	ldr	r0, [r0, #16]
   22878:	e12fff1e 	bx	lr

0002287c <CBcmFrameBuffer::GetBuffer() const>:
   2287c:	e5900014 	ldr	r0, [r0, #20]
   22880:	e12fff1e 	bx	lr

00022884 <CBcmFrameBuffer::GetSize() const>:
   22884:	e5900018 	ldr	r0, [r0, #24]
   22888:	e12fff1e 	bx	lr

0002288c <CBcmFrameBuffer::UpdatePalette()>:
   2288c:	e5903010 	ldr	r3, [r0, #16]
   22890:	e3530008 	cmp	r3, #8
   22894:	9a000001 	bls	228a0 <CBcmFrameBuffer::UpdatePalette()+0x14>
   22898:	e3a00001 	mov	r0, #1
   2289c:	e12fff1e 	bx	lr
   228a0:	eaffff27 	b	22544 <CBcmFrameBuffer::UpdatePalette() [clone .part.0]>

000228a4 <CBcmFrameBuffer::SetVirtualOffset(unsigned int, unsigned int)>:
   228a4:	e92d4070 	push	{r4, r5, r6, lr}
   228a8:	e1a05001 	mov	r5, r1
   228ac:	e3a01000 	mov	r1, #0
   228b0:	e24dd028 	sub	sp, sp, #40	; 0x28
   228b4:	e1a06002 	mov	r6, r2
   228b8:	e28d000c 	add	r0, sp, #12
   228bc:	ebffdb08 	bl	194e4 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   228c0:	e3a03008 	mov	r3, #8
   228c4:	e58d3000 	str	r3, [sp]
   228c8:	e3a03014 	mov	r3, #20
   228cc:	e28d000c 	add	r0, sp, #12
   228d0:	e3081009 	movw	r1, #32777	; 0x8009
   228d4:	e3401004 	movt	r1, #4
   228d8:	e08d2003 	add	r2, sp, r3
   228dc:	e58d5020 	str	r5, [sp, #32]
   228e0:	e58d6024 	str	r6, [sp, #36]	; 0x24
   228e4:	ebffdb4b 	bl	19618 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   228e8:	e2504000 	subs	r4, r0, #0
   228ec:	0a000006 	beq	2290c <CBcmFrameBuffer::SetVirtualOffset(unsigned int, unsigned int)+0x68>
   228f0:	e59d3020 	ldr	r3, [sp, #32]
   228f4:	e1530005 	cmp	r3, r5
   228f8:	13a04000 	movne	r4, #0
   228fc:	059d4024 	ldreq	r4, [sp, #36]	; 0x24
   22900:	00444006 	subeq	r4, r4, r6
   22904:	016f4f14 	clzeq	r4, r4
   22908:	01a042a4 	lsreq	r4, r4, #5
   2290c:	e28d000c 	add	r0, sp, #12
   22910:	ebffdafa 	bl	19500 <CBcmPropertyTags::~CBcmPropertyTags()>
   22914:	e1a00004 	mov	r0, r4
   22918:	e28dd028 	add	sp, sp, #40	; 0x28
   2291c:	e8bd8070 	pop	{r4, r5, r6, pc}

00022920 <CBcmFrameBuffer::WaitForVerticalSync()>:
   22920:	e92d4010 	push	{r4, lr}
   22924:	e3a01000 	mov	r1, #0
   22928:	e24dd020 	sub	sp, sp, #32
   2292c:	e28d0008 	add	r0, sp, #8
   22930:	ebffdaeb 	bl	194e4 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   22934:	e3a03000 	mov	r3, #0
   22938:	e58d3000 	str	r3, [sp]
   2293c:	e3a03010 	mov	r3, #16
   22940:	e08d2003 	add	r2, sp, r3
   22944:	e28d0008 	add	r0, sp, #8
   22948:	e308100e 	movw	r1, #32782	; 0x800e
   2294c:	e3401004 	movt	r1, #4
   22950:	ebffdb30 	bl	19618 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   22954:	e1a04000 	mov	r4, r0
   22958:	e28d0008 	add	r0, sp, #8
   2295c:	ebffdae7 	bl	19500 <CBcmPropertyTags::~CBcmPropertyTags()>
   22960:	e1a00004 	mov	r0, r4
   22964:	e28dd020 	add	sp, sp, #32
   22968:	e8bd8010 	pop	{r4, pc}

0002296c <CBcmMailBox::CBcmMailBox(unsigned int, bool)>:
   2296c:	e5801000 	str	r1, [r0]
   22970:	e5c02004 	strb	r2, [r0, #4]
   22974:	e12fff1e 	bx	lr

00022978 <CBcmMailBox::~CBcmMailBox()>:
   22978:	e12fff1e 	bx	lr

0002297c <CBcmMailBox::Flush()>:
   2297c:	e92d4010 	push	{r4, lr}
   22980:	e3a04a0b 	mov	r4, #45056	; 0xb000
   22984:	e3434f00 	movt	r4, #16128	; 0x3f00
   22988:	e5943898 	ldr	r3, [r4, #2200]	; 0x898
   2298c:	e3130101 	tst	r3, #1073741824	; 0x40000000
   22990:	18bd8010 	popne	{r4, pc}
   22994:	e3a00014 	mov	r0, #20
   22998:	e5943880 	ldr	r3, [r4, #2176]	; 0x880
   2299c:	ebfff7e0 	bl	20924 <CTimer::SimpleMsDelay(unsigned int)>
   229a0:	e5943898 	ldr	r3, [r4, #2200]	; 0x898
   229a4:	e3130101 	tst	r3, #1073741824	; 0x40000000
   229a8:	0afffff9 	beq	22994 <CBcmMailBox::Flush()+0x18>
   229ac:	e8bd8010 	pop	{r4, pc}

000229b0 <CBcmMailBox::Read()>:
   229b0:	e5901000 	ldr	r1, [r0]
   229b4:	e3a02a0b 	mov	r2, #45056	; 0xb000
   229b8:	e3432f00 	movt	r2, #16128	; 0x3f00
   229bc:	e5923898 	ldr	r3, [r2, #2200]	; 0x898
   229c0:	e3130101 	tst	r3, #1073741824	; 0x40000000
   229c4:	1afffffc 	bne	229bc <CBcmMailBox::Read()+0xc>
   229c8:	e5920880 	ldr	r0, [r2, #2176]	; 0x880
   229cc:	e200300f 	and	r3, r0, #15
   229d0:	e1530001 	cmp	r3, r1
   229d4:	1afffff8 	bne	229bc <CBcmMailBox::Read()+0xc>
   229d8:	e3c0000f 	bic	r0, r0, #15
   229dc:	e12fff1e 	bx	lr

000229e0 <CBcmMailBox::Write(unsigned int)>:
   229e0:	e92d4070 	push	{r4, r5, r6, lr}
   229e4:	e3a02a0b 	mov	r2, #45056	; 0xb000
   229e8:	e3432f00 	movt	r2, #16128	; 0x3f00
   229ec:	e1a05000 	mov	r5, r0
   229f0:	e1a04001 	mov	r4, r1
   229f4:	e59238b8 	ldr	r3, [r2, #2232]	; 0x8b8
   229f8:	e3530000 	cmp	r3, #0
   229fc:	bafffffc 	blt	229f4 <CBcmMailBox::Write(unsigned int)+0x14>
   22a00:	e314000f 	tst	r4, #15
   22a04:	0a000005 	beq	22a20 <CBcmMailBox::Write(unsigned int)+0x40>
   22a08:	e3091cac 	movw	r1, #40108	; 0x9cac
   22a0c:	e3401002 	movt	r1, #2
   22a10:	e3090cbc 	movw	r0, #40124	; 0x9cbc
   22a14:	e3400002 	movt	r0, #2
   22a18:	e3a02062 	mov	r2, #98	; 0x62
   22a1c:	ebffda8c 	bl	19454 <assertion_failed>
   22a20:	e3a03a0b 	mov	r3, #45056	; 0xb000
   22a24:	e3433f00 	movt	r3, #16128	; 0x3f00
   22a28:	e5952000 	ldr	r2, [r5]
   22a2c:	e1844002 	orr	r4, r4, r2
   22a30:	e58348a0 	str	r4, [r3, #2208]	; 0x8a0
   22a34:	e8bd8070 	pop	{r4, r5, r6, pc}

00022a38 <CBcmMailBox::WriteRead(unsigned int)>:
   22a38:	e5d03004 	ldrb	r3, [r0, #4]
   22a3c:	e92d4070 	push	{r4, r5, r6, lr}
   22a40:	e1a05000 	mov	r5, r0
   22a44:	e1a06001 	mov	r6, r1
   22a48:	e3530000 	cmp	r3, #0
   22a4c:	0a000020 	beq	22ad4 <CBcmMailBox::WriteRead(unsigned int)+0x9c>
   22a50:	e3a04a0b 	mov	r4, #45056	; 0xb000
   22a54:	e3434f00 	movt	r4, #16128	; 0x3f00
   22a58:	e5943898 	ldr	r3, [r4, #2200]	; 0x898
   22a5c:	e3130101 	tst	r3, #1073741824	; 0x40000000
   22a60:	1a000005 	bne	22a7c <CBcmMailBox::WriteRead(unsigned int)+0x44>
   22a64:	e3a00014 	mov	r0, #20
   22a68:	e5943880 	ldr	r3, [r4, #2176]	; 0x880
   22a6c:	ebfff7ac 	bl	20924 <CTimer::SimpleMsDelay(unsigned int)>
   22a70:	e5943898 	ldr	r3, [r4, #2200]	; 0x898
   22a74:	e3130101 	tst	r3, #1073741824	; 0x40000000
   22a78:	0afffff9 	beq	22a64 <CBcmMailBox::WriteRead(unsigned int)+0x2c>
   22a7c:	e1a01006 	mov	r1, r6
   22a80:	e1a00005 	mov	r0, r5
   22a84:	ebffffd5 	bl	229e0 <CBcmMailBox::Write(unsigned int)>
   22a88:	e5951000 	ldr	r1, [r5]
   22a8c:	e3a02a0b 	mov	r2, #45056	; 0xb000
   22a90:	e3432f00 	movt	r2, #16128	; 0x3f00
   22a94:	e5923898 	ldr	r3, [r2, #2200]	; 0x898
   22a98:	e3130101 	tst	r3, #1073741824	; 0x40000000
   22a9c:	1afffffc 	bne	22a94 <CBcmMailBox::WriteRead(unsigned int)+0x5c>
   22aa0:	e5920880 	ldr	r0, [r2, #2176]	; 0x880
   22aa4:	e200300f 	and	r3, r0, #15
   22aa8:	e1530001 	cmp	r3, r1
   22aac:	1afffff8 	bne	22a94 <CBcmMailBox::WriteRead(unsigned int)+0x5c>
   22ab0:	e5d53004 	ldrb	r3, [r5, #4]
   22ab4:	e3c0400f 	bic	r4, r0, #15
   22ab8:	e3530000 	cmp	r3, #0
   22abc:	1a000002 	bne	22acc <CBcmMailBox::WriteRead(unsigned int)+0x94>
   22ac0:	e30b0670 	movw	r0, #46704	; 0xb670
   22ac4:	e3400002 	movt	r0, #2
   22ac8:	ebfff00f 	bl	1eb0c <CSpinLock::Release()>
   22acc:	e1a00004 	mov	r0, r4
   22ad0:	e8bd8070 	pop	{r4, r5, r6, pc}
   22ad4:	e30b0670 	movw	r0, #46704	; 0xb670
   22ad8:	e3400002 	movt	r0, #2
   22adc:	ebffeff3 	bl	1eab0 <CSpinLock::Acquire()>
   22ae0:	eaffffda 	b	22a50 <CBcmMailBox::WriteRead(unsigned int)+0x18>

00022ae4 <CCharGenerator::CCharGenerator()>:
   22ae4:	e3a03008 	mov	r3, #8
   22ae8:	e5803000 	str	r3, [r0]
   22aec:	e12fff1e 	bx	lr

00022af0 <CCharGenerator::~CCharGenerator()>:
   22af0:	e12fff1e 	bx	lr

00022af4 <CCharGenerator::GetCharWidth() const>:
   22af4:	e5900000 	ldr	r0, [r0]
   22af8:	e12fff1e 	bx	lr

00022afc <CCharGenerator::GetCharHeight() const>:
   22afc:	e3a00013 	mov	r0, #19
   22b00:	e12fff1e 	bx	lr

00022b04 <CCharGenerator::GetUnderline() const>:
   22b04:	e3a00010 	mov	r0, #16
   22b08:	e12fff1e 	bx	lr

00022b0c <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const>:
   22b0c:	e6ef1071 	uxtb	r1, r1
   22b10:	e92d4070 	push	{r4, r5, r6, lr}
   22b14:	e2414021 	sub	r4, r1, #33	; 0x21
   22b18:	e35400de 	cmp	r4, #222	; 0xde
   22b1c:	8a00000f 	bhi	22b60 <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const+0x54>
   22b20:	e1a06003 	mov	r6, r3
   22b24:	e5903000 	ldr	r3, [r0]
   22b28:	e1a05002 	mov	r5, r2
   22b2c:	e1530002 	cmp	r3, r2
   22b30:	9a00000c 	bls	22b68 <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const+0x5c>
   22b34:	e356000f 	cmp	r6, #15
   22b38:	8a000008 	bhi	22b60 <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const+0x54>
   22b3c:	e3091cd0 	movw	r1, #40144	; 0x9cd0
   22b40:	e3401002 	movt	r1, #2
   22b44:	e0811204 	add	r1, r1, r4, lsl #4
   22b48:	e3a02080 	mov	r2, #128	; 0x80
   22b4c:	e7d13006 	ldrb	r3, [r1, r6]
   22b50:	e0133552 	ands	r3, r3, r2, asr r5
   22b54:	13a00001 	movne	r0, #1
   22b58:	03a00000 	moveq	r0, #0
   22b5c:	e8bd8070 	pop	{r4, r5, r6, pc}
   22b60:	e3a00000 	mov	r0, #0
   22b64:	e8bd8070 	pop	{r4, r5, r6, pc}
   22b68:	e30a1ac0 	movw	r1, #43712	; 0xaac0
   22b6c:	e3401002 	movt	r1, #2
   22b70:	e30a0ad4 	movw	r0, #43732	; 0xaad4
   22b74:	e3400002 	movt	r0, #2
   22b78:	e3a0204e 	mov	r2, #78	; 0x4e
   22b7c:	ebffda34 	bl	19454 <assertion_failed>
   22b80:	e356000f 	cmp	r6, #15
   22b84:	9affffec 	bls	22b3c <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const+0x30>
   22b88:	eafffff4 	b	22b60 <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const+0x54>
   22b8c:	00000000 	andeq	r0, r0, r0

00022b90 <DelayLoop>:
   22b90:	e2500001 	subs	r0, r0, #1
   22b94:	8afffffd 	bhi	22b90 <DelayLoop>
   22b98:	e1a0f00e 	mov	pc, lr

00022b9c <CDMAChannel::CDMAChannel(unsigned int, CInterruptSystem*)>:
   22b9c:	e92d4070 	push	{r4, r5, r6, lr}
   22ba0:	e1a04000 	mov	r4, r0
   22ba4:	e1a06001 	mov	r6, r1
   22ba8:	e1a05002 	mov	r5, r2
   22bac:	ebffe74b 	bl	1c8e0 <CMachineInfo::Get()>
   22bb0:	e1a01006 	mov	r1, r6
   22bb4:	ebffe6e3 	bl	1c748 <CMachineInfo::AllocateDMAChannel(unsigned int)>
   22bb8:	e3a03000 	mov	r3, #0
   22bbc:	e584500c 	str	r5, [r4, #12]
   22bc0:	e3500080 	cmp	r0, #128	; 0x80
   22bc4:	e5840000 	str	r0, [r4]
   22bc8:	e5843004 	str	r3, [r4, #4]
   22bcc:	e5843008 	str	r3, [r4, #8]
   22bd0:	e5c43010 	strb	r3, [r4, #16]
   22bd4:	e5843014 	str	r3, [r4, #20]
   22bd8:	e5843018 	str	r3, [r4, #24]
   22bdc:	e5c4301c 	strb	r3, [r4, #28]
   22be0:	0a000028 	beq	22c88 <CDMAChannel::CDMAChannel(unsigned int, CInterruptSystem*)+0xec>
   22be4:	e350000c 	cmp	r0, #12
   22be8:	8a000020 	bhi	22c70 <CDMAChannel::CDMAChannel(unsigned int, CInterruptSystem*)+0xd4>
   22bec:	e3a0003f 	mov	r0, #63	; 0x3f
   22bf0:	ebfffd23 	bl	22084 <operator new[](unsigned int)>
   22bf4:	e280301f 	add	r3, r0, #31
   22bf8:	e3c3301f 	bic	r3, r3, #31
   22bfc:	e3a02a07 	mov	r2, #28672	; 0x7000
   22c00:	e3432f00 	movt	r2, #16128	; 0x3f00
   22c04:	e5840004 	str	r0, [r4, #4]
   22c08:	e3a01000 	mov	r1, #0
   22c0c:	e5843008 	str	r3, [r4, #8]
   22c10:	e3a0c001 	mov	ip, #1
   22c14:	e5831018 	str	r1, [r3, #24]
   22c18:	e3a00ffa 	mov	r0, #1000	; 0x3e8
   22c1c:	e583101c 	str	r1, [r3, #28]
   22c20:	e5941000 	ldr	r1, [r4]
   22c24:	e5923ff0 	ldr	r3, [r2, #4080]	; 0xff0
   22c28:	e183311c 	orr	r3, r3, ip, lsl r1
   22c2c:	e5823ff0 	str	r3, [r2, #4080]	; 0xff0
   22c30:	ebfff742 	bl	20940 <CTimer::SimpleusDelay(unsigned int)>
   22c34:	e5943000 	ldr	r3, [r4]
   22c38:	e3a02102 	mov	r2, #-2147483648	; 0x80000000
   22c3c:	e283383f 	add	r3, r3, #4128768	; 0x3f0000
   22c40:	e2833070 	add	r3, r3, #112	; 0x70
   22c44:	e1a03403 	lsl	r3, r3, #8
   22c48:	e5832000 	str	r2, [r3]
   22c4c:	e5943000 	ldr	r3, [r4]
   22c50:	e283383f 	add	r3, r3, #4128768	; 0x3f0000
   22c54:	e2833070 	add	r3, r3, #112	; 0x70
   22c58:	e1a03403 	lsl	r3, r3, #8
   22c5c:	e5932000 	ldr	r2, [r3]
   22c60:	e3520000 	cmp	r2, #0
   22c64:	bafffffc 	blt	22c5c <CDMAChannel::CDMAChannel(unsigned int, CInterruptSystem*)+0xc0>
   22c68:	e1a00004 	mov	r0, r4
   22c6c:	e8bd8070 	pop	{r4, r5, r6, pc}
   22c70:	e30a1aec 	movw	r1, #43756	; 0xaaec
   22c74:	e3401002 	movt	r1, #2
   22c78:	e2810030 	add	r0, r1, #48	; 0x30
   22c7c:	e3a02056 	mov	r2, #86	; 0x56
   22c80:	ebffd9f3 	bl	19454 <assertion_failed>
   22c84:	eaffffd8 	b	22bec <CDMAChannel::CDMAChannel(unsigned int, CInterruptSystem*)+0x50>
   22c88:	e30a1aec 	movw	r1, #43756	; 0xaaec
   22c8c:	e3401002 	movt	r1, #2
   22c90:	e2810010 	add	r0, r1, #16
   22c94:	e3a02055 	mov	r2, #85	; 0x55
   22c98:	ebffd9ed 	bl	19454 <assertion_failed>
   22c9c:	e5940000 	ldr	r0, [r4]
   22ca0:	eaffffcf 	b	22be4 <CDMAChannel::CDMAChannel(unsigned int, CInterruptSystem*)+0x48>

00022ca4 <CDMAChannel::~CDMAChannel()>:
   22ca4:	e5903000 	ldr	r3, [r0]
   22ca8:	e92d4010 	push	{r4, lr}
   22cac:	e1a04000 	mov	r4, r0
   22cb0:	e353000c 	cmp	r3, #12
   22cb4:	8a00002c 	bhi	22d6c <CDMAChannel::~CDMAChannel()+0xc8>
   22cb8:	e283383f 	add	r3, r3, #4128768	; 0x3f0000
   22cbc:	e3a02102 	mov	r2, #-2147483648	; 0x80000000
   22cc0:	e2833070 	add	r3, r3, #112	; 0x70
   22cc4:	e1a03403 	lsl	r3, r3, #8
   22cc8:	e5832000 	str	r2, [r3]
   22ccc:	e5941000 	ldr	r1, [r4]
   22cd0:	e281283f 	add	r2, r1, #4128768	; 0x3f0000
   22cd4:	e2822070 	add	r2, r2, #112	; 0x70
   22cd8:	e1a02402 	lsl	r2, r2, #8
   22cdc:	e5923000 	ldr	r3, [r2]
   22ce0:	e3530000 	cmp	r3, #0
   22ce4:	bafffffc 	blt	22cdc <CDMAChannel::~CDMAChannel()+0x38>
   22ce8:	e3a03a07 	mov	r3, #28672	; 0x7000
   22cec:	e3433f00 	movt	r3, #16128	; 0x3f00
   22cf0:	e594000c 	ldr	r0, [r4, #12]
   22cf4:	e3a0e001 	mov	lr, #1
   22cf8:	e3a0c000 	mov	ip, #0
   22cfc:	e5932ff0 	ldr	r2, [r3, #4080]	; 0xff0
   22d00:	e3500000 	cmp	r0, #0
   22d04:	e1c2211e 	bic	r2, r2, lr, lsl r1
   22d08:	e5832ff0 	str	r2, [r3, #4080]	; 0xff0
   22d0c:	e584c014 	str	ip, [r4, #20]
   22d10:	0a000004 	beq	22d28 <CDMAChannel::~CDMAChannel()+0x84>
   22d14:	e5d43010 	ldrb	r3, [r4, #16]
   22d18:	e153000c 	cmp	r3, ip
   22d1c:	1a00000c 	bne	22d54 <CDMAChannel::~CDMAChannel()+0xb0>
   22d20:	e3a03000 	mov	r3, #0
   22d24:	e584300c 	str	r3, [r4, #12]
   22d28:	ebffe6ec 	bl	1c8e0 <CMachineInfo::Get()>
   22d2c:	e5941000 	ldr	r1, [r4]
   22d30:	ebffe6c0 	bl	1c838 <CMachineInfo::FreeDMAChannel(unsigned int)>
   22d34:	e5940004 	ldr	r0, [r4, #4]
   22d38:	e3a03000 	mov	r3, #0
   22d3c:	e5843008 	str	r3, [r4, #8]
   22d40:	e1500003 	cmp	r0, r3
   22d44:	0a000000 	beq	22d4c <CDMAChannel::~CDMAChannel()+0xa8>
   22d48:	ebfffccf 	bl	2208c <operator delete[](void*)>
   22d4c:	e1a00004 	mov	r0, r4
   22d50:	e8bd8010 	pop	{r4, pc}
   22d54:	e5941000 	ldr	r1, [r4]
   22d58:	e351000c 	cmp	r1, #12
   22d5c:	8a000009 	bhi	22d88 <CDMAChannel::~CDMAChannel()+0xe4>
   22d60:	e2811010 	add	r1, r1, #16
   22d64:	ebffe100 	bl	1b16c <CInterruptSystem::DisconnectIRQ(unsigned int)>
   22d68:	eaffffec 	b	22d20 <CDMAChannel::~CDMAChannel()+0x7c>
   22d6c:	e30a1aec 	movw	r1, #43756	; 0xaaec
   22d70:	e3401002 	movt	r1, #2
   22d74:	e2810030 	add	r0, r1, #48	; 0x30
   22d78:	e3a02070 	mov	r2, #112	; 0x70
   22d7c:	ebffd9b4 	bl	19454 <assertion_failed>
   22d80:	e5943000 	ldr	r3, [r4]
   22d84:	eaffffcb 	b	22cb8 <CDMAChannel::~CDMAChannel()+0x14>
   22d88:	e30a1aec 	movw	r1, #43756	; 0xaaec
   22d8c:	e3401002 	movt	r1, #2
   22d90:	e281004c 	add	r0, r1, #76	; 0x4c
   22d94:	e3a02082 	mov	r2, #130	; 0x82
   22d98:	ebffd9ad 	bl	19454 <assertion_failed>
   22d9c:	e594000c 	ldr	r0, [r4, #12]
   22da0:	e5941000 	ldr	r1, [r4]
   22da4:	eaffffed 	b	22d60 <CDMAChannel::~CDMAChannel()+0xbc>

00022da8 <CDMAChannel::SetupMemCopy(void*, void const*, unsigned int, unsigned int, bool)>:
   22da8:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   22dac:	e1a05000 	mov	r5, r0
   22db0:	e1a06002 	mov	r6, r2
   22db4:	e1a09003 	mov	r9, r3
   22db8:	e2518000 	subs	r8, r1, #0
   22dbc:	e59d4020 	ldr	r4, [sp, #32]
   22dc0:	e5dd7024 	ldrb	r7, [sp, #36]	; 0x24
   22dc4:	0a000056 	beq	22f24 <CDMAChannel::SetupMemCopy(void*, void const*, unsigned int, unsigned int, bool)+0x17c>
   22dc8:	e3560000 	cmp	r6, #0
   22dcc:	0a00004e 	beq	22f0c <CDMAChannel::SetupMemCopy(void*, void const*, unsigned int, unsigned int, bool)+0x164>
   22dd0:	e3590000 	cmp	r9, #0
   22dd4:	0a000027 	beq	22e78 <CDMAChannel::SetupMemCopy(void*, void const*, unsigned int, unsigned int, bool)+0xd0>
   22dd8:	e354000f 	cmp	r4, #15
   22ddc:	8a00002c 	bhi	22e94 <CDMAChannel::SetupMemCopy(void*, void const*, unsigned int, unsigned int, bool)+0xec>
   22de0:	e5953008 	ldr	r3, [r5, #8]
   22de4:	e3530000 	cmp	r3, #0
   22de8:	0a000031 	beq	22eb4 <CDMAChannel::SetupMemCopy(void*, void const*, unsigned int, unsigned int, bool)+0x10c>
   22dec:	e3790107 	cmn	r9, #-1073741823	; 0xc0000001
   22df0:	8a000036 	bhi	22ed0 <CDMAChannel::SetupMemCopy(void*, void const*, unsigned int, unsigned int, bool)+0x128>
   22df4:	e5953000 	ldr	r3, [r5]
   22df8:	e283383f 	add	r3, r3, #4128768	; 0x3f0000
   22dfc:	e2833070 	add	r3, r3, #112	; 0x70
   22e00:	e1a03403 	lsl	r3, r3, #8
   22e04:	e5932020 	ldr	r2, [r3, #32]
   22e08:	e2222201 	eor	r2, r2, #268435456	; 0x10000000
   22e0c:	e7e02e52 	ubfx	r2, r2, #28, #1
   22e10:	e3590801 	cmp	r9, #65536	; 0x10000
   22e14:	33822001 	orrcc	r2, r2, #1
   22e18:	e3520000 	cmp	r2, #0
   22e1c:	0a000046 	beq	22f3c <CDMAChannel::SetupMemCopy(void*, void const*, unsigned int, unsigned int, bool)+0x194>
   22e20:	e5952008 	ldr	r2, [r5, #8]
   22e24:	e1a04604 	lsl	r4, r4, #12
   22e28:	e3861103 	orr	r1, r6, #-1073741824	; 0xc0000000
   22e2c:	e3844e33 	orr	r4, r4, #816	; 0x330
   22e30:	e3883103 	orr	r3, r8, #-1073741824	; 0xc0000000
   22e34:	e3570000 	cmp	r7, #0
   22e38:	e5821004 	str	r1, [r2, #4]
   22e3c:	e3a01000 	mov	r1, #0
   22e40:	e5824000 	str	r4, [r2]
   22e44:	e582900c 	str	r9, [r2, #12]
   22e48:	e5823008 	str	r3, [r2, #8]
   22e4c:	e5c21010 	strb	r1, [r2, #16]
   22e50:	e5c21011 	strb	r1, [r2, #17]
   22e54:	e5c21012 	strb	r1, [r2, #18]
   22e58:	e5c21013 	strb	r1, [r2, #19]
   22e5c:	e5c21014 	strb	r1, [r2, #20]
   22e60:	e5c21015 	strb	r1, [r2, #21]
   22e64:	e5c21016 	strb	r1, [r2, #22]
   22e68:	e5c21017 	strb	r1, [r2, #23]
   22e6c:	1a00001d 	bne	22ee8 <CDMAChannel::SetupMemCopy(void*, void const*, unsigned int, unsigned int, bool)+0x140>
   22e70:	e5857020 	str	r7, [r5, #32]
   22e74:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   22e78:	e30a1aec 	movw	r1, #43756	; 0xaaec
   22e7c:	e3401002 	movt	r1, #2
   22e80:	e2810084 	add	r0, r1, #132	; 0x84
   22e84:	e3a02096 	mov	r2, #150	; 0x96
   22e88:	ebffd971 	bl	19454 <assertion_failed>
   22e8c:	e354000f 	cmp	r4, #15
   22e90:	9affffd2 	bls	22de0 <CDMAChannel::SetupMemCopy(void*, void const*, unsigned int, unsigned int, bool)+0x38>
   22e94:	e30a1aec 	movw	r1, #43756	; 0xaaec
   22e98:	e3401002 	movt	r1, #2
   22e9c:	e2810090 	add	r0, r1, #144	; 0x90
   22ea0:	e3a02097 	mov	r2, #151	; 0x97
   22ea4:	ebffd96a 	bl	19454 <assertion_failed>
   22ea8:	e5953008 	ldr	r3, [r5, #8]
   22eac:	e3530000 	cmp	r3, #0
   22eb0:	1affffcd 	bne	22dec <CDMAChannel::SetupMemCopy(void*, void const*, unsigned int, unsigned int, bool)+0x44>
   22eb4:	e30a1aec 	movw	r1, #43756	; 0xaaec
   22eb8:	e3401002 	movt	r1, #2
   22ebc:	e28100a4 	add	r0, r1, #164	; 0xa4
   22ec0:	e3a02099 	mov	r2, #153	; 0x99
   22ec4:	ebffd962 	bl	19454 <assertion_failed>
   22ec8:	e3790107 	cmn	r9, #-1073741823	; 0xc0000001
   22ecc:	9affffc8 	bls	22df4 <CDMAChannel::SetupMemCopy(void*, void const*, unsigned int, unsigned int, bool)+0x4c>
   22ed0:	e30a1aec 	movw	r1, #43756	; 0xaaec
   22ed4:	e3401002 	movt	r1, #2
   22ed8:	e28100bc 	add	r0, r1, #188	; 0xbc
   22edc:	e3a0209a 	mov	r2, #154	; 0x9a
   22ee0:	ebffd95b 	bl	19454 <assertion_failed>
   22ee4:	eaffffc2 	b	22df4 <CDMAChannel::SetupMemCopy(void*, void const*, unsigned int, unsigned int, bool)+0x4c>
   22ee8:	e1a00006 	mov	r0, r6
   22eec:	e1a01009 	mov	r1, r9
   22ef0:	e5858020 	str	r8, [r5, #32]
   22ef4:	e5859024 	str	r9, [r5, #36]	; 0x24
   22ef8:	ebfff9da 	bl	21668 <CleanAndInvalidateDataCacheRange>
   22efc:	e1a01009 	mov	r1, r9
   22f00:	e1a00008 	mov	r0, r8
   22f04:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   22f08:	eafff9d6 	b	21668 <CleanAndInvalidateDataCacheRange>
   22f0c:	e30a1aec 	movw	r1, #43756	; 0xaaec
   22f10:	e3401002 	movt	r1, #2
   22f14:	e2810074 	add	r0, r1, #116	; 0x74
   22f18:	e3a02095 	mov	r2, #149	; 0x95
   22f1c:	ebffd94c 	bl	19454 <assertion_failed>
   22f20:	eaffffaa 	b	22dd0 <CDMAChannel::SetupMemCopy(void*, void const*, unsigned int, unsigned int, bool)+0x28>
   22f24:	e30a1aec 	movw	r1, #43756	; 0xaaec
   22f28:	e3401002 	movt	r1, #2
   22f2c:	e2810060 	add	r0, r1, #96	; 0x60
   22f30:	e3a02094 	mov	r2, #148	; 0x94
   22f34:	ebffd946 	bl	19454 <assertion_failed>
   22f38:	eaffffa2 	b	22dc8 <CDMAChannel::SetupMemCopy(void*, void const*, unsigned int, unsigned int, bool)+0x20>
   22f3c:	e30a1aec 	movw	r1, #43756	; 0xaaec
   22f40:	e3401002 	movt	r1, #2
   22f44:	e28100d4 	add	r0, r1, #212	; 0xd4
   22f48:	e3a0209c 	mov	r2, #156	; 0x9c
   22f4c:	ebffd940 	bl	19454 <assertion_failed>
   22f50:	eaffffb2 	b	22e20 <CDMAChannel::SetupMemCopy(void*, void const*, unsigned int, unsigned int, bool)+0x78>

00022f54 <CDMAChannel::SetupIORead(void*, unsigned int, unsigned int, TDREQ)>:
   22f54:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   22f58:	e1a06000 	mov	r6, r0
   22f5c:	e1a04002 	mov	r4, r2
   22f60:	e1a05003 	mov	r5, r3
   22f64:	e2517000 	subs	r7, r1, #0
   22f68:	e5dd8018 	ldrb	r8, [sp, #24]
   22f6c:	0a00004c 	beq	230a4 <CDMAChannel::SetupIORead(void*, unsigned int, unsigned int, TDREQ)+0x150>
   22f70:	e3550000 	cmp	r5, #0
   22f74:	0a00002e 	beq	23034 <CDMAChannel::SetupIORead(void*, unsigned int, unsigned int, TDREQ)+0xe0>
   22f78:	e3750107 	cmn	r5, #-1073741823	; 0xc0000001
   22f7c:	8a000026 	bhi	2301c <CDMAChannel::SetupIORead(void*, unsigned int, unsigned int, TDREQ)+0xc8>
   22f80:	e5963000 	ldr	r3, [r6]
   22f84:	e283383f 	add	r3, r3, #4128768	; 0x3f0000
   22f88:	e2833070 	add	r3, r3, #112	; 0x70
   22f8c:	e1a03403 	lsl	r3, r3, #8
   22f90:	e5933020 	ldr	r3, [r3, #32]
   22f94:	e2233201 	eor	r3, r3, #268435456	; 0x10000000
   22f98:	e7e03e53 	ubfx	r3, r3, #28, #1
   22f9c:	e3550801 	cmp	r5, #65536	; 0x10000
   22fa0:	33833001 	orrcc	r3, r3, #1
   22fa4:	e3530000 	cmp	r3, #0
   22fa8:	0a000043 	beq	230bc <CDMAChannel::SetupIORead(void*, unsigned int, unsigned int, TDREQ)+0x168>
   22fac:	e3d444ff 	bics	r4, r4, #-16777216	; 0xff000000
   22fb0:	0a00002b 	beq	23064 <CDMAChannel::SetupIORead(void*, unsigned int, unsigned int, TDREQ)+0x110>
   22fb4:	e596c008 	ldr	ip, [r6, #8]
   22fb8:	e284447e 	add	r4, r4, #2113929216	; 0x7e000000
   22fbc:	e35c0000 	cmp	ip, #0
   22fc0:	0a000030 	beq	23088 <CDMAChannel::SetupIORead(void*, unsigned int, unsigned int, TDREQ)+0x134>
   22fc4:	e3003438 	movw	r3, #1080	; 0x438
   22fc8:	e3a02000 	mov	r2, #0
   22fcc:	e58c4004 	str	r4, [ip, #4]
   22fd0:	e1838808 	orr	r8, r3, r8, lsl #16
   22fd4:	e58c500c 	str	r5, [ip, #12]
   22fd8:	e3873103 	orr	r3, r7, #-1073741824	; 0xc0000000
   22fdc:	e58c8000 	str	r8, [ip]
   22fe0:	e1a01005 	mov	r1, r5
   22fe4:	e58c3008 	str	r3, [ip, #8]
   22fe8:	e1a00007 	mov	r0, r7
   22fec:	e5cc2010 	strb	r2, [ip, #16]
   22ff0:	e5cc2011 	strb	r2, [ip, #17]
   22ff4:	e5cc2012 	strb	r2, [ip, #18]
   22ff8:	e5cc2013 	strb	r2, [ip, #19]
   22ffc:	e5cc2014 	strb	r2, [ip, #20]
   23000:	e5cc2015 	strb	r2, [ip, #21]
   23004:	e5cc2016 	strb	r2, [ip, #22]
   23008:	e5cc2017 	strb	r2, [ip, #23]
   2300c:	e5867020 	str	r7, [r6, #32]
   23010:	e5865024 	str	r5, [r6, #36]	; 0x24
   23014:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   23018:	eafff992 	b	21668 <CleanAndInvalidateDataCacheRange>
   2301c:	e30a1aec 	movw	r1, #43756	; 0xaaec
   23020:	e3401002 	movt	r1, #2
   23024:	e28100bc 	add	r0, r1, #188	; 0xbc
   23028:	e3a020bb 	mov	r2, #187	; 0xbb
   2302c:	ebffd908 	bl	19454 <assertion_failed>
   23030:	eaffffd2 	b	22f80 <CDMAChannel::SetupIORead(void*, unsigned int, unsigned int, TDREQ)+0x2c>
   23034:	e30a1aec 	movw	r1, #43756	; 0xaaec
   23038:	e3401002 	movt	r1, #2
   2303c:	e2810084 	add	r0, r1, #132	; 0x84
   23040:	e3a020ba 	mov	r2, #186	; 0xba
   23044:	ebffd902 	bl	19454 <assertion_failed>
   23048:	e5963000 	ldr	r3, [r6]
   2304c:	e3d444ff 	bics	r4, r4, #-16777216	; 0xff000000
   23050:	e283383f 	add	r3, r3, #4128768	; 0x3f0000
   23054:	e2833070 	add	r3, r3, #112	; 0x70
   23058:	e1a03403 	lsl	r3, r3, #8
   2305c:	e5933020 	ldr	r3, [r3, #32]
   23060:	1affffd3 	bne	22fb4 <CDMAChannel::SetupIORead(void*, unsigned int, unsigned int, TDREQ)+0x60>
   23064:	e30a1aec 	movw	r1, #43756	; 0xaaec
   23068:	e3401002 	movt	r1, #2
   2306c:	e2810f4b 	add	r0, r1, #300	; 0x12c
   23070:	e3a020c0 	mov	r2, #192	; 0xc0
   23074:	ebffd8f6 	bl	19454 <assertion_failed>
   23078:	e596c008 	ldr	ip, [r6, #8]
   2307c:	e284447e 	add	r4, r4, #2113929216	; 0x7e000000
   23080:	e35c0000 	cmp	ip, #0
   23084:	1affffce 	bne	22fc4 <CDMAChannel::SetupIORead(void*, unsigned int, unsigned int, TDREQ)+0x70>
   23088:	e30a1aec 	movw	r1, #43756	; 0xaaec
   2308c:	e3401002 	movt	r1, #2
   23090:	e28100a4 	add	r0, r1, #164	; 0xa4
   23094:	e3a020c3 	mov	r2, #195	; 0xc3
   23098:	ebffd8ed 	bl	19454 <assertion_failed>
   2309c:	e596c008 	ldr	ip, [r6, #8]
   230a0:	eaffffc7 	b	22fc4 <CDMAChannel::SetupIORead(void*, unsigned int, unsigned int, TDREQ)+0x70>
   230a4:	e30a1aec 	movw	r1, #43756	; 0xaaec
   230a8:	e3401002 	movt	r1, #2
   230ac:	e2810060 	add	r0, r1, #96	; 0x60
   230b0:	e3a020b9 	mov	r2, #185	; 0xb9
   230b4:	ebffd8e6 	bl	19454 <assertion_failed>
   230b8:	eaffffac 	b	22f70 <CDMAChannel::SetupIORead(void*, unsigned int, unsigned int, TDREQ)+0x1c>
   230bc:	e30a1aec 	movw	r1, #43756	; 0xaaec
   230c0:	e3401002 	movt	r1, #2
   230c4:	e28100d4 	add	r0, r1, #212	; 0xd4
   230c8:	e3a020bd 	mov	r2, #189	; 0xbd
   230cc:	ebffd8e0 	bl	19454 <assertion_failed>
   230d0:	eaffffb5 	b	22fac <CDMAChannel::SetupIORead(void*, unsigned int, unsigned int, TDREQ)+0x58>

000230d4 <CDMAChannel::SetupIOWrite(unsigned int, void const*, unsigned int, TDREQ)>:
   230d4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   230d8:	e1a06000 	mov	r6, r0
   230dc:	e1a04001 	mov	r4, r1
   230e0:	e1a08003 	mov	r8, r3
   230e4:	e2527000 	subs	r7, r2, #0
   230e8:	e5dd5018 	ldrb	r5, [sp, #24]
   230ec:	0a00004b 	beq	23220 <CDMAChannel::SetupIOWrite(unsigned int, void const*, unsigned int, TDREQ)+0x14c>
   230f0:	e3580000 	cmp	r8, #0
   230f4:	0a00002d 	beq	231b0 <CDMAChannel::SetupIOWrite(unsigned int, void const*, unsigned int, TDREQ)+0xdc>
   230f8:	e3780107 	cmn	r8, #-1073741823	; 0xc0000001
   230fc:	8a000025 	bhi	23198 <CDMAChannel::SetupIOWrite(unsigned int, void const*, unsigned int, TDREQ)+0xc4>
   23100:	e5963000 	ldr	r3, [r6]
   23104:	e283383f 	add	r3, r3, #4128768	; 0x3f0000
   23108:	e2833070 	add	r3, r3, #112	; 0x70
   2310c:	e1a03403 	lsl	r3, r3, #8
   23110:	e5933020 	ldr	r3, [r3, #32]
   23114:	e2233201 	eor	r3, r3, #268435456	; 0x10000000
   23118:	e7e03e53 	ubfx	r3, r3, #28, #1
   2311c:	e3580801 	cmp	r8, #65536	; 0x10000
   23120:	33833001 	orrcc	r3, r3, #1
   23124:	e3530000 	cmp	r3, #0
   23128:	0a000042 	beq	23238 <CDMAChannel::SetupIOWrite(unsigned int, void const*, unsigned int, TDREQ)+0x164>
   2312c:	e3d444ff 	bics	r4, r4, #-16777216	; 0xff000000
   23130:	0a00002a 	beq	231e0 <CDMAChannel::SetupIOWrite(unsigned int, void const*, unsigned int, TDREQ)+0x10c>
   23134:	e5962008 	ldr	r2, [r6, #8]
   23138:	e284447e 	add	r4, r4, #2113929216	; 0x7e000000
   2313c:	e3520000 	cmp	r2, #0
   23140:	0a00002f 	beq	23204 <CDMAChannel::SetupIOWrite(unsigned int, void const*, unsigned int, TDREQ)+0x130>
   23144:	e1a05805 	lsl	r5, r5, #16
   23148:	e3873103 	orr	r3, r7, #-1073741824	; 0xc0000000
   2314c:	e5824008 	str	r4, [r2, #8]
   23150:	e3855fd2 	orr	r5, r5, #840	; 0x348
   23154:	e582800c 	str	r8, [r2, #12]
   23158:	e1a01008 	mov	r1, r8
   2315c:	e5825000 	str	r5, [r2]
   23160:	e1a00007 	mov	r0, r7
   23164:	e5823004 	str	r3, [r2, #4]
   23168:	e3a03000 	mov	r3, #0
   2316c:	e5c23010 	strb	r3, [r2, #16]
   23170:	e5c23011 	strb	r3, [r2, #17]
   23174:	e5c23012 	strb	r3, [r2, #18]
   23178:	e5c23013 	strb	r3, [r2, #19]
   2317c:	e5c23014 	strb	r3, [r2, #20]
   23180:	e5c23015 	strb	r3, [r2, #21]
   23184:	e5c23016 	strb	r3, [r2, #22]
   23188:	e5c23017 	strb	r3, [r2, #23]
   2318c:	e5863020 	str	r3, [r6, #32]
   23190:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   23194:	eafff933 	b	21668 <CleanAndInvalidateDataCacheRange>
   23198:	e30a1aec 	movw	r1, #43756	; 0xaaec
   2319c:	e3401002 	movt	r1, #2
   231a0:	e28100bc 	add	r0, r1, #188	; 0xbc
   231a4:	e3a020da 	mov	r2, #218	; 0xda
   231a8:	ebffd8a9 	bl	19454 <assertion_failed>
   231ac:	eaffffd3 	b	23100 <CDMAChannel::SetupIOWrite(unsigned int, void const*, unsigned int, TDREQ)+0x2c>
   231b0:	e30a1aec 	movw	r1, #43756	; 0xaaec
   231b4:	e3401002 	movt	r1, #2
   231b8:	e2810084 	add	r0, r1, #132	; 0x84
   231bc:	e3a020d9 	mov	r2, #217	; 0xd9
   231c0:	ebffd8a3 	bl	19454 <assertion_failed>
   231c4:	e5963000 	ldr	r3, [r6]
   231c8:	e3d444ff 	bics	r4, r4, #-16777216	; 0xff000000
   231cc:	e283383f 	add	r3, r3, #4128768	; 0x3f0000
   231d0:	e2833070 	add	r3, r3, #112	; 0x70
   231d4:	e1a03403 	lsl	r3, r3, #8
   231d8:	e5933020 	ldr	r3, [r3, #32]
   231dc:	1affffd4 	bne	23134 <CDMAChannel::SetupIOWrite(unsigned int, void const*, unsigned int, TDREQ)+0x60>
   231e0:	e30a1aec 	movw	r1, #43756	; 0xaaec
   231e4:	e3401002 	movt	r1, #2
   231e8:	e3a020df 	mov	r2, #223	; 0xdf
   231ec:	e2810f4b 	add	r0, r1, #300	; 0x12c
   231f0:	ebffd897 	bl	19454 <assertion_failed>
   231f4:	e5962008 	ldr	r2, [r6, #8]
   231f8:	e284447e 	add	r4, r4, #2113929216	; 0x7e000000
   231fc:	e3520000 	cmp	r2, #0
   23200:	1affffcf 	bne	23144 <CDMAChannel::SetupIOWrite(unsigned int, void const*, unsigned int, TDREQ)+0x70>
   23204:	e30a1aec 	movw	r1, #43756	; 0xaaec
   23208:	e3401002 	movt	r1, #2
   2320c:	e3a020e2 	mov	r2, #226	; 0xe2
   23210:	e28100a4 	add	r0, r1, #164	; 0xa4
   23214:	ebffd88e 	bl	19454 <assertion_failed>
   23218:	e5962008 	ldr	r2, [r6, #8]
   2321c:	eaffffc8 	b	23144 <CDMAChannel::SetupIOWrite(unsigned int, void const*, unsigned int, TDREQ)+0x70>
   23220:	e30a1aec 	movw	r1, #43756	; 0xaaec
   23224:	e3401002 	movt	r1, #2
   23228:	e2810074 	add	r0, r1, #116	; 0x74
   2322c:	e3a020d8 	mov	r2, #216	; 0xd8
   23230:	ebffd887 	bl	19454 <assertion_failed>
   23234:	eaffffad 	b	230f0 <CDMAChannel::SetupIOWrite(unsigned int, void const*, unsigned int, TDREQ)+0x1c>
   23238:	e30a1aec 	movw	r1, #43756	; 0xaaec
   2323c:	e3401002 	movt	r1, #2
   23240:	e28100d4 	add	r0, r1, #212	; 0xd4
   23244:	e3a020dc 	mov	r2, #220	; 0xdc
   23248:	ebffd881 	bl	19454 <assertion_failed>
   2324c:	eaffffb6 	b	2312c <CDMAChannel::SetupIOWrite(unsigned int, void const*, unsigned int, TDREQ)+0x58>

00023250 <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)>:
   23250:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   23254:	e1a07000 	mov	r7, r0
   23258:	e1a08002 	mov	r8, r2
   2325c:	e1a05003 	mov	r5, r3
   23260:	e2519000 	subs	r9, r1, #0
   23264:	e59d6020 	ldr	r6, [sp, #32]
   23268:	e59d4024 	ldr	r4, [sp, #36]	; 0x24
   2326c:	e59da028 	ldr	sl, [sp, #40]	; 0x28
   23270:	0a000063 	beq	23404 <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)+0x1b4>
   23274:	e3580000 	cmp	r8, #0
   23278:	0a000068 	beq	23420 <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)+0x1d0>
   2327c:	e3550000 	cmp	r5, #0
   23280:	0a00004a 	beq	233b0 <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)+0x160>
   23284:	e3550801 	cmp	r5, #65536	; 0x10000
   23288:	2a00003b 	bcs	2337c <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)+0x12c>
   2328c:	e3560000 	cmp	r6, #0
   23290:	0a000040 	beq	23398 <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)+0x148>
   23294:	e3560901 	cmp	r6, #16384	; 0x4000
   23298:	2a000023 	bcs	2332c <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)+0xdc>
   2329c:	e3540801 	cmp	r4, #65536	; 0x10000
   232a0:	2a000028 	bcs	23348 <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)+0xf8>
   232a4:	e35a000f 	cmp	sl, #15
   232a8:	8a00002d 	bhi	23364 <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)+0x114>
   232ac:	e5973000 	ldr	r3, [r7]
   232b0:	e283383f 	add	r3, r3, #4128768	; 0x3f0000
   232b4:	e2833070 	add	r3, r3, #112	; 0x70
   232b8:	e1a03403 	lsl	r3, r3, #8
   232bc:	e5933020 	ldr	r3, [r3, #32]
   232c0:	e3130201 	tst	r3, #268435456	; 0x10000000
   232c4:	1a00003f 	bne	233c8 <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)+0x178>
   232c8:	e5973008 	ldr	r3, [r7, #8]
   232cc:	e3530000 	cmp	r3, #0
   232d0:	0a000044 	beq	233e8 <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)+0x198>
   232d4:	e3001332 	movw	r1, #818	; 0x332
   232d8:	e2462001 	sub	r2, r6, #1
   232dc:	e181a60a 	orr	sl, r1, sl, lsl #12
   232e0:	e1852802 	orr	r2, r5, r2, lsl #16
   232e4:	e3899103 	orr	r9, r9, #-1073741824	; 0xc0000000
   232e8:	e1a04804 	lsl	r4, r4, #16
   232ec:	e5839008 	str	r9, [r3, #8]
   232f0:	e0010596 	mul	r1, r6, r5
   232f4:	e5834010 	str	r4, [r3, #16]
   232f8:	e1a00008 	mov	r0, r8
   232fc:	e583a000 	str	sl, [r3]
   23300:	e583200c 	str	r2, [r3, #12]
   23304:	e3882103 	orr	r2, r8, #-1073741824	; 0xc0000000
   23308:	e5832004 	str	r2, [r3, #4]
   2330c:	e3a02000 	mov	r2, #0
   23310:	e5c32014 	strb	r2, [r3, #20]
   23314:	e5c32015 	strb	r2, [r3, #21]
   23318:	e5c32016 	strb	r2, [r3, #22]
   2331c:	e5c32017 	strb	r2, [r3, #23]
   23320:	e5872020 	str	r2, [r7, #32]
   23324:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   23328:	eafff8ce 	b	21668 <CleanAndInvalidateDataCacheRange>
   2332c:	e30a1aec 	movw	r1, #43756	; 0xaaec
   23330:	e3401002 	movt	r1, #2
   23334:	e2810f5e 	add	r0, r1, #376	; 0x178
   23338:	e3a020fd 	mov	r2, #253	; 0xfd
   2333c:	ebffd844 	bl	19454 <assertion_failed>
   23340:	e3540801 	cmp	r4, #65536	; 0x10000
   23344:	3affffd6 	bcc	232a4 <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)+0x54>
   23348:	e30a1aec 	movw	r1, #43756	; 0xaaec
   2334c:	e3401002 	movt	r1, #2
   23350:	e2810e19 	add	r0, r1, #400	; 0x190
   23354:	e3a020fe 	mov	r2, #254	; 0xfe
   23358:	ebffd83d 	bl	19454 <assertion_failed>
   2335c:	e35a000f 	cmp	sl, #15
   23360:	9affffd1 	bls	232ac <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)+0x5c>
   23364:	e30a1aec 	movw	r1, #43756	; 0xaaec
   23368:	e3401002 	movt	r1, #2
   2336c:	e2810090 	add	r0, r1, #144	; 0x90
   23370:	e3a020ff 	mov	r2, #255	; 0xff
   23374:	ebffd836 	bl	19454 <assertion_failed>
   23378:	eaffffcb 	b	232ac <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)+0x5c>
   2337c:	e30a1aec 	movw	r1, #43756	; 0xaaec
   23380:	e3401002 	movt	r1, #2
   23384:	e2810e15 	add	r0, r1, #336	; 0x150
   23388:	e3a020fb 	mov	r2, #251	; 0xfb
   2338c:	ebffd830 	bl	19454 <assertion_failed>
   23390:	e3560000 	cmp	r6, #0
   23394:	1affffbe 	bne	23294 <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)+0x44>
   23398:	e30a1aec 	movw	r1, #43756	; 0xaaec
   2339c:	e3401002 	movt	r1, #2
   233a0:	e2810f5a 	add	r0, r1, #360	; 0x168
   233a4:	e3a020fc 	mov	r2, #252	; 0xfc
   233a8:	ebffd829 	bl	19454 <assertion_failed>
   233ac:	eaffffba 	b	2329c <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)+0x4c>
   233b0:	e30a1aec 	movw	r1, #43756	; 0xaaec
   233b4:	e3401002 	movt	r1, #2
   233b8:	e2810f4f 	add	r0, r1, #316	; 0x13c
   233bc:	e3a020fa 	mov	r2, #250	; 0xfa
   233c0:	ebffd823 	bl	19454 <assertion_failed>
   233c4:	eaffffb0 	b	2328c <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)+0x3c>
   233c8:	e30a1aec 	movw	r1, #43756	; 0xaaec
   233cc:	e3401002 	movt	r1, #2
   233d0:	e2810f6a 	add	r0, r1, #424	; 0x1a8
   233d4:	e3002101 	movw	r2, #257	; 0x101
   233d8:	ebffd81d 	bl	19454 <assertion_failed>
   233dc:	e5973008 	ldr	r3, [r7, #8]
   233e0:	e3530000 	cmp	r3, #0
   233e4:	1affffba 	bne	232d4 <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)+0x84>
   233e8:	e30a1aec 	movw	r1, #43756	; 0xaaec
   233ec:	e3401002 	movt	r1, #2
   233f0:	e28100a4 	add	r0, r1, #164	; 0xa4
   233f4:	e3002103 	movw	r2, #259	; 0x103
   233f8:	ebffd815 	bl	19454 <assertion_failed>
   233fc:	e5973008 	ldr	r3, [r7, #8]
   23400:	eaffffb3 	b	232d4 <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)+0x84>
   23404:	e30a1aec 	movw	r1, #43756	; 0xaaec
   23408:	e3401002 	movt	r1, #2
   2340c:	e2810060 	add	r0, r1, #96	; 0x60
   23410:	e3a020f8 	mov	r2, #248	; 0xf8
   23414:	ebffd80e 	bl	19454 <assertion_failed>
   23418:	e3580000 	cmp	r8, #0
   2341c:	1affff96 	bne	2327c <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)+0x2c>
   23420:	e30a1aec 	movw	r1, #43756	; 0xaaec
   23424:	e3401002 	movt	r1, #2
   23428:	e2810074 	add	r0, r1, #116	; 0x74
   2342c:	e3a020f9 	mov	r2, #249	; 0xf9
   23430:	ebffd807 	bl	19454 <assertion_failed>
   23434:	eaffff90 	b	2327c <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)+0x2c>

00023438 <CDMAChannel::SetCompletionRoutine(void (*)(unsigned int, bool, void*), void*)>:
   23438:	e5903000 	ldr	r3, [r0]
   2343c:	e92d4070 	push	{r4, r5, r6, lr}
   23440:	e1a04000 	mov	r4, r0
   23444:	e1a05001 	mov	r5, r1
   23448:	e1a06002 	mov	r6, r2
   2344c:	e353000c 	cmp	r3, #12
   23450:	8a00000a 	bhi	23480 <CDMAChannel::SetCompletionRoutine(void (*)(unsigned int, bool, void*), void*)+0x48>
   23454:	e594300c 	ldr	r3, [r4, #12]
   23458:	e3530000 	cmp	r3, #0
   2345c:	0a00000f 	beq	234a0 <CDMAChannel::SetCompletionRoutine(void (*)(unsigned int, bool, void*), void*)+0x68>
   23460:	e5d43010 	ldrb	r3, [r4, #16]
   23464:	e3530000 	cmp	r3, #0
   23468:	0a000014 	beq	234c0 <CDMAChannel::SetCompletionRoutine(void (*)(unsigned int, bool, void*), void*)+0x88>
   2346c:	e5845014 	str	r5, [r4, #20]
   23470:	e3550000 	cmp	r5, #0
   23474:	0a00001d 	beq	234f0 <CDMAChannel::SetCompletionRoutine(void (*)(unsigned int, bool, void*), void*)+0xb8>
   23478:	e5846018 	str	r6, [r4, #24]
   2347c:	e8bd8070 	pop	{r4, r5, r6, pc}
   23480:	e30a1aec 	movw	r1, #43756	; 0xaaec
   23484:	e3401002 	movt	r1, #2
   23488:	e281004c 	add	r0, r1, #76	; 0x4c
   2348c:	e3002119 	movw	r2, #281	; 0x119
   23490:	ebffd7ef 	bl	19454 <assertion_failed>
   23494:	e594300c 	ldr	r3, [r4, #12]
   23498:	e3530000 	cmp	r3, #0
   2349c:	1affffef 	bne	23460 <CDMAChannel::SetCompletionRoutine(void (*)(unsigned int, bool, void*), void*)+0x28>
   234a0:	e30a1aec 	movw	r1, #43756	; 0xaaec
   234a4:	e3401002 	movt	r1, #2
   234a8:	e2810e1e 	add	r0, r1, #480	; 0x1e0
   234ac:	e300211a 	movw	r2, #282	; 0x11a
   234b0:	ebffd7e7 	bl	19454 <assertion_failed>
   234b4:	e5d43010 	ldrb	r3, [r4, #16]
   234b8:	e3530000 	cmp	r3, #0
   234bc:	1affffea 	bne	2346c <CDMAChannel::SetCompletionRoutine(void (*)(unsigned int, bool, void*), void*)+0x34>
   234c0:	e5941000 	ldr	r1, [r4]
   234c4:	e1a03004 	mov	r3, r4
   234c8:	e30328b0 	movw	r2, #14512	; 0x38b0
   234cc:	e3402002 	movt	r2, #2
   234d0:	e2811010 	add	r1, r1, #16
   234d4:	e594000c 	ldr	r0, [r4, #12]
   234d8:	ebffdede 	bl	1b058 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)>
   234dc:	e3a03001 	mov	r3, #1
   234e0:	e5845014 	str	r5, [r4, #20]
   234e4:	e3550000 	cmp	r5, #0
   234e8:	e5c43010 	strb	r3, [r4, #16]
   234ec:	1affffe1 	bne	23478 <CDMAChannel::SetCompletionRoutine(void (*)(unsigned int, bool, void*), void*)+0x40>
   234f0:	e30a1aec 	movw	r1, #43756	; 0xaaec
   234f4:	e3401002 	movt	r1, #2
   234f8:	e2810f7e 	add	r0, r1, #504	; 0x1f8
   234fc:	e3a02f49 	mov	r2, #292	; 0x124
   23500:	ebffd7d3 	bl	19454 <assertion_failed>
   23504:	e5846018 	str	r6, [r4, #24]
   23508:	e8bd8070 	pop	{r4, r5, r6, pc}

0002350c <CDMAChannel::Start()>:
   2350c:	e5903000 	ldr	r3, [r0]
   23510:	e92d4010 	push	{r4, lr}
   23514:	e1a04000 	mov	r4, r0
   23518:	e353000c 	cmp	r3, #12
   2351c:	8a00003f 	bhi	23620 <CDMAChannel::Start()+0x114>
   23520:	e5943008 	ldr	r3, [r4, #8]
   23524:	e3530000 	cmp	r3, #0
   23528:	0a000044 	beq	23640 <CDMAChannel::Start()+0x134>
   2352c:	e5943014 	ldr	r3, [r4, #20]
   23530:	e3530000 	cmp	r3, #0
   23534:	0a000009 	beq	23560 <CDMAChannel::Start()+0x54>
   23538:	e594300c 	ldr	r3, [r4, #12]
   2353c:	e3530000 	cmp	r3, #0
   23540:	0a000044 	beq	23658 <CDMAChannel::Start()+0x14c>
   23544:	e5d43010 	ldrb	r3, [r4, #16]
   23548:	e3530000 	cmp	r3, #0
   2354c:	0a000026 	beq	235ec <CDMAChannel::Start()+0xe0>
   23550:	e5942008 	ldr	r2, [r4, #8]
   23554:	e5923000 	ldr	r3, [r2]
   23558:	e3833001 	orr	r3, r3, #1
   2355c:	e5823000 	str	r3, [r2]
   23560:	e5943000 	ldr	r3, [r4]
   23564:	e283283f 	add	r2, r3, #4128768	; 0x3f0000
   23568:	e2822070 	add	r2, r2, #112	; 0x70
   2356c:	e1a02402 	lsl	r2, r2, #8
   23570:	e5922000 	ldr	r2, [r2]
   23574:	e3120004 	tst	r2, #4
   23578:	1a000021 	bne	23604 <CDMAChannel::Start()+0xf8>
   2357c:	e3a02a07 	mov	r2, #28672	; 0x7000
   23580:	e3432f00 	movt	r2, #16128	; 0x3f00
   23584:	e3a01001 	mov	r1, #1
   23588:	e5922fe0 	ldr	r2, [r2, #4064]	; 0xfe0
   2358c:	e0122311 	ands	r2, r2, r1, lsl r3
   23590:	0a000005 	beq	235ac <CDMAChannel::Start()+0xa0>
   23594:	e30a1aec 	movw	r1, #43756	; 0xaaec
   23598:	e3401002 	movt	r1, #2
   2359c:	e2810f96 	add	r0, r1, #600	; 0x258
   235a0:	e3a02f4e 	mov	r2, #312	; 0x138
   235a4:	ebffd7aa 	bl	19454 <assertion_failed>
   235a8:	e5943000 	ldr	r3, [r4]
   235ac:	e283383f 	add	r3, r3, #4128768	; 0x3f0000
   235b0:	e5940008 	ldr	r0, [r4, #8]
   235b4:	e2833070 	add	r3, r3, #112	; 0x70
   235b8:	e3a01020 	mov	r1, #32
   235bc:	e1a03403 	lsl	r3, r3, #8
   235c0:	e3802103 	orr	r2, r0, #-1073741824	; 0xc0000000
   235c4:	e5832004 	str	r2, [r3, #4]
   235c8:	ebfff826 	bl	21668 <CleanAndInvalidateDataCacheRange>
   235cc:	e5943000 	ldr	r3, [r4]
   235d0:	e3a02001 	mov	r2, #1
   235d4:	e34120f1 	movt	r2, #4337	; 0x10f1
   235d8:	e283383f 	add	r3, r3, #4128768	; 0x3f0000
   235dc:	e2833070 	add	r3, r3, #112	; 0x70
   235e0:	e1a03403 	lsl	r3, r3, #8
   235e4:	e5832000 	str	r2, [r3]
   235e8:	e8bd8010 	pop	{r4, pc}
   235ec:	e30a1aec 	movw	r1, #43756	; 0xaaec
   235f0:	e3401002 	movt	r1, #2
   235f4:	e2810f85 	add	r0, r1, #532	; 0x214
   235f8:	e3002131 	movw	r2, #305	; 0x131
   235fc:	ebffd794 	bl	19454 <assertion_failed>
   23600:	eaffffd2 	b	23550 <CDMAChannel::Start()+0x44>
   23604:	e30a1aec 	movw	r1, #43756	; 0xaaec
   23608:	e3401002 	movt	r1, #2
   2360c:	e2810f89 	add	r0, r1, #548	; 0x224
   23610:	e3002137 	movw	r2, #311	; 0x137
   23614:	ebffd78e 	bl	19454 <assertion_failed>
   23618:	e5943000 	ldr	r3, [r4]
   2361c:	eaffffd6 	b	2357c <CDMAChannel::Start()+0x70>
   23620:	e30a1aec 	movw	r1, #43756	; 0xaaec
   23624:	e3401002 	movt	r1, #2
   23628:	e2810030 	add	r0, r1, #48	; 0x30
   2362c:	e300212b 	movw	r2, #299	; 0x12b
   23630:	ebffd787 	bl	19454 <assertion_failed>
   23634:	e5943008 	ldr	r3, [r4, #8]
   23638:	e3530000 	cmp	r3, #0
   2363c:	1affffba 	bne	2352c <CDMAChannel::Start()+0x20>
   23640:	e30a1aec 	movw	r1, #43756	; 0xaaec
   23644:	e3401002 	movt	r1, #2
   23648:	e28100a4 	add	r0, r1, #164	; 0xa4
   2364c:	e3a02f4b 	mov	r2, #300	; 0x12c
   23650:	ebffd77f 	bl	19454 <assertion_failed>
   23654:	eaffffb4 	b	2352c <CDMAChannel::Start()+0x20>
   23658:	e30a1aec 	movw	r1, #43756	; 0xaaec
   2365c:	e3401002 	movt	r1, #2
   23660:	e2810e1e 	add	r0, r1, #480	; 0x1e0
   23664:	e3a02e13 	mov	r2, #304	; 0x130
   23668:	ebffd779 	bl	19454 <assertion_failed>
   2366c:	eaffffb4 	b	23544 <CDMAChannel::Start()+0x38>

00023670 <CDMAChannel::Wait()>:
   23670:	e5903000 	ldr	r3, [r0]
   23674:	e92d4010 	push	{r4, lr}
   23678:	e1a04000 	mov	r4, r0
   2367c:	e353000c 	cmp	r3, #12
   23680:	8a000019 	bhi	236ec <CDMAChannel::Wait()+0x7c>
   23684:	e5943014 	ldr	r3, [r4, #20]
   23688:	e3530000 	cmp	r3, #0
   2368c:	0a000004 	beq	236a4 <CDMAChannel::Wait()+0x34>
   23690:	e30a1aec 	movw	r1, #43756	; 0xaaec
   23694:	e3401002 	movt	r1, #2
   23698:	e2810fa3 	add	r0, r1, #652	; 0x28c
   2369c:	e3002149 	movw	r2, #329	; 0x149
   236a0:	ebffd76b 	bl	19454 <assertion_failed>
   236a4:	e5943000 	ldr	r3, [r4]
   236a8:	e283383f 	add	r3, r3, #4128768	; 0x3f0000
   236ac:	e2833070 	add	r3, r3, #112	; 0x70
   236b0:	e1a03403 	lsl	r3, r3, #8
   236b4:	e5930000 	ldr	r0, [r3]
   236b8:	e3100001 	tst	r0, #1
   236bc:	1afffffc 	bne	236b4 <CDMAChannel::Wait()+0x44>
   236c0:	e5942020 	ldr	r2, [r4, #32]
   236c4:	e2203c01 	eor	r3, r0, #256	; 0x100
   236c8:	e3520000 	cmp	r2, #0
   236cc:	e7e00453 	ubfx	r0, r3, #8, #1
   236d0:	e5c4001c 	strb	r0, [r4, #28]
   236d4:	08bd8010 	popeq	{r4, pc}
   236d8:	e1a00002 	mov	r0, r2
   236dc:	e5941024 	ldr	r1, [r4, #36]	; 0x24
   236e0:	ebfff7e0 	bl	21668 <CleanAndInvalidateDataCacheRange>
   236e4:	e5d4001c 	ldrb	r0, [r4, #28]
   236e8:	e8bd8010 	pop	{r4, pc}
   236ec:	e30a1aec 	movw	r1, #43756	; 0xaaec
   236f0:	e3401002 	movt	r1, #2
   236f4:	e2810030 	add	r0, r1, #48	; 0x30
   236f8:	e3a02f52 	mov	r2, #328	; 0x148
   236fc:	ebffd754 	bl	19454 <assertion_failed>
   23700:	eaffffdf 	b	23684 <CDMAChannel::Wait()+0x14>

00023704 <CDMAChannel::GetStatus()>:
   23704:	e5903000 	ldr	r3, [r0]
   23708:	e92d4010 	push	{r4, lr}
   2370c:	e1a04000 	mov	r4, r0
   23710:	e353000c 	cmp	r3, #12
   23714:	8a00000c 	bhi	2374c <CDMAChannel::GetStatus()+0x48>
   23718:	e283383f 	add	r3, r3, #4128768	; 0x3f0000
   2371c:	e2833070 	add	r3, r3, #112	; 0x70
   23720:	e1a03403 	lsl	r3, r3, #8
   23724:	e5933000 	ldr	r3, [r3]
   23728:	e3130001 	tst	r3, #1
   2372c:	0a000004 	beq	23744 <CDMAChannel::GetStatus()+0x40>
   23730:	e30a1aec 	movw	r1, #43756	; 0xaaec
   23734:	e3401002 	movt	r1, #2
   23738:	e2810faa 	add	r0, r1, #680	; 0x2a8
   2373c:	e3002162 	movw	r2, #354	; 0x162
   23740:	ebffd743 	bl	19454 <assertion_failed>
   23744:	e5d4001c 	ldrb	r0, [r4, #28]
   23748:	e8bd8010 	pop	{r4, pc}
   2374c:	e30a1aec 	movw	r1, #43756	; 0xaaec
   23750:	e3401002 	movt	r1, #2
   23754:	e2810030 	add	r0, r1, #48	; 0x30
   23758:	e3002161 	movw	r2, #353	; 0x161
   2375c:	ebffd73c 	bl	19454 <assertion_failed>
   23760:	e5943000 	ldr	r3, [r4]
   23764:	eaffffeb 	b	23718 <CDMAChannel::GetStatus()+0x14>

00023768 <CDMAChannel::InterruptHandler()>:
   23768:	e92d4070 	push	{r4, r5, r6, lr}
   2376c:	e1a04000 	mov	r4, r0
   23770:	e5900020 	ldr	r0, [r0, #32]
   23774:	e3500000 	cmp	r0, #0
   23778:	1a000026 	bne	23818 <CDMAChannel::InterruptHandler()+0xb0>
   2377c:	e5943000 	ldr	r3, [r4]
   23780:	e353000c 	cmp	r3, #12
   23784:	8a000028 	bhi	2382c <CDMAChannel::InterruptHandler()+0xc4>
   23788:	e3a02a07 	mov	r2, #28672	; 0x7000
   2378c:	e3432f00 	movt	r2, #16128	; 0x3f00
   23790:	e3a05001 	mov	r5, #1
   23794:	e5922fe0 	ldr	r2, [r2, #4064]	; 0xfe0
   23798:	e1a05315 	lsl	r5, r5, r3
   2379c:	e1150002 	tst	r5, r2
   237a0:	0a000034 	beq	23878 <CDMAChannel::InterruptHandler()+0x110>
   237a4:	e3a03a07 	mov	r3, #28672	; 0x7000
   237a8:	e3433f00 	movt	r3, #16128	; 0x3f00
   237ac:	e5835fe0 	str	r5, [r3, #4064]	; 0xfe0
   237b0:	e5943000 	ldr	r3, [r4]
   237b4:	e283383f 	add	r3, r3, #4128768	; 0x3f0000
   237b8:	e2833070 	add	r3, r3, #112	; 0x70
   237bc:	e1a03403 	lsl	r3, r3, #8
   237c0:	e5935000 	ldr	r5, [r3]
   237c4:	e3150004 	tst	r5, #4
   237c8:	0a000024 	beq	23860 <CDMAChannel::InterruptHandler()+0xf8>
   237cc:	e3150001 	tst	r5, #1
   237d0:	1a00001c 	bne	23848 <CDMAChannel::InterruptHandler()+0xe0>
   237d4:	e5943000 	ldr	r3, [r4]
   237d8:	e2251c01 	eor	r1, r5, #256	; 0x100
   237dc:	e594e014 	ldr	lr, [r4, #20]
   237e0:	e3a02004 	mov	r2, #4
   237e4:	e283383f 	add	r3, r3, #4128768	; 0x3f0000
   237e8:	e7e01451 	ubfx	r1, r1, #8, #1
   237ec:	e2833070 	add	r3, r3, #112	; 0x70
   237f0:	e35e0000 	cmp	lr, #0
   237f4:	e1a03403 	lsl	r3, r3, #8
   237f8:	e5832000 	str	r2, [r3]
   237fc:	e5c4101c 	strb	r1, [r4, #28]
   23800:	0a000022 	beq	23890 <CDMAChannel::InterruptHandler()+0x128>
   23804:	e5942018 	ldr	r2, [r4, #24]
   23808:	e1a0300e 	mov	r3, lr
   2380c:	e5940000 	ldr	r0, [r4]
   23810:	e8bd4070 	pop	{r4, r5, r6, lr}
   23814:	e12fff13 	bx	r3
   23818:	e5941024 	ldr	r1, [r4, #36]	; 0x24
   2381c:	ebfff791 	bl	21668 <CleanAndInvalidateDataCacheRange>
   23820:	e5943000 	ldr	r3, [r4]
   23824:	e353000c 	cmp	r3, #12
   23828:	9affffd6 	bls	23788 <CDMAChannel::InterruptHandler()+0x20>
   2382c:	e30a1aec 	movw	r1, #43756	; 0xaaec
   23830:	e3401002 	movt	r1, #2
   23834:	e2810030 	add	r0, r1, #48	; 0x30
   23838:	e3a02e17 	mov	r2, #368	; 0x170
   2383c:	ebffd704 	bl	19454 <assertion_failed>
   23840:	e5943000 	ldr	r3, [r4]
   23844:	eaffffcf 	b	23788 <CDMAChannel::InterruptHandler()+0x20>
   23848:	e30a1aec 	movw	r1, #43756	; 0xaaec
   2384c:	e3401002 	movt	r1, #2
   23850:	e2810fc1 	add	r0, r1, #772	; 0x304
   23854:	e300217b 	movw	r2, #379	; 0x17b
   23858:	ebffd6fd 	bl	19454 <assertion_failed>
   2385c:	eaffffdc 	b	237d4 <CDMAChannel::InterruptHandler()+0x6c>
   23860:	e30a1aec 	movw	r1, #43756	; 0xaaec
   23864:	e3401002 	movt	r1, #2
   23868:	e2810fbd 	add	r0, r1, #756	; 0x2f4
   2386c:	e300217a 	movw	r2, #378	; 0x17a
   23870:	ebffd6f7 	bl	19454 <assertion_failed>
   23874:	eaffffd4 	b	237cc <CDMAChannel::InterruptHandler()+0x64>
   23878:	e30a1aec 	movw	r1, #43756	; 0xaaec
   2387c:	e3401002 	movt	r1, #2
   23880:	e2810fb7 	add	r0, r1, #732	; 0x2dc
   23884:	e3002176 	movw	r2, #374	; 0x176
   23888:	ebffd6f1 	bl	19454 <assertion_failed>
   2388c:	eaffffc4 	b	237a4 <CDMAChannel::InterruptHandler()+0x3c>
   23890:	e30a1aec 	movw	r1, #43756	; 0xaaec
   23894:	e3401002 	movt	r1, #2
   23898:	e2810f7e 	add	r0, r1, #504	; 0x1f8
   2389c:	e3002182 	movw	r2, #386	; 0x182
   238a0:	ebffd6eb 	bl	19454 <assertion_failed>
   238a4:	e594e014 	ldr	lr, [r4, #20]
   238a8:	e5d4101c 	ldrb	r1, [r4, #28]
   238ac:	eaffffd4 	b	23804 <CDMAChannel::InterruptHandler()+0x9c>

000238b0 <CDMAChannel::InterruptStub(void*)>:
   238b0:	e92d4010 	push	{r4, lr}
   238b4:	e2504000 	subs	r4, r0, #0
   238b8:	0a000002 	beq	238c8 <CDMAChannel::InterruptStub(void*)+0x18>
   238bc:	e1a00004 	mov	r0, r4
   238c0:	e8bd4010 	pop	{r4, lr}
   238c4:	eaffffa7 	b	23768 <CDMAChannel::InterruptHandler()>
   238c8:	e30a1aec 	movw	r1, #43756	; 0xaaec
   238cc:	e3401002 	movt	r1, #2
   238d0:	e2810fc6 	add	r0, r1, #792	; 0x318
   238d4:	e3002189 	movw	r2, #393	; 0x189
   238d8:	ebffd6dd 	bl	19454 <assertion_failed>
   238dc:	e1a00004 	mov	r0, r4
   238e0:	e8bd4010 	pop	{r4, lr}
   238e4:	eaffff9f 	b	23768 <CDMAChannel::InterruptHandler()>

000238e8 <CGPIOManager::CGPIOManager(CInterruptSystem*)>:
   238e8:	e1a03000 	mov	r3, r0
   238ec:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   238f0:	e3a0e000 	mov	lr, #0
   238f4:	e1a0c00e 	mov	ip, lr
   238f8:	e28020dc 	add	r2, r0, #220	; 0xdc
   238fc:	e5801000 	str	r1, [r0]
   23900:	e5e3e004 	strb	lr, [r3, #4]!
   23904:	e5a3c004 	str	ip, [r3, #4]!
   23908:	e1530002 	cmp	r3, r2
   2390c:	1afffffc 	bne	23904 <CGPIOManager::CGPIOManager(CInterruptSystem*)+0x1c>
   23910:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

00023914 <CGPIOManager::~CGPIOManager()>:
   23914:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   23918:	e30a6e10 	movw	r6, #44560	; 0xae10
   2391c:	e3406002 	movt	r6, #2
   23920:	e30a5e20 	movw	r5, #44576	; 0xae20
   23924:	e3405002 	movt	r5, #2
   23928:	e1a08000 	mov	r8, r0
   2392c:	e2804004 	add	r4, r0, #4
   23930:	e28070dc 	add	r7, r0, #220	; 0xdc
   23934:	e5b43004 	ldr	r3, [r4, #4]!
   23938:	e3a0202c 	mov	r2, #44	; 0x2c
   2393c:	e1a01006 	mov	r1, r6
   23940:	e1a00005 	mov	r0, r5
   23944:	e3530000 	cmp	r3, #0
   23948:	0a000000 	beq	23950 <CGPIOManager::~CGPIOManager()+0x3c>
   2394c:	ebffd6c0 	bl	19454 <assertion_failed>
   23950:	e1540007 	cmp	r4, r7
   23954:	1afffff6 	bne	23934 <CGPIOManager::~CGPIOManager()+0x20>
   23958:	e5d83004 	ldrb	r3, [r8, #4]
   2395c:	e3530000 	cmp	r3, #0
   23960:	0a000004 	beq	23978 <CGPIOManager::~CGPIOManager()+0x64>
   23964:	e5980000 	ldr	r0, [r8]
   23968:	e3500000 	cmp	r0, #0
   2396c:	0a000003 	beq	23980 <CGPIOManager::~CGPIOManager()+0x6c>
   23970:	e3a01034 	mov	r1, #52	; 0x34
   23974:	ebffddfc 	bl	1b16c <CInterruptSystem::DisconnectIRQ(unsigned int)>
   23978:	e1a00008 	mov	r0, r8
   2397c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   23980:	e30a1e10 	movw	r1, #44560	; 0xae10
   23984:	e3401002 	movt	r1, #2
   23988:	e30a0e34 	movw	r0, #44596	; 0xae34
   2398c:	e3400002 	movt	r0, #2
   23990:	e3a02032 	mov	r2, #50	; 0x32
   23994:	ebffd6ae 	bl	19454 <assertion_failed>
   23998:	e5980000 	ldr	r0, [r8]
   2399c:	eafffff3 	b	23970 <CGPIOManager::~CGPIOManager()+0x5c>

000239a0 <CGPIOManager::Initialize()>:
   239a0:	e5d03004 	ldrb	r3, [r0, #4]
   239a4:	e92d4010 	push	{r4, lr}
   239a8:	e1a04000 	mov	r4, r0
   239ac:	e3530000 	cmp	r3, #0
   239b0:	1a00000b 	bne	239e4 <CGPIOManager::Initialize()+0x44>
   239b4:	e5940000 	ldr	r0, [r4]
   239b8:	e3500000 	cmp	r0, #0
   239bc:	0a000011 	beq	23a08 <CGPIOManager::Initialize()+0x68>
   239c0:	e1a03004 	mov	r3, r4
   239c4:	e3a01034 	mov	r1, #52	; 0x34
   239c8:	e3032c60 	movw	r2, #15456	; 0x3c60
   239cc:	e3402002 	movt	r2, #2
   239d0:	ebffdda0 	bl	1b058 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)>
   239d4:	e3a03001 	mov	r3, #1
   239d8:	e1a00003 	mov	r0, r3
   239dc:	e5c43004 	strb	r3, [r4, #4]
   239e0:	e8bd8010 	pop	{r4, pc}
   239e4:	e30a1e10 	movw	r1, #44560	; 0xae10
   239e8:	e3401002 	movt	r1, #2
   239ec:	e30a0e48 	movw	r0, #44616	; 0xae48
   239f0:	e3400002 	movt	r0, #2
   239f4:	e3a0203b 	mov	r2, #59	; 0x3b
   239f8:	ebffd695 	bl	19454 <assertion_failed>
   239fc:	e5940000 	ldr	r0, [r4]
   23a00:	e3500000 	cmp	r0, #0
   23a04:	1affffed 	bne	239c0 <CGPIOManager::Initialize()+0x20>
   23a08:	e30a1e10 	movw	r1, #44560	; 0xae10
   23a0c:	e3401002 	movt	r1, #2
   23a10:	e30a0e34 	movw	r0, #44596	; 0xae34
   23a14:	e3400002 	movt	r0, #2
   23a18:	e3a0203c 	mov	r2, #60	; 0x3c
   23a1c:	ebffd68c 	bl	19454 <assertion_failed>
   23a20:	e5940000 	ldr	r0, [r4]
   23a24:	eaffffe5 	b	239c0 <CGPIOManager::Initialize()+0x20>

00023a28 <CGPIOManager::ConnectInterrupt(CGPIOPin*)>:
   23a28:	e5d03004 	ldrb	r3, [r0, #4]
   23a2c:	e92d4070 	push	{r4, r5, r6, lr}
   23a30:	e1a04000 	mov	r4, r0
   23a34:	e1a05001 	mov	r5, r1
   23a38:	e3530000 	cmp	r3, #0
   23a3c:	0a000010 	beq	23a84 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x5c>
   23a40:	e3550000 	cmp	r5, #0
   23a44:	0a000016 	beq	23aa4 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x7c>
   23a48:	e5956004 	ldr	r6, [r5, #4]
   23a4c:	e3560035 	cmp	r6, #53	; 0x35
   23a50:	8a00001c 	bhi	23ac8 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0xa0>
   23a54:	e0844106 	add	r4, r4, r6, lsl #2
   23a58:	e5943008 	ldr	r3, [r4, #8]
   23a5c:	e3530000 	cmp	r3, #0
   23a60:	0a000005 	beq	23a7c <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x54>
   23a64:	e30a1e10 	movw	r1, #44560	; 0xae10
   23a68:	e3401002 	movt	r1, #2
   23a6c:	e30a0e20 	movw	r0, #44576	; 0xae20
   23a70:	e3400002 	movt	r0, #2
   23a74:	e3a0204b 	mov	r2, #75	; 0x4b
   23a78:	ebffd675 	bl	19454 <assertion_failed>
   23a7c:	e5845008 	str	r5, [r4, #8]
   23a80:	e8bd8070 	pop	{r4, r5, r6, pc}
   23a84:	e30a1e10 	movw	r1, #44560	; 0xae10
   23a88:	e3401002 	movt	r1, #2
   23a8c:	e30a0e5c 	movw	r0, #44636	; 0xae5c
   23a90:	e3400002 	movt	r0, #2
   23a94:	e3a02045 	mov	r2, #69	; 0x45
   23a98:	ebffd66d 	bl	19454 <assertion_failed>
   23a9c:	e3550000 	cmp	r5, #0
   23aa0:	1affffe8 	bne	23a48 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x20>
   23aa4:	e30a1e10 	movw	r1, #44560	; 0xae10
   23aa8:	e3401002 	movt	r1, #2
   23aac:	e30a0e6c 	movw	r0, #44652	; 0xae6c
   23ab0:	e3400002 	movt	r0, #2
   23ab4:	e3a02047 	mov	r2, #71	; 0x47
   23ab8:	ebffd665 	bl	19454 <assertion_failed>
   23abc:	e5956004 	ldr	r6, [r5, #4]
   23ac0:	e3560035 	cmp	r6, #53	; 0x35
   23ac4:	9affffe2 	bls	23a54 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x2c>
   23ac8:	e30a1e10 	movw	r1, #44560	; 0xae10
   23acc:	e3401002 	movt	r1, #2
   23ad0:	e30a0e78 	movw	r0, #44664	; 0xae78
   23ad4:	e3400002 	movt	r0, #2
   23ad8:	e3a02049 	mov	r2, #73	; 0x49
   23adc:	ebffd65c 	bl	19454 <assertion_failed>
   23ae0:	eaffffdb 	b	23a54 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x2c>

00023ae4 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)>:
   23ae4:	e5d03004 	ldrb	r3, [r0, #4]
   23ae8:	e92d4070 	push	{r4, r5, r6, lr}
   23aec:	e1a04000 	mov	r4, r0
   23af0:	e1a05001 	mov	r5, r1
   23af4:	e3530000 	cmp	r3, #0
   23af8:	0a00000b 	beq	23b2c <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x48>
   23afc:	e3550000 	cmp	r5, #0
   23b00:	0a000011 	beq	23b4c <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x68>
   23b04:	e5955004 	ldr	r5, [r5, #4]
   23b08:	e3550035 	cmp	r5, #53	; 0x35
   23b0c:	8a000017 	bhi	23b70 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x8c>
   23b10:	e0844105 	add	r4, r4, r5, lsl #2
   23b14:	e5943008 	ldr	r3, [r4, #8]
   23b18:	e3530000 	cmp	r3, #0
   23b1c:	0a00001d 	beq	23b98 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0xb4>
   23b20:	e3a03000 	mov	r3, #0
   23b24:	e5843008 	str	r3, [r4, #8]
   23b28:	e8bd8070 	pop	{r4, r5, r6, pc}
   23b2c:	e30a1e10 	movw	r1, #44560	; 0xae10
   23b30:	e3401002 	movt	r1, #2
   23b34:	e30a0e5c 	movw	r0, #44636	; 0xae5c
   23b38:	e3400002 	movt	r0, #2
   23b3c:	e3a02052 	mov	r2, #82	; 0x52
   23b40:	ebffd643 	bl	19454 <assertion_failed>
   23b44:	e3550000 	cmp	r5, #0
   23b48:	1affffed 	bne	23b04 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x20>
   23b4c:	e30a1e10 	movw	r1, #44560	; 0xae10
   23b50:	e3401002 	movt	r1, #2
   23b54:	e30a0e6c 	movw	r0, #44652	; 0xae6c
   23b58:	e3400002 	movt	r0, #2
   23b5c:	e3a02054 	mov	r2, #84	; 0x54
   23b60:	ebffd63b 	bl	19454 <assertion_failed>
   23b64:	e5955004 	ldr	r5, [r5, #4]
   23b68:	e3550035 	cmp	r5, #53	; 0x35
   23b6c:	9affffe7 	bls	23b10 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x2c>
   23b70:	e0844105 	add	r4, r4, r5, lsl #2
   23b74:	e30a1e10 	movw	r1, #44560	; 0xae10
   23b78:	e3401002 	movt	r1, #2
   23b7c:	e30a0e78 	movw	r0, #44664	; 0xae78
   23b80:	e3400002 	movt	r0, #2
   23b84:	e3a02056 	mov	r2, #86	; 0x56
   23b88:	ebffd631 	bl	19454 <assertion_failed>
   23b8c:	e5943008 	ldr	r3, [r4, #8]
   23b90:	e3530000 	cmp	r3, #0
   23b94:	1affffe1 	bne	23b20 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x3c>
   23b98:	e30a1e10 	movw	r1, #44560	; 0xae10
   23b9c:	e3401002 	movt	r1, #2
   23ba0:	e30a0e8c 	movw	r0, #44684	; 0xae8c
   23ba4:	e3400002 	movt	r0, #2
   23ba8:	e3a02058 	mov	r2, #88	; 0x58
   23bac:	ebffd628 	bl	19454 <assertion_failed>
   23bb0:	eaffffda 	b	23b20 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x3c>

00023bb4 <CGPIOManager::InterruptHandler()>:
   23bb4:	e5d03004 	ldrb	r3, [r0, #4]
   23bb8:	e92d4070 	push	{r4, r5, r6, lr}
   23bbc:	e1a05000 	mov	r5, r0
   23bc0:	e3530000 	cmp	r3, #0
   23bc4:	0a00001b 	beq	23c38 <CGPIOManager::InterruptHandler()+0x84>
   23bc8:	e3a03000 	mov	r3, #0
   23bcc:	e3433f20 	movt	r3, #16160	; 0x3f20
   23bd0:	e1a02003 	mov	r2, r3
   23bd4:	e3a04000 	mov	r4, #0
   23bd8:	e5933040 	ldr	r3, [r3, #64]	; 0x40
   23bdc:	ea000004 	b	23bf4 <CGPIOManager::InterruptHandler()+0x40>
   23be0:	e2844001 	add	r4, r4, #1
   23be4:	e314001f 	tst	r4, #31
   23be8:	05923044 	ldreq	r3, [r2, #68]	; 0x44
   23bec:	e3540036 	cmp	r4, #54	; 0x36
   23bf0:	08bd8070 	popeq	{r4, r5, r6, pc}
   23bf4:	e3130001 	tst	r3, #1
   23bf8:	e1a030a3 	lsr	r3, r3, #1
   23bfc:	0afffff7 	beq	23be0 <CGPIOManager::InterruptHandler()+0x2c>
   23c00:	e2843002 	add	r3, r4, #2
   23c04:	e7950103 	ldr	r0, [r5, r3, lsl #2]
   23c08:	e3500000 	cmp	r0, #0
   23c0c:	0a000010 	beq	23c54 <CGPIOManager::InterruptHandler()+0xa0>
   23c10:	ebffdc1b 	bl	1ac84 <CGPIOPin::InterruptHandler()>
   23c14:	e3a03010 	mov	r3, #16
   23c18:	e3403fc8 	movt	r3, #4040	; 0xfc8
   23c1c:	e08332a4 	add	r3, r3, r4, lsr #5
   23c20:	e3a02001 	mov	r2, #1
   23c24:	e1a03103 	lsl	r3, r3, #2
   23c28:	e204401f 	and	r4, r4, #31
   23c2c:	e1a04412 	lsl	r4, r2, r4
   23c30:	e5834000 	str	r4, [r3]
   23c34:	e8bd8070 	pop	{r4, r5, r6, pc}
   23c38:	e30a1e10 	movw	r1, #44560	; 0xae10
   23c3c:	e3401002 	movt	r1, #2
   23c40:	e30a0e5c 	movw	r0, #44636	; 0xae5c
   23c44:	e3400002 	movt	r0, #2
   23c48:	e3a0205e 	mov	r2, #94	; 0x5e
   23c4c:	ebffd600 	bl	19454 <assertion_failed>
   23c50:	eaffffdc 	b	23bc8 <CGPIOManager::InterruptHandler()+0x14>
   23c54:	e1a00004 	mov	r0, r4
   23c58:	ebffdc31 	bl	1ad24 <CGPIOPin::DisableAllInterrupts(unsigned int)>
   23c5c:	eaffffec 	b	23c14 <CGPIOManager::InterruptHandler()+0x60>

00023c60 <CGPIOManager::InterruptStub(void*)>:
   23c60:	e92d4010 	push	{r4, lr}
   23c64:	e2504000 	subs	r4, r0, #0
   23c68:	0a000002 	beq	23c78 <CGPIOManager::InterruptStub(void*)+0x18>
   23c6c:	e1a00004 	mov	r0, r4
   23c70:	e8bd4010 	pop	{r4, lr}
   23c74:	eaffffce 	b	23bb4 <CGPIOManager::InterruptHandler()>
   23c78:	e30a1e10 	movw	r1, #44560	; 0xae10
   23c7c:	e3401002 	movt	r1, #2
   23c80:	e30402dc 	movw	r0, #17116	; 0x42dc
   23c84:	e3400002 	movt	r0, #2
   23c88:	e3a0208a 	mov	r2, #138	; 0x8a
   23c8c:	ebffd5f0 	bl	19454 <assertion_failed>
   23c90:	e1a00004 	mov	r0, r4
   23c94:	e8bd4010 	pop	{r4, lr}
   23c98:	eaffffc5 	b	23bb4 <CGPIOManager::InterruptHandler()>

00023c9c <CPtrList::CPtrList()>:
   23c9c:	e3a02000 	mov	r2, #0
   23ca0:	e5802000 	str	r2, [r0]
   23ca4:	e12fff1e 	bx	lr

00023ca8 <CPtrList::~CPtrList()>:
   23ca8:	e5903000 	ldr	r3, [r0]
   23cac:	e92d4010 	push	{r4, lr}
   23cb0:	e1a04000 	mov	r4, r0
   23cb4:	e3530000 	cmp	r3, #0
   23cb8:	0a000005 	beq	23cd4 <CPtrList::~CPtrList()+0x2c>
   23cbc:	e30a1ea0 	movw	r1, #44704	; 0xaea0
   23cc0:	e3401002 	movt	r1, #2
   23cc4:	e30a0eac 	movw	r0, #44716	; 0xaeac
   23cc8:	e3400002 	movt	r0, #2
   23ccc:	e3a0202a 	mov	r2, #42	; 0x2a
   23cd0:	ebffd5df 	bl	19454 <assertion_failed>
   23cd4:	e1a00004 	mov	r0, r4
   23cd8:	e8bd8010 	pop	{r4, pc}

00023cdc <CPtrList::GetFirst()>:
   23cdc:	e5900000 	ldr	r0, [r0]
   23ce0:	e12fff1e 	bx	lr

00023ce4 <CPtrList::GetNext(TPtrListElement*)>:
   23ce4:	e92d4010 	push	{r4, lr}
   23ce8:	e2514000 	subs	r4, r1, #0
   23cec:	0a00000c 	beq	23d24 <CPtrList::GetNext(TPtrListElement*)+0x40>
   23cf0:	e5942000 	ldr	r2, [r4]
   23cf4:	e3043d43 	movw	r3, #19779	; 0x4d43
   23cf8:	e345304c 	movt	r3, #20556	; 0x504c
   23cfc:	e1520003 	cmp	r2, r3
   23d00:	0a000005 	beq	23d1c <CPtrList::GetNext(TPtrListElement*)+0x38>
   23d04:	e30a1ea0 	movw	r1, #44704	; 0xaea0
   23d08:	e3401002 	movt	r1, #2
   23d0c:	e30a0ecc 	movw	r0, #44748	; 0xaecc
   23d10:	e3400002 	movt	r0, #2
   23d14:	e3a02035 	mov	r2, #53	; 0x35
   23d18:	ebffd5cd 	bl	19454 <assertion_failed>
   23d1c:	e5940008 	ldr	r0, [r4, #8]
   23d20:	e8bd8010 	pop	{r4, pc}
   23d24:	e30a1ea0 	movw	r1, #44704	; 0xaea0
   23d28:	e3401002 	movt	r1, #2
   23d2c:	e30a0ebc 	movw	r0, #44732	; 0xaebc
   23d30:	e3400002 	movt	r0, #2
   23d34:	e3a02034 	mov	r2, #52	; 0x34
   23d38:	ebffd5c5 	bl	19454 <assertion_failed>
   23d3c:	eaffffeb 	b	23cf0 <CPtrList::GetNext(TPtrListElement*)+0xc>

00023d40 <CPtrList::GetPtr(TPtrListElement*)>:
   23d40:	e92d4010 	push	{r4, lr}
   23d44:	e2514000 	subs	r4, r1, #0
   23d48:	0a00000c 	beq	23d80 <CPtrList::GetPtr(TPtrListElement*)+0x40>
   23d4c:	e5942000 	ldr	r2, [r4]
   23d50:	e3043d43 	movw	r3, #19779	; 0x4d43
   23d54:	e345304c 	movt	r3, #20556	; 0x504c
   23d58:	e1520003 	cmp	r2, r3
   23d5c:	0a000005 	beq	23d78 <CPtrList::GetPtr(TPtrListElement*)+0x38>
   23d60:	e30a1ea0 	movw	r1, #44704	; 0xaea0
   23d64:	e3401002 	movt	r1, #2
   23d68:	e30a0ecc 	movw	r0, #44748	; 0xaecc
   23d6c:	e3400002 	movt	r0, #2
   23d70:	e3a0203d 	mov	r2, #61	; 0x3d
   23d74:	ebffd5b6 	bl	19454 <assertion_failed>
   23d78:	e594000c 	ldr	r0, [r4, #12]
   23d7c:	e8bd8010 	pop	{r4, pc}
   23d80:	e30a1ea0 	movw	r1, #44704	; 0xaea0
   23d84:	e3401002 	movt	r1, #2
   23d88:	e30a0ebc 	movw	r0, #44732	; 0xaebc
   23d8c:	e3400002 	movt	r0, #2
   23d90:	e3a0203c 	mov	r2, #60	; 0x3c
   23d94:	ebffd5ae 	bl	19454 <assertion_failed>
   23d98:	eaffffeb 	b	23d4c <CPtrList::GetPtr(TPtrListElement*)+0xc>

00023d9c <CPtrList::InsertBefore(TPtrListElement*, void*)>:
   23d9c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   23da0:	e1a06000 	mov	r6, r0
   23da4:	e3a00010 	mov	r0, #16
   23da8:	e1a04001 	mov	r4, r1
   23dac:	e1a07002 	mov	r7, r2
   23db0:	ebfff8b2 	bl	22080 <operator new(unsigned int)>
   23db4:	e5961000 	ldr	r1, [r6]
   23db8:	e3043d43 	movw	r3, #19779	; 0x4d43
   23dbc:	e345304c 	movt	r3, #20556	; 0x504c
   23dc0:	e1a05000 	mov	r5, r0
   23dc4:	e580700c 	str	r7, [r0, #12]
   23dc8:	e3510000 	cmp	r1, #0
   23dcc:	e5803000 	str	r3, [r0]
   23dd0:	0a000030 	beq	23e98 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xfc>
   23dd4:	e3540000 	cmp	r4, #0
   23dd8:	0a000027 	beq	23e7c <CPtrList::InsertBefore(TPtrListElement*, void*)+0xe0>
   23ddc:	e5942000 	ldr	r2, [r4]
   23de0:	e3043d43 	movw	r3, #19779	; 0x4d43
   23de4:	e345304c 	movt	r3, #20556	; 0x504c
   23de8:	e1520003 	cmp	r2, r3
   23dec:	0a000005 	beq	23e08 <CPtrList::InsertBefore(TPtrListElement*, void*)+0x6c>
   23df0:	e30a1ea0 	movw	r1, #44704	; 0xaea0
   23df4:	e3401002 	movt	r1, #2
   23df8:	e30a0f0c 	movw	r0, #44812	; 0xaf0c
   23dfc:	e3400002 	movt	r0, #2
   23e00:	e3a0204e 	mov	r2, #78	; 0x4e
   23e04:	ebffd592 	bl	19454 <assertion_failed>
   23e08:	e5963000 	ldr	r3, [r6]
   23e0c:	e1530004 	cmp	r3, r4
   23e10:	0a000013 	beq	23e64 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xc8>
   23e14:	e5943004 	ldr	r3, [r4, #4]
   23e18:	e9850018 	stmib	r5, {r3, r4}
   23e1c:	e3530000 	cmp	r3, #0
   23e20:	0a000005 	beq	23e3c <CPtrList::InsertBefore(TPtrListElement*, void*)+0xa0>
   23e24:	e5931000 	ldr	r1, [r3]
   23e28:	e3042d43 	movw	r2, #19779	; 0x4d43
   23e2c:	e345204c 	movt	r2, #20556	; 0x504c
   23e30:	e1510002 	cmp	r1, r2
   23e34:	1a000002 	bne	23e44 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xa8>
   23e38:	e5835008 	str	r5, [r3, #8]
   23e3c:	e5845004 	str	r5, [r4, #4]
   23e40:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   23e44:	e30a1ea0 	movw	r1, #44704	; 0xaea0
   23e48:	e3401002 	movt	r1, #2
   23e4c:	e30a0f30 	movw	r0, #44848	; 0xaf30
   23e50:	e3400002 	movt	r0, #2
   23e54:	e3a02060 	mov	r2, #96	; 0x60
   23e58:	ebffd57d 	bl	19454 <assertion_failed>
   23e5c:	e5943004 	ldr	r3, [r4, #4]
   23e60:	eafffff4 	b	23e38 <CPtrList::InsertBefore(TPtrListElement*, void*)+0x9c>
   23e64:	e5845004 	str	r5, [r4, #4]
   23e68:	e3a03000 	mov	r3, #0
   23e6c:	e5854008 	str	r4, [r5, #8]
   23e70:	e5865000 	str	r5, [r6]
   23e74:	e5853004 	str	r3, [r5, #4]
   23e78:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   23e7c:	e30a1ea0 	movw	r1, #44704	; 0xaea0
   23e80:	e3401002 	movt	r1, #2
   23e84:	e30a0f00 	movw	r0, #44800	; 0xaf00
   23e88:	e3400002 	movt	r0, #2
   23e8c:	e3a0204d 	mov	r2, #77	; 0x4d
   23e90:	ebffd56f 	bl	19454 <assertion_failed>
   23e94:	eaffffd0 	b	23ddc <CPtrList::InsertBefore(TPtrListElement*, void*)+0x40>
   23e98:	e30a1ea0 	movw	r1, #44704	; 0xaea0
   23e9c:	e3401002 	movt	r1, #2
   23ea0:	e30a0ef0 	movw	r0, #44784	; 0xaef0
   23ea4:	e3400002 	movt	r0, #2
   23ea8:	e3a0204c 	mov	r2, #76	; 0x4c
   23eac:	ebffd568 	bl	19454 <assertion_failed>
   23eb0:	eaffffc7 	b	23dd4 <CPtrList::InsertBefore(TPtrListElement*, void*)+0x38>

00023eb4 <CPtrList::InsertAfter(TPtrListElement*, void*)>:
   23eb4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   23eb8:	e1a06000 	mov	r6, r0
   23ebc:	e1a05001 	mov	r5, r1
   23ec0:	e3a00010 	mov	r0, #16
   23ec4:	e1a07002 	mov	r7, r2
   23ec8:	ebfff86c 	bl	22080 <operator new(unsigned int)>
   23ecc:	e3043d43 	movw	r3, #19779	; 0x4d43
   23ed0:	e345304c 	movt	r3, #20556	; 0x504c
   23ed4:	e5803000 	str	r3, [r0]
   23ed8:	e1a04000 	mov	r4, r0
   23edc:	e3550000 	cmp	r5, #0
   23ee0:	e580700c 	str	r7, [r0, #12]
   23ee4:	e5963000 	ldr	r3, [r6]
   23ee8:	0a000021 	beq	23f74 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xc0>
   23eec:	e3530000 	cmp	r3, #0
   23ef0:	0a00002c 	beq	23fa8 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xf4>
   23ef4:	e5952000 	ldr	r2, [r5]
   23ef8:	e3043d43 	movw	r3, #19779	; 0x4d43
   23efc:	e345304c 	movt	r3, #20556	; 0x504c
   23f00:	e1520003 	cmp	r2, r3
   23f04:	1a000013 	bne	23f58 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xa4>
   23f08:	e5953008 	ldr	r3, [r5, #8]
   23f0c:	e5845004 	str	r5, [r4, #4]
   23f10:	e5843008 	str	r3, [r4, #8]
   23f14:	e3530000 	cmp	r3, #0
   23f18:	0a00000c 	beq	23f50 <CPtrList::InsertAfter(TPtrListElement*, void*)+0x9c>
   23f1c:	e5931000 	ldr	r1, [r3]
   23f20:	e3042d43 	movw	r2, #19779	; 0x4d43
   23f24:	e345204c 	movt	r2, #20556	; 0x504c
   23f28:	e1510002 	cmp	r1, r2
   23f2c:	0a000006 	beq	23f4c <CPtrList::InsertAfter(TPtrListElement*, void*)+0x98>
   23f30:	e30a1ea0 	movw	r1, #44704	; 0xaea0
   23f34:	e3401002 	movt	r1, #2
   23f38:	e30a0f7c 	movw	r0, #44924	; 0xaf7c
   23f3c:	e3400002 	movt	r0, #2
   23f40:	e3a02085 	mov	r2, #133	; 0x85
   23f44:	ebffd542 	bl	19454 <assertion_failed>
   23f48:	e5953008 	ldr	r3, [r5, #8]
   23f4c:	e5834004 	str	r4, [r3, #4]
   23f50:	e5854008 	str	r4, [r5, #8]
   23f54:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   23f58:	e30a1ea0 	movw	r1, #44704	; 0xaea0
   23f5c:	e3401002 	movt	r1, #2
   23f60:	e30a0f58 	movw	r0, #44888	; 0xaf58
   23f64:	e3400002 	movt	r0, #2
   23f68:	e3a0207e 	mov	r2, #126	; 0x7e
   23f6c:	ebffd538 	bl	19454 <assertion_failed>
   23f70:	eaffffe4 	b	23f08 <CPtrList::InsertAfter(TPtrListElement*, void*)+0x54>
   23f74:	e3530000 	cmp	r3, #0
   23f78:	0a000005 	beq	23f94 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xe0>
   23f7c:	e30a1ea0 	movw	r1, #44704	; 0xaea0
   23f80:	e3401002 	movt	r1, #2
   23f84:	e30a0eac 	movw	r0, #44716	; 0xaeac
   23f88:	e3400002 	movt	r0, #2
   23f8c:	e3a02074 	mov	r2, #116	; 0x74
   23f90:	ebffd52f 	bl	19454 <assertion_failed>
   23f94:	e3a03000 	mov	r3, #0
   23f98:	e5864000 	str	r4, [r6]
   23f9c:	e5843004 	str	r3, [r4, #4]
   23fa0:	e5843008 	str	r3, [r4, #8]
   23fa4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   23fa8:	e30a1ea0 	movw	r1, #44704	; 0xaea0
   23fac:	e3401002 	movt	r1, #2
   23fb0:	e30a0ef0 	movw	r0, #44784	; 0xaef0
   23fb4:	e3400002 	movt	r0, #2
   23fb8:	e3a0207d 	mov	r2, #125	; 0x7d
   23fbc:	ebffd524 	bl	19454 <assertion_failed>
   23fc0:	eaffffcb 	b	23ef4 <CPtrList::InsertAfter(TPtrListElement*, void*)+0x40>

00023fc4 <CPtrList::Remove(TPtrListElement*)>:
   23fc4:	e92d4070 	push	{r4, r5, r6, lr}
   23fc8:	e1a05000 	mov	r5, r0
   23fcc:	e2514000 	subs	r4, r1, #0
   23fd0:	0a00004a 	beq	24100 <CPtrList::Remove(TPtrListElement*)+0x13c>
   23fd4:	e5942000 	ldr	r2, [r4]
   23fd8:	e3043d43 	movw	r3, #19779	; 0x4d43
   23fdc:	e345304c 	movt	r3, #20556	; 0x504c
   23fe0:	e1520003 	cmp	r2, r3
   23fe4:	0a000005 	beq	24000 <CPtrList::Remove(TPtrListElement*)+0x3c>
   23fe8:	e30a1ea0 	movw	r1, #44704	; 0xaea0
   23fec:	e3401002 	movt	r1, #2
   23ff0:	e30a0ecc 	movw	r0, #44748	; 0xaecc
   23ff4:	e3400002 	movt	r0, #2
   23ff8:	e3a02090 	mov	r2, #144	; 0x90
   23ffc:	ebffd514 	bl	19454 <assertion_failed>
   24000:	e5953000 	ldr	r3, [r5]
   24004:	e1530004 	cmp	r3, r4
   24008:	0a000029 	beq	240b4 <CPtrList::Remove(TPtrListElement*)+0xf0>
   2400c:	e5943004 	ldr	r3, [r4, #4]
   24010:	e3530000 	cmp	r3, #0
   24014:	0a000040 	beq	2411c <CPtrList::Remove(TPtrListElement*)+0x158>
   24018:	e5931000 	ldr	r1, [r3]
   2401c:	e3042d43 	movw	r2, #19779	; 0x4d43
   24020:	e345204c 	movt	r2, #20556	; 0x504c
   24024:	e1510002 	cmp	r1, r2
   24028:	1a000010 	bne	24070 <CPtrList::Remove(TPtrListElement*)+0xac>
   2402c:	e5942008 	ldr	r2, [r4, #8]
   24030:	e5832008 	str	r2, [r3, #8]
   24034:	e5942008 	ldr	r2, [r4, #8]
   24038:	e3520000 	cmp	r2, #0
   2403c:	0a000005 	beq	24058 <CPtrList::Remove(TPtrListElement*)+0x94>
   24040:	e5920000 	ldr	r0, [r2]
   24044:	e3041d43 	movw	r1, #19779	; 0x4d43
   24048:	e345104c 	movt	r1, #20556	; 0x504c
   2404c:	e1500001 	cmp	r0, r1
   24050:	1a00000e 	bne	24090 <CPtrList::Remove(TPtrListElement*)+0xcc>
   24054:	e5823004 	str	r3, [r2, #4]
   24058:	e3a03000 	mov	r3, #0
   2405c:	e1a00004 	mov	r0, r4
   24060:	e5843000 	str	r3, [r4]
   24064:	e3a01010 	mov	r1, #16
   24068:	e8bd4070 	pop	{r4, r5, r6, lr}
   2406c:	eafff807 	b	22090 <operator delete(void*, unsigned int)>
   24070:	e30a1ea0 	movw	r1, #44704	; 0xaea0
   24074:	e3401002 	movt	r1, #2
   24078:	e30a0fec 	movw	r0, #45036	; 0xafec
   2407c:	e3400002 	movt	r0, #2
   24080:	e3a0209f 	mov	r2, #159	; 0x9f
   24084:	ebffd4f2 	bl	19454 <assertion_failed>
   24088:	e5943004 	ldr	r3, [r4, #4]
   2408c:	eaffffe6 	b	2402c <CPtrList::Remove(TPtrListElement*)+0x68>
   24090:	e3a020a4 	mov	r2, #164	; 0xa4
   24094:	e30a1ea0 	movw	r1, #44704	; 0xaea0
   24098:	e3401002 	movt	r1, #2
   2409c:	e30a0fa8 	movw	r0, #44968	; 0xafa8
   240a0:	e3400002 	movt	r0, #2
   240a4:	ebffd4ea 	bl	19454 <assertion_failed>
   240a8:	e5942008 	ldr	r2, [r4, #8]
   240ac:	e5943004 	ldr	r3, [r4, #4]
   240b0:	eaffffe7 	b	24054 <CPtrList::Remove(TPtrListElement*)+0x90>
   240b4:	e5943008 	ldr	r3, [r4, #8]
   240b8:	e5853000 	str	r3, [r5]
   240bc:	e3530000 	cmp	r3, #0
   240c0:	0affffe4 	beq	24058 <CPtrList::Remove(TPtrListElement*)+0x94>
   240c4:	e5931000 	ldr	r1, [r3]
   240c8:	e3042d43 	movw	r2, #19779	; 0x4d43
   240cc:	e345204c 	movt	r2, #20556	; 0x504c
   240d0:	e1510002 	cmp	r1, r2
   240d4:	0a000006 	beq	240f4 <CPtrList::Remove(TPtrListElement*)+0x130>
   240d8:	e30a1ea0 	movw	r1, #44704	; 0xaea0
   240dc:	e3401002 	movt	r1, #2
   240e0:	e30a0fa8 	movw	r0, #44968	; 0xafa8
   240e4:	e3400002 	movt	r0, #2
   240e8:	e3a02098 	mov	r2, #152	; 0x98
   240ec:	ebffd4d8 	bl	19454 <assertion_failed>
   240f0:	e5943008 	ldr	r3, [r4, #8]
   240f4:	e3a02000 	mov	r2, #0
   240f8:	e5832004 	str	r2, [r3, #4]
   240fc:	eaffffd5 	b	24058 <CPtrList::Remove(TPtrListElement*)+0x94>
   24100:	e30a1ea0 	movw	r1, #44704	; 0xaea0
   24104:	e3401002 	movt	r1, #2
   24108:	e30a0ebc 	movw	r0, #44732	; 0xaebc
   2410c:	e3400002 	movt	r0, #2
   24110:	e3a0208f 	mov	r2, #143	; 0x8f
   24114:	ebffd4ce 	bl	19454 <assertion_failed>
   24118:	eaffffad 	b	23fd4 <CPtrList::Remove(TPtrListElement*)+0x10>
   2411c:	e30a1ea0 	movw	r1, #44704	; 0xaea0
   24120:	e3401002 	movt	r1, #2
   24124:	e30a0fd4 	movw	r0, #45012	; 0xafd4
   24128:	e3400002 	movt	r0, #2
   2412c:	e3a0209e 	mov	r2, #158	; 0x9e
   24130:	ebffd4c7 	bl	19454 <assertion_failed>
   24134:	e5943004 	ldr	r3, [r4, #4]
   24138:	eaffffb6 	b	24018 <CPtrList::Remove(TPtrListElement*)+0x54>

0002413c <CPtrList::Find(void*)>:
   2413c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   24140:	e5904000 	ldr	r4, [r0]
   24144:	e3540000 	cmp	r4, #0
   24148:	0a000016 	beq	241a8 <CPtrList::Find(void*)+0x6c>
   2414c:	e3048d43 	movw	r8, #19779	; 0x4d43
   24150:	e345804c 	movt	r8, #20556	; 0x504c
   24154:	e30a7ea0 	movw	r7, #44704	; 0xaea0
   24158:	e3407002 	movt	r7, #2
   2415c:	e30a6ecc 	movw	r6, #44748	; 0xaecc
   24160:	e3406002 	movt	r6, #2
   24164:	e1a05001 	mov	r5, r1
   24168:	ea000002 	b	24178 <CPtrList::Find(void*)+0x3c>
   2416c:	e5944008 	ldr	r4, [r4, #8]
   24170:	e3540000 	cmp	r4, #0
   24174:	0a00000b 	beq	241a8 <CPtrList::Find(void*)+0x6c>
   24178:	e5943000 	ldr	r3, [r4]
   2417c:	e3a020b3 	mov	r2, #179	; 0xb3
   24180:	e1a01007 	mov	r1, r7
   24184:	e1a00006 	mov	r0, r6
   24188:	e1530008 	cmp	r3, r8
   2418c:	0a000000 	beq	24194 <CPtrList::Find(void*)+0x58>
   24190:	ebffd4af 	bl	19454 <assertion_failed>
   24194:	e594300c 	ldr	r3, [r4, #12]
   24198:	e1530005 	cmp	r3, r5
   2419c:	1afffff2 	bne	2416c <CPtrList::Find(void*)+0x30>
   241a0:	e1a00004 	mov	r0, r4
   241a4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   241a8:	e3a04000 	mov	r4, #0
   241ac:	e1a00004 	mov	r0, r4
   241b0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

Disassembly of section .fini:

000241b4 <_fini>:
   241b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   241b6:	bf00      	nop

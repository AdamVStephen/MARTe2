/*
 * This file defines the deviations to rules which are common to all 
 * the MARTe framework files. Specific deviation shall be put inside the 
 * source code comments.
 * Syntax is:
 * Rule X-Y-Z
 * Justification: reason why the rule does not apply
 */

/* 
 * Disable all errors from misra which are related to external libraries not under our control
 */
-elib(*)
-estring(686,"*CPU_ZERO*")
-estring(686,"*CPU_SET*")
-estring(686,"*CPU_ISSET*")
-estring(1960,"*__pthread_cleanup_class*")

/* 
 * Do not lint operating system files
 * Remember that Flexelint uses the label of "library" header to 
 * designate those headers over which a programmer has no control 
 * (such as compiler headers)
 */
+libdir(/usr/include/)

/* 
 * Do not lint operating system and architecture specific code 
 */
+libh(OperatingSystem/Linux/?*.h)
+libh(OperatingSystem/Linux/lint-linux.h)
+libh(Architecture/x86_gcc/?*.h)
+libh(OperatingSystem/Windows/?*.h)
+libh(Architecture/x86_cl/?*.h)

/*
 * Disable warnings about repeated include files (i.e. that a given
 * header was already included by compilation unit).
 * It not obvious how these warnings are generated. Removing
 * the proposed header files gives compilation errors.
 * As written in the manual these can be safely disabled.
 */
-e537

/*
 * Lint is not understanding that the memory is freed in the destructor
 */
 -sem(EventSem::~EventSem, cleanup)
 -sem(MutexSem::~MutexSem, cleanup)

/*
 * Destructor calls the cleanup function 
 */
-sem(Reference::RemoveReference,cleanup)

/*
 * Linux is not certifiable. Disable all operating system headers related warnings.
 */
-e829

/*
 * Rule GLOBAL
 * Justification: Not applicable to a framework
 */
/* global typedef not referenced */
-esym(756,intptr,Colours)
/* global struct/union/enum not referenced */
-etype(758,Flags)
-esym(758,SFTestType)
/* global struct not referenced */
-esym(768,TimeValues::*)
-esym(768,IBasicConsole::*)
-esym(768,ExceptionHandler::*)
-esym(768,ExceptionHandler::*)
-esym(768,ClassRegistryDatabase::*)
-esym(768,Introspection::*)
-esym(768,Object::*)
/* global constant enumeration not referenced */ 
-esym(769,SFTestType::*)
-esym(769,Colours::*) 
-esym(769,ErrorType::*)
-esym(769,Threads::ThreadStateType::*)
-esym(769,Threads::PriorityClassType::*)
-esym(769,Memory::MemoryTestAccessMode::*)
-esym(769,Memory::MemoryAllocationFlags::*)
 /* static member not referenced */
-esym(1715,IBasicConsole::*)
-esym(1715,ProcessorType::UndefinedCPUs)
-esym(1715,FastMath::*)
-esym(1715,ExceptionHandler::*)

/*
 * Rule 0-1-10 
 * Justfication: Not applicable to a framework
 */
/* member function not referenced */
-esym(1714,Sleep::*)
-esym(1714,HighResolutionTimer::*)
-esym(1714,StringHelper::*)
-esym(1714,StringPortable::*)
-esym(1714,Endianity::*)
-esym(1714,Atomic::*)
-esym(1714,Flags::*) 
-esym(1714,Error::*)
-esym(1714,Processor::*)
-esym(1714,TimeoutType::*)
-esym(1714,ProcessorType::*)
-esym(1714,EventSem::*)
-esym(1714,MutexSem::*)
-esym(1714,FastPollingMutexSem::*)
-esym(1714,LoadableLibrary::*)
-esym(1714,FastMath::*)
-esym(1714,Threads::*)
-esym(1714,ExceptionHandler::*)
-esym(1714,ThreadInformation::*)
-esym(1714,Memory::*)
-esym(1714,LinkedListable::*)
-esym(1714,LinkedListHolder::*)
-esym(1714,ClassProperties::*)
-esym(1714,ClassRegistryItem::*)
-esym(1714,ClassRegistryDatabase::*)
-esym(1714,Object::*)
-esym(1714,Reference::*)
-esym(1714,ReferenceContainer::*)
-esym(1714,ReferenceContainerItem::*)
-esym(1714,ReferenceContainerFilterObjectName::*)
-esym(1714,ReferenceContainerFilterReferences::*)

/* virtual member function not referenced */
-esym(1716,IBasicConsole::*)
-esym(1716,Object::*)
-esym(1716,Reference::*)
//From Object.h macro
-esym(1716,*::GetClassPropertiesCopy*)

/* default constructor not referenced */
-esym(1914,Flags::*) 
-esym(1914,BasicConsole::*)
-esym(1914,FastPollingMutexSem::*)
-esym(1914,LoadableLibrary::*)  
-esym(1914,ExceptionHandler::*)
-esym(1914,ThreadInformation::*)
-esym(1914,LinkedListHolder::*)
-esym(1914,ClassProperties::*)
-esym(1914,ClassRegistryItem::*)
-esym(1914,Object::*)
-esym(1914,Reference::*)
-esym(1914,ReferenceContainer::*)
-esym(1914,ReferenceContainerNode::*)
-esym(1914,ReferenceContainerItem::*)
-esym(1914,ReferenceContainerFilterObjectName::*)
-esym(1914,ReferenceContainerFilterReferences::*)

/*
 * Rule 0-1-11
 * Justification: In the linux implementation of the console some of the 
 * features are not supported. As a consequence the method variables are not references. 
 * The Linux operating system version of MARTe2 is not certifiable. 
 */
-efunc(715,BasicConsoleOS::SetColour,BasicConsoleOS::SetTitleBar,BasicConsoleOS::GetTitleBar,BasicConsoleOS::SetCursorPosition,BasicConsoleOS::GetCursorPosition,BasicConsoleOS::SetWindowSize,BasicConsoleOS::GetWindowSize,BasicConsoleOS::PlotChar)
-efunc(715,Memory::Malloc,Memory::Check)
-efunc(715,previouslyFound)

/*
 * Rule 0-1-12
 * Justification: Same as 0-1-11 
 */
 -efile(715,BasicConsoleOS.cpp)

/*
 * Rule 3-3-1
 * Justification: The extern "C" is the way the framework currently exports symbols.
 * Being a framework some of these symbols might not be referenced. As a consequence
 * lint suggests to move the declaration to the .cpp and to make these functions static,
 * which is obviously not acceptable.
 */
 -efunc(1066,Sleep::*)
-esym(759,ProcessorFamily, ProcessorModel, ProcessorVendorId, ProcessorsAvailable)
-esym(765,ProcessorFamily, ProcessorModel, ProcessorVendorId, ProcessorsAvailable)
-esym(759,ProcessorTypeGetDefaultCPUs, ProcessorTypeSetDefaultCPUs)
-esym(765,ProcessorTypeGetDefaultCPUs, ProcessorTypeSetDefaultCPUs)
-esym(759,MemoryMalloc, MemoryFree, MemoryRealloc, MemoryAllocationStatistics, MemoryGetHeaderInfo, MemoryClearStatisticsDatabase, MemoryGetStatisticsDatabaseNElements, MemoryGetUsedHeap, MemoryCheck, MemorySharedAlloc, MemorySharedFree, MemoryCopy, MemoryCompare, MemorySearch, MemoryMove, MemorySet, MemoryStringDup)
-esym(765,MemoryMalloc, MemoryFree, MemoryRealloc, MemoryAllocationStatistics, MemoryGetHeaderInfo, MemoryClearStatisticsDatabase, MemoryGetStatisticsDatabaseNElements, MemoryGetUsedHeap, MemoryCheck, MemorySharedAlloc, MemorySharedFree, MemoryCopy, MemoryCompare, MemorySearch, MemoryMove, MemorySet, MemoryStringDup)
-esym(765,MemoryMalloc, MemoryFree, MemoryRealloc, MemoryAllocationStatistics, MemoryGetHeaderInfo, MemoryClearStatisticsDatabase, MemoryGetStatisticsDatabaseNElements, MemoryGetUsedHeap, MemoryCheck, MemorySharedAlloc, MemorySharedFree, MemoryCopy, MemoryCompare, MemorySearch, MemoryMove, MemorySet, MemoryStringDup)

/*
 * Rule 7-3-1 
 * Justfication: Not applicable to a framework
 */
/* global declaration */
-esym(9141,Atomic)
-esym(9141,Atomic::*)
-esym(9141,BasicConsoleOSProperties)
-esym(9141,BasicConsole)
-esym(9141,BasicConsole::)
-esym(9141,BasicConsole::*)
-esym(9141,Colours)
-esym(9141,Endianity)
-esym(9141,Endianity::*)
-esym(9141,Error)
-esym(9141,ErrorType)
-esym(9141,EventSem::*)
-esym(9141,EventSemOSProperties)
-esym(9141,FastPollingMutexSem)
-esym(9141,Flags)
-esym(9141,HighResolutionTimer)
-esym(9141,HighResolutionTimer::*)
-esym(9141,IBasicConsole)
-esym(9141,IBasicConsole::*)
-esym(9141,intptr)
-esym(9141,MutexSem::*)
-esym(9141,MutexSemOSProperties)
-esym(9141,Processor)
-esym(9141,Processor::*)
-esym(9141,ProcessorType)
-esym(9141,Sleep)
-esym(9141,Sleep::*)
-esym(9141,StringHelper)
-esym(9141,StringHelper::*)
-esym(9141,StringPortable)
-esym(9141,StringPortable::*)
-esym(9141,TimeValues)
-esym(9141,TimeoutType)
-esym(9141,TimeoutType::*)
-esym(9141,Threads)
-esym(9141,Threads::*)
-esym(9141,ThreadInformation)
-esym(9141,ThreadInformation::*)
-esym(9141,ThreadsDatabase)
-esym(9141,ThreadsDatabase::*)
-esym(9141,ThreadFunctionType)
-esym(9141,ThreadsDatabase)
-esym(9141,TTNoWait)
-esym(9141,TTInfiniteWait)
-esym(9141,TTUnProtected)
-esym(9141,TTDefault)
-esym(9141,LoadableLibrary)
-esym(9141,LoadableLibraryOpen)
-esym(9141,LoadableLibraryClose)
-esym(9141,LoadableLibraryFunction)
-esym(9141,FastMath)
-esym(9141,FastMath::*)
-esym(9141,ExceptionHandler)
-esym(9141,Memory)
-esym(9141,Memory::*)
-esym(9141,Iterator)
-esym(9141,SearchFilter)
-esym(9141,SortFilter)
-esym(9141,LinkedListable)
-esym(9141,LinkedListable::*)
-esym(9141,IteratorFn)
-esym(9141,SearchFilterFn)
-esym(9141,SortFilterFn)
-esym(9141,SFTestType)
-esym(9141,LinkedListHolder)
-esym(9141,ClassProperties)
-esym(9141,ClassRegistryItem)
-esym(9141,ClassRegistryDatabase)
-esym(9141,ClassRegistryDatabase::*)
-esym(9141,Object)
-esym(9141,Object::*)
-esym(9141,Introspection)
-esym(9141,Introspection::*)
-esym(9141,StructuredData)
-esym(9141,StructuredData::*)
-esym(9141,*Heap_)
-esym(9141,*BuildFn_*)
-esym(9141,*ClassProperties_)
-esym(9141,*ClassRegistryItem_)
-esym(9141,Reference)
-esym(9141,Reference::*)
-esym(9141,ReferenceT)
-esym(9141,ReferenceT::*)
-esym(9141,ReferenceT*)
-esym(9141,ReferenceContainer)
-esym(9141,ReferenceContainer::*)
-esym(9141,ReferenceContainerNode)
-esym(9141,ReferenceContainerNode::*)
-esym(9141,ReferenceContainerItem)
-esym(9141,ReferenceContainerItem::*)
-esym(9141,ReferenceContainerFilter)
-esym(9141,ReferenceContainerFilter::*)
-esym(9141,ReferenceContainerFilterReferences)
-esym(9141,ReferenceContainerFilterReferences::*)
-esym(9141,ReferenceContainerFilterObjectName)
-esym(9141,ReferenceContainerFilterObjectName
::*)


/*
 * MISRA 3-3-1
 * Defining the Build functions in the header file would require another macro for no good reason (notice
 * that CLASS_REGISTER_DECLARATION would declare member variables and not global members)
 */
 -esym(765, *BuildFn_)
 
/* 
 * Info flexelint 1711
 * virtual functions not inherited
 */
 -esym(1711,Iterator)
 -esym(1711,SearchFilter)
 -esym(1711,SortFilter)
 -esym(1711,LinkedListable)
 -esym(1711,LinkedListHolder)
 // Lint does not see this because of the macros.  
 -esym(1711,Object)
 -esym(1711,ReferenceContainer)
 -esym(1711,ReferenceT*)
 
/*
 * Rule flexelint 1960 
 * Rule MISRA 0-1-8
 * Void functions must have an external effect.
 * Justification: They do change a class attribute.
 */
-esym(1960, TimeoutType::SetTimeoutSec*)
-esym(1960, TimeoutType::SetTimeoutHighResolutionTimerTicks*)
-esym(1960, ReferenceT<<1>>::Init*)
-esym(1960, ReferenceT<<1>>::RemoveReference*)

/*
 * Rule flexelint 1784. 
 * Justification: This is the pattern used in the framework to export symbols in dlls.
 */
 -e1784 /*Symbol previously declared as "C"*/
 
 /*
  * Rule 18-0-5
  * Justification: The Linux operating system version of MARTe2 is not certifiable.
  */
 -efunc(586,StringHelper::*)
 -efunc(586,Memory::Malloc,Memory::Free,Memory::Realloc)
 
 /*
  * Rule flexelint 459.
  * Justification: The build function is indeed supposed to have access to the private members of Object.
  * It is as if it was a member function of the class.
  */
 -esym(459, *BuildFn_*)
 
 /*
  * Rule 14-7-1
  * Justification: Not applicable to a framework.
  */
-esym(1795, ReferenceT*)

/*
 * Rule flexelint 1531. 
 * Justification: The object macros guarantee that the new and delete are always implemented in the final object.
 */
 -esym(1531, *Object::operator*)
 
/*
 * Rule flexelint 1511. 
 * Justification: The operator new and delete of the final classes that inherit from Object, hide on purpose the ones from Object.
 */
 -esym(1511, *Object::operator*)
 
 /*
 * Rule flexelint 1737. 
 * Justification: The operator new and delete of the final classes that inherit from Object, hide on purpose the ones from Object.
 */
 -esym(1737, *::operator new*)
 
 /*
 * Rule flexelint 1790. 
 * Justification: For performance reasons it was decided to implement the usage of LinkedListable this way.
 * This guarantees that the movements in the list are always performed with the correct pointer (i.e. pointing to the base class).
 * Otherwise it would have required to use dynamic_cast which has a performance impact that we are not ready to give away here.
 */
 -estring(1790, *LinkedListable*)

 /*
  * Rule 3-1-1
  * Justification: Required for template implementation.
  */
-esym(9107, ReferenceT*)
